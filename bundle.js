/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	__webpack_require__(1);

	__webpack_require__(92);

	// HACKYFILLS (hack + polyfill)
	/*import {NgElement, ViewContainerRef} from 'angular2/angular2'

	//import {DomRenderedElement} from 'ionic/util/render/dom';


	Object.defineProperties(NgElement.prototype, {
	  renderElement: {
	    get: function() {
	      return new DomRenderedElement(this._view.render.delegate.boundElements[this._boundElementIndex]);
	    }
	  },
	  domElement: {
	    get: function() {
	      console.log('GETTING DOM ELEMENT');
	      return this._view.render.delegate.boundElements[this._boundElementIndex];
	    }
	  }
	});



	Object.defineProperties(ViewContainerRef.prototype, {
	  domElement: {
	    get: function() {
	      return this._defaultProtoView.render.delegate.element;
	    }
	  }
	});

	*/

	var _ionicComponents = __webpack_require__(115
	/*
	export * from 'ionic/directives'
	export * from 'ionic/platform/platform'
	export * from 'ionic/routing/router'

	export * from 'ionic/util/click-block'
	export * from 'ionic/util/focus'

	export * from 'ionic/engine/engine'
	//export * from 'ionic/engine/cordova/cordova'
	//export * from 'ionic/engine/electron/electron'

	export * from 'ionic/animations/animation'
	export * from 'ionic/transitions/transition'
	export * from 'ionic/transitions/none-transition'
	export * from 'ionic/transitions/ios-transition'
	*/
	);

	_defaults(exports, _interopRequireWildcard(_ionicComponents));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	__webpack_require__(3);

	__webpack_require__(90);

	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel/polyfill is allowed");
	}
	global._babelPolyfill = true;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(4);
	__webpack_require__(21);
	__webpack_require__(24);
	__webpack_require__(26);
	__webpack_require__(27);
	__webpack_require__(29);
	__webpack_require__(30);
	__webpack_require__(31);
	__webpack_require__(32);
	__webpack_require__(33);
	__webpack_require__(34);
	__webpack_require__(35);
	__webpack_require__(36);
	__webpack_require__(37);
	__webpack_require__(38);
	__webpack_require__(42);
	__webpack_require__(43);
	__webpack_require__(44);
	__webpack_require__(45);
	__webpack_require__(47);
	__webpack_require__(48);
	__webpack_require__(51);
	__webpack_require__(52);
	__webpack_require__(54);
	__webpack_require__(56);
	__webpack_require__(57);
	__webpack_require__(58);
	__webpack_require__(59);
	__webpack_require__(60);
	__webpack_require__(61);
	__webpack_require__(65);
	__webpack_require__(68);
	__webpack_require__(69);
	__webpack_require__(71);
	__webpack_require__(72);
	__webpack_require__(74);
	__webpack_require__(75);
	__webpack_require__(76);
	__webpack_require__(78);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	__webpack_require__(82);
	__webpack_require__(84);
	__webpack_require__(85);
	__webpack_require__(86);
	__webpack_require__(88);
	__webpack_require__(89);
	module.exports = __webpack_require__(5).core;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    cel = __webpack_require__(7),
	    cof = __webpack_require__(8),
	    $def = __webpack_require__(12),
	    invoke = __webpack_require__(14),
	    arrayMethod = __webpack_require__(15),
	    IE_PROTO = __webpack_require__(11).safe('__proto__'),
	    assert = __webpack_require__(17),
	    assertObject = assert.obj,
	    ObjectProto = Object.prototype,
	    html = $.html,
	    A = [],
	    _slice = A.slice,
	    _join = A.join,
	    classof = cof.classof,
	    has = $.has,
	    defineProperty = $.setDesc,
	    getOwnDescriptor = $.getDesc,
	    defineProperties = $.setDescs,
	    isFunction = $.isFunction,
	    isObject = $.isObject,
	    toObject = $.toObject,
	    toLength = $.toLength,
	    toIndex = $.toIndex,
	    IE8_DOM_DEFINE = false,
	    $indexOf = __webpack_require__(18)(false),
	    $forEach = arrayMethod(0),
	    $map = arrayMethod(1),
	    $filter = arrayMethod(2),
	    $some = arrayMethod(3),
	    $every = arrayMethod(4);

	if (!$.DESC) {
	  try {
	    IE8_DOM_DEFINE = defineProperty(cel('div'), 'x', { get: function get() {
	        return 8;
	      } }).x == 8;
	  } catch (e) {}
	  $.setDesc = function (O, P, Attributes) {
	    if (IE8_DOM_DEFINE) try {
	      return defineProperty(O, P, Attributes);
	    } catch (e) {}
	    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	    if ('value' in Attributes) assertObject(O)[P] = Attributes.value;
	    return O;
	  };
	  $.getDesc = function (O, P) {
	    if (IE8_DOM_DEFINE) try {
	      return getOwnDescriptor(O, P);
	    } catch (e) {}
	    if (has(O, P)) return $.desc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
	  };
	  $.setDescs = defineProperties = function (O, Properties) {
	    assertObject(O);
	    var keys = $.getKeys(Properties),
	        length = keys.length,
	        i = 0,
	        P;
	    while (length > i) $.setDesc(O, P = keys[i++], Properties[P]);
	    return O;
	  };
	}
	$def($def.S + $def.F * !$.DESC, 'Object', {
	  // 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $.getDesc,
	  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	  defineProperty: $.setDesc,
	  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	  defineProperties: defineProperties
	});

	// IE 8- don't enum bug keys
	var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' + 'toLocaleString,toString,valueOf').split(',')
	// Additional keys for getOwnPropertyNames
	,
	    keys2 = keys1.concat('length', 'prototype'),
	    keysLen1 = keys1.length;

	// Create object with `null` prototype: use iframe Object with cleared prototype
	var _createDict = function createDict() {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = cel('iframe'),
	      i = keysLen1,
	      gt = '>',
	      iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  _createDict = iframeDocument.F;
	  while (i--) delete _createDict.prototype[keys1[i]];
	  return _createDict();
	};
	function createGetKeys(names, length) {
	  return function (object) {
	    var O = toObject(object),
	        i = 0,
	        result = [],
	        key;
	    for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	    // Don't enum bug & hidden keys
	    while (length > i) if (has(O, key = names[i++])) {
	      ~$indexOf(result, key) || result.push(key);
	    }
	    return result;
	  };
	}
	function Empty() {}
	$def($def.S, 'Object', {
	  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	  getPrototypeOf: $.getProto = $.getProto || function (O) {
	    O = Object(assert.def(O));
	    if (has(O, IE_PROTO)) return O[IE_PROTO];
	    if (isFunction(O.constructor) && O instanceof O.constructor) {
	      return O.constructor.prototype;
	    }return O instanceof Object ? ObjectProto : null;
	  },
	  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
	  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	  create: $.create = $.create || function (O, /*?*/Properties) {
	    var result;
	    if (O !== null) {
	      Empty.prototype = assertObject(O);
	      result = new Empty();
	      Empty.prototype = null;
	      // add "__proto__" for Object.getPrototypeOf shim
	      result[IE_PROTO] = O;
	    } else result = _createDict();
	    return Properties === undefined ? result : defineProperties(result, Properties);
	  },
	  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
	  keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false),
	  // 19.1.2.17 / 15.2.3.8 Object.seal(O)
	  seal: function seal(it) {
	    return it; // <- cap
	  },
	  // 19.1.2.5 / 15.2.3.9 Object.freeze(O)
	  freeze: function freeze(it) {
	    return it; // <- cap
	  },
	  // 19.1.2.15 / 15.2.3.10 Object.preventExtensions(O)
	  preventExtensions: function preventExtensions(it) {
	    return it; // <- cap
	  },
	  // 19.1.2.13 / 15.2.3.11 Object.isSealed(O)
	  isSealed: function isSealed(it) {
	    return !isObject(it); // <- cap
	  },
	  // 19.1.2.12 / 15.2.3.12 Object.isFrozen(O)
	  isFrozen: function isFrozen(it) {
	    return !isObject(it); // <- cap
	  },
	  // 19.1.2.11 / 15.2.3.13 Object.isExtensible(O)
	  isExtensible: function isExtensible(it) {
	    return isObject(it); // <- cap
	  }
	});

	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	$def($def.P, 'Function', {
	  bind: function bind(that /*, args... */) {
	    var fn = assert.fn(this),
	        partArgs = _slice.call(arguments, 1);
	    function bound() {
	      var args = partArgs.concat(_slice.call(arguments)),
	          constr = this instanceof bound,
	          ctx = constr ? $.create(fn.prototype) : that,
	          result = invoke(fn, args, ctx);
	      return constr ? ctx : result;
	    }
	    if (fn.prototype) bound.prototype = fn.prototype;
	    return bound;
	  }
	});

	// Fix for not array-like ES3 string and DOM objects
	if (!(0 in Object('z') && 'z'[0] == 'z')) {
	  $.ES5Object = function (it) {
	    return cof(it) == 'String' ? it.split('') : Object(it);
	  };
	}

	var buggySlice = true;
	try {
	  if (html) _slice.call(html);
	  buggySlice = false;
	} catch (e) {}

	$def($def.P + $def.F * buggySlice, 'Array', {
	  slice: function slice(begin, end) {
	    var len = toLength(this.length),
	        klass = cof(this);
	    end = end === undefined ? len : end;
	    if (klass == 'Array') return _slice.call(this, begin, end);
	    var start = toIndex(begin, len),
	        upTo = toIndex(end, len),
	        size = toLength(upTo - start),
	        cloned = Array(size),
	        i = 0;
	    for (; i < size; i++) cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
	    return cloned;
	  }
	});

	$def($def.P + $def.F * ($.ES5Object != Object), 'Array', {
	  join: function join() {
	    return _join.apply($.ES5Object(this), arguments);
	  }
	});

	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	$def($def.S, 'Array', {
	  isArray: function isArray(arg) {
	    return cof(arg) == 'Array';
	  }
	});
	function createArrayReduce(isRight) {
	  return function (callbackfn, memo) {
	    assert.fn(callbackfn);
	    var O = toObject(this),
	        length = toLength(O.length),
	        index = isRight ? length - 1 : 0,
	        i = isRight ? -1 : 1;
	    if (arguments.length < 2) for (;;) {
	      if (index in O) {
	        memo = O[index];
	        index += i;
	        break;
	      }
	      index += i;
	      assert(isRight ? index >= 0 : length > index, 'Reduce of empty array with no initial value');
	    }
	    for (; isRight ? index >= 0 : length > index; index += i) if (index in O) {
	      memo = callbackfn(memo, O[index], index, this);
	    }
	    return memo;
	  };
	}
	$def($def.P, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: $.each = $.each || function forEach(callbackfn /*, that = undefined */) {
	    return $forEach(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn /*, that = undefined */) {
	    return $map(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn /*, that = undefined */) {
	    return $filter(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn /*, that = undefined */) {
	    return $some(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn /*, that = undefined */) {
	    return $every(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: createArrayReduce(false),
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: createArrayReduce(true),
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(el /*, fromIndex = 0 */) {
	    return $indexOf(this, el, arguments[1]);
	  },
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function lastIndexOf(el, fromIndex /* = @[*-1] */) {
	    var O = toObject(this),
	        length = toLength(O.length),
	        index = length - 1;
	    if (arguments.length > 1) index = Math.min(index, $.toInteger(fromIndex));
	    if (index < 0) index = toLength(length + index);
	    for (; index >= 0; index--) if (index in O) if (O[index] === el) return index;
	    return -1;
	  }
	});

	// 21.1.3.25 / 15.5.4.20 String.prototype.trim()
	$def($def.P, 'String', { trim: __webpack_require__(19)(/^\s*([\s\S]*\S)?\s*$/, '$1') });

	// 20.3.3.1 / 15.9.4.4 Date.now()
	$def($def.S, 'Date', { now: function now() {
	    return +new Date();
	  } });

	function lz(num) {
	  return num > 9 ? num : '0' + num;
	}

	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	// PhantomJS and old webkit had a broken Date implementation.
	var date = new Date(-50000000000000 - 1),
	    brokenDate = !(date.toISOString && date.toISOString() == '0385-07-25T07:06:39.999Z' && __webpack_require__(20)(function () {
	  new Date(NaN).toISOString();
	}));
	$def($def.P + $def.F * brokenDate, 'Date', { toISOString: function toISOString() {
	    if (!isFinite(this)) throw RangeError('Invalid time value');
	    var d = this,
	        y = d.getUTCFullYear(),
	        m = d.getUTCMilliseconds(),
	        s = y < 0 ? '-' : y > 9999 ? '+' : '';
	    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	  } });

	if (classof((function () {
	  return arguments;
	})()) == 'Object') cof.classof = function (it) {
	  var tag = classof(it);
	  return tag == 'Object' && isFunction(it.callee) ? 'Arguments' : tag;
	};
	/* empty */ /* empty */ /* empty */ /* args... */ /* empty */

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global = typeof self != 'undefined' ? self : Function('return this')(),
	    core = {},
	    defineProperty = Object.defineProperty,
	    hasOwnProperty = ({}).hasOwnProperty,
	    ceil = Math.ceil,
	    floor = Math.floor,
	    max = Math.max,
	    min = Math.min;
	// The engine works fine with descriptors? Thank's IE8 for his funny defineProperty.
	var DESC = !!(function () {
	  try {
	    return defineProperty({}, 'a', { get: function get() {
	        return 2;
	      } }).a == 2;
	  } catch (e) {}
	})();
	var hide = createDefiner(1);
	// 7.1.4 ToInteger
	function toInteger(it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	}
	function desc(bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	}
	function simpleSet(object, key, value) {
	  object[key] = value;
	  return object;
	}
	function createDefiner(bitmap) {
	  return DESC ? function (object, key, value) {
	    return $.setDesc(object, key, desc(bitmap, value));
	  } : simpleSet;
	}

	function isObject(it) {
	  return it !== null && (typeof it == 'object' || typeof it == 'function');
	}
	function isFunction(it) {
	  return typeof it == 'function';
	}
	function assertDefined(it) {
	  if (it == undefined) throw TypeError('Can\'t call method on  ' + it);
	  return it;
	}

	var $ = module.exports = __webpack_require__(6)({
	  g: global,
	  core: core,
	  html: global.document && document.documentElement,
	  // http://jsperf.com/core-js-isobject
	  isObject: isObject,
	  isFunction: isFunction,
	  that: function that() {
	    return this;
	  },
	  // 7.1.4 ToInteger
	  toInteger: toInteger,
	  // 7.1.15 ToLength
	  toLength: function toLength(it) {
	    return it > 0 ? min(toInteger(it), 9007199254740991) : 0; // pow(2, 53) - 1 == 9007199254740991
	  },
	  toIndex: function toIndex(index, length) {
	    index = toInteger(index);
	    return index < 0 ? max(index + length, 0) : min(index, length);
	  },
	  has: function has(it, key) {
	    return hasOwnProperty.call(it, key);
	  },
	  create: Object.create,
	  getProto: Object.getPrototypeOf,
	  DESC: DESC,
	  desc: desc,
	  getDesc: Object.getOwnPropertyDescriptor,
	  setDesc: defineProperty,
	  setDescs: Object.defineProperties,
	  getKeys: Object.keys,
	  getNames: Object.getOwnPropertyNames,
	  getSymbols: Object.getOwnPropertySymbols,
	  assertDefined: assertDefined,
	  // Dummy, fix for not array-like ES3 string in es5 module
	  ES5Object: Object,
	  toObject: function toObject(it) {
	    return $.ES5Object(assertDefined(it));
	  },
	  hide: hide,
	  def: createDefiner(0),
	  set: global.Symbol ? simpleSet : hide,
	  each: [].forEach
	});
	/* eslint-disable no-undef */
	if (typeof __e != 'undefined') __e = core;
	if (typeof __g != 'undefined') __g = global;
	/* empty */

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function ($) {
	  $.FW = true;
	  $.path = $.g;
	  return $;
	};

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    document = $.g.document,
	    isObject = $.isObject
	// in old IE typeof document.createElement is 'object'
	,
	    is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    TAG = __webpack_require__(9)('toStringTag'),
	    toString = ({}).toString;
	function cof(it) {
	  return toString.call(it).slice(8, -1);
	}
	cof.classof = function (it) {
	  var O, T;
	  return it == undefined ? it === undefined ? 'Undefined' : 'Null' : typeof (T = (O = Object(it))[TAG]) == 'string' ? T : cof(O);
	};
	cof.set = function (it, tag, stat) {
	  if (it && !$.has(it = stat ? it : it.prototype, TAG)) $.hide(it, TAG, tag);
	};
	module.exports = cof;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(5).g,
	    store = __webpack_require__(10)('wks');
	module.exports = function (name) {
	  return store[name] || (store[name] = global.Symbol && global.Symbol[name] || __webpack_require__(11).safe('Symbol.' + name));
	};

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    SHARED = '__core-js_shared__',
	    store = $.g[SHARED] || $.hide($.g, SHARED, {})[SHARED];
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var sid = 0;
	function uid(key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++sid + Math.random()).toString(36));
	}
	uid.safe = __webpack_require__(5).g.Symbol || uid;
	module.exports = uid;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    global = $.g,
	    core = $.core,
	    isFunction = $.isFunction,
	    $redef = __webpack_require__(13);
	function ctx(fn, that) {
	  return function () {
	    return fn.apply(that, arguments);
	  };
	}
	global.core = core;
	// type bitmap
	$def.F = 1; // forced
	$def.G = 2; // global
	$def.S = 4; // static
	$def.P = 8; // proto
	$def.B = 16; // bind
	$def.W = 32; // wrap
	function $def(type, name, source) {
	  var key,
	      own,
	      out,
	      exp,
	      isGlobal = type & $def.G,
	      isProto = type & $def.P,
	      target = isGlobal ? global : type & $def.S ? global[name] : (global[name] || {}).prototype,
	      exports = isGlobal ? core : core[name] || (core[name] = {});
	  if (isGlobal) source = name;
	  for (key in source) {
	    // contains in native
	    own = !(type & $def.F) && target && key in target;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    if (type & $def.B && own) exp = ctx(out, global);else exp = isProto && isFunction(out) ? ctx(Function.call, out) : out;
	    // extend global
	    if (target && !own) $redef(target, key, out);
	    // export
	    if (exports[key] != out) $.hide(exports, key, exp);
	    if (isProto) (exports.prototype || (exports.prototype = {}))[key] = out;
	  }
	}
	module.exports = $def;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    tpl = String(({}).hasOwnProperty),
	    SRC = __webpack_require__(11).safe('src'),
	    _toString = Function.toString;

	function $redef(O, key, val, safe) {
	  if ($.isFunction(val)) {
	    var base = O[key];
	    $.hide(val, SRC, base ? String(base) : tpl.replace(/hasOwnProperty/, String(key)));
	  }
	  if (O === $.g) {
	    O[key] = val;
	  } else {
	    if (!safe) delete O[key];
	    $.hide(O, key, val);
	  }
	}

	// add fake Function#toString for correct work wrapped methods / constructors
	// with methods similar to LoDash isNative
	$redef(Function.prototype, 'toString', function toString() {
	  return $.has(this, SRC) ? this[SRC] : _toString.call(this);
	});

	$.core.inspectSource = function (it) {
	  return _toString.call(it);
	};

	module.exports = $redef;

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	// Fast apply
	// http://jsperf.lnkit.com/fast-apply/5
	module.exports = function (fn, args, that) {
	                  var un = that === undefined;
	                  switch (args.length) {
	                                    case 0:
	                                                      return un ? fn() : fn.call(that);
	                                    case 1:
	                                                      return un ? fn(args[0]) : fn.call(that, args[0]);
	                                    case 2:
	                                                      return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
	                                    case 3:
	                                                      return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
	                                    case 4:
	                                                      return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
	                                    case 5:
	                                                      return un ? fn(args[0], args[1], args[2], args[3], args[4]) : fn.call(that, args[0], args[1], args[2], args[3], args[4]);
	                  }return fn.apply(that, args);
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var $ = __webpack_require__(5),
	    ctx = __webpack_require__(16);
	module.exports = function (TYPE) {
	  var IS_MAP = TYPE == 1,
	      IS_FILTER = TYPE == 2,
	      IS_SOME = TYPE == 3,
	      IS_EVERY = TYPE == 4,
	      IS_FIND_INDEX = TYPE == 6,
	      NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that) {
	    var O = Object($.assertDefined($this)),
	        self = $.ES5Object(O),
	        f = ctx(callbackfn, that, 3),
	        length = $.toLength(self.length),
	        index = 0,
	        result = IS_MAP ? Array(length) : IS_FILTER ? [] : undefined,
	        val,
	        res;
	    for (; length > index; index++) if (NO_HOLES || index in self) {
	      val = self[index];
	      res = f(val, index, O);
	      if (TYPE) {
	        if (IS_MAP) result[index] = res; // map
	        else if (res) switch (TYPE) {
	          case 3:
	            return true; // some
	          case 5:
	            return val; // find
	          case 6:
	            return index; // findIndex
	          case 2:
	            result.push(val); // filter
	        } else if (IS_EVERY) return false; // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// Optional / simple context binding
	var assertFunction = __webpack_require__(17).fn;
	module.exports = function (fn, that, length) {
	  assertFunction(fn);
	  if (~length && that === undefined) return fn;
	  switch (length) {
	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };
	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };
	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }return function () {
	    return fn.apply(that, arguments);
	  };
	};
	/* ...args */

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5);
	function assert(condition, msg1, msg2) {
	  if (!condition) throw TypeError(msg2 ? msg1 + msg2 : msg1);
	}
	assert.def = $.assertDefined;
	assert.fn = function (it) {
	  if (!$.isFunction(it)) throw TypeError(it + ' is not a function!');
	  return it;
	};
	assert.obj = function (it) {
	  if (!$.isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};
	assert.inst = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) throw TypeError(name + ': use the \'new\' operator!');
	  return it;
	};
	module.exports = assert;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var $ = __webpack_require__(5);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = $.toObject($this),
	        length = $.toLength(O.length),
	        index = $.toIndex(fromIndex, length),
	        value;
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      if (value != value) return true;
	    } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index;
	    }return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	module.exports = function (regExp, replace, isStatic) {
	  var replacer = replace === Object(replace) ? function (part) {
	    return replace[part];
	  } : replace;
	  return function (it) {
	    return String(isStatic ? it : this).replace(regExp, replacer);
	  };
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (exec) {
	  try {
	    exec();
	    return false;
	  } catch (e) {
	    return true;
	  }
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var $ = __webpack_require__(5),
	    setTag = __webpack_require__(8).set,
	    uid = __webpack_require__(11),
	    shared = __webpack_require__(10),
	    $def = __webpack_require__(12),
	    $redef = __webpack_require__(13),
	    keyOf = __webpack_require__(22),
	    enumKeys = __webpack_require__(23),
	    assertObject = __webpack_require__(17).obj,
	    ObjectProto = Object.prototype,
	    DESC = $.DESC,
	    has = $.has,
	    $create = $.create,
	    getDesc = $.getDesc,
	    setDesc = $.setDesc,
	    desc = $.desc,
	    getNames = $.getNames,
	    toObject = $.toObject,
	    $Symbol = $.g.Symbol,
	    setter = false,
	    TAG = uid('tag'),
	    HIDDEN = uid('hidden'),
	    _propertyIsEnumerable = ({}).propertyIsEnumerable,
	    SymbolRegistry = shared('symbol-registry'),
	    AllSymbols = shared('symbols'),
	    useNative = $.isFunction($Symbol);

	var setSymbolDesc = DESC ? (function () {
	  // fallback for old Android
	  try {
	    return $create(setDesc({}, HIDDEN, {
	      get: function get() {
	        return setDesc(this, HIDDEN, { value: false })[HIDDEN];
	      }
	    }))[HIDDEN] || setDesc;
	  } catch (e) {
	    return function (it, key, D) {
	      var protoDesc = getDesc(ObjectProto, key);
	      if (protoDesc) delete ObjectProto[key];
	      setDesc(it, key, D);
	      if (protoDesc && it !== ObjectProto) setDesc(ObjectProto, key, protoDesc);
	    };
	  }
	})() : setDesc;

	function wrap(tag) {
	  var sym = AllSymbols[tag] = $.set($create($Symbol.prototype), TAG, tag);
	  DESC && setter && setSymbolDesc(ObjectProto, tag, {
	    configurable: true,
	    set: function set(value) {
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, desc(1, value));
	    }
	  });
	  return sym;
	}

	function defineProperty(it, key, D) {
	  if (D && has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) setDesc(it, HIDDEN, desc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = $create(D, { enumerable: desc(0, false) });
	    }return setSymbolDesc(it, key, D);
	  }return setDesc(it, key, D);
	}
	function defineProperties(it, P) {
	  assertObject(it);
	  var keys = enumKeys(P = toObject(P)),
	      i = 0,
	      l = keys.length,
	      key;
	  while (l > i) defineProperty(it, key = keys[i++], P[key]);
	  return it;
	}
	function create(it, P) {
	  return P === undefined ? $create(it) : defineProperties($create(it), P);
	}
	function propertyIsEnumerable(key) {
	  var E = _propertyIsEnumerable.call(this, key);
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	}
	function getOwnPropertyDescriptor(it, key) {
	  var D = getDesc(it = toObject(it), key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	}
	function getOwnPropertyNames(it) {
	  var names = getNames(toObject(it)),
	      result = [],
	      i = 0,
	      key;
	  while (names.length > i) if (!has(AllSymbols, key = names[i++]) && key != HIDDEN) result.push(key);
	  return result;
	}
	function getOwnPropertySymbols(it) {
	  var names = getNames(toObject(it)),
	      result = [],
	      i = 0,
	      key;
	  while (names.length > i) if (has(AllSymbols, key = names[i++])) result.push(AllSymbols[key]);
	  return result;
	}

	// 19.4.1.1 Symbol([description])
	if (!useNative) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
	    return wrap(uid(arguments[0]));
	  };
	  $redef($Symbol.prototype, 'toString', function () {
	    return this[TAG];
	  });

	  $.create = create;
	  $.setDesc = defineProperty;
	  $.getDesc = getOwnPropertyDescriptor;
	  $.setDescs = defineProperties;
	  $.getNames = getOwnPropertyNames;
	  $.getSymbols = getOwnPropertySymbols;

	  if ($.DESC && $.FW) $redef(Object.prototype, 'propertyIsEnumerable', propertyIsEnumerable, true);
	}

	var symbolStatics = {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function _for(key) {
	    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key) {
	    return keyOf(SymbolRegistry, key);
	  },
	  useSetter: function useSetter() {
	    setter = true;
	  },
	  useSimple: function useSimple() {
	    setter = false;
	  }
	};
	// 19.4.2.2 Symbol.hasInstance
	// 19.4.2.3 Symbol.isConcatSpreadable
	// 19.4.2.4 Symbol.iterator
	// 19.4.2.6 Symbol.match
	// 19.4.2.8 Symbol.replace
	// 19.4.2.9 Symbol.search
	// 19.4.2.10 Symbol.species
	// 19.4.2.11 Symbol.split
	// 19.4.2.12 Symbol.toPrimitive
	// 19.4.2.13 Symbol.toStringTag
	// 19.4.2.14 Symbol.unscopables
	$.each.call(('hasInstance,isConcatSpreadable,iterator,match,replace,search,' + 'species,split,toPrimitive,toStringTag,unscopables').split(','), function (it) {
	  var sym = __webpack_require__(9)(it);
	  symbolStatics[it] = useNative ? sym : wrap(sym);
	});

	setter = true;

	$def($def.G + $def.W, { Symbol: $Symbol });

	$def($def.S, 'Symbol', symbolStatics);

	$def($def.S + $def.F * !useNative, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: getOwnPropertySymbols
	});

	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setTag($.g.JSON, 'JSON', true);

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5);
	module.exports = function (object, el) {
	  var O = $.toObject(object),
	      keys = $.getKeys(O),
	      length = keys.length,
	      index = 0,
	      key;
	  while (length > index) if (O[key = keys[index++]] === el) return key;
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5);
	module.exports = function (it) {
	  var keys = $.getKeys(it),
	      getDesc = $.getDesc,
	      getSymbols = $.getSymbols;
	  if (getSymbols) $.each.call(getSymbols(it), function (key) {
	    if (getDesc(it, key).enumerable) keys.push(key);
	  });
	  return keys;
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $def = __webpack_require__(12);
	$def($def.S, 'Object', { assign: __webpack_require__(25) });

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    enumKeys = __webpack_require__(23);
	// 19.1.2.1 Object.assign(target, source, ...)
	/* eslint-disable no-unused-vars */
	module.exports = Object.assign || function assign(target, source) {
	  /* eslint-enable no-unused-vars */
	  var T = Object($.assertDefined(target)),
	      l = arguments.length,
	      i = 1;
	  while (l > i) {
	    var S = $.ES5Object(arguments[i++]),
	        keys = enumKeys(S),
	        length = keys.length,
	        j = 0,
	        key;
	    while (length > j) T[key = keys[j++]] = S[key];
	  }
	  return T;
	};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $def = __webpack_require__(12);
	$def($def.S, 'Object', {
	  is: function is(x, y) {
	    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	  }
	});

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $def = __webpack_require__(12);
	$def($def.S, 'Object', { setPrototypeOf: __webpack_require__(28).set });

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var $ = __webpack_require__(5),
	    assert = __webpack_require__(17);
	function check(O, proto) {
	  assert.obj(O);
	  assert(proto === null || $.isObject(proto), proto, ': can\'t set as prototype!');
	}
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} // eslint-disable-line
	  ? (function (buggy, set) {
	    try {
	      set = __webpack_require__(16)(Function.call, $.getDesc(Object.prototype, '__proto__').set, 2);
	      set({}, []);
	    } catch (e) {
	      buggy = true;
	    }
	    return function setPrototypeOf(O, proto) {
	      check(O, proto);
	      if (buggy) O.__proto__ = proto;else set(O, proto);
	      return O;
	    };
	  })() : undefined),
	  check: check
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(8),
	    tmp = {};
	tmp[__webpack_require__(9)('toStringTag')] = 'z';
	if (__webpack_require__(5).FW && cof(tmp) != 'z') {
	  __webpack_require__(13)(Object.prototype, 'toString', function toString() {
	    return '[object ' + cof.classof(this) + ']';
	  }, true);
	}

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12),
	    isObject = $.isObject,
	    toObject = $.toObject;
	$.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' + 'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(','), function (KEY, ID) {
	  var fn = ($.core.Object || {})[KEY] || Object[KEY],
	      forced = 0,
	      method = {};
	  method[KEY] = ID == 0 ? function freeze(it) {
	    return isObject(it) ? fn(it) : it;
	  } : ID == 1 ? function seal(it) {
	    return isObject(it) ? fn(it) : it;
	  } : ID == 2 ? function preventExtensions(it) {
	    return isObject(it) ? fn(it) : it;
	  } : ID == 3 ? function isFrozen(it) {
	    return isObject(it) ? fn(it) : true;
	  } : ID == 4 ? function isSealed(it) {
	    return isObject(it) ? fn(it) : true;
	  } : ID == 5 ? function isExtensible(it) {
	    return isObject(it) ? fn(it) : false;
	  } : ID == 6 ? function getOwnPropertyDescriptor(it, key) {
	    return fn(toObject(it), key);
	  } : ID == 7 ? function getPrototypeOf(it) {
	    return fn(Object($.assertDefined(it)));
	  } : ID == 8 ? function keys(it) {
	    return fn(toObject(it));
	  } : function getOwnPropertyNames(it) {
	    return fn(toObject(it));
	  };
	  try {
	    fn('z');
	  } catch (e) {
	    forced = 1;
	  }
	  $def($def.S + $def.F * forced, 'Object', method);
	});

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    NAME = 'name',
	    setDesc = $.setDesc,
	    FunctionProto = Function.prototype;
	// 19.2.4.2 name
	NAME in FunctionProto || $.FW && $.DESC && setDesc(FunctionProto, NAME, {
	  configurable: true,
	  get: function get() {
	    var match = String(this).match(/^\s*function ([^ (]*)/),
	        name = match ? match[1] : '';
	    $.has(this, NAME) || setDesc(this, NAME, $.desc(5, name));
	    return name;
	  },
	  set: function set(value) {
	    $.has(this, NAME) || setDesc(this, NAME, $.desc(0, value));
	  }
	});

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    HAS_INSTANCE = __webpack_require__(9)('hasInstance'),
	    FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if (!(HAS_INSTANCE in FunctionProto)) $.setDesc(FunctionProto, HAS_INSTANCE, { value: function value(O) {
	    if (!$.isFunction(this) || !$.isObject(O)) return false;
	    if (!$.isObject(this.prototype)) return O instanceof this;
	    // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	    while (O = $.getProto(O)) if (this.prototype === O) return true;
	    return false;
	  } });

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    isObject = $.isObject,
	    isFunction = $.isFunction,
	    NUMBER = 'Number',
	    $Number = $.g[NUMBER],
	    Base = $Number,
	    proto = $Number.prototype;
	function toPrimitive(it) {
	  var fn, val;
	  if (isFunction(fn = it.valueOf) && !isObject(val = fn.call(it))) return val;
	  if (isFunction(fn = it.toString) && !isObject(val = fn.call(it))) return val;
	  throw TypeError('Can\'t convert object to number');
	}
	function toNumber(it) {
	  if (isObject(it)) it = toPrimitive(it);
	  if (typeof it == 'string' && it.length > 2 && it.charCodeAt(0) == 48) {
	    var binary = false;
	    switch (it.charCodeAt(1)) {
	      case 66:case 98:
	        binary = true;
	      case 79:case 111:
	        return parseInt(it.slice(2), binary ? 2 : 8);
	    }
	  }return +it;
	}
	if ($.FW && !($Number('0o1') && $Number('0b1'))) {
	  $Number = function Number(it) {
	    return this instanceof $Number ? new Base(toNumber(it)) : toNumber(it);
	  };
	  $.each.call($.DESC ? $.getNames(Base) : (
	  // ES3:
	  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	  // ES6 (in case, if modules with ES6 Number statics required before):
	  'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), function (key) {
	    if ($.has(Base, key) && !$.has($Number, key)) {
	      $.setDesc($Number, key, $.getDesc(Base, key));
	    }
	  });
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(13)($.g, NUMBER, $Number);
	}

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12),
	    abs = Math.abs,
	    floor = Math.floor,
	    _isFinite = $.g.isFinite,
	    MAX_SAFE_INTEGER = 9007199254740991; // pow(2, 53) - 1 == 9007199254740991;
	function isInteger(it) {
	  return !$.isObject(it) && _isFinite(it) && floor(it) === it;
	}
	$def($def.S, 'Number', {
	  // 20.1.2.1 Number.EPSILON
	  EPSILON: Math.pow(2, -52),
	  // 20.1.2.2 Number.isFinite(number)
	  isFinite: function isFinite(it) {
	    return typeof it == 'number' && _isFinite(it);
	  },
	  // 20.1.2.3 Number.isInteger(number)
	  isInteger: isInteger,
	  // 20.1.2.4 Number.isNaN(number)
	  isNaN: function isNaN(number) {
	    return number != number;
	  },
	  // 20.1.2.5 Number.isSafeInteger(number)
	  isSafeInteger: function isSafeInteger(number) {
	    return isInteger(number) && abs(number) <= MAX_SAFE_INTEGER;
	  },
	  // 20.1.2.6 Number.MAX_SAFE_INTEGER
	  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,
	  // 20.1.2.10 Number.MIN_SAFE_INTEGER
	  MIN_SAFE_INTEGER: -MAX_SAFE_INTEGER,
	  // 20.1.2.12 Number.parseFloat(string)
	  parseFloat: parseFloat,
	  // 20.1.2.13 Number.parseInt(string, radix)
	  parseInt: parseInt
	});

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var Infinity = 1 / 0,
	    $def = __webpack_require__(12),
	    E = Math.E,
	    pow = Math.pow,
	    abs = Math.abs,
	    exp = Math.exp,
	    log = Math.log,
	    sqrt = Math.sqrt,
	    ceil = Math.ceil,
	    floor = Math.floor,
	    EPSILON = pow(2, -52),
	    EPSILON32 = pow(2, -23),
	    MAX32 = pow(2, 127) * (2 - EPSILON32),
	    MIN32 = pow(2, -126);
	function roundTiesToEven(n) {
	  return n + 1 / EPSILON - 1 / EPSILON;
	}

	// 20.2.2.28 Math.sign(x)
	function sign(x) {
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	}
	// 20.2.2.5 Math.asinh(x)
	function asinh(x) {
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
	}
	// 20.2.2.14 Math.expm1(x)
	function expm1(x) {
	  return (x = +x) == 0 ? x : x > -0.000001 && x < 0.000001 ? x + x * x / 2 : exp(x) - 1;
	}

	$def($def.S, 'Math', {
	  // 20.2.2.3 Math.acosh(x)
	  acosh: function acosh(x) {
	    return (x = +x) < 1 ? NaN : isFinite(x) ? log(x / E + sqrt(x + 1) * sqrt(x - 1) / E) + 1 : x;
	  },
	  // 20.2.2.5 Math.asinh(x)
	  asinh: asinh,
	  // 20.2.2.7 Math.atanh(x)
	  atanh: function atanh(x) {
	    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
	  },
	  // 20.2.2.9 Math.cbrt(x)
	  cbrt: function cbrt(x) {
	    return sign(x = +x) * pow(abs(x), 1 / 3);
	  },
	  // 20.2.2.11 Math.clz32(x)
	  clz32: function clz32(x) {
	    return (x >>>= 0) ? 31 - floor(log(x + 0.5) * Math.LOG2E) : 32;
	  },
	  // 20.2.2.12 Math.cosh(x)
	  cosh: function cosh(x) {
	    return (exp(x = +x) + exp(-x)) / 2;
	  },
	  // 20.2.2.14 Math.expm1(x)
	  expm1: expm1,
	  // 20.2.2.16 Math.fround(x)
	  fround: function fround(x) {
	    var $abs = abs(x),
	        $sign = sign(x),
	        a,
	        result;
	    if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if (result > MAX32 || result != result) return $sign * Infinity;
	    return $sign * result;
	  },
	  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	  hypot: function hypot(value1, value2) {
	    // eslint-disable-line no-unused-vars
	    var sum = 0,
	        i = 0,
	        len = arguments.length,
	        args = Array(len),
	        larg = 0,
	        arg;
	    while (i < len) {
	      arg = args[i] = abs(arguments[i++]);
	      if (arg == Infinity) return Infinity;
	      if (arg > larg) larg = arg;
	    }
	    larg = larg || 1;
	    while (len--) sum += pow(args[len] / larg, 2);
	    return larg * sqrt(sum);
	  },
	  // 20.2.2.18 Math.imul(x, y)
	  imul: function imul(x, y) {
	    var UInt16 = 65535,
	        xn = +x,
	        yn = +y,
	        xl = UInt16 & xn,
	        yl = UInt16 & yn;
	    return 0 | xl * yl + ((UInt16 & xn >>> 16) * yl + xl * (UInt16 & yn >>> 16) << 16 >>> 0);
	  },
	  // 20.2.2.20 Math.log1p(x)
	  log1p: function log1p(x) {
	    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
	  },
	  // 20.2.2.21 Math.log10(x)
	  log10: function log10(x) {
	    return log(x) / Math.LN10;
	  },
	  // 20.2.2.22 Math.log2(x)
	  log2: function log2(x) {
	    return log(x) / Math.LN2;
	  },
	  // 20.2.2.28 Math.sign(x)
	  sign: sign,
	  // 20.2.2.30 Math.sinh(x)
	  sinh: function sinh(x) {
	    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
	  },
	  // 20.2.2.33 Math.tanh(x)
	  tanh: function tanh(x) {
	    var a = expm1(x = +x),
	        b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  },
	  // 20.2.2.34 Math.trunc(x)
	  trunc: function trunc(it) {
	    return (it > 0 ? floor : ceil)(it);
	  }
	});

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var $def = __webpack_require__(12),
	    toIndex = __webpack_require__(5).toIndex,
	    fromCharCode = String.fromCharCode,
	    $fromCodePoint = String.fromCodePoint;

	// length should be 1, old FF problem
	$def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x) {
	    // eslint-disable-line no-unused-vars
	    var res = [],
	        len = arguments.length,
	        i = 0,
	        code;
	    while (len > i) {
	      code = +arguments[i++];
	      if (toIndex(code, 1114111) !== code) throw RangeError(code + ' is not a valid code point');
	      res.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320));
	    }return res.join('');
	  }
	});

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12);

	$def($def.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite) {
	    var tpl = $.toObject(callSite.raw),
	        len = $.toLength(tpl.length),
	        sln = arguments.length,
	        res = [],
	        i = 0;
	    while (len > i) {
	      res.push(String(tpl[i++]));
	      if (i < sln) res.push(String(arguments[i]));
	    }return res.join('');
	  }
	});

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var set = __webpack_require__(5).set,
	    $at = __webpack_require__(39)(true),
	    ITER = __webpack_require__(11).safe('iter'),
	    $iter = __webpack_require__(40),
	    step = $iter.step;

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(41)(String, 'String', function (iterated) {
	  set(this, ITER, { o: String(iterated), i: 0 });
	  // 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var iter = this[ITER],
	      O = iter.o,
	      index = iter.i,
	      point;
	  if (index >= O.length) return step(1);
	  point = $at(O, index);
	  iter.i += point.length;
	  return step(0, point);
	});

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	// true  -> String#at
	// false -> String#codePointAt
	var $ = __webpack_require__(5);
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String($.assertDefined(that)),
	        i = $.toInteger(pos),
	        l = s.length,
	        a,
	        b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
	  };
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    cof = __webpack_require__(8),
	    assertObject = __webpack_require__(17).obj,
	    SYMBOL_ITERATOR = __webpack_require__(9)('iterator'),
	    FF_ITERATOR = '@@iterator',
	    Iterators = __webpack_require__(10)('iterators'),
	    IteratorPrototype = {};
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	setIterator(IteratorPrototype, $.that);
	function setIterator(O, value) {
	  $.hide(O, SYMBOL_ITERATOR, value);
	  // Add iterator for FF iterator protocol
	  if (FF_ITERATOR in []) $.hide(O, FF_ITERATOR, value);
	}

	module.exports = {
	  // Safari has buggy iterators w/o `next`
	  BUGGY: 'keys' in [] && !('next' in [].keys()),
	  Iterators: Iterators,
	  step: function step(done, value) {
	    return { value: value, done: !!done };
	  },
	  is: function is(it) {
	    var O = Object(it),
	        Symbol = $.g.Symbol,
	        SYM = Symbol && Symbol.iterator || FF_ITERATOR;
	    return SYM in O || SYMBOL_ITERATOR in O || $.has(Iterators, cof.classof(O));
	  },
	  get: function get(it) {
	    var Symbol = $.g.Symbol,
	        ext = it[Symbol && Symbol.iterator || FF_ITERATOR],
	        getIter = ext || it[SYMBOL_ITERATOR] || Iterators[cof.classof(it)];
	    return assertObject(getIter.call(it));
	  },
	  set: setIterator,
	  create: function create(Constructor, NAME, next, proto) {
	    Constructor.prototype = $.create(proto || IteratorPrototype, { next: $.desc(1, next) });
	    cof.set(Constructor, NAME + ' Iterator');
	  }
	};

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var $def = __webpack_require__(12),
	    $redef = __webpack_require__(13),
	    $ = __webpack_require__(5),
	    cof = __webpack_require__(8),
	    $iter = __webpack_require__(40),
	    SYMBOL_ITERATOR = __webpack_require__(9)('iterator'),
	    FF_ITERATOR = '@@iterator',
	    KEYS = 'keys',
	    VALUES = 'values',
	    Iterators = $iter.Iterators;
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE) {
	  $iter.create(Constructor, NAME, next);
	  function createMethod(kind) {
	    function $$(that) {
	      return new Constructor(that, kind);
	    }
	    switch (kind) {
	      case KEYS:
	        return function keys() {
	          return $$(this);
	        };
	      case VALUES:
	        return function values() {
	          return $$(this);
	        };
	    }return function entries() {
	      return $$(this);
	    };
	  }
	  var TAG = NAME + ' Iterator',
	      proto = Base.prototype,
	      _native = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
	      _default = _native || createMethod(DEFAULT),
	      methods,
	      key;
	  // Fix native
	  if (_native) {
	    var IteratorPrototype = $.getProto(_default.call(new Base()));
	    // Set @@toStringTag to native iterators
	    cof.set(IteratorPrototype, TAG, true);
	    // FF fix
	    if ($.FW && $.has(proto, FF_ITERATOR)) $iter.set(IteratorPrototype, $.that);
	  }
	  // Define iterator
	  if ($.FW) $iter.set(proto, _default);
	  // Plug for library
	  Iterators[NAME] = _default;
	  Iterators[TAG] = $.that;
	  if (DEFAULT) {
	    methods = {
	      keys: IS_SET ? _default : createMethod(KEYS),
	      values: DEFAULT == VALUES ? _default : createMethod(VALUES),
	      entries: DEFAULT != VALUES ? _default : createMethod('entries')
	    };
	    if (FORCE) for (key in methods) {
	      if (!(key in proto)) $redef(proto, key, methods[key]);
	    } else $def($def.P + $def.F * $iter.BUGGY, NAME, methods);
	  }
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def = __webpack_require__(12),
	    $at = __webpack_require__(39)(false);
	$def($def.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos) {
	    return $at(this, pos);
	  }
	});

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    cof = __webpack_require__(8),
	    $def = __webpack_require__(12),
	    toLength = $.toLength;

	// should throw error on regex
	$def($def.P + $def.F * !__webpack_require__(20)(function () {
	  'q'.endsWith(/./);
	}), 'String', {
	  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	  endsWith: function endsWith(searchString /*, endPosition = @length */) {
	    if (cof(searchString) == 'RegExp') throw TypeError();
	    var that = String($.assertDefined(this)),
	        endPosition = arguments[1],
	        len = toLength(that.length),
	        end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    searchString += '';
	    return that.slice(end - searchString.length, end) === searchString;
	  }
	});

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    cof = __webpack_require__(8),
	    $def = __webpack_require__(12);

	$def($def.P, 'String', {
	  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
	  includes: function includes(searchString /*, position = 0 */) {
	    if (cof(searchString) == 'RegExp') throw TypeError();
	    return !! ~String($.assertDefined(this)).indexOf(searchString, arguments[1]);
	  }
	});

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var $def = __webpack_require__(12);

	$def($def.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(46)
	});

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5);

	module.exports = function repeat(count) {
	  var str = String($.assertDefined(this)),
	      res = '',
	      n = $.toInteger(count);
	  if (n < 0 || n == Infinity) throw RangeError('Count can\'t be negative');
	  for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
	  return res;
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    cof = __webpack_require__(8),
	    $def = __webpack_require__(12);

	// should throw error on regex
	$def($def.P + $def.F * !__webpack_require__(20)(function () {
	  'q'.startsWith(/./);
	}), 'String', {
	  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	  startsWith: function startsWith(searchString /*, position = 0 */) {
	    if (cof(searchString) == 'RegExp') throw TypeError();
	    var that = String($.assertDefined(this)),
	        index = $.toLength(Math.min(arguments[1], that.length));
	    searchString += '';
	    return that.slice(index, index + searchString.length) === searchString;
	  }
	});

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    ctx = __webpack_require__(16),
	    $def = __webpack_require__(12),
	    $iter = __webpack_require__(40),
	    call = __webpack_require__(49);
	$def($def.S + $def.F * !__webpack_require__(50)(function (iter) {
	  Array.from(iter);
	}), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/) {
	    var O = Object($.assertDefined(arrayLike)),
	        mapfn = arguments[1],
	        mapping = mapfn !== undefined,
	        f = mapping ? ctx(mapfn, arguments[2], 2) : undefined,
	        index = 0,
	        length,
	        result,
	        step,
	        iterator;
	    if ($iter.is(O)) {
	      iterator = $iter.get(O);
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      result = new (typeof this == 'function' ? this : Array)();
	      for (; !(step = iterator.next()).done; index++) {
	        result[index] = mapping ? call(iterator, f, [step.value, index], true) : step.value;
	      }
	    } else {
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      result = new (typeof this == 'function' ? this : Array)(length = $.toLength(O.length));
	      for (; length > index; index++) {
	        result[index] = mapping ? f(O[index], index) : O[index];
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var assertObject = __webpack_require__(17).obj;
	function close(iterator) {
	  var ret = iterator['return'];
	  if (ret !== undefined) assertObject(ret.call(iterator));
	}
	function call(iterator, fn, value, entries) {
	  try {
	    return entries ? fn(assertObject(value)[0], value[1]) : fn(value);
	  } catch (e) {
	    close(iterator);
	    throw e;
	  }
	}
	call.close = close;
	module.exports = call;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var SYMBOL_ITERATOR = __webpack_require__(9)('iterator'),
	    SAFE_CLOSING = false;
	try {
	  var riter = [7][SYMBOL_ITERATOR]();
	  riter['return'] = function () {
	    SAFE_CLOSING = true;
	  };
	  Array.from(riter, function () {
	    throw 2;
	  });
	} catch (e) {}
	module.exports = function (exec) {
	  if (!SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7],
	        iter = arr[SYMBOL_ITERATOR]();
	    iter.next = function () {
	      safe = true;
	    };
	    arr[SYMBOL_ITERATOR] = function () {
	      return iter;
	    };
	    exec(arr);
	  } catch (e) {}
	  return safe;
	};
	/* empty */ /* empty */

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var $def = __webpack_require__(12);
	$def($def.S, 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of() {
	    var index = 0,
	        length = arguments.length
	    // strange IE quirks mode bug -> use typeof instead of isFunction
	    ,
	        result = new (typeof this == 'function' ? this : Array)(length);
	    while (length > index) result[index] = arguments[index++];
	    result.length = length;
	    return result;
	  }
	});
	/* ...args */

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    setUnscope = __webpack_require__(53),
	    ITER = __webpack_require__(11).safe('iter'),
	    $iter = __webpack_require__(40),
	    step = $iter.step,
	    Iterators = $iter.Iterators;

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	__webpack_require__(41)(Array, 'Array', function (iterated, kind) {
	  $.set(this, ITER, { o: $.toObject(iterated), i: 0, k: kind });
	  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var iter = this[ITER],
	      O = iter.o,
	      kind = iter.k,
	      index = iter.i++;
	  if (!O || index >= O.length) {
	    iter.o = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	setUnscope('keys');
	setUnscope('values');
	setUnscope('entries');

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var $ = __webpack_require__(5),
	    UNSCOPABLES = __webpack_require__(9)('unscopables');
	if ($.FW && !(UNSCOPABLES in [])) $.hide(Array.prototype, UNSCOPABLES, {});
	module.exports = function (key) {
	  if ($.FW) [][UNSCOPABLES][key] = true;
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(55)(Array);

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    SPECIES = __webpack_require__(9)('species');
	module.exports = function (C) {
	  if ($.DESC && !(SPECIES in C)) $.setDesc(C, SPECIES, {
	    configurable: true,
	    get: $.that
	  });
	};

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12),
	    toIndex = $.toIndex;
	$def($def.P, 'Array', {
	  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	  copyWithin: function copyWithin(target, /* = 0 */start /* = 0, end = @length */) {
	    var O = Object($.assertDefined(this)),
	        len = $.toLength(O.length),
	        to = toIndex(target, len),
	        from = toIndex(start, len),
	        end = arguments[2],
	        fin = end === undefined ? len : toIndex(end, len),
	        count = Math.min(fin - from, len - to),
	        inc = 1;
	    if (from < to && to < from + count) {
	      inc = -1;
	      from = from + count - 1;
	      to = to + count - 1;
	    }
	    while (count-- > 0) {
	      if (from in O) O[to] = O[from];else delete O[to];
	      to += inc;
	      from += inc;
	    }return O;
	  }
	});
	__webpack_require__(53)('copyWithin');

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12),
	    toIndex = $.toIndex;
	$def($def.P, 'Array', {
	  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	  fill: function fill(value /*, start = 0, end = @length */) {
	    var O = Object($.assertDefined(this)),
	        length = $.toLength(O.length),
	        index = toIndex(arguments[1], length),
	        end = arguments[2],
	        endPos = end === undefined ? length : toIndex(end, length);
	    while (endPos > index) O[index++] = value;
	    return O;
	  }
	});
	__webpack_require__(53)('fill');

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var KEY = 'find',
	    $def = __webpack_require__(12),
	    forced = true,
	    $find = __webpack_require__(15)(5);
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () {
	  forced = false;
	});
	$def($def.P + $def.F * forced, 'Array', {
	  find: function find(callbackfn /*, that = undefined */) {
	    return $find(this, callbackfn, arguments[1]);
	  }
	});
	__webpack_require__(53)(KEY);

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var KEY = 'findIndex',
	    $def = __webpack_require__(12),
	    forced = true,
	    $find = __webpack_require__(15)(6);
	// Shouldn't skip holes
	if (KEY in []) Array(1)[KEY](function () {
	  forced = false;
	});
	$def($def.P + $def.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn /*, that = undefined */) {
	    return $find(this, callbackfn, arguments[1]);
	  }
	});
	__webpack_require__(53)(KEY);

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    cof = __webpack_require__(8),
	    $RegExp = $.g.RegExp,
	    Base = $RegExp,
	    proto = $RegExp.prototype,
	    re = /a/g
	// "new" creates a new object
	,
	    CORRECT_NEW = new $RegExp(re) !== re
	// RegExp allows a regex with flags as the pattern
	,
	    ALLOWS_RE_WITH_FLAGS = (function () {
	  try {
	    return $RegExp(re, 'i') == '/a/i';
	  } catch (e) {}
	})();
	if ($.FW && $.DESC) {
	  if (!CORRECT_NEW || !ALLOWS_RE_WITH_FLAGS) {
	    $RegExp = function RegExp(pattern, flags) {
	      var patternIsRegExp = cof(pattern) == 'RegExp',
	          flagsIsUndefined = flags === undefined;
	      if (!(this instanceof $RegExp) && patternIsRegExp && flagsIsUndefined) return pattern;
	      return CORRECT_NEW ? new Base(patternIsRegExp && !flagsIsUndefined ? pattern.source : pattern, flags) : new Base(patternIsRegExp ? pattern.source : pattern, patternIsRegExp && flagsIsUndefined ? pattern.flags : flags);
	    };
	    $.each.call($.getNames(Base), function (key) {
	      key in $RegExp || $.setDesc($RegExp, key, {
	        configurable: true,
	        get: function get() {
	          return Base[key];
	        },
	        set: function set(it) {
	          Base[key] = it;
	        }
	      });
	    });
	    proto.constructor = $RegExp;
	    $RegExp.prototype = proto;
	    __webpack_require__(13)($.g, 'RegExp', $RegExp);
	  }
	  // 21.2.5.3 get RegExp.prototype.flags()
	  if (/./g.flags != 'g') $.setDesc(proto, 'flags', {
	    configurable: true,
	    get: __webpack_require__(19)(/^.*\/(\w*)$/, '$1')
	  });
	}
	__webpack_require__(55)($RegExp);
	/* empty */

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    ctx = __webpack_require__(16),
	    cof = __webpack_require__(8),
	    $def = __webpack_require__(12),
	    assert = __webpack_require__(17),
	    forOf = __webpack_require__(62),
	    setProto = __webpack_require__(28).set,
	    species = __webpack_require__(55),
	    SPECIES = __webpack_require__(9)('species'),
	    RECORD = __webpack_require__(11).safe('record'),
	    PROMISE = 'Promise',
	    global = $.g,
	    process = global.process,
	    asap = process && process.nextTick || __webpack_require__(63).set,
	    P = global[PROMISE],
	    isFunction = $.isFunction,
	    isObject = $.isObject,
	    assertFunction = assert.fn,
	    assertObject = assert.obj;

	var useNative = (function () {
	  var test,
	      works = false;
	  function P2(x) {
	    var self = new P(x);
	    setProto(self, P2.prototype);
	    return self;
	  }
	  try {
	    works = isFunction(P) && isFunction(P.resolve) && P.resolve(test = new P(function () {})) == test;
	    setProto(P2, P);
	    P2.prototype = $.create(P.prototype, { constructor: { value: P2 } });
	    // actual Firefox has broken subclass support, test that
	    if (!(P2.resolve(5).then(function () {}) instanceof P2)) {
	      works = false;
	    }
	  } catch (e) {
	    works = false;
	  }
	  return works;
	})();

	// helpers
	function getConstructor(C) {
	  var S = assertObject(C)[SPECIES];
	  return S != undefined ? S : C;
	}
	function isThenable(it) {
	  var then;
	  if (isObject(it)) then = it.then;
	  return isFunction(then) ? then : false;
	}
	function notify(record) {
	  var chain = record.c;
	  if (chain.length) asap(function () {
	    var value = record.v,
	        ok = record.s == 1,
	        i = 0;
	    function run(react) {
	      var cb = ok ? react.ok : react.fail,
	          ret,
	          then;
	      try {
	        if (cb) {
	          if (!ok) record.h = true;
	          ret = cb === true ? value : cb(value);
	          if (ret === react.P) {
	            react.rej(TypeError('Promise-chain cycle'));
	          } else if (then = isThenable(ret)) {
	            then.call(ret, react.res, react.rej);
	          } else react.res(ret);
	        } else react.rej(value);
	      } catch (err) {
	        react.rej(err);
	      }
	    }
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    chain.length = 0;
	  });
	}
	function isUnhandled(promise) {
	  var record = promise[RECORD],
	      chain = record.a || record.c,
	      i = 0,
	      react;
	  if (record.h) return false;
	  while (chain.length > i) {
	    react = chain[i++];
	    if (react.fail || !isUnhandled(react.P)) return false;
	  }return true;
	}
	function $reject(value) {
	  var record = this,
	      promise;
	  if (record.d) return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  record.v = value;
	  record.s = 2;
	  record.a = record.c.slice();
	  setTimeout(function () {
	    asap(function () {
	      if (isUnhandled(promise = record.p)) {
	        if (cof(process) == 'process') {
	          process.emit('unhandledRejection', value, promise);
	        } else if (global.console && isFunction(console.error)) {
	          console.error('Unhandled promise rejection', value);
	        }
	      }
	      record.a = undefined;
	    });
	  }, 1);
	  notify(record);
	}
	function $resolve(value) {
	  var record = this,
	      then,
	      wrapper;
	  if (record.d) return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  try {
	    if (then = isThenable(value)) {
	      wrapper = { r: record, d: false }; // wrap
	      then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	    } else {
	      record.v = value;
	      record.s = 1;
	      notify(record);
	    }
	  } catch (err) {
	    $reject.call(wrapper || { r: record, d: false }, err); // wrap
	  }
	}

	// constructor polyfill
	if (!useNative) {
	  // 25.4.3.1 Promise(executor)
	  P = function Promise(executor) {
	    assertFunction(executor);
	    var record = {
	      p: assert.inst(this, P, PROMISE), // <- promise
	      c: [], // <- awaiting reactions
	      a: undefined, // <- checked in isUnhandled reactions
	      s: 0, // <- state
	      d: false, // <- done
	      v: undefined, // <- value
	      h: false // <- handled rejection
	    };
	    $.hide(this, RECORD, record);
	    try {
	      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
	    } catch (err) {
	      $reject.call(record, err);
	    }
	  };
	  __webpack_require__(64)(P.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var S = assertObject(assertObject(this).constructor)[SPECIES];
	      var react = {
	        ok: isFunction(onFulfilled) ? onFulfilled : true,
	        fail: isFunction(onRejected) ? onRejected : false
	      };
	      var promise = react.P = new (S != undefined ? S : P)(function (res, rej) {
	        react.res = assertFunction(res);
	        react.rej = assertFunction(rej);
	      });
	      var record = this[RECORD];
	      record.c.push(react);
	      if (record.a) record.a.push(react);
	      record.s && notify(record);
	      return promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function _catch(onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	}

	// export
	$def($def.G + $def.W + $def.F * !useNative, { Promise: P });
	cof.set(P, PROMISE);
	species(P);
	species($.core[PROMISE]); // for wrapper

	// statics
	$def($def.S + $def.F * !useNative, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    return new (getConstructor(this))(function (res, rej) {
	      rej(r);
	    });
	  },
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return isObject(x) && RECORD in x && $.getProto(x) === this.prototype ? x : new (getConstructor(this))(function (res) {
	      res(x);
	    });
	  }
	});
	$def($def.S + $def.F * !(useNative && __webpack_require__(50)(function (iter) {
	  P.all(iter)['catch'](function () {});
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = getConstructor(this),
	        values = [];
	    return new C(function (res, rej) {
	      forOf(iterable, false, values.push, values);
	      var remaining = values.length,
	          results = Array(remaining);
	      if (remaining) $.each.call(values, function (promise, index) {
	        C.resolve(promise).then(function (value) {
	          results[index] = value;
	          --remaining || res(results);
	        }, rej);
	      });else res(results);
	    });
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = getConstructor(this);
	    return new C(function (res, rej) {
	      forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(res, rej);
	      });
	    });
	  }
	});

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var ctx = __webpack_require__(16),
	    get = __webpack_require__(40).get,
	    call = __webpack_require__(49);
	module.exports = function (iterable, entries, fn, that) {
	  var iterator = get(iterable),
	      f = ctx(fn, that, entries ? 2 : 1),
	      step;
	  while (!(step = iterator.next()).done) {
	    if (call(iterator, f, step.value, entries) === false) {
	      return call.close(iterator);
	    }
	  }
	};

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    ctx = __webpack_require__(16),
	    cof = __webpack_require__(8),
	    invoke = __webpack_require__(14),
	    cel = __webpack_require__(7),
	    global = $.g,
	    isFunction = $.isFunction,
	    html = $.html,
	    process = global.process,
	    setTask = global.setImmediate,
	    clearTask = global.clearImmediate,
	    postMessage = global.postMessage,
	    addEventListener = global.addEventListener,
	    MessageChannel = global.MessageChannel,
	    counter = 0,
	    queue = {},
	    ONREADYSTATECHANGE = 'onreadystatechange',
	    defer,
	    channel,
	    port;
	function run() {
	  var id = +this;
	  if ($.has(queue, id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	}
	function listner(event) {
	  run.call(event.data);
	}
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!isFunction(setTask) || !isFunction(clearTask)) {
	  setTask = function (fn) {
	    var args = [],
	        i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      invoke(isFunction(fn) ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function (id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (cof(process) == 'process') {
	    defer = function (id) {
	      process.nextTick(ctx(run, id, 1));
	    };
	    // Modern browsers, skip implementation for WebWorkers
	    // IE8 has postMessage, but it's sync & typeof its postMessage is object
	  } else if (addEventListener && isFunction(postMessage) && !global.importScripts) {
	    defer = function (id) {
	      postMessage(id, '*');
	    };
	    addEventListener('message', listner, false);
	    // WebWorkers
	  } else if (isFunction(MessageChannel)) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listner;
	    defer = ctx(port.postMessage, port, 1);
	    // IE8-
	  } else if (ONREADYSTATECHANGE in cel('script')) {
	    defer = function (id) {
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	    // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set: setTask,
	  clear: clearTask
	};

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var $redef = __webpack_require__(13);
	module.exports = function (target, src) {
	  for (var key in src) $redef(target, key, src[key]);
	  return target;
	};

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(66);

	// 23.1 Map Objects
	__webpack_require__(67)('Map', {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key) {
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value) {
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    ctx = __webpack_require__(16),
	    safe = __webpack_require__(11).safe,
	    assert = __webpack_require__(17),
	    forOf = __webpack_require__(62),
	    step = __webpack_require__(40).step,
	    has = $.has,
	    set = $.set,
	    isObject = $.isObject,
	    hide = $.hide,
	    isExtensible = Object.isExtensible || isObject,
	    ID = safe('id'),
	    O1 = safe('O1'),
	    LAST = safe('last'),
	    FIRST = safe('first'),
	    ITER = safe('iter'),
	    SIZE = $.DESC ? safe('size') : 'size',
	    id = 0;

	function fastKey(it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, ID)) {
	    // can't set id to frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add id
	    if (!create) return 'E';
	    // add missing object id
	    hide(it, ID, ++id);
	    // return object id with prefix
	  }return 'O' + it[ID];
	}

	function getEntry(that, key) {
	  // fast case
	  var index = fastKey(key),
	      entry;
	  if (index !== 'F') return that[O1][index];
	  // frozen object case
	  for (entry = that[FIRST]; entry; entry = entry.n) {
	    if (entry.k == key) return entry;
	  }
	}

	module.exports = {
	  getConstructor: function getConstructor(NAME, IS_MAP, ADDER) {
	    function C() {
	      var that = assert.inst(this, C, NAME),
	          iterable = arguments[0];
	      set(that, O1, $.create(null));
	      set(that, SIZE, 0);
	      set(that, LAST, undefined);
	      set(that, FIRST, undefined);
	      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	    }
	    __webpack_require__(64)(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear() {
	        for (var that = this, data = that[O1], entry = that[FIRST]; entry; entry = entry.n) {
	          entry.r = true;
	          if (entry.p) entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that[FIRST] = that[LAST] = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function _delete(key) {
	        var that = this,
	            entry = getEntry(that, key);
	        if (entry) {
	          var next = entry.n,
	              prev = entry.p;
	          delete that[O1][entry.i];
	          entry.r = true;
	          if (prev) prev.n = next;
	          if (next) next.p = prev;
	          if (that[FIRST] == entry) that[FIRST] = next;
	          if (that[LAST] == entry) that[LAST] = prev;
	          that[SIZE]--;
	        }return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */) {
	        var f = ctx(callbackfn, arguments[1], 3),
	            entry;
	        while (entry = entry ? entry.n : this[FIRST]) {
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while (entry && entry.r) entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key) {
	        return !!getEntry(this, key);
	      }
	    });
	    if ($.DESC) $.setDesc(C.prototype, 'size', {
	      get: function get() {
	        return assert.def(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function def(that, key, value) {
	    var entry = getEntry(that, key),
	        prev,
	        index;
	    // change existing entry
	    if (entry) {
	      entry.v = value;
	      // create new entry
	    } else {
	      that[LAST] = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key, // <- key
	        v: value, // <- value
	        p: prev = that[LAST], // <- previous entry
	        n: undefined, // <- next entry
	        r: false // <- removed
	      };
	      if (!that[FIRST]) that[FIRST] = entry;
	      if (prev) prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if (index !== 'F') that[O1][index] = entry;
	    }return that;
	  },
	  getEntry: getEntry,
	  // add .keys, .values, .entries, [@@iterator]
	  // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	  setIter: function setIter(C, NAME, IS_MAP) {
	    __webpack_require__(41)(C, NAME, function (iterated, kind) {
	      set(this, ITER, { o: iterated, k: kind });
	    }, function () {
	      var iter = this[ITER],
	          kind = iter.k,
	          entry = iter.l;
	      // revert to the last existing entry
	      while (entry && entry.r) entry = entry.p;
	      // get next entry
	      if (!iter.o || !(iter.l = entry = entry ? entry.n : iter.o[FIRST])) {
	        // or finish the iteration
	        iter.o = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if (kind == 'keys') return step(0, entry.k);
	      if (kind == 'values') return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
	  }
	};

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12),
	    BUGGY = __webpack_require__(40).BUGGY,
	    forOf = __webpack_require__(62),
	    species = __webpack_require__(55),
	    assertInstance = __webpack_require__(17).inst;

	module.exports = function (NAME, methods, common, IS_MAP, IS_WEAK) {
	  var Base = $.g[NAME],
	      C = Base,
	      ADDER = IS_MAP ? 'set' : 'add',
	      proto = C && C.prototype,
	      O = {};
	  function fixMethod(KEY, CHAIN) {
	    if ($.FW) {
	      var method = proto[KEY];
	      __webpack_require__(13)(proto, KEY, function (a, b) {
	        var result = method.call(this, a === 0 ? 0 : a, b);
	        return CHAIN ? this : result;
	      });
	    }
	  }
	  if (!$.isFunction(C) || !(IS_WEAK || !BUGGY && proto.forEach && proto.entries)) {
	    // create collection constructor
	    C = common.getConstructor(NAME, IS_MAP, ADDER);
	    __webpack_require__(64)(C.prototype, methods);
	  } else {
	    var inst = new C(),
	        chain = inst[ADDER](IS_WEAK ? {} : -0, 1),
	        buggyZero;
	    // wrap for init collections from iterable
	    if (!__webpack_require__(50)(function (iter) {
	      new C(iter);
	    })) {
	      // eslint-disable-line no-new
	      C = function () {
	        assertInstance(this, C, NAME);
	        var that = new Base(),
	            iterable = arguments[0];
	        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      };
	      C.prototype = proto;
	      if ($.FW) proto.constructor = C;
	    }
	    IS_WEAK || inst.forEach(function (val, key) {
	      buggyZero = 1 / key === -Infinity;
	    });
	    // fix converting -0 key to +0
	    if (buggyZero) {
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    // + fix .add & .set for chaining
	    if (buggyZero || chain !== inst) fixMethod(ADDER, true);
	  }

	  __webpack_require__(8).set(C, NAME);

	  O[NAME] = C;
	  $def($def.G + $def.W + $def.F * (C != Base), O);
	  species(C);
	  species($.core[NAME]); // for wrapper

	  if (!IS_WEAK) common.setIter(C, NAME, IS_MAP);

	  return C;
	};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(66);

	// 23.2 Set Objects
	__webpack_require__(67)('Set', {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value) {
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    weak = __webpack_require__(70),
	    leakStore = weak.leakStore,
	    ID = weak.ID,
	    WEAK = weak.WEAK,
	    has = $.has,
	    isObject = $.isObject,
	    isExtensible = Object.isExtensible || isObject,
	    tmp = {};

	// 23.3 WeakMap Objects
	var WeakMap = __webpack_require__(67)('WeakMap', {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key) {
	    if (isObject(key)) {
	      if (!isExtensible(key)) return leakStore(this).get(key);
	      if (has(key, WEAK)) return key[WEAK][this[ID]];
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value) {
	    return weak.def(this, key, value);
	  }
	}, weak, true, true);

	// IE11 WeakMap frozen keys fix
	if ($.FW && new WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
	  $.each.call(['delete', 'has', 'get', 'set'], function (key) {
	    var proto = WeakMap.prototype,
	        method = proto[key];
	    __webpack_require__(13)(proto, key, function (a, b) {
	      // store frozen objects on leaky map
	      if (isObject(a) && !isExtensible(a)) {
	        var result = leakStore(this)[key](a, b);
	        return key == 'set' ? this : result;
	        // store all the rest on native weakmap
	      }return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    safe = __webpack_require__(11).safe,
	    assert = __webpack_require__(17),
	    forOf = __webpack_require__(62),
	    _has = $.has,
	    isObject = $.isObject,
	    hide = $.hide,
	    isExtensible = Object.isExtensible || isObject,
	    id = 0,
	    ID = safe('id'),
	    WEAK = safe('weak'),
	    LEAK = safe('leak'),
	    method = __webpack_require__(15),
	    find = method(5),
	    findIndex = method(6);
	function findFrozen(store, key) {
	  return find(store.array, function (it) {
	    return it[0] === key;
	  });
	}
	// fallback for frozen keys
	function leakStore(that) {
	  return that[LEAK] || hide(that, LEAK, {
	    array: [],
	    get: function get(key) {
	      var entry = findFrozen(this, key);
	      if (entry) return entry[1];
	    },
	    has: function has(key) {
	      return !!findFrozen(this, key);
	    },
	    set: function set(key, value) {
	      var entry = findFrozen(this, key);
	      if (entry) entry[1] = value;else this.array.push([key, value]);
	    },
	    'delete': function _delete(key) {
	      var index = findIndex(this.array, function (it) {
	        return it[0] === key;
	      });
	      if (~index) this.array.splice(index, 1);
	      return !! ~index;
	    }
	  })[LEAK];
	}

	module.exports = {
	  getConstructor: function getConstructor(NAME, IS_MAP, ADDER) {
	    function C() {
	      $.set(assert.inst(this, C, NAME), ID, id++);
	      var iterable = arguments[0];
	      if (iterable != undefined) forOf(iterable, IS_MAP, this[ADDER], this);
	    }
	    __webpack_require__(64)(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function _delete(key) {
	        if (!isObject(key)) return false;
	        if (!isExtensible(key)) return leakStore(this)['delete'](key);
	        return _has(key, WEAK) && _has(key[WEAK], this[ID]) && delete key[WEAK][this[ID]];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key) {
	        if (!isObject(key)) return false;
	        if (!isExtensible(key)) return leakStore(this).has(key);
	        return _has(key, WEAK) && _has(key[WEAK], this[ID]);
	      }
	    });
	    return C;
	  },
	  def: function def(that, key, value) {
	    if (!isExtensible(assert.obj(key))) {
	      leakStore(that).set(key, value);
	    } else {
	      _has(key, WEAK) || hide(key, WEAK, {});
	      key[WEAK][that[ID]] = value;
	    }return that;
	  },
	  leakStore: leakStore,
	  WEAK: WEAK,
	  ID: ID
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(70);

	// 23.4 WeakSet Objects
	__webpack_require__(67)('WeakSet', {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value) {
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12),
	    setProto = __webpack_require__(28),
	    $iter = __webpack_require__(40),
	    ITERATOR = __webpack_require__(9)('iterator'),
	    ITER = __webpack_require__(11).safe('iter'),
	    step = $iter.step,
	    assert = __webpack_require__(17),
	    isObject = $.isObject,
	    getProto = $.getProto,
	    $Reflect = $.g.Reflect,
	    _apply = Function.apply,
	    assertObject = assert.obj,
	    _isExtensible = Object.isExtensible || isObject,
	    _preventExtensions = Object.preventExtensions
	// IE TP has broken Reflect.enumerate
	,
	    buggyEnumerate = !($Reflect && $Reflect.enumerate && ITERATOR in $Reflect.enumerate({}));

	function Enumerate(iterated) {
	  $.set(this, ITER, { o: iterated, k: undefined, i: 0 });
	}
	$iter.create(Enumerate, 'Object', function () {
	  var iter = this[ITER],
	      keys = iter.k,
	      key;
	  if (keys == undefined) {
	    iter.k = keys = [];
	    for (key in iter.o) keys.push(key);
	  }
	  do {
	    if (iter.i >= keys.length) return step(1);
	  } while (!((key = keys[iter.i++]) in iter.o));
	  return step(0, key);
	});

	var reflect = {
	  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	  apply: function apply(target, thisArgument, argumentsList) {
	    return _apply.call(target, thisArgument, argumentsList);
	  },
	  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	  construct: function construct(target, argumentsList /*, newTarget*/) {
	    var proto = assert.fn(arguments.length < 3 ? target : arguments[2]).prototype,
	        instance = $.create(isObject(proto) ? proto : Object.prototype),
	        result = _apply.call(target, instance, argumentsList);
	    return isObject(result) ? result : instance;
	  },
	  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	  defineProperty: function defineProperty(target, propertyKey, attributes) {
	    assertObject(target);
	    try {
	      $.setDesc(target, propertyKey, attributes);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  },
	  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
	  deleteProperty: function deleteProperty(target, propertyKey) {
	    var desc = $.getDesc(assertObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  },
	  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
	  get: function get(_x, _x2) {
	    var _arguments = arguments;
	    var _again = true;

	    _function: while (_again) {
	      var target = _x,
	          propertyKey /*, receiver*/ = _x2;
	      receiver = desc = proto = undefined;
	      _again = false;

	      var receiver = _arguments.length < 3 ? target : _arguments[2],
	          desc = $.getDesc(assertObject(target), propertyKey),
	          proto;
	      if (desc) return $.has(desc, 'value') ? desc.value : desc.get === undefined ? undefined : desc.get.call(receiver);
	      if (isObject(proto = getProto(target))) {
	        _arguments = [_x = proto, _x2 = propertyKey, receiver];
	        _again = true;
	        continue _function;
	      } else {
	        return undefined;
	      }
	    }
	  },
	  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
	    return $.getDesc(assertObject(target), propertyKey);
	  },
	  // 26.1.8 Reflect.getPrototypeOf(target)
	  getPrototypeOf: function getPrototypeOf(target) {
	    return getProto(assertObject(target));
	  },
	  // 26.1.9 Reflect.has(target, propertyKey)
	  has: function has(target, propertyKey) {
	    return propertyKey in target;
	  },
	  // 26.1.10 Reflect.isExtensible(target)
	  isExtensible: function isExtensible(target) {
	    return _isExtensible(assertObject(target));
	  },
	  // 26.1.11 Reflect.ownKeys(target)
	  ownKeys: __webpack_require__(73),
	  // 26.1.12 Reflect.preventExtensions(target)
	  preventExtensions: function preventExtensions(target) {
	    assertObject(target);
	    try {
	      if (_preventExtensions) _preventExtensions(target);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  },
	  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	  set: function set(_x3, _x4, _x5) {
	    var _arguments2 = arguments;
	    var _again2 = true;

	    _function2: while (_again2) {
	      var target = _x3,
	          propertyKey = _x4,
	          V /*, receiver*/ = _x5;
	      receiver = ownDesc = existingDescriptor = proto = undefined;
	      _again2 = false;

	      var receiver = _arguments2.length < 4 ? target : _arguments2[3],
	          ownDesc = $.getDesc(assertObject(target), propertyKey),
	          existingDescriptor,
	          proto;
	      if (!ownDesc) {
	        if (isObject(proto = getProto(target))) {
	          _arguments2 = [_x3 = proto, _x4 = propertyKey, _x5 = V, receiver];
	          _again2 = true;
	          continue _function2;
	        }
	        ownDesc = $.desc(0);
	      }
	      if ($.has(ownDesc, 'value')) {
	        if (ownDesc.writable === false || !isObject(receiver)) return false;
	        existingDescriptor = $.getDesc(receiver, propertyKey) || $.desc(0);
	        existingDescriptor.value = V;
	        $.setDesc(receiver, propertyKey, existingDescriptor);
	        return true;
	      }
	      return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	    }
	  }
	};
	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	if (setProto) reflect.setPrototypeOf = function setPrototypeOf(target, proto) {
	  setProto.check(target, proto);
	  try {
	    setProto.set(target, proto);
	    return true;
	  } catch (e) {
	    return false;
	  }
	};

	$def($def.G, { Reflect: {} });

	$def($def.S + $def.F * buggyEnumerate, 'Reflect', {
	  // 26.1.5 Reflect.enumerate(target)
	  enumerate: function enumerate(target) {
	    return new Enumerate(assertObject(target));
	  }
	});

	$def($def.S, 'Reflect', reflect);

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5),
	    assertObject = __webpack_require__(17).obj;
	module.exports = function ownKeys(it) {
	  assertObject(it);
	  var keys = $.getNames(it),
	      getSymbols = $.getSymbols;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/domenic/Array.prototype.includes
	var $def = __webpack_require__(12),
	    $includes = __webpack_require__(18)(true);
	$def($def.P, 'Array', {
	  includes: function includes(el /*, fromIndex = 0 */) {
	    return $includes(this, el, arguments[1]);
	  }
	});
	__webpack_require__(53)('includes');

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/mathiasbynens/String.prototype.at
	'use strict';
	var $def = __webpack_require__(12),
	    $at = __webpack_require__(39)(true);
	$def($def.P, 'String', {
	  at: function at(pos) {
	    return $at(this, pos);
	  }
	});

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def = __webpack_require__(12),
	    $pad = __webpack_require__(77);
	$def($def.P, 'String', {
	  lpad: function lpad(n) {
	    return $pad(this, n, arguments[1], true);
	  }
	});

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.ecmascript.org/doku.php?id=strawman:string_padding
	var $ = __webpack_require__(5),
	    repeat = __webpack_require__(46);

	module.exports = function (that, minLength, fillChar, left) {
	  // 1. Let O be CheckObjectCoercible(this value).
	  // 2. Let S be ToString(O).
	  var S = String($.assertDefined(that));
	  // 4. If intMinLength is undefined, return S.
	  if (minLength === undefined) return S;
	  // 4. Let intMinLength be ToInteger(minLength).
	  var intMinLength = $.toInteger(minLength);
	  // 5. Let fillLen be the number of characters in S minus intMinLength.
	  var fillLen = intMinLength - S.length;
	  // 6. If fillLen < 0, then throw a RangeError exception.
	  // 7. If fillLen is +∞, then throw a RangeError exception.
	  if (fillLen < 0 || fillLen === Infinity) {
	    throw new RangeError('Cannot satisfy string length ' + minLength + ' for string: ' + S);
	  }
	  // 8. Let sFillStr be the string represented by fillStr.
	  // 9. If sFillStr is undefined, let sFillStr be a space character.
	  var sFillStr = fillChar === undefined ? ' ' : String(fillChar);
	  // 10. Let sFillVal be a String made of sFillStr, repeated until fillLen is met.
	  var sFillVal = repeat.call(sFillStr, Math.ceil(fillLen / sFillStr.length));
	  // truncate if we overflowed
	  if (sFillVal.length > fillLen) sFillVal = left ? sFillVal.slice(sFillVal.length - fillLen) : sFillVal.slice(0, fillLen);
	  // 11. Return a string made from sFillVal, followed by S.
	  // 11. Return a String made from S, followed by sFillVal.
	  return left ? sFillVal.concat(S) : S.concat(sFillVal);
	};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def = __webpack_require__(12),
	    $pad = __webpack_require__(77);
	$def($def.P, 'String', {
	  rpad: function rpad(n) {
	    return $pad(this, n, arguments[1], false);
	  }
	});

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/kangax/9698100
	var $def = __webpack_require__(12);
	$def($def.S, 'RegExp', {
	  escape: __webpack_require__(19)(/([\\\-[\]{}()*+?.,^$|])/g, '\\$1', true)
	});

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/WebReflection/9353781
	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12),
	    ownKeys = __webpack_require__(73);

	$def($def.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = $.toObject(object),
	        result = {};
	    $.each.call(ownKeys(O), function (key) {
	      $.setDesc(result, key, $.desc(0, $.getDesc(O, key)));
	    });
	    return result;
	  }
	});

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	// http://goo.gl/XkBrjD
	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12);
	function createObjectToArray(isEntries) {
	  return function (object) {
	    var O = $.toObject(object),
	        keys = $.getKeys(O),
	        length = keys.length,
	        i = 0,
	        result = Array(length),
	        key;
	    if (isEntries) while (length > i) result[i] = [key = keys[i++], O[key]];else while (length > i) result[i] = O[keys[i++]];
	    return result;
	  };
	}
	$def($def.S, 'Object', {
	  values: createObjectToArray(false),
	  entries: createObjectToArray(true)
	});

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	__webpack_require__(83)('Map');

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $def = __webpack_require__(12),
	    forOf = __webpack_require__(62);
	module.exports = function (NAME) {
	  $def($def.P, NAME, {
	    toJSON: function toJSON() {
	      var arr = [];
	      forOf(this, false, arr.push, arr);
	      return arr;
	    }
	  });
	};

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	__webpack_require__(83)('Set');

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	// JavaScript 1.6 / Strawman array statics shim
	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12),
	    $Array = $.core.Array || Array,
	    statics = {};
	function setStatics(keys, length) {
	  $.each.call(keys.split(','), function (key) {
	    if (length == undefined && key in $Array) statics[key] = $Array[key];else if (key in []) statics[key] = __webpack_require__(16)(Function.call, [][key], length);
	  });
	}
	setStatics('pop,reverse,shift,keys,values,entries', 1);
	setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
	setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' + 'reduce,reduceRight,copyWithin,fill,turn');
	$def($def.S, 'Array', statics);

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var $ = __webpack_require__(5),
	    $def = __webpack_require__(12),
	    invoke = __webpack_require__(14),
	    partial = __webpack_require__(87),
	    navigator = $.g.navigator,
	    MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	function wrap(set) {
	  return MSIE ? function (fn, time /*, ...args */) {
	    return set(invoke(partial, [].slice.call(arguments, 2), $.isFunction(fn) ? fn : Function(fn)), time);
	  } : set;
	}
	$def($def.G + $def.B + $def.F * MSIE, {
	  setTimeout: wrap($.g.setTimeout),
	  setInterval: wrap($.g.setInterval)
	});

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(5),
	    invoke = __webpack_require__(14),
	    assertFunction = __webpack_require__(17).fn;
	module.exports = function () {
	  var fn = assertFunction(this),
	      length = arguments.length,
	      pargs = Array(length),
	      i = 0,
	      _ = $.path._,
	      holder = false;
	  while (length > i) if ((pargs[i] = arguments[i++]) === _) holder = true;
	  return function () {
	    var that = this,
	        _length = arguments.length,
	        j = 0,
	        k = 0,
	        args;
	    if (!holder && !_length) return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if (holder) for (; length > j; j++) if (args[j] === _) args[j] = arguments[k++];
	    while (_length > k) args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};
	/* ...pargs */ /* ...args */

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var $def = __webpack_require__(12),
	    $task = __webpack_require__(63);
	$def($def.G + $def.B, {
	  setImmediate: $task.set,
	  clearImmediate: $task.clear
	});

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(52);
	var $ = __webpack_require__(5),
	    Iterators = __webpack_require__(40).Iterators,
	    ITERATOR = __webpack_require__(9)('iterator'),
	    ArrayValues = Iterators.Array,
	    NL = $.g.NodeList,
	    HTC = $.g.HTMLCollection,
	    NLProto = NL && NL.prototype,
	    HTCProto = HTC && HTC.prototype;
	if ($.FW) {
	  if (NL && !(ITERATOR in NLProto)) $.hide(NLProto, ITERATOR, ArrayValues);
	  if (HTC && !(ITERATOR in HTCProto)) $.hide(HTCProto, ITERATOR, ArrayValues);
	}
	Iterators.NodeList = Iterators.HTMLCollection = ArrayValues;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	!(function (global) {
	  "use strict";

	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var iteratorSymbol = typeof Symbol === "function" && Symbol.iterator || "@@iterator";

	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }

	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided, then outerFn.prototype instanceof Generator.
	    var generator = Object.create((outerFn || Generator).prototype);

	    generator._invoke = makeInvokeMethod(innerFn, self || null, new Context(tryLocsList || []));

	    return generator;
	  }
	  runtime.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = "GeneratorFunction";

	  runtime.isGeneratorFunction = function (genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor ? ctor === GeneratorFunction ||
	    // For the native GeneratorFunction constructor, the best we can
	    // do is to check its .name property.
	    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
	  };

	  runtime.mark = function (genFun) {
	    genFun.__proto__ = GeneratorFunctionPrototype;
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
	    return new Promise(function (resolve, reject) {
	      var generator = wrap(innerFn, outerFn, self, tryLocsList);

	      var step = function step(method, arg) {
	        var record = tryCatch(generator[method], generator, arg);
	        if (record.type === "throw") {
	          reject(record.arg);
	          return;
	        }

	        var info = record.arg;
	        if (info.done) {
	          resolve(info.value);
	        } else {
	          Promise.resolve(info.value).then(callNext, callThrow);
	        }
	      };

	      if (typeof process !== "undefined" && process.domain) {
	        step = process.domain.bind(step);
	      }

	      var callNext = step.bind(generator, "next");
	      var callThrow = step.bind(generator, "throw");

	      callNext();
	    });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;

	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }

	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }

	          var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

	          if (record.type === "throw") {
	            context.delegate = null;

	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }

	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;

	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }

	          context.delegate = null;
	        }

	        if (method === "next") {
	          if (state === GenStateSuspendedYield) {
	            context.sent = arg;
	          } else {
	            delete context.sent;
	          }
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }

	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }
	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

	          var info = {
	            value: record.arg,
	            done: context.done
	          };

	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }

	  function defineGeneratorMethod(method) {
	    Gp[method] = function (arg) {
	      return this._invoke(method, arg);
	    };
	  }
	  defineGeneratorMethod("next");
	  defineGeneratorMethod("throw");
	  defineGeneratorMethod("return");

	  Gp[iteratorSymbol] = function () {
	    return this;
	  };

	  Gp.toString = function () {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset();
	  }

	  runtime.keys = function (object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1,
	            next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;

	  function doneResult() {
	    return { value: undefined, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function reset() {
	      this.prev = 0;
	      this.next = 0;
	      this.sent = undefined;
	      this.done = false;
	      this.delegate = null;

	      this.tryEntries.forEach(resetTryEntry);

	      // Pre-initialize at least 20 temporary variables to enable hidden
	      // class optimizations for simple generators.
	      for (var tempIndex = 0, tempName; hasOwn.call(this, tempName = "t" + tempIndex) || tempIndex < 20; ++tempIndex) {
	        this[tempName] = null;
	      }
	    },

	    stop: function stop() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function dispatchException(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function abrupt(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }

	      return ContinueSentinel;
	    },

	    complete: function complete(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" || record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },

	    finish: function finish(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function _catch(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      return ContinueSentinel;
	    }
	  };
	})(
	// Among the various tricks for obtaining a reference to the global
	// object, this seems to be the most reliable technique that does not
	// use indirect eval (which violates Content Security Policy).
	typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(91)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	// TODO(shtylman)
	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

	See the License for the specific language governing permissions and
	limitations under the License.
	***************************************************************************** */
	"use strict";
	var Reflect;
	(function (Reflect) {
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
	    var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    var __Metadata__ = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param targetKey (Optional) The property key to decorate.
	      * @param targetDescriptor (Optional) The property descriptor for the target key
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     C = Reflect.decorate(decoratorsArray, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(C, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, C, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(C, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(C.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, C.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(C.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, targetKey, targetDescriptor) {
	        if (!IsUndefined(targetDescriptor)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            } else if (!IsObject(target)) {
	                throw new TypeError();
	            } else if (IsUndefined(targetKey)) {
	                throw new TypeError();
	            } else if (!IsObject(targetDescriptor)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
	        } else if (!IsUndefined(targetKey)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            } else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
	        } else {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            } else if (!IsConstructor(target)) {
	                throw new TypeError();
	            }
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class C {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, targetKey) {
	            if (!IsUndefined(targetKey)) {
	                if (!IsObject(target)) {
	                    throw new TypeError();
	                }
	                targetKey = ToPropertyKey(targetKey);
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	            } else {
	                if (!IsConstructor(target)) {
	                    throw new TypeError();
	                }
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
	            }
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param targetKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        } else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        } else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        } else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        } else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        } else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        } else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryMetadataKeys(target, targetKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        } else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryOwnMetadataKeys(target, targetKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        } else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        if (IsUndefined(metadataMap)) {
	            return false;
	        }
	        if (!metadataMap["delete"](metadataKey)) {
	            return false;
	        }
	        if (metadataMap.size > 0) {
	            return true;
	        }
	        var targetMetadata = __Metadata__.get(target);
	        targetMetadata["delete"](targetKey);
	        if (targetMetadata.size > 0) {
	            return true;
	        }
	        __Metadata__["delete"](target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated)) {
	                if (!IsConstructor(decorated)) {
	                    throw new TypeError();
	                }
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated)) {
	                if (!IsObject(decorated)) {
	                    throw new TypeError();
	                }
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            decorator(target, propertyKey);
	        }
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-
	    function GetOrCreateMetadataMap(target, targetKey, create) {
	        var targetMetadata = __Metadata__.get(target);
	        if (!targetMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            targetMetadata = new _Map();
	            __Metadata__.set(target, targetMetadata);
	        }
	        var keyMetadata = targetMetadata.get(targetKey);
	        if (!keyMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            keyMetadata = new _Map();
	            targetMetadata.set(targetKey, keyMetadata);
	        }
	        return keyMetadata;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	    function OrdinaryHasMetadata(_x, _x2, _x3) {
	        var _again = true;

	        _function: while (_again) {
	            var MetadataKey = _x,
	                O = _x2,
	                P = _x3;
	            hasOwn = parent = undefined;
	            _again = false;

	            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	            if (hasOwn) {
	                return true;
	            }
	            var parent = GetPrototypeOf(O);
	            if (parent !== null) {
	                _x = MetadataKey;
	                _x2 = parent;
	                _x3 = P;
	                _again = true;
	                continue _function;
	            }
	            return false;
	        }
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return false;
	        }
	        return Boolean(metadataMap.has(MetadataKey));
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	    function OrdinaryGetMetadata(_x4, _x5, _x6) {
	        var _again2 = true;

	        _function2: while (_again2) {
	            var MetadataKey = _x4,
	                O = _x5,
	                P = _x6;
	            hasOwn = parent = undefined;
	            _again2 = false;

	            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	            if (hasOwn) {
	                return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	            }
	            var parent = GetPrototypeOf(O);
	            if (parent !== null) {
	                _x4 = MetadataKey;
	                _x5 = parent;
	                _x6 = P;
	                _again2 = true;
	                continue _function2;
	            }
	            return undefined;
	        }
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return undefined;
	        }
	        return metadataMap.get(MetadataKey);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = GetPrototypeOf(O);
	        if (parent === null) {
	            return ownKeys;
	        }
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0) {
	            return ownKeys;
	        }
	        if (ownKeys.length <= 0) {
	            return parentKeys;
	        }
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0; _i < ownKeys.length; _i++) {
	            var key = ownKeys[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0; _a < parentKeys.length; _a++) {
	            var key = parentKeys[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-
	    function OrdinaryOwnMetadataKeys(target, targetKey) {
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        var keys = [];
	        if (metadataMap) {
	            metadataMap.forEach(function (_, key) {
	                return keys.push(key);
	            });
	        }
	        return keys;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	    function IsArray(x) {
	        return Array.isArray(x);
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	    function IsConstructor(x) {
	        return typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	    function ToPropertyKey(value) {
	        if (IsSymbol(value)) {
	            return value;
	        }
	        return String(value);
	    }
	    function GetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype) {
	            return proto;
	        }
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype) {
	            return proto;
	        }
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype) {
	            return proto;
	        }
	        // if the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function") {
	            return proto;
	        }
	        // if we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O) {
	            return proto;
	        }
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        function Map() {
	            this._keys = [];
	            this._values = [];
	            this._cache = cacheSentinel;
	        }
	        Map.prototype = Object.defineProperties({
	            has: function has(key) {
	                if (key === this._cache) {
	                    return true;
	                }
	                if (this._find(key) >= 0) {
	                    this._cache = key;
	                    return true;
	                }
	                return false;
	            },
	            get: function get(key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._cache = key;
	                    return this._values[index];
	                }
	                return undefined;
	            },
	            set: function set(key, value) {
	                this["delete"](key);
	                this._keys.push(key);
	                this._values.push(value);
	                this._cache = key;
	                return this;
	            },
	            "delete": function _delete(key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._keys.splice(index, 1);
	                    this._values.splice(index, 1);
	                    this._cache = cacheSentinel;
	                    return true;
	                }
	                return false;
	            },
	            clear: function clear() {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cache = cacheSentinel;
	            },
	            forEach: function forEach(callback, thisArg) {
	                var size = this.size;
	                for (var i = 0; i < size; ++i) {
	                    var key = this._keys[i];
	                    var value = this._values[i];
	                    this._cache = key;
	                    callback.call(this, value, key, this);
	                }
	            },
	            _find: function _find(key) {
	                var keys = this._keys;
	                var size = keys.length;
	                for (var i = 0; i < size; ++i) {
	                    if (keys[i] === key) {
	                        return i;
	                    }
	                }
	                return -1;
	            }
	        }, {
	            size: {
	                get: function () {
	                    return this._keys.length;
	                },
	                configurable: true,
	                enumerable: true
	            }
	        });
	        return Map;
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        var cacheSentinel = {};
	        function Set() {
	            this._map = new _Map();
	        }
	        Set.prototype = Object.defineProperties({
	            has: function has(value) {
	                return this._map.has(value);
	            },
	            add: function add(value) {
	                this._map.set(value, value);
	                return this;
	            },
	            "delete": function _delete(value) {
	                return this._map["delete"](value);
	            },
	            clear: function clear() {
	                this._map.clear();
	            },
	            forEach: function forEach(callback, thisArg) {
	                this._map.forEach(callback, thisArg);
	            }
	        }, {
	            size: {
	                get: function () {
	                    return this._map.length;
	                },
	                configurable: true,
	                enumerable: true
	            }
	        });
	        return Set;
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var isNode = typeof global !== "undefined" && typeof module === "object" && typeof module.exports === "object" && "function" === "function";
	        var nodeCrypto = isNode && __webpack_require__(93);
	        var hasOwn = Object.prototype.hasOwnProperty;
	        var keys = {};
	        var rootKey = CreateUniqueKey();
	        function WeakMap() {
	            this._key = CreateUniqueKey();
	        }
	        WeakMap.prototype = {
	            has: function has(target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return this._key in table;
	                }
	                return false;
	            },
	            get: function get(target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return table[this._key];
	                }
	                return undefined;
	            },
	            set: function set(target, value) {
	                var table = GetOrCreateWeakMapTable(target, true);
	                table[this._key] = value;
	                return this;
	            },
	            "delete": function _delete(target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table && this._key in table) {
	                    return delete table[this._key];
	                }
	                return false;
	            },
	            clear: function clear() {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            }
	        };
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i) {
	                buffer[i] = Math.random() * 255 | 0;
	            }
	        }
	        function GenRandomBytes(size) {
	            if (nodeCrypto) {
	                var data = nodeCrypto.randomBytes(size);
	                return data;
	            } else if (typeof Uint8Array === "function") {
	                var data = new Uint8Array(size);
	                if (typeof crypto !== "undefined") {
	                    crypto.getRandomValues(data);
	                } else if (typeof msCrypto !== "undefined") {
	                    msCrypto.getRandomValues(data);
	                } else {
	                    FillRandomBytes(data, size);
	                }
	                return data;
	            } else {
	                var data = new Array(size);
	                FillRandomBytes(data, size);
	                return data;
	            }
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 79 | 64;
	            data[8] = data[8] & 191 | 128;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8) {
	                    result += "-";
	                }
	                if (byte < 16) {
	                    result += "0";
	                }
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	        function CreateUniqueKey() {
	            var key;
	            do {
	                key = "@@WeakMap@@" + CreateUUID();
	            } while (hasOwn.call(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create) {
	                    return undefined;
	                }
	                Object.defineProperty(target, rootKey, { value: Object.create(null) });
	            }
	            return target[rootKey];
	        }
	        return WeakMap;
	    }
	    // hook global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    __global.Reflect[p] = Reflect[p];
	                }
	            }
	        } else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" ? self : typeof global !== "undefined" ? global : Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(98);

	function error() {
	  var m = [].slice.call(arguments).join(' ');
	  throw new Error([m, 'we accept pull requests', 'http://github.com/dominictarr/crypto-browserify'].join('\n'));
	}

	exports.createHash = __webpack_require__(100);

	exports.createHmac = __webpack_require__(112);

	exports.randomBytes = function (size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)));
	    } catch (err) {
	      callback(err);
	    }
	  } else {
	    return new Buffer(rng(size));
	  }
	};

	function each(a, f) {
	  for (var i in a) f(a[i], i);
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160'];
	};

	var p = __webpack_require__(113)(exports);
	exports.pbkdf2 = p.pbkdf2;
	exports.pbkdf2Sync = p.pbkdf2Sync;

	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials', 'createCipher', 'createCipheriv', 'createDecipher', 'createDecipheriv', 'createSign', 'createVerify', 'createDiffieHellman'], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet');
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94).Buffer))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var base64 = __webpack_require__(95);
	var ieee754 = __webpack_require__(96);
	var isArray = __webpack_require__(97);

	exports.Buffer = Buffer;
	exports.SlowBuffer = SlowBuffer;
	exports.INSPECT_MAX_BYTES = 50;
	Buffer.poolSize = 8192; // not used by this implementation

	var kMaxLength = 1073741823;
	var rootParent = {};

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  try {
	    var buf = new ArrayBuffer(0);
	    var arr = new Uint8Array(buf);
	    arr.foo = function () {
	      return 42;
	    };
	    return arr.foo() === 42 && // typed array instances can be augmented
	    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	    new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	    ;
	  } catch (e) {
	    return false;
	  }
	})();

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer(arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1]);
	    return new Buffer(arg);
	  }

	  this.length = 0;
	  this.parent = undefined;

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg);
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8');
	  }

	  // Unusual.
	  return fromObject(this, arg);
	}

	function fromNumber(that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0;
	    }
	  }
	  return that;
	}

	function fromString(that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0;
	  that = allocate(that, length);

	  that.write(string, encoding);
	  return that;
	}

	function fromObject(that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object);

	  if (isArray(object)) return fromArray(that, object);

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string');
	  }

	  if (typeof ArrayBuffer !== 'undefined' && object.buffer instanceof ArrayBuffer) {
	    return fromTypedArray(that, object);
	  }

	  if (object.length) return fromArrayLike(that, object);

	  return fromJsonObject(that, object);
	}

	function fromBuffer(that, buffer) {
	  var length = checked(buffer.length) | 0;
	  that = allocate(that, length);
	  buffer.copy(that, 0, 0, length);
	  return that;
	}

	function fromArray(that, array) {
	  var length = checked(array.length) | 0;
	  that = allocate(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that;
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray(that, array) {
	  var length = checked(array.length) | 0;
	  that = allocate(that, length);
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that;
	}

	function fromArrayLike(that, array) {
	  var length = checked(array.length) | 0;
	  that = allocate(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that;
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject(that, object) {
	  var array;
	  var length = 0;

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data;
	    length = checked(array.length) | 0;
	  }
	  that = allocate(that, length);

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that;
	}

	function allocate(that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length));
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length;
	    that._isBuffer = true;
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1;
	  if (fromPool) that.parent = rootParent;

	  return that;
	}

	function checked(length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength.toString(16) + ' bytes');
	  }
	  return length | 0;
	}

	function SlowBuffer(subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding);

	  var buf = new Buffer(subject, encoding);
	  delete buf.parent;
	  return buf;
	}

	Buffer.isBuffer = function isBuffer(b) {
	  return !!(b != null && b._isBuffer);
	};

	Buffer.compare = function compare(a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers');
	  }

	  if (a === b) return 0;

	  var x = a.length;
	  var y = b.length;

	  var i = 0;
	  var len = Math.min(x, y);
	  while (i < len) {
	    if (a[i] !== b[i]) break;

	    ++i;
	  }

	  if (i !== len) {
	    x = a[i];
	    y = b[i];
	  }

	  if (x < y) return -1;
	  if (y < x) return 1;
	  return 0;
	};

	Buffer.isEncoding = function isEncoding(encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true;
	    default:
	      return false;
	  }
	};

	Buffer.concat = function concat(list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.');

	  if (list.length === 0) {
	    return new Buffer(0);
	  } else if (list.length === 1) {
	    return list[0];
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length;
	    }
	  }

	  var buf = new Buffer(length);
	  var pos = 0;
	  for (i = 0; i < list.length; i++) {
	    var item = list[i];
	    item.copy(buf, pos);
	    pos += item.length;
	  }
	  return buf;
	};

	function byteLength(string, encoding) {
	  if (typeof string !== 'string') string = String(string);

	  if (string.length === 0) return 0;

	  switch (encoding || 'utf8') {
	    case 'ascii':
	    case 'binary':
	    case 'raw':
	      return string.length;
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return string.length * 2;
	    case 'hex':
	      return string.length >>> 1;
	    case 'utf8':
	    case 'utf-8':
	      return utf8ToBytes(string).length;
	    case 'base64':
	      return base64ToBytes(string).length;
	    default:
	      return string.length;
	  }
	}
	Buffer.byteLength = byteLength;

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined;
	Buffer.prototype.parent = undefined;

	// toString(encoding, start=0, end=buffer.length)
	Buffer.prototype.toString = function toString(encoding, start, end) {
	  var loweredCase = false;

	  start = start | 0;
	  end = end === undefined || end === Infinity ? this.length : end | 0;

	  if (!encoding) encoding = 'utf8';
	  if (start < 0) start = 0;
	  if (end > this.length) end = this.length;
	  if (end <= start) return '';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end);

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end);

	      case 'ascii':
	        return asciiSlice(this, start, end);

	      case 'binary':
	        return binarySlice(this, start, end);

	      case 'base64':
	        return base64Slice(this, start, end);

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end);

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.equals = function equals(b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
	  if (this === b) return true;
	  return Buffer.compare(this, b) === 0;
	};

	Buffer.prototype.inspect = function inspect() {
	  var str = '';
	  var max = exports.INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>';
	};

	Buffer.prototype.compare = function compare(b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
	  if (this === b) return 0;
	  return Buffer.compare(this, b);
	};

	Buffer.prototype.indexOf = function indexOf(val, byteOffset) {
	  if (byteOffset > 2147483647) byteOffset = 2147483647;else if (byteOffset < -2147483648) byteOffset = -2147483648;
	  byteOffset >>= 0;

	  if (this.length === 0) return -1;
	  if (byteOffset >= this.length) return -1;

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0);

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1; // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset);
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset);
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset);
	    }
	    return arrayIndexOf(this, [val], byteOffset);
	  }

	  function arrayIndexOf(arr, val, byteOffset) {
	    var foundIndex = -1;
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex;
	      } else {
	        foundIndex = -1;
	      }
	    }
	    return -1;
	  }

	  throw new TypeError('val must be string, number or Buffer');
	};

	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function get(offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.');
	  return this.readUInt8(offset);
	};

	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function set(v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.');
	  return this.writeUInt8(v, offset);
	};

	function hexWrite(buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string');

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) throw new Error('Invalid hex string');
	    buf[offset + i] = parsed;
	  }
	  return i;
	}

	function utf8Write(buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
	}

	function asciiWrite(buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length);
	}

	function binaryWrite(buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length);
	}

	function base64Write(buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length);
	}

	function ucs2Write(buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
	}

	Buffer.prototype.write = function write(string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0
	    // Buffer#write(string, encoding)
	    ;
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0
	    // Buffer#write(string, offset[, length][, encoding])
	    ;
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	    // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding;
	    encoding = offset;
	    offset = length | 0;
	    length = swap;
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds');
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length);

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length);

	      case 'ascii':
	        return asciiWrite(this, string, offset, length);

	      case 'binary':
	        return binaryWrite(this, string, offset, length);

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length);

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length);

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer.prototype.toJSON = function toJSON() {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  };
	};

	function base64Slice(buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf);
	  } else {
	    return base64.fromByteArray(buf.slice(start, end));
	  }
	}

	function utf8Slice(buf, start, end) {
	  var res = '';
	  var tmp = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 127) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);
	      tmp = '';
	    } else {
	      tmp += '%' + buf[i].toString(16);
	    }
	  }

	  return res + decodeUtf8Char(tmp);
	}

	function asciiSlice(buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 127);
	  }
	  return ret;
	}

	function binarySlice(buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret;
	}

	function hexSlice(buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i]);
	  }
	  return out;
	}

	function utf16leSlice(buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res;
	}

	Buffer.prototype.slice = function slice(start, end) {
	  var len = this.length;
	  start = ~ ~start;
	  end = end === undefined ? len : ~ ~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end));
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this;

	  return newBuf;
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset(offset, ext, length) {
	  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
	}

	Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 256)) {
	    val += this[offset + i] * mul;
	  }

	  return val;
	};

	Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 256)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val;
	};

	Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset];
	};

	Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | this[offset + 1] << 8;
	};

	Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] << 8 | this[offset + 1];
	};

	Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
	};

	Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
	};

	Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 256)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 128;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val;
	};

	Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 256)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 128;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val;
	};

	Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 128)) return this[offset];
	  return (255 - this[offset] + 1) * -1;
	};

	Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | this[offset + 1] << 8;
	  return val & 32768 ? val | 4294901760 : val;
	};

	Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | this[offset] << 8;
	  return val & 32768 ? val | 4294901760 : val;
	};

	Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
	};

	Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
	};

	Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754.read(this, offset, true, 23, 4);
	};

	Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754.read(this, offset, false, 23, 4);
	};

	Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754.read(this, offset, true, 52, 8);
	};

	Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754.read(this, offset, false, 52, 8);
	};

	function checkInt(buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance');
	  if (value > max || value < min) throw new RangeError('value is out of bounds');
	  if (offset + ext > buf.length) throw new RangeError('index out of range');
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 255;
	  while (++i < byteLength && (mul *= 256)) {
	    this[offset + i] = value / mul & 255;
	  }

	  return offset + byteLength;
	};

	Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 255;
	  while (--i >= 0 && (mul *= 256)) {
	    this[offset + i] = value / mul & 255;
	  }

	  return offset + byteLength;
	};

	Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = value;
	  return offset + 1;
	};

	function objectWriteUInt16(buf, value, offset, littleEndian) {
	  if (value < 0) value = 65535 + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value;
	    this[offset + 1] = value >>> 8;
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2;
	};

	Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 8;
	    this[offset + 1] = value;
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2;
	};

	function objectWriteUInt32(buf, value, offset, littleEndian) {
	  if (value < 0) value = 4294967295 + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = value >>> 24;
	    this[offset + 2] = value >>> 16;
	    this[offset + 1] = value >>> 8;
	    this[offset] = value;
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4;
	};

	Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value;
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4;
	};

	Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = value < 0 ? 1 : 0;
	  this[offset] = value & 255;
	  while (++i < byteLength && (mul *= 256)) {
	    this[offset + i] = (value / mul >> 0) - sub & 255;
	  }

	  return offset + byteLength;
	};

	Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = value < 0 ? 1 : 0;
	  this[offset + i] = value & 255;
	  while (--i >= 0 && (mul *= 256)) {
	    this[offset + i] = (value / mul >> 0) - sub & 255;
	  }

	  return offset + byteLength;
	};

	Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 255 + value + 1;
	  this[offset] = value;
	  return offset + 1;
	};

	Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value;
	    this[offset + 1] = value >>> 8;
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2;
	};

	Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 8;
	    this[offset + 1] = value;
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2;
	};

	Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value;
	    this[offset + 1] = value >>> 8;
	    this[offset + 2] = value >>> 16;
	    this[offset + 3] = value >>> 24;
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4;
	};

	Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
	  if (value < 0) value = 4294967295 + value + 1;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value;
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4;
	};

	function checkIEEE754(buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds');
	  if (offset + ext > buf.length) throw new RangeError('index out of range');
	  if (offset < 0) throw new RangeError('index out of range');
	}

	function writeFloat(buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4;
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert);
	};

	Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert);
	};

	function writeDouble(buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157e+308, -1.7976931348623157e+308);
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8;
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert);
	};

	Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert);
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy(target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0;
	  if (target.length === 0 || this.length === 0) return 0;

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds');
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
	  if (end < 0) throw new RangeError('sourceEnd out of bounds');

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;

	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart);
	  }

	  return len;
	};

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill(value, start, end) {
	  if (!value) value = 0;
	  if (!start) start = 0;
	  if (!end) end = this.length;

	  if (end < start) throw new RangeError('end < start');

	  // Fill 0 bytes; we're done
	  if (end === start) return;
	  if (this.length === 0) return;

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds');
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds');

	  var i;
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value;
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString());
	    var len = bytes.length;
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len];
	    }
	  }

	  return this;
	};

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer() {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return new Buffer(this).buffer;
	    } else {
	      var buf = new Uint8Array(this.length);
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i];
	      }
	      return buf.buffer;
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser');
	  }
	};

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype;

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment(arr) {
	  arr.constructor = Buffer;
	  arr._isBuffer = true;

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set;

	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get;
	  arr.set = BP.set;

	  arr.write = BP.write;
	  arr.toString = BP.toString;
	  arr.toLocaleString = BP.toString;
	  arr.toJSON = BP.toJSON;
	  arr.equals = BP.equals;
	  arr.compare = BP.compare;
	  arr.indexOf = BP.indexOf;
	  arr.copy = BP.copy;
	  arr.slice = BP.slice;
	  arr.readUIntLE = BP.readUIntLE;
	  arr.readUIntBE = BP.readUIntBE;
	  arr.readUInt8 = BP.readUInt8;
	  arr.readUInt16LE = BP.readUInt16LE;
	  arr.readUInt16BE = BP.readUInt16BE;
	  arr.readUInt32LE = BP.readUInt32LE;
	  arr.readUInt32BE = BP.readUInt32BE;
	  arr.readIntLE = BP.readIntLE;
	  arr.readIntBE = BP.readIntBE;
	  arr.readInt8 = BP.readInt8;
	  arr.readInt16LE = BP.readInt16LE;
	  arr.readInt16BE = BP.readInt16BE;
	  arr.readInt32LE = BP.readInt32LE;
	  arr.readInt32BE = BP.readInt32BE;
	  arr.readFloatLE = BP.readFloatLE;
	  arr.readFloatBE = BP.readFloatBE;
	  arr.readDoubleLE = BP.readDoubleLE;
	  arr.readDoubleBE = BP.readDoubleBE;
	  arr.writeUInt8 = BP.writeUInt8;
	  arr.writeUIntLE = BP.writeUIntLE;
	  arr.writeUIntBE = BP.writeUIntBE;
	  arr.writeUInt16LE = BP.writeUInt16LE;
	  arr.writeUInt16BE = BP.writeUInt16BE;
	  arr.writeUInt32LE = BP.writeUInt32LE;
	  arr.writeUInt32BE = BP.writeUInt32BE;
	  arr.writeIntLE = BP.writeIntLE;
	  arr.writeIntBE = BP.writeIntBE;
	  arr.writeInt8 = BP.writeInt8;
	  arr.writeInt16LE = BP.writeInt16LE;
	  arr.writeInt16BE = BP.writeInt16BE;
	  arr.writeInt32LE = BP.writeInt32LE;
	  arr.writeInt32BE = BP.writeInt32BE;
	  arr.writeFloatLE = BP.writeFloatLE;
	  arr.writeFloatBE = BP.writeFloatBE;
	  arr.writeDoubleLE = BP.writeDoubleLE;
	  arr.writeDoubleBE = BP.writeDoubleBE;
	  arr.fill = BP.fill;
	  arr.inspect = BP.inspect;
	  arr.toArrayBuffer = BP.toArrayBuffer;

	  return arr;
	};

	var INVALID_BASE64_RE = /[^+\/0-9A-z\-]/g;

	function base64clean(str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return '';
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str;
	}

	function stringtrim(str) {
	  if (str.trim) return str.trim();
	  return str.replace(/^\s+|\s+$/g, '');
	}

	function toHex(n) {
	  if (n < 16) return '0' + n.toString(16);
	  return n.toString(16);
	}

	function utf8ToBytes(string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];
	  var i = 0;

	  for (; i < length; i++) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 55295 && codePoint < 57344) {
	      // last char was a lead
	      if (leadSurrogate) {
	        // 2 leads in a row
	        if (codePoint < 56320) {
	          if ((units -= 3) > -1) bytes.push(239, 191, 189);
	          leadSurrogate = codePoint;
	          continue;
	        } else {
	          // valid surrogate pair
	          codePoint = leadSurrogate - 55296 << 10 | codePoint - 56320 | 65536;
	          leadSurrogate = null;
	        }
	      } else {
	        // no lead yet

	        if (codePoint > 56319) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(239, 191, 189);
	          continue;
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(239, 191, 189);
	          continue;
	        } else {
	          // valid lead
	          leadSurrogate = codePoint;
	          continue;
	        }
	      }
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(239, 191, 189);
	      leadSurrogate = null;
	    }

	    // encode utf8
	    if (codePoint < 128) {
	      if ((units -= 1) < 0) break;
	      bytes.push(codePoint);
	    } else if (codePoint < 2048) {
	      if ((units -= 2) < 0) break;
	      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
	    } else if (codePoint < 65536) {
	      if ((units -= 3) < 0) break;
	      bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
	    } else if (codePoint < 2097152) {
	      if ((units -= 4) < 0) break;
	      bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
	    } else {
	      throw new Error('Invalid code point');
	    }
	  }

	  return bytes;
	}

	function asciiToBytes(str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 255);
	  }
	  return byteArray;
	}

	function utf16leToBytes(str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break;

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray;
	}

	function base64ToBytes(str) {
	  return base64.toByteArray(base64clean(str));
	}

	function blitBuffer(src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if (i + offset >= dst.length || i >= src.length) break;
	    dst[i + offset] = src[i];
	  }
	  return i;
	}

	function decodeUtf8Char(str) {
	  try {
	    return decodeURIComponent(str);
	  } catch (err) {
	    return String.fromCharCode(65533) // UTF 8 invalid char
	    ;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94).Buffer))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

		var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

		var PLUS = '+'.charCodeAt(0);
		var SLASH = '/'.charCodeAt(0);
		var NUMBER = '0'.charCodeAt(0);
		var LOWER = 'a'.charCodeAt(0);
		var UPPER = 'A'.charCodeAt(0);
		var PLUS_URL_SAFE = '-'.charCodeAt(0);
		var SLASH_URL_SAFE = '_'.charCodeAt(0);

		function decode(elt) {
			var code = elt.charCodeAt(0);
			if (code === PLUS || code === PLUS_URL_SAFE) return 62; // '+'
			if (code === SLASH || code === SLASH_URL_SAFE) return 63; // '/'
			if (code < NUMBER) return -1; //no match
			if (code < NUMBER + 10) return code - NUMBER + 26 + 26;
			if (code < UPPER + 26) return code - UPPER;
			if (code < LOWER + 26) return code - LOWER + 26;
		}

		function b64ToByteArray(b64) {
			var i, j, l, tmp, placeHolders, arr;

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4');
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length;
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0;

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders);

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length;

			var L = 0;

			function push(v) {
				arr[L++] = v;
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = decode(b64.charAt(i)) << 18 | decode(b64.charAt(i + 1)) << 12 | decode(b64.charAt(i + 2)) << 6 | decode(b64.charAt(i + 3));
				push((tmp & 16711680) >> 16);
				push((tmp & 65280) >> 8);
				push(tmp & 255);
			}

			if (placeHolders === 2) {
				tmp = decode(b64.charAt(i)) << 2 | decode(b64.charAt(i + 1)) >> 4;
				push(tmp & 255);
			} else if (placeHolders === 1) {
				tmp = decode(b64.charAt(i)) << 10 | decode(b64.charAt(i + 1)) << 4 | decode(b64.charAt(i + 2)) >> 2;
				push(tmp >> 8 & 255);
				push(tmp & 255);
			}

			return arr;
		}

		function uint8ToBase64(uint8) {
			var i,
			    extraBytes = uint8.length % 3,
			    // if we have 1 byte left, pad 2 bytes
			output = '',
			    temp,
			    length;

			function encode(num) {
				return lookup.charAt(num);
			}

			function tripletToBase64(num) {
				return encode(num >> 18 & 63) + encode(num >> 12 & 63) + encode(num >> 6 & 63) + encode(num & 63);
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
				output += tripletToBase64(temp);
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1];
					output += encode(temp >> 2);
					output += encode(temp << 4 & 63);
					output += '==';
					break;
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
					output += encode(temp >> 10);
					output += encode(temp >> 4 & 63);
					output += encode(temp << 2 & 63);
					output += '=';
					break;
			}

			return output;
		}

		exports.toByteArray = b64ToByteArray;
		exports.fromByteArray = uint8ToBase64;
	})(false ? this.base64js = {} : exports);

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e,
	      m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isLE ? nBytes - 1 : 0,
	      d = isLE ? -1 : 1,
	      s = buffer[offset + i];

	  i += d;

	  e = s & (1 << -nBits) - 1;
	  s >>= -nBits;
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : (s ? -1 : 1) * Infinity;
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e,
	      m,
	      c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
	      i = isLE ? 0 : nBytes - 1,
	      d = isLE ? 1 : -1,
	      s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {}

	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	};

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !!val && '[object Array]' == str.call(val);
	};

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function () {
	  var g = ('undefined' === typeof window ? global : window) || {};
	  _crypto = g.crypto || g.msCrypto || __webpack_require__(99);
	  module.exports = function (size) {
	    // Modern Browsers
	    if (_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */

	      _crypto.getRandomValues(bytes);
	      return bytes;
	    } else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size);
	    } else throw new Error('secure random number generation not supported by this browser\n' + 'use chrome, FireFox or Internet Explorer 11');
	  };
	})();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(94).Buffer))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* (ignored) */

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(101);

	var md5 = toConstructor(__webpack_require__(109));
	var rmd160 = toConstructor(__webpack_require__(111));

	function toConstructor(fn) {
	  return function () {
	    var buffers = [];
	    var m = {
	      update: function update(data, enc) {
	        if (!Buffer.isBuffer(data)) data = new Buffer(data, enc);
	        buffers.push(data);
	        return this;
	      },
	      digest: function digest(enc) {
	        var buf = Buffer.concat(buffers);
	        var r = fn(buf);
	        buffers = null;
	        return enc ? r.toString(enc) : r;
	      }
	    };
	    return m;
	  };
	}

	module.exports = function (alg) {
	  if ('md5' === alg) return new md5();
	  if ('rmd160' === alg) return new rmd160();
	  return createHash(alg);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94).Buffer))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var _exports = module.exports = function (alg) {
	  var Alg = _exports[alg];
	  if (!Alg) throw new Error(alg + ' is not supported (we accept pull requests)');
	  return new Alg();
	};

	var Buffer = __webpack_require__(94).Buffer;
	var Hash = __webpack_require__(102)(Buffer);

	_exports.sha1 = __webpack_require__(103)(Buffer, Hash);
	_exports.sha256 = __webpack_require__(107)(Buffer, Hash);
	_exports.sha512 = __webpack_require__(108)(Buffer, Hash);

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash(blockSize, finalSize) {
	    this._block = new Buffer(blockSize); //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize;
	    this._blockSize = blockSize;
	    this._len = 0;
	    this._s = 0;
	  }

	  Hash.prototype.init = function () {
	    this._s = 0;
	    this._len = 0;
	  };

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8";
	      data = new Buffer(data, enc);
	    }

	    var l = this._len += data.length;
	    var s = this._s = this._s || 0;
	    var f = 0;
	    var buffer = this._block;

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - s % this._blockSize);
	      var ch = t - f;

	      for (var i = 0; i < ch; i++) {
	        buffer[s % this._blockSize + i] = data[i + f];
	      }

	      s += ch;
	      f += ch;

	      if (s % this._blockSize === 0) {
	        this._update(buffer);
	      }
	    }
	    this._s = s;

	    return this;
	  };

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8;

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 128;

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1);

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block);
	      this._block.fill(0);
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4);

	    var hash = this._update(this._block) || this._hash();

	    return enc ? hash.toString(enc) : hash;
	  };

	  Hash.prototype._update = function () {
	    throw new Error("_update must be implemented by subclass");
	  };

	  return Hash;
	};

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(104).inherits;

	module.exports = function (Buffer, Hash) {

	  var A = 0 | 0;
	  var B = 4 | 0;
	  var C = 8 | 0;
	  var D = 12 | 0;
	  var E = 16 | 0;

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80);

	  var POOL = [];

	  function Sha1() {
	    if (POOL.length) return POOL.pop().init();

	    if (!(this instanceof Sha1)) return new Sha1();
	    this._w = W;
	    Hash.call(this, 16 * 4, 14 * 4);

	    this._h = null;
	    this.init();
	  }

	  inherits(Sha1, Hash);

	  Sha1.prototype.init = function () {
	    this._a = 1732584193;
	    this._b = 4023233417;
	    this._c = 2562383102;
	    this._d = 271733878;
	    this._e = 3285377520;

	    Hash.prototype.init.call(this);
	    return this;
	  };

	  Sha1.prototype._POOL = POOL;
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e;

	    a = _a = this._a;
	    b = _b = this._b;
	    c = _c = this._c;
	    d = _d = this._d;
	    e = _e = this._e;

	    var w = this._w;

	    for (var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j * 4) : rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);

	      var t = add(add(rol(a, 5), sha1_ft(j, b, c, d)), add(add(e, W), sha1_kt(j)));

	      e = d;
	      d = c;
	      c = rol(b, 30);
	      b = a;
	      a = t;
	    }

	    this._a = add(a, _a);
	    this._b = add(b, _b);
	    this._c = add(c, _c);
	    this._d = add(d, _d);
	    this._e = add(e, _e);
	  };

	  Sha1.prototype._hash = function () {
	    if (POOL.length < 100) POOL.push(this);
	    var H = new Buffer(20);
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a | 0, A);
	    H.writeInt32BE(this._b | 0, B);
	    H.writeInt32BE(this._c | 0, C);
	    H.writeInt32BE(this._d | 0, D);
	    H.writeInt32BE(this._e | 0, E);
	    return H;
	  };

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if (t < 20) return b & c | ~b & d;
	    if (t < 40) return b ^ c ^ d;
	    if (t < 60) return b & c | b & d | c & d;
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return x + y | 0
	    //lets see how this goes on testling.
	    //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	    //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	    //  return (msw << 16) | (lsw & 0xFFFF);
	    ;
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return num << cnt | num >>> 32 - cnt;
	  }

	  return Sha1;
	};

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function (f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function (x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s':
	        return String(args[i++]);
	      case '%d':
	        return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function (fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function () {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};

	var debugs = {};
	var debugEnviron;
	exports.debuglog = function (set) {
	  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function () {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function () {};
	    }
	  }
	  return debugs[set];
	};

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold': [1, 22],
	  'italic': [3, 23],
	  'underline': [4, 24],
	  'inverse': [7, 27],
	  'white': [37, 39],
	  'grey': [90, 39],
	  'black': [30, 39],
	  'blue': [34, 39],
	  'cyan': [36, 39],
	  'green': [32, 39],
	  'magenta': [35, 39],
	  'red': [31, 39],
	  'yellow': [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};

	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}

	function stylizeNoColor(str, styleType) {
	  return str;
	}

	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function (val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}

	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect && value && isFunction(value.inspect) &&
	  // Filter out the util module, it's inspect function is special
	  value.inspect !== exports.inspect &&
	  // Also filter out any prototype objects using the circular check.
	  !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '',
	      array = false,
	      braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function (key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}

	function formatPrimitive(ctx, value) {
	  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, '\\\'').replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value)) return ctx.stylize('' + value, 'number');
	  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value)) return ctx.stylize('null', 'null');
	}

	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}

	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function (key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
	    }
	  });
	  return output;
	}

	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function (line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function (line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, '\\\'').replace(/\\"/g, '"').replace(/(^"|"$)/g, '\'');
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}

	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function (prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
	  typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(105);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}

	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}

	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function () {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};

	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(106);

	exports._extend = function (origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(91)))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
	};

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function TempCtor() {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(104).inherits;

	module.exports = function (Buffer, Hash) {

	  var K = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];

	  var W = new Array(64);

	  function Sha256() {
	    this.init();

	    this._w = W; //new Array(64)

	    Hash.call(this, 16 * 4, 14 * 4);
	  }

	  inherits(Sha256, Hash);

	  Sha256.prototype.init = function () {

	    this._a = 1779033703 | 0;
	    this._b = 3144134277 | 0;
	    this._c = 1013904242 | 0;
	    this._d = 2773480762 | 0;
	    this._e = 1359893119 | 0;
	    this._f = 2600822924 | 0;
	    this._g = 528734635 | 0;
	    this._h = 1541459225 | 0;

	    this._len = this._s = 0;

	    return this;
	  };

	  function S(X, n) {
	    return X >>> n | X << 32 - n;
	  }

	  function R(X, n) {
	    return X >>> n;
	  }

	  function Ch(x, y, z) {
	    return x & y ^ ~x & z;
	  }

	  function Maj(x, y, z) {
	    return x & y ^ x & z ^ y & z;
	  }

	  function Sigma0256(x) {
	    return S(x, 2) ^ S(x, 13) ^ S(x, 22);
	  }

	  function Sigma1256(x) {
	    return S(x, 6) ^ S(x, 11) ^ S(x, 25);
	  }

	  function Gamma0256(x) {
	    return S(x, 7) ^ S(x, 18) ^ R(x, 3);
	  }

	  function Gamma1256(x) {
	    return S(x, 17) ^ S(x, 19) ^ R(x, 10);
	  }

	  Sha256.prototype._update = function (M) {

	    var W = this._w;
	    var a, b, c, d, e, f, g, h;
	    var T1, T2;

	    a = this._a | 0;
	    b = this._b | 0;
	    c = this._c | 0;
	    d = this._d | 0;
	    e = this._e | 0;
	    f = this._f | 0;
	    g = this._g | 0;
	    h = this._h | 0;

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16 ? M.readInt32BE(j * 4) : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16];

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w;

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g;g = f;f = e;e = d + T1;d = c;c = b;b = a;a = T1 + T2;
	    }

	    this._a = a + this._a | 0;
	    this._b = b + this._b | 0;
	    this._c = c + this._c | 0;
	    this._d = d + this._d | 0;
	    this._e = e + this._e | 0;
	    this._f = f + this._f | 0;
	    this._g = g + this._g | 0;
	    this._h = h + this._h | 0;
	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32);

	    H.writeInt32BE(this._a, 0);
	    H.writeInt32BE(this._b, 4);
	    H.writeInt32BE(this._c, 8);
	    H.writeInt32BE(this._d, 12);
	    H.writeInt32BE(this._e, 16);
	    H.writeInt32BE(this._f, 20);
	    H.writeInt32BE(this._g, 24);
	    H.writeInt32BE(this._h, 28);

	    return H;
	  };

	  return Sha256;
	};

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(104).inherits;

	module.exports = function (Buffer, Hash) {
	  var K = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];

	  var W = new Array(160);

	  function Sha512() {
	    this.init();
	    this._w = W;

	    Hash.call(this, 128, 112);
	  }

	  inherits(Sha512, Hash);

	  Sha512.prototype.init = function () {

	    this._a = 1779033703 | 0;
	    this._b = 3144134277 | 0;
	    this._c = 1013904242 | 0;
	    this._d = 2773480762 | 0;
	    this._e = 1359893119 | 0;
	    this._f = 2600822924 | 0;
	    this._g = 528734635 | 0;
	    this._h = 1541459225 | 0;

	    this._al = 4089235720 | 0;
	    this._bl = 2227873595 | 0;
	    this._cl = 4271175723 | 0;
	    this._dl = 1595750129 | 0;
	    this._el = 2917565137 | 0;
	    this._fl = 725511199 | 0;
	    this._gl = 4215389547 | 0;
	    this._hl = 327033209 | 0;

	    this._len = this._s = 0;

	    return this;
	  };

	  function S(X, Xl, n) {
	    return X >>> n | Xl << 32 - n;
	  }

	  function Ch(x, y, z) {
	    return x & y ^ ~x & z;
	  }

	  function Maj(x, y, z) {
	    return x & y ^ x & z ^ y & z;
	  }

	  Sha512.prototype._update = function (M) {

	    var W = this._w;
	    var a, b, c, d, e, f, g, h;
	    var al, bl, cl, dl, el, fl, gl, hl;

	    a = this._a | 0;
	    b = this._b | 0;
	    c = this._c | 0;
	    d = this._d | 0;
	    e = this._e | 0;
	    f = this._f | 0;
	    g = this._g | 0;
	    h = this._h | 0;

	    al = this._al | 0;
	    bl = this._bl | 0;
	    cl = this._cl | 0;
	    dl = this._dl | 0;
	    el = this._el | 0;
	    fl = this._fl | 0;
	    gl = this._gl | 0;
	    hl = this._hl | 0;

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2;

	      var Wi, Wil;

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4);
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4);
	      } else {
	        var x = W[j - 15 * 2];
	        var xl = W[j - 15 * 2 + 1];
	        var gamma0 = S(x, xl, 1) ^ S(x, xl, 8) ^ x >>> 7;
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7);

	        x = W[j - 2 * 2];
	        xl = W[j - 2 * 2 + 1];
	        var gamma1 = S(x, xl, 19) ^ S(xl, x, 29) ^ x >>> 6;
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6);

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7 = W[j - 7 * 2];
	        var Wi7l = W[j - 7 * 2 + 1];

	        var Wi16 = W[j - 16 * 2];
	        var Wi16l = W[j - 16 * 2 + 1];

	        Wil = gamma0l + Wi7l;
	        Wi = gamma0 + Wi7 + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
	        Wil = Wil + gamma1l;
	        Wi = Wi + gamma1 + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
	        Wil = Wil + Wi16l;
	        Wi = Wi + Wi16 + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);

	        W[j] = Wi;
	        W[j + 1] = Wil;
	      }

	      var maj = Maj(a, b, c);
	      var majl = Maj(al, bl, cl);

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7);
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7);
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9);
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9);

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j];
	      var Kil = K[j + 1];

	      var ch = Ch(e, f, g);
	      var chl = Ch(el, fl, gl);

	      var t1l = hl + sigma1l;
	      var t1 = h + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
	      t1l = t1l + chl;
	      t1 = t1 + ch + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
	      t1l = t1l + Kil;
	      t1 = t1 + Ki + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
	      t1l = t1l + Wil;
	      t1 = t1 + Wi + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl;
	      var t2 = sigma0h + maj + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);

	      h = g;
	      hl = gl;
	      g = f;
	      gl = fl;
	      f = e;
	      fl = el;
	      el = dl + t1l | 0;
	      e = d + t1 + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
	      d = c;
	      dl = cl;
	      c = b;
	      cl = bl;
	      b = a;
	      bl = al;
	      al = t1l + t2l | 0;
	      a = t1 + t2 + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
	    }

	    this._al = this._al + al | 0;
	    this._bl = this._bl + bl | 0;
	    this._cl = this._cl + cl | 0;
	    this._dl = this._dl + dl | 0;
	    this._el = this._el + el | 0;
	    this._fl = this._fl + fl | 0;
	    this._gl = this._gl + gl | 0;
	    this._hl = this._hl + hl | 0;

	    this._a = this._a + a + (this._al >>> 0 < al >>> 0 ? 1 : 0) | 0;
	    this._b = this._b + b + (this._bl >>> 0 < bl >>> 0 ? 1 : 0) | 0;
	    this._c = this._c + c + (this._cl >>> 0 < cl >>> 0 ? 1 : 0) | 0;
	    this._d = this._d + d + (this._dl >>> 0 < dl >>> 0 ? 1 : 0) | 0;
	    this._e = this._e + e + (this._el >>> 0 < el >>> 0 ? 1 : 0) | 0;
	    this._f = this._f + f + (this._fl >>> 0 < fl >>> 0 ? 1 : 0) | 0;
	    this._g = this._g + g + (this._gl >>> 0 < gl >>> 0 ? 1 : 0) | 0;
	    this._h = this._h + h + (this._hl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
	  };

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64);

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset);
	      H.writeInt32BE(l, offset + 4);
	    }

	    writeInt64BE(this._a, this._al, 0);
	    writeInt64BE(this._b, this._bl, 8);
	    writeInt64BE(this._c, this._cl, 16);
	    writeInt64BE(this._d, this._dl, 24);
	    writeInt64BE(this._e, this._el, 32);
	    writeInt64BE(this._f, this._fl, 40);
	    writeInt64BE(this._g, this._gl, 48);
	    writeInt64BE(this._h, this._hl, 56);

	    return H;
	  };

	  return Sha512;
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(110);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len) {
	  /* append padding */
	  x[len >> 5] |= 128 << len % 32;
	  x[(len + 64 >>> 9 << 4) + 14] = len;

	  var a = 1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d = 271733878;

	  for (var i = 0; i < x.length; i += 16) {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
	    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
	    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
	    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
	    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
	    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
	    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

	    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
	    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
	    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
	    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
	    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
	    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
	    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
	    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
	    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
	    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
	    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
	    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
	    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
	    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
	    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
	    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
	    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
	    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
	    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
	    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
	    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
	    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
	    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
	    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
	    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
	    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
	    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);
	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t) {
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
	}
	function md5_ff(a, b, c, d, x, s, t) {
	  return md5_cmn(b & c | ~b & d, a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t) {
	  return md5_cmn(b & d | c & ~d, a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t) {
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t) {
	  return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y) {
	  var lsw = (x & 65535) + (y & 65535);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return msw << 16 | lsw & 65535;
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt) {
	  return num << cnt | num >>> 32 - cnt;
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize);zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if (buf.length % intSize !== 0) {
	    var len = buf.length + (intSize - buf.length % intSize);
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94).Buffer))

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160;

	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
	var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
	var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
	var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

	var hl = [0, 1518500249, 1859775393, 2400959708, 2840853838];
	var hr = [1352829926, 1548603684, 1836072691, 2053994217, 0];

	var bytesToWords = function bytesToWords(bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << 24 - b % 32;
	  }
	  return words;
	};

	var wordsToBytes = function wordsToBytes(words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push(words[b >>> 5] >>> 24 - b % 32 & 255);
	  }
	  return bytes;
	};

	var processBlock = function processBlock(H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = al + M[offset + zl[i]] | 0;
	    if (i < 16) {
	      t += f1(bl, cl, dl) + hl[0];
	    } else if (i < 32) {
	      t += f2(bl, cl, dl) + hl[1];
	    } else if (i < 48) {
	      t += f3(bl, cl, dl) + hl[2];
	    } else if (i < 64) {
	      t += f4(bl, cl, dl) + hl[3];
	    } else {
	      // if (i<80) {
	      t += f5(bl, cl, dl) + hl[4];
	    }
	    t = t | 0;
	    t = rotl(t, sl[i]);
	    t = t + el | 0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = ar + M[offset + zr[i]] | 0;
	    if (i < 16) {
	      t += f5(br, cr, dr) + hr[0];
	    } else if (i < 32) {
	      t += f4(br, cr, dr) + hr[1];
	    } else if (i < 48) {
	      t += f3(br, cr, dr) + hr[2];
	    } else if (i < 64) {
	      t += f2(br, cr, dr) + hr[3];
	    } else {
	      // if (i<80) {
	      t += f1(br, cr, dr) + hr[4];
	    }
	    t = t | 0;
	    t = rotl(t, sr[i]);
	    t = t + er | 0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t = H[1] + cl + dr | 0;
	  H[1] = H[2] + dl + er | 0;
	  H[2] = H[3] + el + ar | 0;
	  H[3] = H[4] + al + br | 0;
	  H[4] = H[0] + bl + cr | 0;
	  H[0] = t;
	};

	function f1(x, y, z) {
	  return x ^ y ^ z;
	}

	function f2(x, y, z) {
	  return x & y | ~x & z;
	}

	function f3(x, y, z) {
	  return (x | ~y) ^ z;
	}

	function f4(x, y, z) {
	  return x & z | y & ~z;
	}

	function f5(x, y, z) {
	  return x ^ (y | ~z);
	}

	function rotl(x, n) {
	  return x << n | x >>> 32 - n;
	}

	function ripemd160(message) {
	  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];

	  if (typeof message == 'string') message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
	  m[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;

	  for (var i = 0; i < m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	    // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94).Buffer))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(100);

	var zeroBuffer = new Buffer(128);
	zeroBuffer.fill(0);

	module.exports = Hmac;

	function Hmac(alg, key) {
	  if (!(this instanceof Hmac)) return new Hmac(alg, key);
	  this._opad = opad;
	  this._alg = alg;

	  var blocksize = alg === 'sha512' ? 128 : 64;

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key;

	  if (key.length > blocksize) {
	    key = createHash(alg).update(key).digest();
	  } else if (key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize);
	  }

	  var ipad = this._ipad = new Buffer(blocksize);
	  var opad = this._opad = new Buffer(blocksize);

	  for (var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 54;
	    opad[i] = key[i] ^ 92;
	  }

	  this._hash = createHash(alg).update(ipad);
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc);
	  return this;
	};

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest();
	  return createHash(this._alg).update(this._opad).update(h).digest(enc);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94).Buffer))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(114);

	module.exports = function (crypto, exports) {
	  exports = exports || {};

	  var exported = pbkdf2Export(crypto);

	  exports.pbkdf2 = exported.pbkdf2;
	  exports.pbkdf2Sync = exported.pbkdf2Sync;

	  return exports;
	};

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function (crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest;
	      digest = undefined;
	    }

	    if ('function' !== typeof callback) throw new Error('No callback provided to pbkdf2');

	    setTimeout(function () {
	      var result;

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest);
	      } catch (e) {
	        return callback(e);
	      }

	      callback(undefined, result);
	    });
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations) throw new TypeError('Iterations not a number');

	    if (iterations < 0) throw new TypeError('Bad iterations');

	    if ('number' !== typeof keylen) throw new TypeError('Key length not a number');

	    if (keylen < 0) throw new TypeError('Bad key length');

	    digest = digest || 'sha1';

	    if (!Buffer.isBuffer(password)) password = new Buffer(password);
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt);

	    var hLen,
	        l = 1,
	        r,
	        T;
	    var DK = new Buffer(keylen);
	    var block1 = new Buffer(salt.length + 4);
	    salt.copy(block1, 0, 0, salt.length);

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length);

	      var U = crypto.createHmac(digest, password).update(block1).digest();

	      if (!hLen) {
	        hLen = U.length;
	        T = new Buffer(hLen);
	        l = Math.ceil(keylen / hLen);
	        r = keylen - (l - 1) * hLen;

	        if (keylen > (Math.pow(2, 32) - 1) * hLen) throw new TypeError('keylen exceeds maximum length');
	      }

	      U.copy(T, 0, 0, hLen);

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest();

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k];
	        }
	      }

	      var destPos = (i - 1) * hLen;
	      var len = i == l ? r : hLen;
	      T.copy(DK, destPos, 0, len);
	    }

	    return DK;
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(94).Buffer))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	// DON'T reference this file in the source. Only in demos.
	// export * from 'ionic/components/action-menu/action-menu'
	// export * from 'ionic/components/alert/alert'

	var _ionicComponentsAsideAside = __webpack_require__(266);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsAsideAside));

	var _ionicComponentsButtonButton = __webpack_require__(274);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsButtonButton));

	var _ionicComponentsCheckboxCheckbox = __webpack_require__(275);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsCheckboxCheckbox));

	var _ionicComponentsContentContent = __webpack_require__(276);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsContentContent));

	var _ionicComponentsIconIcon = __webpack_require__(278);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsIconIcon));

	var _ionicComponentsItemItem = __webpack_require__(279);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsItemItem));

	var _ionicComponentsFormForm = __webpack_require__(282);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsFormForm));

	var _ionicComponentsFormInputInput = __webpack_require__(283);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsFormInputInput));

	var _ionicComponentsFormLabelLabel = __webpack_require__(284);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsFormLabelLabel));

	// export * from 'ionic/components/layout/layout'

	var _ionicComponentsListList = __webpack_require__(285);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsListList));

	var _ionicComponentsNavNav = __webpack_require__(116);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsNavNav));

	var _ionicComponentsNavNavController = __webpack_require__(198);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsNavNavController));

	var _ionicComponentsNavNavItem = __webpack_require__(197);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsNavNavItem));

	// export * from 'ionic/components/nav/decorators'

	var _ionicComponentsSlidesSlides = __webpack_require__(286);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsSlidesSlides));

	var _ionicComponentsRadioRadio = __webpack_require__(287);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsRadioRadio));

	// export * from 'ionic/components/search-bar/search-bar'
	// export * from 'ionic/components/split-view/split-view'

	var _ionicComponentsSegmentSegment = __webpack_require__(288);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsSegmentSegment));

	var _ionicComponentsSwitchSwitch = __webpack_require__(289);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsSwitchSwitch));

	var _ionicComponentsTabsTabs = __webpack_require__(290);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsTabsTabs));

	var _ionicComponentsTabsTab = __webpack_require__(291);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsTabsTab));

	var _ionicComponentsToolbarToolbar = __webpack_require__(292);

	_defaults(exports, _interopRequireWildcard(_ionicComponentsToolbarToolbar));

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _angular2SrcCoreAnnotations_implVisibility = __webpack_require__(117);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _angular2SrcCoreCompilerElement_ref = __webpack_require__(162);

	var _angular2SrcCoreCompilerDynamic_component_loader = __webpack_require__(166);

	var _angular2Di = __webpack_require__(167);

	var _angular2SrcCoreCompilerView_container_ref = __webpack_require__(185);

	var _navBase = __webpack_require__(192);

	var _toolbarToolbarContainer = __webpack_require__(199);

	var Nav = (function (_NavBase) {
	  function Nav(elementRef, loader, injector) {
	    _classCallCheck(this, _Nav);

	    _get(Object.getPrototypeOf(_Nav.prototype), 'constructor', this).call(this, loader, injector);
	    this.domElement = elementRef.domElement;
	  }

	  _inherits(Nav, _NavBase);

	  var _Nav = Nav;

	  _createClass(_Nav, [{
	    key: 'width',
	    value: function width() {
	      return this.domElement.offsetWidth;
	    }
	  }]);

	  Nav = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n    <header class="toolbar-container">\n      <template header-anchor></template>\n    </header>\n    <section class="nav-item-container">\n      <template content-anchor></template>\n    </section>\n  ',
	    directives: [HeaderAnchor, ContentAnchor, _toolbarToolbarContainer.ToolbarContainer]
	  })(Nav) || Nav;
	  Nav = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-nav',
	    properties: {
	      initial: 'initial'
	    }
	  })(Nav) || Nav;
	  return Nav;
	})(_navBase.NavBase);

	exports.Nav = Nav;
	Reflect.defineMetadata('design:paramtypes', [_angular2SrcCoreCompilerElement_ref.ElementRef, _angular2SrcCoreCompilerDynamic_component_loader.DynamicComponentLoader, _angular2Di.Injector], Nav);

	var HeaderAnchor = (function () {
	  function HeaderAnchor(nav, viewContainerRef) {
	    _classCallCheck(this, _HeaderAnchor);

	    nav.headerContainerRef = viewContainerRef;
	  }

	  var _HeaderAnchor = HeaderAnchor;
	  HeaderAnchor = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: '[header-anchor]'
	  })(HeaderAnchor) || HeaderAnchor;
	  return HeaderAnchor;
	})();

	(0, _angular2SrcCoreAnnotations_implVisibility.Ancestor)()(HeaderAnchor, null, 0);
	Reflect.defineMetadata('design:paramtypes', [Nav, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef], HeaderAnchor);

	var ContentAnchor = (function () {
	  function ContentAnchor(nav, elementRef) {
	    _classCallCheck(this, _ContentAnchor);

	    nav.contentElementRef = elementRef;
	  }

	  var _ContentAnchor = ContentAnchor;
	  ContentAnchor = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: '[content-anchor]'
	  })(ContentAnchor) || ContentAnchor;
	  return ContentAnchor;
	})();

	(0, _angular2SrcCoreAnnotations_implVisibility.Ancestor)()(ContentAnchor, null, 0);
	Reflect.defineMetadata('design:paramtypes', [Nav, _angular2SrcCoreCompilerElement_ref.ElementRef], ContentAnchor);

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	var annotations_impl_1 = __webpack_require__(119);
	var Visibility = (function (_super) {
	    __extends(Visibility, _super);
	    function Visibility(depth, crossComponentBoundaries) {
	        _super.call(this);
	        this.depth = depth;
	        this.crossComponentBoundaries = crossComponentBoundaries;
	    }
	    Visibility.prototype.shouldIncludeSelf = function () {
	        return this.depth === 0;
	    };
	    Visibility = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [Number, Boolean])], Visibility);
	    return Visibility;
	})(annotations_impl_1.DependencyAnnotation);
	exports.Visibility = Visibility;
	/**
	 * Specifies that an injector should retrieve a dependency from its element.
	 *
	 * ## Example
	 *
	 * Here is a simple directive that retrieves a dependency from its element.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 *
	 *
	 * @Directive({
	 *   selector: '[my-directive]'
	 * })
	 * class Dependency {
	 *   constructor(@Self() dependency:Dependency) {
	 *     expect(dependency.id).toEqual(1);
	 *   };
	 * }
	 * ```
	 *
	 * We use this with the following HTML template:
	 *
	 * ```
	 *<div dependency="1" my-directive></div>
	 * ```
	 *
	 * @exportedAs angular2/annotations
	 */
	var Self = (function (_super) {
	    __extends(Self, _super);
	    function Self() {
	        _super.call(this, 0, false);
	    }
	    Self = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], Self);
	    return Self;
	})(Visibility);
	exports.Self = Self;
	// make constants after switching to ts2dart
	exports.self = new Self();
	/**
	 * Specifies that an injector should retrieve a dependency from the direct parent.
	 *
	 * ## Example
	 *
	 * Here is a simple directive that retrieves a dependency from its parent element.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 *
	 *
	 * @Directive({
	 *   selector: '[my-directive]'
	 * })
	 * class Dependency {
	 *   constructor(@Parent() dependency:Dependency) {
	 *     expect(dependency.id).toEqual(1);
	 *   };
	 * }
	 * ```
	 *
	 * We use this with the following HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2" my-directive></div>
	 * </div>
	 * ```
	 * The `@Parent()` annotation in our constructor forces the injector to retrieve the dependency from
	 * the
	 * parent element (even thought the current element could resolve it): Angular injects
	 * `dependency=1`.
	 *
	 * @exportedAs angular2/annotations
	 */
	var Parent = (function (_super) {
	    __extends(Parent, _super);
	    function Parent() {
	        _super.call(this, 1, false);
	    }
	    Parent = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], Parent);
	    return Parent;
	})(Visibility);
	exports.Parent = Parent;
	/**
	 * Specifies that an injector should retrieve a dependency from any ancestor element within the same
	 * shadow boundary.
	 *
	 * An ancestor is any element between the parent element and shadow root.
	 *
	 *
	 * ## Example
	 *
	 * Here is a simple directive that retrieves a dependency from an ancestor element.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 *
	 *
	 * @Directive({
	 *   selector: '[my-directive]'
	 * })
	 * class Dependency {
	 *   constructor(@Ancestor() dependency:Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   };
	 * }
	 * ```
	 *
	 *  We use this with the following HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2">
	 *     <div>
	 *       <div dependency="3" my-directive></div>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `@Ancestor()` annotation in our constructor forces the injector to retrieve the dependency
	 * from the
	 * nearest ancestor element:
	 * - The current element `dependency="3"` is skipped because it is not an ancestor.
	 * - Next parent has no directives `<div>`
	 * - Next parent has the `Dependency` directive and so the dependency is satisfied.
	 *
	 * Angular injects `dependency=2`.
	 *
	 * @exportedAs angular2/annotations
	 */
	var Ancestor = (function (_super) {
	    __extends(Ancestor, _super);
	    function Ancestor() {
	        _super.call(this, 999999, false);
	    }
	    Ancestor = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], Ancestor);
	    return Ancestor;
	})(Visibility);
	exports.Ancestor = Ancestor;
	/**
	 * Specifies that an injector should retrieve a dependency from any ancestor element.
	 *
	 * An ancestor is any element between the parent element and shadow root.
	 *
	 *
	 * ## Example
	 *
	 * Here is a simple directive that retrieves a dependency from an ancestor element.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 *
	 *
	 * @Directive({
	 *   selector: '[my-directive]'
	 * })
	 * class Dependency {
	 *   constructor(@Unbounded() dependency:Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   };
	 * }
	 * ```
	 *
	 * @exportedAs angular2/annotations
	 */
	var Unbounded = (function (_super) {
	    __extends(Unbounded, _super);
	    function Unbounded() {
	        _super.call(this, 999999, true);
	    }
	    Unbounded = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], Unbounded);
	    return Unbounded;
	})(Visibility);
	exports.Unbounded = Unbounded;
	exports.__esModule = true;
	//# sourceMappingURL=visibility.js.map

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var _global = typeof window === 'undefined' ? global : window;
	exports.global = _global;
	exports.Type = Function;
	var BaseException = (function (_super) {
	    __extends(BaseException, _super);
	    function BaseException(message) {
	        _super.call(this, message);
	        this.message = message;
	        this.stack = new Error().stack;
	    }
	    BaseException.prototype.toString = function () {
	        return this.message;
	    };
	    return BaseException;
	})(Error);
	exports.BaseException = BaseException;
	exports.Math = _global.Math;
	exports.Date = _global.Date;
	var assertionsEnabled_ = typeof _global['assert'] !== 'undefined';
	function assertionsEnabled() {
	    return assertionsEnabled_;
	}
	exports.assertionsEnabled = assertionsEnabled;
	// TODO: remove calls to assert in production environment
	// Note: Can't just export this and import in in other files
	// as `assert` is a reserved keyword in Dart
	_global.assert = function assert(condition) {
	    if (assertionsEnabled_) {
	        _global['assert'].call(condition);
	    }
	};
	// This function is needed only to properly support Dart's const expressions
	// see https://github.com/angular/ts2dart/pull/151 for more info
	function CONST_EXPR(expr) {
	    return expr;
	}
	exports.CONST_EXPR = CONST_EXPR;
	function CONST() {
	    return function (target) {
	        return target;
	    };
	}
	exports.CONST = CONST;
	var ABSTRACT = (function () {
	    function ABSTRACT() {}
	    return ABSTRACT;
	})();
	exports.ABSTRACT = ABSTRACT;
	var IMPLEMENTS = (function () {
	    function IMPLEMENTS() {}
	    return IMPLEMENTS;
	})();
	exports.IMPLEMENTS = IMPLEMENTS;
	function isPresent(obj) {
	    return obj !== undefined && obj !== null;
	}
	exports.isPresent = isPresent;
	function isBlank(obj) {
	    return obj === undefined || obj === null;
	}
	exports.isBlank = isBlank;
	function isString(obj) {
	    return typeof obj === 'string';
	}
	exports.isString = isString;
	function isFunction(obj) {
	    return typeof obj === 'function';
	}
	exports.isFunction = isFunction;
	function isType(obj) {
	    return isFunction(obj);
	}
	exports.isType = isType;
	function stringify(token) {
	    if (typeof token === 'string') {
	        return token;
	    }
	    if (token === undefined || token === null) {
	        return '' + token;
	    }
	    if (token.name) {
	        return token.name;
	    }
	    return token.toString();
	}
	exports.stringify = stringify;
	var StringWrapper = (function () {
	    function StringWrapper() {}
	    StringWrapper.fromCharCode = function (code) {
	        return String.fromCharCode(code);
	    };
	    StringWrapper.charCodeAt = function (s, index) {
	        return s.charCodeAt(index);
	    };
	    StringWrapper.split = function (s, regExp) {
	        return s.split(regExp);
	    };
	    StringWrapper.equals = function (s, s2) {
	        return s === s2;
	    };
	    StringWrapper.replace = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.replaceAll = function (s, from, replace) {
	        return s.replace(from, replace);
	    };
	    StringWrapper.toUpperCase = function (s) {
	        return s.toUpperCase();
	    };
	    StringWrapper.toLowerCase = function (s) {
	        return s.toLowerCase();
	    };
	    StringWrapper.startsWith = function (s, start) {
	        return s.startsWith(start);
	    };
	    StringWrapper.substring = function (s, start, end) {
	        if (end === void 0) {
	            end = null;
	        }
	        return s.substring(start, end === null ? undefined : end);
	    };
	    StringWrapper.replaceAllMapped = function (s, from, cb) {
	        return s.replace(from, function () {
	            var matches = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                matches[_i - 0] = arguments[_i];
	            }
	            // Remove offset & string from the result array
	            matches.splice(-2, 2);
	            // The callback receives match, p1, ..., pn
	            return cb(matches);
	        });
	    };
	    StringWrapper.contains = function (s, substr) {
	        return s.indexOf(substr) != -1;
	    };
	    return StringWrapper;
	})();
	exports.StringWrapper = StringWrapper;
	var StringJoiner = (function () {
	    function StringJoiner(parts) {
	        if (parts === void 0) {
	            parts = [];
	        }
	        this.parts = parts;
	    }
	    StringJoiner.prototype.add = function (part) {
	        this.parts.push(part);
	    };
	    StringJoiner.prototype.toString = function () {
	        return this.parts.join('');
	    };
	    return StringJoiner;
	})();
	exports.StringJoiner = StringJoiner;
	var NumberParseError = (function (_super) {
	    __extends(NumberParseError, _super);
	    function NumberParseError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    NumberParseError.prototype.toString = function () {
	        return this.message;
	    };
	    return NumberParseError;
	})(BaseException);
	exports.NumberParseError = NumberParseError;
	var NumberWrapper = (function () {
	    function NumberWrapper() {}
	    NumberWrapper.toFixed = function (n, fractionDigits) {
	        return n.toFixed(fractionDigits);
	    };
	    NumberWrapper.equal = function (a, b) {
	        return a === b;
	    };
	    NumberWrapper.parseIntAutoRadix = function (text) {
	        var result = parseInt(text);
	        if (isNaN(result)) {
	            throw new NumberParseError('Invalid integer literal when parsing ' + text);
	        }
	        return result;
	    };
	    NumberWrapper.parseInt = function (text, radix) {
	        if (radix == 10) {
	            if (/^(\-|\+)?[0-9]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        } else if (radix == 16) {
	            if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	                return parseInt(text, radix);
	            }
	        } else {
	            var result = parseInt(text, radix);
	            if (!isNaN(result)) {
	                return result;
	            }
	        }
	        throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
	    };
	    // TODO: NaN is a valid literal but is returned by parseFloat to indicate an error.
	    NumberWrapper.parseFloat = function (text) {
	        return parseFloat(text);
	    };
	    Object.defineProperty(NumberWrapper, 'NaN', {
	        get: function get() {
	            return NaN;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NumberWrapper.isNaN = function (value) {
	        return isNaN(value);
	    };
	    NumberWrapper.isInteger = function (value) {
	        return Number.isInteger(value);
	    };
	    return NumberWrapper;
	})();
	exports.NumberWrapper = NumberWrapper;
	exports.RegExp = _global.RegExp;
	var RegExpWrapper = (function () {
	    function RegExpWrapper() {}
	    RegExpWrapper.create = function (regExpStr, flags) {
	        if (flags === void 0) {
	            flags = '';
	        }
	        flags = flags.replace(/g/g, '');
	        return new _global.RegExp(regExpStr, flags + 'g');
	    };
	    RegExpWrapper.firstMatch = function (regExp, input) {
	        // Reset multimatch regex state
	        regExp.lastIndex = 0;
	        return regExp.exec(input);
	    };
	    RegExpWrapper.matcher = function (regExp, input) {
	        // Reset regex state for the case
	        // someone did not loop over all matches
	        // last time.
	        regExp.lastIndex = 0;
	        return { re: regExp, input: input };
	    };
	    return RegExpWrapper;
	})();
	exports.RegExpWrapper = RegExpWrapper;
	var RegExpMatcherWrapper = (function () {
	    function RegExpMatcherWrapper() {}
	    RegExpMatcherWrapper.next = function (matcher) {
	        return matcher.re.exec(matcher.input);
	    };
	    return RegExpMatcherWrapper;
	})();
	exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
	var FunctionWrapper = (function () {
	    function FunctionWrapper() {}
	    FunctionWrapper.apply = function (fn, posArgs) {
	        return fn.apply(null, posArgs);
	    };
	    return FunctionWrapper;
	})();
	exports.FunctionWrapper = FunctionWrapper;
	// JS has NaN !== NaN
	function looseIdentical(a, b) {
	    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	}
	exports.looseIdentical = looseIdentical;
	// JS considers NaN is the same as NaN for map Key (while NaN !== NaN otherwise)
	// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
	function getMapKey(value) {
	    return value;
	}
	exports.getMapKey = getMapKey;
	function normalizeBlank(obj) {
	    return isBlank(obj) ? null : obj;
	}
	exports.normalizeBlank = normalizeBlank;
	function isJsObject(o) {
	    return o !== null && (typeof o === 'function' || typeof o === 'object');
	}
	exports.isJsObject = isJsObject;
	function print(obj) {
	    if (obj instanceof Error) {
	        console.log(obj.stack);
	    } else {
	        console.log(obj);
	    }
	}
	exports.print = print;
	// Can't be all uppercase as our transpiler would think it is a special directive...
	var Json = (function () {
	    function Json() {}
	    Json.parse = function (s) {
	        return _global.JSON.parse(s);
	    };
	    Json.stringify = function (data) {
	        // Dart doesn't take 3 arguments
	        return _global.JSON.stringify(data, null, 2);
	    };
	    return Json;
	})();
	exports.Json = Json;
	var DateWrapper = (function () {
	    function DateWrapper() {}
	    DateWrapper.fromMillis = function (ms) {
	        return new exports.Date(ms);
	    };
	    DateWrapper.toMillis = function (date) {
	        return date.getTime();
	    };
	    DateWrapper.now = function () {
	        return new exports.Date();
	    };
	    DateWrapper.toJson = function (date) {
	        return date.toJSON();
	    };
	    return DateWrapper;
	})();
	exports.DateWrapper = DateWrapper;
	exports.__esModule = true;
	//# sourceMappingURL=lang.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	/**
	 * A parameter annotation that specifies a dependency.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@Inject(MyService) aService:MyService) {}
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var Inject = (function () {
	    function Inject(token) {
	        this.token = token;
	    }
	    Inject = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [Object])], Inject);
	    return Inject;
	})();
	exports.Inject = Inject;
	/**
	 * A parameter annotation that specifies a `Promise` of a dependency.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@InjectPromise(MyService) aServicePromise:Promise<MyService>) {
	 *     aServicePromise.then(aService:MyService => ...);
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var InjectPromise = (function () {
	    function InjectPromise(token) {
	        this.token = token;
	    }
	    InjectPromise = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [Object])], InjectPromise);
	    return InjectPromise;
	})();
	exports.InjectPromise = InjectPromise;
	/**
	 * A parameter annotation that creates a synchronous lazy dependency.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@InjectLazy(MyService) aServiceFn:Function) {
	 *     var aService:MyService = aServiceFn();
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var InjectLazy = (function () {
	    function InjectLazy(token) {
	        this.token = token;
	    }
	    InjectLazy = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [Object])], InjectLazy);
	    return InjectLazy;
	})();
	exports.InjectLazy = InjectLazy;
	/**
	 * A parameter annotation that marks a dependency as optional. {@link Injector} provides `null` if
	 * the dependency is not found.
	 *
	 * ```
	 * class AComponent {
	 *   constructor(@Optional() aService:MyService) {
	 *     this.aService = aService;
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var Optional = (function () {
	    function Optional() {}
	    Optional = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], Optional);
	    return Optional;
	})();
	exports.Optional = Optional;
	/**
	 * `DependencyAnnotation` is used by the framework to extend DI.
	 *
	 * Only annotations implementing `DependencyAnnotation` are added to the list of dependency
	 * properties.
	 *
	 * For example:
	 *
	 * ```
	 * class Parent extends DependencyAnnotation {}
	 * class NotDependencyProperty {}
	 *
	 * class AComponent {
	 *   constructor(@Parent @NotDependencyProperty aService:AService) {}
	 * }
	 * ```
	 *
	 * will create the following dependency:
	 *
	 * ```
	 * new Dependency(Key.get(AService), [new Parent()])
	 * ```
	 *
	 * The framework can use `new Parent()` to handle the `aService` dependency
	 * in a specific way.
	 *
	 * @exportedAs angular2/di_annotations
	 */
	var DependencyAnnotation = (function () {
	    function DependencyAnnotation() {}
	    Object.defineProperty(DependencyAnnotation.prototype, "token", {
	        get: function get() {
	            return null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DependencyAnnotation = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], DependencyAnnotation);
	    return DependencyAnnotation;
	})();
	exports.DependencyAnnotation = DependencyAnnotation;
	/**
	 * A marker annotation that marks a class as available to `Injector` for creation. Used by tooling
	 * for generating constructor stubs.
	 *
	 * ```
	 * class NeedsService {
	 *   constructor(svc:UsefulService) {}
	 * }
	 *
	 * @Injectable
	 * class UsefulService {}
	 * ```
	 * @exportedAs angular2/di_annotations
	 */
	var Injectable = (function () {
	    function Injectable() {}
	    Injectable = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], Injectable);
	    return Injectable;
	})();
	exports.Injectable = Injectable;
	exports.__esModule = true;
	//# sourceMappingURL=annotations_impl.js.map

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var annotations_impl_1 = __webpack_require__(119);
	var change_detection_1 = __webpack_require__(122);
	// type StringMap = {[idx: string]: string};
	/**
	 * Directives allow you to attach behavior to elements in the DOM.
	 *
	 * {@link Directive}s with an embedded view are called {@link Component}s.
	 *
	 * A directive consists of a single directive annotation and a controller class. When the
	 * directive's `selector` matches
	 * elements in the DOM, the following steps occur:
	 *
	 * 1. For each directive, the `ElementInjector` attempts to resolve the directive's constructor
	 * arguments.
	 * 2. Angular instantiates directives for each matched element using `ElementInjector` in a
	 * depth-first order,
	 *    as declared in the HTML.
	 *
	 * ## Understanding How Injection Works
	 *
	 * There are three stages of injection resolution.
	 * - *Pre-existing Injectors*:
	 *   - The terminal {@link Injector} cannot resolve dependencies. It either throws an error or, if
	 * the dependency was
	 *     specified as `@Optional`, returns `null`.
	 *   - The platform injector resolves browser singleton resources, such as: cookies, title,
	 * location, and others.
	 * - *Component Injectors*: Each component instance has its own {@link Injector}, and they follow
	 * the same parent-child hierarchy
	 *     as the component instances in the DOM.
	 * - *Element Injectors*: Each component instance has a Shadow DOM. Within the Shadow DOM each
	 * element has an `ElementInjector`
	 *     which follow the same parent-child hierarchy as the DOM elements themselves.
	 *
	 * When a template is instantiated, it also must instantiate the corresponding directives in a
	 * depth-first order. The
	 * current `ElementInjector` resolves the constructor dependencies for each directive.
	 *
	 * Angular then resolves dependencies as follows, according to the order in which they appear in the
	 * {@link View}:
	 *
	 * 1. Dependencies on the current element
	 * 2. Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary
	 * 3. Dependencies on component injectors and their parents until it encounters the root component
	 * 4. Dependencies on pre-existing injectors
	 *
	 *
	 * The `ElementInjector` can inject other directives, element-specific special objects, or it can
	 * delegate to the parent
	 * injector.
	 *
	 * To inject other directives, declare the constructor parameter as:
	 * - `directive:DirectiveType`: a directive on the current element only
	 * - `@Ancestor() directive:DirectiveType`: any directive that matches the type between the current
	 * element and the
	 *    Shadow DOM root. Current element is not included in the resolution, therefore even if it could
	 * resolve it, it will
	 *    be ignored.
	 * - `@Parent() directive:DirectiveType`: any directive that matches the type on a direct parent
	 * element only.
	 * - `@Query(DirectiveType) query:QueryList<DirectiveType>`: A live collection of direct child
	 * directives.
	 * - `@QueryDescendants(DirectiveType) query:QueryList<DirectiveType>`: A live collection of any
	 * child directives.
	 *
	 * To inject element-specific special objects, declare the constructor parameter as:
	 * - `element: ElementRef` to obtain a reference to logical element in the view.
	 * - `viewContainer: ViewContainerRef` to control child template instantiation, for {@link
	 * Directive} directives only
	 * - `bindingPropagation: BindingPropagation` to control change detection in a more granular way.
	 *
	 * ## Example
	 *
	 * The following example demonstrates how dependency injection resolves constructor arguments in
	 * practice.
	 *
	 *
	 * Assume this HTML template:
	 *
	 * ```
	 * <div dependency="1">
	 *   <div dependency="2">
	 *     <div dependency="3" my-directive>
	 *       <div dependency="4">
	 *         <div dependency="5"></div>
	 *       </div>
	 *       <div dependency="6"></div>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * With the following `dependency` decorator and `SomeService` injectable class.
	 *
	 * ```
	 * @Injectable()
	 * class SomeService {
	 * }
	 *
	 * @Directive({
	 *   selector: '[dependency]',
	 *   properties: {
	 *     'id':'dependency'
	 *   }
	 * })
	 * class Dependency {
	 *   id:string;
	 * }
	 * ```
	 *
	 * Let's step through the different ways in which `MyDirective` could be declared...
	 *
	 *
	 * ### No injection
	 *
	 * Here the constructor is declared with no arguments, therefore nothing is injected into
	 * `MyDirective`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor() {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with no dependencies.
	 *
	 *
	 * ### Component-level injection
	 *
	 * Directives can inject any injectable instance from the closest component injector or any of its
	 * parents.
	 *
	 * Here, the constructor declares a parameter, `someService`, and injects the `SomeService` type
	 * from the parent
	 * component's injector.
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(someService: SomeService) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a dependency on `SomeService`.
	 *
	 *
	 * ### Injecting a directive from the current element
	 *
	 * Directives can inject other directives declared on the current element.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(dependency: Dependency) {
	 *     expect(dependency.id).toEqual(3);
	 *   }
	 * }
	 * ```
	 * This directive would be instantiated with `Dependency` declared at the same element, in this case
	 * `dependency="3"`.
	 *
	 *
	 * ### Injecting a directive from a direct parent element
	 *
	 * Directives can inject other directives declared on a direct parent element. By definition, a
	 * directive with a
	 * `@Parent` annotation does not attempt to resolve dependencies for the current element, even if
	 * this would satisfy
	 * the dependency.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Parent() dependency: Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   }
	 * }
	 * ```
	 * This directive would be instantiated with `Dependency` declared at the parent element, in this
	 * case `dependency="2"`.
	 *
	 *
	 * ### Injecting a directive from any ancestor elements
	 *
	 * Directives can inject other directives declared on any ancestor element (in the current Shadow
	 * DOM), i.e. on the
	 * parent element and its parents. By definition, a directive with an `@Ancestor` annotation does
	 * not attempt to
	 * resolve dependencies for the current element, even if this would satisfy the dependency.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Ancestor() dependency: Dependency) {
	 *     expect(dependency.id).toEqual(2);
	 *   }
	 * }
	 * ```
	 *
	 * Unlike the `@Parent` which only checks the parent, `@Ancestor` checks the parent, as well as its
	 * parents recursively. If `dependency="2"` didn't exist on the direct parent, this injection would
	 * have returned
	 * `dependency="1"`.
	 *
	 *
	 * ### Injecting a live collection of direct child directives
	 *
	 *
	 * A directive can also query for other child directives. Since parent directives are instantiated
	 * before child
	 * directives, a directive can't simply inject the list of child directives. Instead, the directive
	 * injects a {@link QueryList}, which updates its contents as children are added, removed, or moved
	 * by a directive
	 * that uses a {@link ViewContainerRef} such as a `for`, an `if`, or a `switch`.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Query(Dependency) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a {@link QueryList} which contains `Dependency` 4 and
	 * 6. Here, `Dependency`
	 * 5 would not be included, because it is not a direct child.
	 *
	 * ### Injecting a live collection of descendant directives
	 *
	 * Note: This is will be implemented in later release. ()
	 *
	 * Similar to `@Query` above, but also includes the children of the child elements.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@QueryDescendents(Dependency) dependencies:QueryList<Dependency>) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a Query which would contain `Dependency` 4, 5 and 6.
	 *
	 * ### Optional injection
	 *
	 * The normal behavior of directives is to return an error when a specified dependency cannot be
	 * resolved. If you
	 * would like to inject `null` on unresolved dependency instead, you can annotate that dependency
	 * with `@Optional()`.
	 * This explicitly permits the author of a template to treat some of the surrounding directives as
	 * optional.
	 *
	 * ```
	 * @Directive({ selector: '[my-directive]' })
	 * class MyDirective {
	 *   constructor(@Optional() dependency:Dependency) {
	 *   }
	 * }
	 * ```
	 *
	 * This directive would be instantiated with a `Dependency` directive found on the current element.
	 * If none can be
	 * found, the injector supplies `null` instead of throwing an error.
	 *
	 * ## Example
	 *
	 * Here we use a decorator directive to simply define basic tool-tip behavior.
	 *
	 * ```
	 * @Directive({
	 *   selector: '[tooltip]',
	 *   properties: {
	 *     'text': 'tooltip'
	 *   },
	 *   hostListeners: {
	 *     'onmouseenter': 'onMouseEnter()',
	 *     'onmouseleave': 'onMouseLeave()'
	 *   }
	 * })
	 * class Tooltip{
	 *   text:string;
	 *   overlay:Overlay; // NOT YET IMPLEMENTED
	 *   overlayManager:OverlayManager; // NOT YET IMPLEMENTED
	 *
	 *   constructor(overlayManager:OverlayManager) {
	 *     this.overlay = overlay;
	 *   }
	 *
	 *   onMouseEnter() {
	 *     // exact signature to be determined
	 *     this.overlay = this.overlayManager.open(text, ...);
	 *   }
	 *
	 *   onMouseLeave() {
	 *     this.overlay.close();
	 *     this.overlay = null;
	 *   }
	 * }
	 * ```
	 * In our HTML template, we can then add this behavior to a `<div>` or any other element with the
	 * `tooltip` selector,
	 * like so:
	 *
	 * ```
	 * <div tooltip="some text here"></div>
	 * ```
	 *
	 * Directives can also control the instantiation, destruction, and positioning of inline template
	 * elements:
	 *
	 * A directive uses a {@link ViewContainerRef} to instantiate, insert, move, and destroy views at
	 * runtime.
	 * The {@link ViewContainerRef} is created as a result of `<template>` element, and represents a
	 * location in the current view
	 * where these actions are performed.
	 *
	 * Views are always created as children of the current {@link View}, and as siblings of the
	 * `<template>` element. Thus a
	 * directive in a child view cannot inject the directive that created it.
	 *
	 * Since directives that create views via ViewContainers are common in Angular, and using the full
	 * `<template>` element syntax is wordy, Angular
	 * also supports a shorthand notation: `<li *foo="bar">` and `<li template="foo: bar">` are
	 * equivalent.
	 *
	 * Thus,
	 *
	 * ```
	 * <ul>
	 *   <li *foo="bar" title="text"></li>
	 * </ul>
	 * ```
	 *
	 * Expands in use to:
	 *
	 * ```
	 * <ul>
	 *   <template [foo]="bar">
	 *     <li title="text"></li>
	 *   </template>
	 * </ul>
	 * ```
	 *
	 * Notice that although the shorthand places `*foo="bar"` within the `<li>` element, the binding for
	 * the directive
	 * controller is correctly instantiated on the `<template>` element rather than the `<li>` element.
	 *
	 *
	 * ## Example
	 *
	 * Let's suppose we want to implement the `unless` behavior, to conditionally include a template.
	 *
	 * Here is a simple directive that triggers on an `unless` selector:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[unless]',
	 *   properties: {
	 *     'unless': 'unless'
	 *   }
	 * })
	 * export class Unless {
	 *   viewContainer: ViewContainerRef;
	 *   protoViewRef: ProtoViewRef;
	 *   prevCondition: boolean;
	 *
	 *   constructor(viewContainer: ViewContainerRef, protoViewRef: ProtoViewRef) {
	 *     this.viewContainer = viewContainer;
	 *     this.protoViewRef = protoViewRef;
	 *     this.prevCondition = null;
	 *   }
	 *
	 *   set unless(newCondition) {
	 *     if (newCondition && (isBlank(this.prevCondition) || !this.prevCondition)) {
	 *       this.prevCondition = true;
	 *       this.viewContainer.clear();
	 *     } else if (!newCondition && (isBlank(this.prevCondition) || this.prevCondition)) {
	 *       this.prevCondition = false;
	 *       this.viewContainer.create(this.protoViewRef);
	 *     }
	 *   }
	 * }
	 * ```
	 *
	 * We can then use this `unless` selector in a template:
	 * ```
	 * <ul>
	 *   <li *unless="expr"></li>
	 * </ul>
	 * ```
	 *
	 * Once the directive instantiates the child view, the shorthand notation for the template expands
	 * and the result is:
	 *
	 * ```
	 * <ul>
	 *   <template [unless]="exp">
	 *     <li></li>
	 *   </template>
	 *   <li></li>
	 * </ul>
	 * ```
	 *
	 * Note also that although the `<li></li>` template still exists inside the `<template></template>`,
	 * the instantiated
	 * view occurs on the second `<li></li>` which is a sibling to the `<template>` element.
	 *
	 * @exportedAs angular2/annotations
	 */
	var Directive = (function (_super) {
	    __extends(Directive, _super);
	    function Directive(_a) {
	        var _b = _a === void 0 ? {} : _a,
	            selector = _b.selector,
	            properties = _b.properties,
	            events = _b.events,
	            hostListeners = _b.hostListeners,
	            hostProperties = _b.hostProperties,
	            hostAttributes = _b.hostAttributes,
	            hostActions = _b.hostActions,
	            lifecycle = _b.lifecycle,
	            hostInjector = _b.hostInjector,
	            _c = _b.compileChildren,
	            compileChildren = _c === void 0 ? true : _c;
	        _super.call(this);
	        this.selector = selector;
	        this.properties = properties;
	        this.events = events;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.hostActions = hostActions;
	        this.lifecycle = lifecycle;
	        this.compileChildren = compileChildren;
	        this.hostInjector = hostInjector;
	    }
	    /**
	     * Returns true if a directive participates in a given `LifecycleEvent`.
	     *
	     * See {@link onChange}, {@link onDestroy}, {@link onAllChangesDone} for details.
	     */
	    Directive.prototype.hasLifecycleHook = function (hook) {
	        return lang_1.isPresent(this.lifecycle) ? collection_1.ListWrapper.contains(this.lifecycle, hook) : false;
	    };
	    Directive = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [Object])], Directive);
	    return Directive;
	})(annotations_impl_1.Injectable);
	exports.Directive = Directive;
	/**
	 * Declare reusable UI building blocks for an application.
	 *
	 * Each Angular component requires a single `@Component` and at least one `@View` annotation. The
	 * `@Component`
	 * annotation specifies when a component is instantiated, and which properties and hostListeners it
	 * binds to.
	 *
	 * When a component is instantiated, Angular
	 * - creates a shadow DOM for the component.
	 * - loads the selected template into the shadow DOM.
	 * - creates a child {@link Injector} which is configured with the `appInjector` for the {@link
	 * Component}.
	 *
	 * All template expressions and statements are then evaluated against the component instance.
	 *
	 * For details on the `@View` annotation, see {@link View}.
	 *
	 * ## Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet'
	 * })
	 * @View({
	 *   template: 'Hello {{name}}!'
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 *
	 * Dynamically loading a component at runtime:
	 *
	 * Regular Angular components are statically resolved. Dynamic components allows to resolve a
	 * component at runtime
	 * instead by providing a placeholder into which a regular Angular component can be dynamically
	 * loaded. Once loaded,
	 * the dynamically-loaded component becomes permanent and cannot be changed.
	 * Dynamic components are declared just like components, but without a `@View` annotation.
	 *
	 *
	 * ## Example
	 *
	 * Here we have `DynamicComp` which acts as the placeholder for `HelloCmp`. At runtime, the dynamic
	 * component
	 * `DynamicComp` requests loading of the `HelloCmp` component.
	 *
	 * There is nothing special about `HelloCmp`, which is a regular Angular component. It can also be
	 * used in other static
	 * locations.
	 *
	 * ```
	 * @Component({
	 *   selector: 'dynamic-comp'
	 * })
	 * class DynamicComp {
	 *   helloCmp:HelloCmp;
	 *   constructor(loader:DynamicComponentLoader, location:ElementRef) {
	 *     loader.load(HelloCmp, location).then((helloCmp) => {
	 *       this.helloCmp = helloCmp;
	 *     });
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'hello-cmp'
	 * })
	 * @View({
	 *   template: "{{greeting}}"
	 * })
	 * class HelloCmp {
	 *   greeting:string;
	 *   constructor() {
	 *     this.greeting = "hello";
	 *   }
	 * }
	 * ```
	 *
	 *
	 * @exportedAs angular2/annotations
	 */
	var Component = (function (_super) {
	    __extends(Component, _super);
	    function Component(_a) {
	        var _b = _a === void 0 ? {} : _a,
	            selector = _b.selector,
	            properties = _b.properties,
	            events = _b.events,
	            hostListeners = _b.hostListeners,
	            hostProperties = _b.hostProperties,
	            hostAttributes = _b.hostAttributes,
	            hostActions = _b.hostActions,
	            appInjector = _b.appInjector,
	            lifecycle = _b.lifecycle,
	            hostInjector = _b.hostInjector,
	            viewInjector = _b.viewInjector,
	            _c = _b.changeDetection,
	            changeDetection = _c === void 0 ? change_detection_1.DEFAULT : _c,
	            _d = _b.compileChildren,
	            compileChildren = _d === void 0 ? true : _d;
	        _super.call(this, {
	            selector: selector,
	            properties: properties,
	            events: events,
	            hostListeners: hostListeners,
	            hostProperties: hostProperties,
	            hostAttributes: hostAttributes,
	            hostActions: hostActions,
	            hostInjector: hostInjector,
	            lifecycle: lifecycle,
	            compileChildren: compileChildren
	        });
	        this.changeDetection = changeDetection;
	        this.appInjector = appInjector;
	        this.viewInjector = viewInjector;
	    }
	    Component = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [Object])], Component);
	    return Component;
	})(Directive);
	exports.Component = Component;
	var LifecycleEvent = (function () {
	    function LifecycleEvent(name) {
	        this.name = name;
	    }
	    LifecycleEvent = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [String])], LifecycleEvent);
	    return LifecycleEvent;
	})();
	exports.LifecycleEvent = LifecycleEvent;
	/**
	 * Notify a directive whenever a {@link View} that contains it is destroyed.
	 *
	 * ## Example
	 *
	 * ```
	 * @Directive({
	 *   ...,
	 *   lifecycle: [onDestroy]
	 * })
	 * class ClassSet {
	 *   onDestroy() {
	 *     // invoked to notify directive of the containing view destruction.
	 *   }
	 * }
	 * ```
	 * @exportedAs angular2/annotations
	 */
	exports.onDestroy = lang_1.CONST_EXPR(new LifecycleEvent("onDestroy"));
	/**
	 * Notify a directive when any of its bindings have changed.
	 *
	 * This method is called right after the directive's bindings have been checked,
	 * and before any of its children's bindings have been checked.
	 *
	 * It is invoked only if at least one of the directive's bindings has changed.
	 *
	 * ## Example:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[class-set]',
	 *   properties: {
	 *     'propA': 'propA'
	 *     'propB': 'propB'
	 *   },
	 *   lifecycle: [onChange]
	 * })
	 * class ClassSet {
	 *   propA;
	 *   propB;
	 *   onChange(changes:{[idx: string, PropertyUpdate]}) {
	 *     // This will get called after any of the properties have been updated.
	 *     if (changes['propA']) {
	 *       // if propA was updated
	 *     }
	 *     if (changes['propA']) {
	 *       // if propB was updated
	 *     }
	 *   }
	 * }
	 *  ```
	 * @exportedAs angular2/annotations
	 */
	exports.onChange = lang_1.CONST_EXPR(new LifecycleEvent("onChange"));
	/**
	 * Notify a directive when the bindings of all its children have been changed.
	 *
	 * ## Example:
	 *
	 * ```
	 * @Directive({
	 *   selector: '[class-set]',
	 *   lifecycle: [onAllChangesDone]
	 * })
	 * class ClassSet {
	 *
	 *   onAllChangesDone() {
	 *   }
	 *
	 * }
	 *  ```
	 * @exportedAs angular2/annotations
	 */
	exports.onAllChangesDone = lang_1.CONST_EXPR(new LifecycleEvent("onAllChangesDone"));
	exports.__esModule = true;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	exports.List = lang_1.global.Array;
	exports.Map = lang_1.global.Map;
	exports.Set = lang_1.global.Set;
	exports.StringMap = lang_1.global.Object;
	// Safari and Internet Explorer do not support the iterable parameter to the
	// Map constructor.  We work around that by manually adding the items.
	var createMapFromPairs = (function () {
	    try {
	        if (new exports.Map([1, 2]).size === 2) {
	            return function createMapFromPairs(pairs) {
	                return new exports.Map(pairs);
	            };
	        }
	    } catch (e) {}
	    return function createMapAndPopulateFromPairs(pairs) {
	        var map = new exports.Map();
	        for (var i = 0; i < pairs.length; i++) {
	            var pair = pairs[i];
	            map.set(pair[0], pair[1]);
	        }
	        return map;
	    };
	})();
	var MapWrapper = (function () {
	    function MapWrapper() {}
	    MapWrapper.create = function () {
	        return new exports.Map();
	    };
	    MapWrapper.clone = function (m) {
	        return new exports.Map(m);
	    };
	    MapWrapper.createFromStringMap = function (stringMap) {
	        var result = MapWrapper.create();
	        for (var prop in stringMap) {
	            MapWrapper.set(result, prop, stringMap[prop]);
	        }
	        return result;
	    };
	    MapWrapper.createFromPairs = function (pairs) {
	        return createMapFromPairs(pairs);
	    };
	    MapWrapper.get = function (m, k) {
	        return m.get(k);
	    };
	    MapWrapper.set = function (m, k, v) {
	        m.set(k, v);
	    };
	    MapWrapper.contains = function (m, k) {
	        return m.has(k);
	    };
	    MapWrapper.forEach = function (m, fn) {
	        m.forEach(fn);
	    };
	    MapWrapper.size = function (m) {
	        return m.size;
	    };
	    MapWrapper['delete'] = function (m, k) {
	        m['delete'](k);
	    };
	    MapWrapper.clear = function (m) {
	        m.clear();
	    };
	    MapWrapper.clearValues = function (m) {
	        var keyIterator = m.keys();
	        var k;
	        while (!(k = keyIterator.next()).done) {
	            m.set(k.value, null);
	        }
	    };
	    MapWrapper.iterable = function (m) {
	        return m;
	    };
	    MapWrapper.keys = function (m) {
	        return m.keys();
	    };
	    MapWrapper.values = function (m) {
	        return m.values();
	    };
	    return MapWrapper;
	})();
	exports.MapWrapper = MapWrapper;
	/**
	 * Wraps Javascript Objects
	 */
	var StringMapWrapper = (function () {
	    function StringMapWrapper() {}
	    StringMapWrapper.create = function () {
	        // Note: We are not using Object.create(null) here due to
	        // performance!
	        // http://jsperf.com/ng2-object-create-null
	        return {};
	    };
	    StringMapWrapper.contains = function (map, key) {
	        return map.hasOwnProperty(key);
	    };
	    StringMapWrapper.get = function (map, key) {
	        return map.hasOwnProperty(key) ? map[key] : undefined;
	    };
	    StringMapWrapper.set = function (map, key, value) {
	        map[key] = value;
	    };
	    StringMapWrapper.keys = function (map) {
	        return Object.keys(map);
	    };
	    StringMapWrapper.isEmpty = function (map) {
	        for (var prop in map) {
	            return false;
	        }
	        return true;
	    };
	    StringMapWrapper['delete'] = function (map, key) {
	        delete map[key];
	    };
	    StringMapWrapper.forEach = function (map, callback) {
	        for (var prop in map) {
	            if (map.hasOwnProperty(prop)) {
	                callback(map[prop], prop);
	            }
	        }
	    };
	    StringMapWrapper.merge = function (m1, m2) {
	        var m = {};
	        for (var attr in m1) {
	            if (m1.hasOwnProperty(attr)) {
	                m[attr] = m1[attr];
	            }
	        }
	        for (var attr in m2) {
	            if (m2.hasOwnProperty(attr)) {
	                m[attr] = m2[attr];
	            }
	        }
	        return m;
	    };
	    StringMapWrapper.equals = function (m1, m2) {
	        var k1 = Object.keys(m1);
	        var k2 = Object.keys(m2);
	        if (k1.length != k2.length) {
	            return false;
	        }
	        var key;
	        for (var i = 0; i < k1.length; i++) {
	            key = k1[i];
	            if (m1[key] !== m2[key]) {
	                return false;
	            }
	        }
	        return true;
	    };
	    return StringMapWrapper;
	})();
	exports.StringMapWrapper = StringMapWrapper;
	var ListWrapper = (function () {
	    function ListWrapper() {}
	    ListWrapper.create = function () {
	        return new exports.List();
	    };
	    ListWrapper.createFixedSize = function (size) {
	        return new exports.List(size);
	    };
	    ListWrapper.get = function (m, k) {
	        return m[k];
	    };
	    ListWrapper.set = function (m, k, v) {
	        m[k] = v;
	    };
	    ListWrapper.clone = function (array) {
	        return array.slice(0);
	    };
	    ListWrapper.map = function (array, fn) {
	        return array.map(fn);
	    };
	    ListWrapper.forEach = function (array, fn) {
	        for (var i = 0; i < array.length; i++) {
	            fn(array[i]);
	        }
	    };
	    ListWrapper.push = function (array, el) {
	        array.push(el);
	    };
	    ListWrapper.first = function (array) {
	        if (!array) return null;
	        return array[0];
	    };
	    ListWrapper.last = function (array) {
	        if (!array || array.length == 0) return null;
	        return array[array.length - 1];
	    };
	    ListWrapper.find = function (list, pred) {
	        for (var i = 0; i < list.length; ++i) {
	            if (pred(list[i])) return list[i];
	        }
	        return null;
	    };
	    ListWrapper.indexOf = function (array, value, startIndex) {
	        if (startIndex === void 0) {
	            startIndex = -1;
	        }
	        return array.indexOf(value, startIndex);
	    };
	    ListWrapper.reduce = function (list, fn, init) {
	        return list.reduce(fn, init);
	    };
	    ListWrapper.filter = function (array, pred) {
	        return array.filter(pred);
	    };
	    ListWrapper.any = function (list, pred) {
	        for (var i = 0; i < list.length; ++i) {
	            if (pred(list[i])) return true;
	        }
	        return false;
	    };
	    ListWrapper.contains = function (list, el) {
	        return list.indexOf(el) !== -1;
	    };
	    ListWrapper.reversed = function (array) {
	        var a = ListWrapper.clone(array);
	        return a.reverse();
	    };
	    ListWrapper.concat = function (a, b) {
	        return a.concat(b);
	    };
	    ListWrapper.isList = function (list) {
	        return Array.isArray(list);
	    };
	    ListWrapper.insert = function (list, index, value) {
	        list.splice(index, 0, value);
	    };
	    ListWrapper.removeAt = function (list, index) {
	        var res = list[index];
	        list.splice(index, 1);
	        return res;
	    };
	    ListWrapper.removeAll = function (list, items) {
	        for (var i = 0; i < items.length; ++i) {
	            var index = list.indexOf(items[i]);
	            list.splice(index, 1);
	        }
	    };
	    ListWrapper.removeLast = function (list) {
	        return list.pop();
	    };
	    ListWrapper.remove = function (list, el) {
	        var index = list.indexOf(el);
	        if (index > -1) {
	            list.splice(index, 1);
	            return true;
	        }
	        return false;
	    };
	    ListWrapper.clear = function (list) {
	        list.splice(0, list.length);
	    };
	    ListWrapper.join = function (list, s) {
	        return list.join(s);
	    };
	    ListWrapper.isEmpty = function (list) {
	        return list.length == 0;
	    };
	    ListWrapper.fill = function (list, value, start, end) {
	        if (start === void 0) {
	            start = 0;
	        }
	        if (end === void 0) {
	            end = null;
	        }
	        list.fill(value, start, end === null ? undefined : end);
	    };
	    ListWrapper.equals = function (a, b) {
	        if (a.length != b.length) return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (a[i] !== b[i]) return false;
	        }
	        return true;
	    };
	    ListWrapper.slice = function (l, from, to) {
	        if (from === void 0) {
	            from = 0;
	        }
	        if (to === void 0) {
	            to = null;
	        }
	        return l.slice(from, to === null ? undefined : to);
	    };
	    ListWrapper.splice = function (l, from, length) {
	        return l.splice(from, length);
	    };
	    ListWrapper.sort = function (l, compareFn) {
	        l.sort(compareFn);
	    };
	    return ListWrapper;
	})();
	exports.ListWrapper = ListWrapper;
	function isListLikeIterable(obj) {
	    if (!lang_1.isJsObject(obj)) return false;
	    return ListWrapper.isList(obj) || !(obj instanceof exports.Map) && Symbol.iterator in obj; // JS Iterable have a Symbol.iterator prop
	}
	exports.isListLikeIterable = isListLikeIterable;
	function iterateListLike(obj, fn) {
	    if (ListWrapper.isList(obj)) {
	        for (var i = 0; i < obj.length; i++) {
	            fn(obj[i]);
	        }
	    } else {
	        var iterator = obj[Symbol.iterator]();
	        var item;
	        while (!(item = iterator.next()).done) {
	            fn(item.value);
	        }
	    }
	}
	exports.iterateListLike = iterateListLike;
	var SetWrapper = (function () {
	    function SetWrapper() {}
	    SetWrapper.createFromList = function (lst) {
	        return new exports.Set(lst);
	    };
	    SetWrapper.has = function (s, key) {
	        return s.has(key);
	    };
	    return SetWrapper;
	})();
	exports.SetWrapper = SetWrapper;
	exports.__esModule = true;
	//# sourceMappingURL=collection.js.map

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module
	 * @public
	 * @description
	 * Change detection enables data binding in Angular.
	 */
	var ast_1 = __webpack_require__(123);
	exports.ASTWithSource = ast_1.ASTWithSource;
	exports.AST = ast_1.AST;
	exports.AstTransformer = ast_1.AstTransformer;
	exports.AccessMember = ast_1.AccessMember;
	exports.LiteralArray = ast_1.LiteralArray;
	exports.ImplicitReceiver = ast_1.ImplicitReceiver;
	var lexer_1 = __webpack_require__(124);
	exports.Lexer = lexer_1.Lexer;
	var parser_1 = __webpack_require__(128);
	exports.Parser = parser_1.Parser;
	var locals_1 = __webpack_require__(133);
	exports.Locals = locals_1.Locals;
	var exceptions_1 = __webpack_require__(134);
	exports.ExpressionChangedAfterItHasBeenChecked = exceptions_1.ExpressionChangedAfterItHasBeenChecked;
	exports.ChangeDetectionError = exceptions_1.ChangeDetectionError;
	var interfaces_1 = __webpack_require__(135);
	exports.ProtoChangeDetector = interfaces_1.ProtoChangeDetector;
	exports.ChangeDispatcher = interfaces_1.ChangeDispatcher;
	exports.ChangeDetector = interfaces_1.ChangeDetector;
	exports.ChangeDetection = interfaces_1.ChangeDetection;
	exports.ChangeDetectorDefinition = interfaces_1.ChangeDetectorDefinition;
	var constants_1 = __webpack_require__(136);
	exports.CHECK_ONCE = constants_1.CHECK_ONCE;
	exports.CHECK_ALWAYS = constants_1.CHECK_ALWAYS;
	exports.DETACHED = constants_1.DETACHED;
	exports.CHECKED = constants_1.CHECKED;
	exports.ON_PUSH = constants_1.ON_PUSH;
	exports.DEFAULT = constants_1.DEFAULT;
	var proto_change_detector_1 = __webpack_require__(137);
	exports.DynamicProtoChangeDetector = proto_change_detector_1.DynamicProtoChangeDetector;
	exports.JitProtoChangeDetector = proto_change_detector_1.JitProtoChangeDetector;
	var binding_record_1 = __webpack_require__(147);
	exports.BindingRecord = binding_record_1.BindingRecord;
	var directive_record_1 = __webpack_require__(145);
	exports.DirectiveIndex = directive_record_1.DirectiveIndex;
	exports.DirectiveRecord = directive_record_1.DirectiveRecord;
	var dynamic_change_detector_1 = __webpack_require__(138);
	exports.DynamicChangeDetector = dynamic_change_detector_1.DynamicChangeDetector;
	var change_detector_ref_1 = __webpack_require__(142);
	exports.ChangeDetectorRef = change_detector_ref_1.ChangeDetectorRef;
	var pipe_registry_1 = __webpack_require__(148);
	exports.PipeRegistry = pipe_registry_1.PipeRegistry;
	var change_detection_util_1 = __webpack_require__(139);
	exports.uninitialized = change_detection_util_1.uninitialized;
	var pipe_1 = __webpack_require__(140);
	exports.WrappedValue = pipe_1.WrappedValue;
	exports.Pipe = pipe_1.Pipe;
	var null_pipe_1 = __webpack_require__(149);
	exports.NullPipe = null_pipe_1.NullPipe;
	exports.NullPipeFactory = null_pipe_1.NullPipeFactory;
	var change_detection_1 = __webpack_require__(150);
	exports.defaultPipes = change_detection_1.defaultPipes;
	exports.DynamicChangeDetection = change_detection_1.DynamicChangeDetection;
	exports.JitChangeDetection = change_detection_1.JitChangeDetection;
	exports.PreGeneratedChangeDetection = change_detection_1.PreGeneratedChangeDetection;
	exports.preGeneratedProtoDetectors = change_detection_1.preGeneratedProtoDetectors;
	exports.defaultPipeRegistry = change_detection_1.defaultPipeRegistry;
	exports.__esModule = true;
	//# sourceMappingURL=change_detection.js.map

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var AST = (function () {
	    function AST() {}
	    AST.prototype.eval = function (context, locals) {
	        throw new lang_1.BaseException("Not supported");
	    };
	    Object.defineProperty(AST.prototype, "isAssignable", {
	        get: function get() {
	            return false;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AST.prototype.assign = function (context, locals, value) {
	        throw new lang_1.BaseException("Not supported");
	    };
	    AST.prototype.visit = function (visitor) {
	        return null;
	    };
	    AST.prototype.toString = function () {
	        return "AST";
	    };
	    return AST;
	})();
	exports.AST = AST;
	var EmptyExpr = (function (_super) {
	    __extends(EmptyExpr, _super);
	    function EmptyExpr() {
	        _super.apply(this, arguments);
	    }
	    EmptyExpr.prototype.eval = function (context, locals) {
	        return null;
	    };
	    EmptyExpr.prototype.visit = function (visitor) {};
	    return EmptyExpr;
	})(AST);
	exports.EmptyExpr = EmptyExpr;
	var ImplicitReceiver = (function (_super) {
	    __extends(ImplicitReceiver, _super);
	    function ImplicitReceiver() {
	        _super.apply(this, arguments);
	    }
	    ImplicitReceiver.prototype.eval = function (context, locals) {
	        return context;
	    };
	    ImplicitReceiver.prototype.visit = function (visitor) {
	        return visitor.visitImplicitReceiver(this);
	    };
	    return ImplicitReceiver;
	})(AST);
	exports.ImplicitReceiver = ImplicitReceiver;
	/**
	 * Multiple expressions separated by a semicolon.
	 */
	var Chain = (function (_super) {
	    __extends(Chain, _super);
	    function Chain(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    Chain.prototype.eval = function (context, locals) {
	        var result;
	        for (var i = 0; i < this.expressions.length; i++) {
	            var last = this.expressions[i].eval(context, locals);
	            if (lang_1.isPresent(last)) result = last;
	        }
	        return result;
	    };
	    Chain.prototype.visit = function (visitor) {
	        return visitor.visitChain(this);
	    };
	    return Chain;
	})(AST);
	exports.Chain = Chain;
	var Conditional = (function (_super) {
	    __extends(Conditional, _super);
	    function Conditional(condition, trueExp, falseExp) {
	        _super.call(this);
	        this.condition = condition;
	        this.trueExp = trueExp;
	        this.falseExp = falseExp;
	    }
	    Conditional.prototype.eval = function (context, locals) {
	        if (this.condition.eval(context, locals)) {
	            return this.trueExp.eval(context, locals);
	        } else {
	            return this.falseExp.eval(context, locals);
	        }
	    };
	    Conditional.prototype.visit = function (visitor) {
	        return visitor.visitConditional(this);
	    };
	    return Conditional;
	})(AST);
	exports.Conditional = Conditional;
	var AccessMember = (function (_super) {
	    __extends(AccessMember, _super);
	    function AccessMember(receiver, name, getter, setter) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.getter = getter;
	        this.setter = setter;
	    }
	    AccessMember.prototype.eval = function (context, locals) {
	        if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) && locals.contains(this.name)) {
	            return locals.get(this.name);
	        } else {
	            var evaluatedReceiver = this.receiver.eval(context, locals);
	            return this.getter(evaluatedReceiver);
	        }
	    };
	    Object.defineProperty(AccessMember.prototype, "isAssignable", {
	        get: function get() {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AccessMember.prototype.assign = function (context, locals, value) {
	        var evaluatedContext = this.receiver.eval(context, locals);
	        if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) && locals.contains(this.name)) {
	            throw new lang_1.BaseException("Cannot reassign a variable binding " + this.name);
	        } else {
	            return this.setter(evaluatedContext, value);
	        }
	    };
	    AccessMember.prototype.visit = function (visitor) {
	        return visitor.visitAccessMember(this);
	    };
	    return AccessMember;
	})(AST);
	exports.AccessMember = AccessMember;
	var KeyedAccess = (function (_super) {
	    __extends(KeyedAccess, _super);
	    function KeyedAccess(obj, key) {
	        _super.call(this);
	        this.obj = obj;
	        this.key = key;
	    }
	    KeyedAccess.prototype.eval = function (context, locals) {
	        var obj = this.obj.eval(context, locals);
	        var key = this.key.eval(context, locals);
	        return obj[key];
	    };
	    Object.defineProperty(KeyedAccess.prototype, "isAssignable", {
	        get: function get() {
	            return true;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    KeyedAccess.prototype.assign = function (context, locals, value) {
	        var obj = this.obj.eval(context, locals);
	        var key = this.key.eval(context, locals);
	        obj[key] = value;
	        return value;
	    };
	    KeyedAccess.prototype.visit = function (visitor) {
	        return visitor.visitKeyedAccess(this);
	    };
	    return KeyedAccess;
	})(AST);
	exports.KeyedAccess = KeyedAccess;
	var Pipe = (function (_super) {
	    __extends(Pipe, _super);
	    function Pipe(exp, name, args, inBinding) {
	        _super.call(this);
	        this.exp = exp;
	        this.name = name;
	        this.args = args;
	        this.inBinding = inBinding;
	    }
	    Pipe.prototype.visit = function (visitor) {
	        return visitor.visitPipe(this);
	    };
	    return Pipe;
	})(AST);
	exports.Pipe = Pipe;
	var LiteralPrimitive = (function (_super) {
	    __extends(LiteralPrimitive, _super);
	    function LiteralPrimitive(value) {
	        _super.call(this);
	        this.value = value;
	    }
	    LiteralPrimitive.prototype.eval = function (context, locals) {
	        return this.value;
	    };
	    LiteralPrimitive.prototype.visit = function (visitor) {
	        return visitor.visitLiteralPrimitive(this);
	    };
	    return LiteralPrimitive;
	})(AST);
	exports.LiteralPrimitive = LiteralPrimitive;
	var LiteralArray = (function (_super) {
	    __extends(LiteralArray, _super);
	    function LiteralArray(expressions) {
	        _super.call(this);
	        this.expressions = expressions;
	    }
	    LiteralArray.prototype.eval = function (context, locals) {
	        return collection_1.ListWrapper.map(this.expressions, function (e) {
	            return e.eval(context, locals);
	        });
	    };
	    LiteralArray.prototype.visit = function (visitor) {
	        return visitor.visitLiteralArray(this);
	    };
	    return LiteralArray;
	})(AST);
	exports.LiteralArray = LiteralArray;
	var LiteralMap = (function (_super) {
	    __extends(LiteralMap, _super);
	    function LiteralMap(keys, values) {
	        _super.call(this);
	        this.keys = keys;
	        this.values = values;
	    }
	    LiteralMap.prototype.eval = function (context, locals) {
	        var res = collection_1.StringMapWrapper.create();
	        for (var i = 0; i < this.keys.length; ++i) {
	            collection_1.StringMapWrapper.set(res, this.keys[i], this.values[i].eval(context, locals));
	        }
	        return res;
	    };
	    LiteralMap.prototype.visit = function (visitor) {
	        return visitor.visitLiteralMap(this);
	    };
	    return LiteralMap;
	})(AST);
	exports.LiteralMap = LiteralMap;
	var Interpolation = (function (_super) {
	    __extends(Interpolation, _super);
	    function Interpolation(strings, expressions) {
	        _super.call(this);
	        this.strings = strings;
	        this.expressions = expressions;
	    }
	    Interpolation.prototype.eval = function (context, locals) {
	        throw new lang_1.BaseException("evaluating an Interpolation is not supported");
	    };
	    Interpolation.prototype.visit = function (visitor) {
	        visitor.visitInterpolation(this);
	    };
	    return Interpolation;
	})(AST);
	exports.Interpolation = Interpolation;
	var Binary = (function (_super) {
	    __extends(Binary, _super);
	    function Binary(operation, left, right) {
	        _super.call(this);
	        this.operation = operation;
	        this.left = left;
	        this.right = right;
	    }
	    Binary.prototype.eval = function (context, locals) {
	        var left = this.left.eval(context, locals);
	        switch (this.operation) {
	            case "&&":
	                return left && this.right.eval(context, locals);
	            case "||":
	                return left || this.right.eval(context, locals);
	        }
	        var right = this.right.eval(context, locals);
	        switch (this.operation) {
	            case "+":
	                return left + right;
	            case "-":
	                return left - right;
	            case "*":
	                return left * right;
	            case "/":
	                return left / right;
	            case "%":
	                return left % right;
	            case "==":
	                return left == right;
	            case "!=":
	                return left != right;
	            case "===":
	                return left === right;
	            case "!==":
	                return left !== right;
	            case "<":
	                return left < right;
	            case ">":
	                return left > right;
	            case "<=":
	                return left <= right;
	            case ">=":
	                return left >= right;
	            case "^":
	                return left ^ right;
	            case "&":
	                return left & right;
	        }
	        throw "Internal error [$operation] not handled";
	    };
	    Binary.prototype.visit = function (visitor) {
	        return visitor.visitBinary(this);
	    };
	    return Binary;
	})(AST);
	exports.Binary = Binary;
	var PrefixNot = (function (_super) {
	    __extends(PrefixNot, _super);
	    function PrefixNot(expression) {
	        _super.call(this);
	        this.expression = expression;
	    }
	    PrefixNot.prototype.eval = function (context, locals) {
	        return !this.expression.eval(context, locals);
	    };
	    PrefixNot.prototype.visit = function (visitor) {
	        return visitor.visitPrefixNot(this);
	    };
	    return PrefixNot;
	})(AST);
	exports.PrefixNot = PrefixNot;
	var Assignment = (function (_super) {
	    __extends(Assignment, _super);
	    function Assignment(target, value) {
	        _super.call(this);
	        this.target = target;
	        this.value = value;
	    }
	    Assignment.prototype.eval = function (context, locals) {
	        return this.target.assign(context, locals, this.value.eval(context, locals));
	    };
	    Assignment.prototype.visit = function (visitor) {
	        return visitor.visitAssignment(this);
	    };
	    return Assignment;
	})(AST);
	exports.Assignment = Assignment;
	var MethodCall = (function (_super) {
	    __extends(MethodCall, _super);
	    function MethodCall(receiver, name, fn, args) {
	        _super.call(this);
	        this.receiver = receiver;
	        this.name = name;
	        this.fn = fn;
	        this.args = args;
	    }
	    MethodCall.prototype.eval = function (context, locals) {
	        var evaluatedArgs = evalList(context, locals, this.args);
	        if (this.receiver instanceof ImplicitReceiver && lang_1.isPresent(locals) && locals.contains(this.name)) {
	            var fn = locals.get(this.name);
	            return lang_1.FunctionWrapper.apply(fn, evaluatedArgs);
	        } else {
	            var evaluatedReceiver = this.receiver.eval(context, locals);
	            return this.fn(evaluatedReceiver, evaluatedArgs);
	        }
	    };
	    MethodCall.prototype.visit = function (visitor) {
	        return visitor.visitMethodCall(this);
	    };
	    return MethodCall;
	})(AST);
	exports.MethodCall = MethodCall;
	var FunctionCall = (function (_super) {
	    __extends(FunctionCall, _super);
	    function FunctionCall(target, args) {
	        _super.call(this);
	        this.target = target;
	        this.args = args;
	    }
	    FunctionCall.prototype.eval = function (context, locals) {
	        var obj = this.target.eval(context, locals);
	        if (!(obj instanceof Function)) {
	            throw new lang_1.BaseException(obj + " is not a function");
	        }
	        return lang_1.FunctionWrapper.apply(obj, evalList(context, locals, this.args));
	    };
	    FunctionCall.prototype.visit = function (visitor) {
	        return visitor.visitFunctionCall(this);
	    };
	    return FunctionCall;
	})(AST);
	exports.FunctionCall = FunctionCall;
	var ASTWithSource = (function (_super) {
	    __extends(ASTWithSource, _super);
	    function ASTWithSource(ast, source, location) {
	        _super.call(this);
	        this.ast = ast;
	        this.source = source;
	        this.location = location;
	    }
	    ASTWithSource.prototype.eval = function (context, locals) {
	        return this.ast.eval(context, locals);
	    };
	    Object.defineProperty(ASTWithSource.prototype, "isAssignable", {
	        get: function get() {
	            return this.ast.isAssignable;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ASTWithSource.prototype.assign = function (context, locals, value) {
	        return this.ast.assign(context, locals, value);
	    };
	    ASTWithSource.prototype.visit = function (visitor) {
	        return this.ast.visit(visitor);
	    };
	    ASTWithSource.prototype.toString = function () {
	        return this.source + " in " + this.location;
	    };
	    return ASTWithSource;
	})(AST);
	exports.ASTWithSource = ASTWithSource;
	var TemplateBinding = (function () {
	    function TemplateBinding(key, keyIsVar, name, expression) {
	        this.key = key;
	        this.keyIsVar = keyIsVar;
	        this.name = name;
	        this.expression = expression;
	    }
	    return TemplateBinding;
	})();
	exports.TemplateBinding = TemplateBinding;
	// INTERFACE
	var AstVisitor = (function () {
	    function AstVisitor() {}
	    AstVisitor.prototype.visitAccessMember = function (ast) {};
	    AstVisitor.prototype.visitAssignment = function (ast) {};
	    AstVisitor.prototype.visitBinary = function (ast) {};
	    AstVisitor.prototype.visitChain = function (ast) {};
	    AstVisitor.prototype.visitConditional = function (ast) {};
	    AstVisitor.prototype.visitPipe = function (ast) {};
	    AstVisitor.prototype.visitFunctionCall = function (ast) {};
	    AstVisitor.prototype.visitImplicitReceiver = function (ast) {};
	    AstVisitor.prototype.visitKeyedAccess = function (ast) {};
	    AstVisitor.prototype.visitLiteralArray = function (ast) {};
	    AstVisitor.prototype.visitLiteralMap = function (ast) {};
	    AstVisitor.prototype.visitLiteralPrimitive = function (ast) {};
	    AstVisitor.prototype.visitMethodCall = function (ast) {};
	    AstVisitor.prototype.visitPrefixNot = function (ast) {};
	    return AstVisitor;
	})();
	exports.AstVisitor = AstVisitor;
	var AstTransformer = (function () {
	    function AstTransformer() {}
	    AstTransformer.prototype.visitImplicitReceiver = function (ast) {
	        return ast;
	    };
	    AstTransformer.prototype.visitInterpolation = function (ast) {
	        return new Interpolation(ast.strings, this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralPrimitive = function (ast) {
	        return new LiteralPrimitive(ast.value);
	    };
	    AstTransformer.prototype.visitAccessMember = function (ast) {
	        return new AccessMember(ast.receiver.visit(this), ast.name, ast.getter, ast.setter);
	    };
	    AstTransformer.prototype.visitMethodCall = function (ast) {
	        return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitFunctionCall = function (ast) {
	        return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
	    };
	    AstTransformer.prototype.visitLiteralArray = function (ast) {
	        return new LiteralArray(this.visitAll(ast.expressions));
	    };
	    AstTransformer.prototype.visitLiteralMap = function (ast) {
	        return new LiteralMap(ast.keys, this.visitAll(ast.values));
	    };
	    AstTransformer.prototype.visitBinary = function (ast) {
	        return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
	    };
	    AstTransformer.prototype.visitPrefixNot = function (ast) {
	        return new PrefixNot(ast.expression.visit(this));
	    };
	    AstTransformer.prototype.visitConditional = function (ast) {
	        return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    };
	    AstTransformer.prototype.visitPipe = function (ast) {
	        return new Pipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.inBinding);
	    };
	    AstTransformer.prototype.visitKeyedAccess = function (ast) {
	        return new KeyedAccess(ast.obj.visit(this), ast.key.visit(this));
	    };
	    AstTransformer.prototype.visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    return AstTransformer;
	})();
	exports.AstTransformer = AstTransformer;
	var _evalListCache = [[], [0], [0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
	function evalList(context, locals, exps) {
	    var length = exps.length;
	    if (length > 10) {
	        throw new lang_1.BaseException("Cannot have more than 10 argument");
	    }
	    var result = _evalListCache[length];
	    for (var i = 0; i < length; i++) {
	        result[i] = exps[i].eval(context, locals);
	    }
	    return result;
	}
	exports.__esModule = true;
	//# sourceMappingURL=ast.js.map

	// do nothing

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(125);
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	exports.TOKEN_TYPE_CHARACTER = 1;
	exports.TOKEN_TYPE_IDENTIFIER = 2;
	exports.TOKEN_TYPE_KEYWORD = 3;
	exports.TOKEN_TYPE_STRING = 4;
	exports.TOKEN_TYPE_OPERATOR = 5;
	exports.TOKEN_TYPE_NUMBER = 6;
	var Lexer = (function () {
	    function Lexer() {}
	    Lexer.prototype.tokenize = function (text) {
	        var scanner = new _Scanner(text);
	        var tokens = [];
	        var token = scanner.scanToken();
	        while (token != null) {
	            collection_1.ListWrapper.push(tokens, token);
	            token = scanner.scanToken();
	        }
	        return tokens;
	    };
	    Lexer = __decorate([decorators_1.Injectable(), __metadata("design:paramtypes", [])], Lexer);
	    return Lexer;
	})();
	exports.Lexer = Lexer;
	var Token = (function () {
	    function Token(index, type, numValue, strValue) {
	        this.index = index;
	        this.type = type;
	        this.numValue = numValue;
	        this.strValue = strValue;
	    }
	    Token.prototype.isCharacter = function (code) {
	        return this.type == exports.TOKEN_TYPE_CHARACTER && this.numValue == code;
	    };
	    Token.prototype.isNumber = function () {
	        return this.type == exports.TOKEN_TYPE_NUMBER;
	    };
	    Token.prototype.isString = function () {
	        return this.type == exports.TOKEN_TYPE_STRING;
	    };
	    Token.prototype.isOperator = function (operater) {
	        return this.type == exports.TOKEN_TYPE_OPERATOR && this.strValue == operater;
	    };
	    Token.prototype.isIdentifier = function () {
	        return this.type == exports.TOKEN_TYPE_IDENTIFIER;
	    };
	    Token.prototype.isKeyword = function () {
	        return this.type == exports.TOKEN_TYPE_KEYWORD;
	    };
	    Token.prototype.isKeywordVar = function () {
	        return this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "var";
	    };
	    Token.prototype.isKeywordNull = function () {
	        return this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "null";
	    };
	    Token.prototype.isKeywordUndefined = function () {
	        return this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "undefined";
	    };
	    Token.prototype.isKeywordTrue = function () {
	        return this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "true";
	    };
	    Token.prototype.isKeywordFalse = function () {
	        return this.type == exports.TOKEN_TYPE_KEYWORD && this.strValue == "false";
	    };
	    Token.prototype.toNumber = function () {
	        // -1 instead of NULL ok?
	        return this.type == exports.TOKEN_TYPE_NUMBER ? this.numValue : -1;
	    };
	    Token.prototype.toString = function () {
	        var t = this.type;
	        if (t >= exports.TOKEN_TYPE_CHARACTER && t <= exports.TOKEN_TYPE_STRING) {
	            return this.strValue;
	        } else if (t == exports.TOKEN_TYPE_NUMBER) {
	            return this.numValue.toString();
	        } else {
	            return null;
	        }
	    };
	    return Token;
	})();
	exports.Token = Token;
	function newCharacterToken(index, code) {
	    return new Token(index, exports.TOKEN_TYPE_CHARACTER, code, lang_1.StringWrapper.fromCharCode(code));
	}
	function newIdentifierToken(index, text) {
	    return new Token(index, exports.TOKEN_TYPE_IDENTIFIER, 0, text);
	}
	function newKeywordToken(index, text) {
	    return new Token(index, exports.TOKEN_TYPE_KEYWORD, 0, text);
	}
	function newOperatorToken(index, text) {
	    return new Token(index, exports.TOKEN_TYPE_OPERATOR, 0, text);
	}
	function newStringToken(index, text) {
	    return new Token(index, exports.TOKEN_TYPE_STRING, 0, text);
	}
	function newNumberToken(index, n) {
	    return new Token(index, exports.TOKEN_TYPE_NUMBER, n, "");
	}
	exports.EOF = new Token(-1, 0, 0, "");
	exports.$EOF = 0;
	exports.$TAB = 9;
	exports.$LF = 10;
	exports.$VTAB = 11;
	exports.$FF = 12;
	exports.$CR = 13;
	exports.$SPACE = 32;
	exports.$BANG = 33;
	exports.$DQ = 34;
	exports.$HASH = 35;
	exports.$$ = 36;
	exports.$PERCENT = 37;
	exports.$AMPERSAND = 38;
	exports.$SQ = 39;
	exports.$LPAREN = 40;
	exports.$RPAREN = 41;
	exports.$STAR = 42;
	exports.$PLUS = 43;
	exports.$COMMA = 44;
	exports.$MINUS = 45;
	exports.$PERIOD = 46;
	exports.$SLASH = 47;
	exports.$COLON = 58;
	exports.$SEMICOLON = 59;
	exports.$LT = 60;
	exports.$EQ = 61;
	exports.$GT = 62;
	exports.$QUESTION = 63;
	var $0 = 48;
	var $9 = 57;
	var $A = 65,
	    $E = 69,
	    $Z = 90;
	exports.$LBRACKET = 91;
	exports.$BACKSLASH = 92;
	exports.$RBRACKET = 93;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97,
	    $e = 101,
	    $f = 102,
	    $n = 110,
	    $r = 114,
	    $t = 116,
	    $u = 117,
	    $v = 118,
	    $z = 122;
	exports.$LBRACE = 123;
	exports.$BAR = 124;
	exports.$RBRACE = 125;
	var $NBSP = 160;
	var ScannerError = (function (_super) {
	    __extends(ScannerError, _super);
	    function ScannerError(message) {
	        _super.call(this);
	        this.message = message;
	    }
	    ScannerError.prototype.toString = function () {
	        return this.message;
	    };
	    return ScannerError;
	})(lang_1.BaseException);
	exports.ScannerError = ScannerError;
	var _Scanner = (function () {
	    function _Scanner(input) {
	        this.input = input;
	        this.length = input.length;
	        this.peek = 0;
	        this.index = -1;
	        this.advance();
	    }
	    _Scanner.prototype.advance = function () {
	        this.peek = ++this.index >= this.length ? exports.$EOF : lang_1.StringWrapper.charCodeAt(this.input, this.index);
	    };
	    _Scanner.prototype.scanToken = function () {
	        var input = this.input,
	            length = this.length,
	            peek = this.peek,
	            index = this.index;
	        // Skip whitespace.
	        while (peek <= exports.$SPACE) {
	            if (++index >= length) {
	                peek = exports.$EOF;
	                break;
	            } else {
	                peek = lang_1.StringWrapper.charCodeAt(input, index);
	            }
	        }
	        this.peek = peek;
	        this.index = index;
	        if (index >= length) {
	            return null;
	        }
	        // Handle identifiers and numbers.
	        if (isIdentifierStart(peek)) return this.scanIdentifier();
	        if (isDigit(peek)) return this.scanNumber(index);
	        var start = index;
	        switch (peek) {
	            case exports.$PERIOD:
	                this.advance();
	                return isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, exports.$PERIOD);
	            case exports.$LPAREN:
	            case exports.$RPAREN:
	            case exports.$LBRACE:
	            case exports.$RBRACE:
	            case exports.$LBRACKET:
	            case exports.$RBRACKET:
	            case exports.$COMMA:
	            case exports.$COLON:
	            case exports.$SEMICOLON:
	                return this.scanCharacter(start, peek);
	            case exports.$SQ:
	            case exports.$DQ:
	                return this.scanString();
	            case exports.$HASH:
	                return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
	            case exports.$PLUS:
	            case exports.$MINUS:
	            case exports.$STAR:
	            case exports.$SLASH:
	            case exports.$PERCENT:
	            case $CARET:
	            case exports.$QUESTION:
	                return this.scanOperator(start, lang_1.StringWrapper.fromCharCode(peek));
	            case exports.$LT:
	            case exports.$GT:
	            case exports.$BANG:
	            case exports.$EQ:
	                return this.scanComplexOperator(start, exports.$EQ, lang_1.StringWrapper.fromCharCode(peek), "=");
	            case exports.$AMPERSAND:
	                return this.scanComplexOperator(start, exports.$AMPERSAND, "&", "&");
	            case exports.$BAR:
	                return this.scanComplexOperator(start, exports.$BAR, "|", "|");
	            case $NBSP:
	                while (isWhitespace(this.peek)) this.advance();
	                return this.scanToken();
	        }
	        this.error("Unexpected character [" + lang_1.StringWrapper.fromCharCode(peek) + "]", 0);
	        return null;
	    };
	    _Scanner.prototype.scanCharacter = function (start, code) {
	        assert(this.peek == code);
	        this.advance();
	        return newCharacterToken(start, code);
	    };
	    _Scanner.prototype.scanOperator = function (start, str) {
	        assert(this.peek == lang_1.StringWrapper.charCodeAt(str, 0));
	        assert(collection_1.SetWrapper.has(OPERATORS, str));
	        this.advance();
	        return newOperatorToken(start, str);
	    };
	    _Scanner.prototype.scanComplexOperator = function (start, code, one, two) {
	        assert(this.peek == lang_1.StringWrapper.charCodeAt(one, 0));
	        this.advance();
	        var str = one;
	        while (this.peek == code) {
	            this.advance();
	            str += two;
	        }
	        assert(collection_1.SetWrapper.has(OPERATORS, str));
	        return newOperatorToken(start, str);
	    };
	    _Scanner.prototype.scanIdentifier = function () {
	        assert(isIdentifierStart(this.peek));
	        var start = this.index;
	        this.advance();
	        while (isIdentifierPart(this.peek)) this.advance();
	        var str = this.input.substring(start, this.index);
	        if (collection_1.SetWrapper.has(KEYWORDS, str)) {
	            return newKeywordToken(start, str);
	        } else {
	            return newIdentifierToken(start, str);
	        }
	    };
	    _Scanner.prototype.scanNumber = function (start) {
	        assert(isDigit(this.peek));
	        var simple = this.index === start;
	        this.advance(); // Skip initial digit.
	        while (true) {
	            if (isDigit(this.peek)) {} else if (this.peek == exports.$PERIOD) {
	                simple = false;
	            } else if (isExponentStart(this.peek)) {
	                this.advance();
	                if (isExponentSign(this.peek)) this.advance();
	                if (!isDigit(this.peek)) this.error("Invalid exponent", -1);
	                simple = false;
	            } else {
	                break;
	            }
	            this.advance();
	        }
	        var str = this.input.substring(start, this.index);
	        // TODO
	        var value = simple ? lang_1.NumberWrapper.parseIntAutoRadix(str) : lang_1.NumberWrapper.parseFloat(str);
	        return newNumberToken(start, value);
	    };
	    _Scanner.prototype.scanString = function () {
	        assert(this.peek == exports.$SQ || this.peek == exports.$DQ);
	        var start = this.index;
	        var quote = this.peek;
	        this.advance(); // Skip initial quote.
	        var buffer;
	        var marker = this.index;
	        var input = this.input;
	        while (this.peek != quote) {
	            if (this.peek == exports.$BACKSLASH) {
	                if (buffer == null) buffer = new lang_1.StringJoiner();
	                buffer.add(input.substring(marker, this.index));
	                this.advance();
	                var unescapedCode;
	                if (this.peek == $u) {
	                    // 4 character hex code for unicode character.
	                    var hex = input.substring(this.index + 1, this.index + 5);
	                    try {
	                        unescapedCode = lang_1.NumberWrapper.parseInt(hex, 16);
	                    } catch (e) {
	                        this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                    }
	                    for (var i = 0; i < 5; i++) {
	                        this.advance();
	                    }
	                } else {
	                    unescapedCode = unescape(this.peek);
	                    this.advance();
	                }
	                buffer.add(lang_1.StringWrapper.fromCharCode(unescapedCode));
	                marker = this.index;
	            } else if (this.peek == exports.$EOF) {
	                this.error("Unterminated quote", 0);
	            } else {
	                this.advance();
	            }
	        }
	        var last = input.substring(marker, this.index);
	        this.advance(); // Skip terminating quote.
	        // Compute the unescaped string value.
	        var unescaped = last;
	        if (buffer != null) {
	            buffer.add(last);
	            unescaped = buffer.toString();
	        }
	        return newStringToken(start, unescaped);
	    };
	    _Scanner.prototype.error = function (message, offset) {
	        var position = this.index + offset;
	        throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    };
	    return _Scanner;
	})();
	function isWhitespace(code) {
	    return code >= exports.$TAB && code <= exports.$SPACE || code == $NBSP;
	}
	function isIdentifierStart(code) {
	    return $a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == exports.$$;
	}
	function isIdentifierPart(code) {
	    return $a <= code && code <= $z || $A <= code && code <= $Z || $0 <= code && code <= $9 || code == $_ || code == exports.$$;
	}
	function isDigit(code) {
	    return $0 <= code && code <= $9;
	}
	function isExponentStart(code) {
	    return code == $e || code == $E;
	}
	function isExponentSign(code) {
	    return code == exports.$MINUS || code == exports.$PLUS;
	}
	function unescape(code) {
	    switch (code) {
	        case $n:
	            return exports.$LF;
	        case $f:
	            return exports.$FF;
	        case $r:
	            return exports.$CR;
	        case $t:
	            return exports.$TAB;
	        case $v:
	            return exports.$VTAB;
	        default:
	            return code;
	    }
	}
	var OPERATORS = collection_1.SetWrapper.createFromList(["+", "-", "*", "/", "%", "^", "=", "==", "!=", "===", "!==", "<", ">", "<=", ">=", "&&", "||", "&", "|", "!", "?", "#"]);
	var KEYWORDS = collection_1.SetWrapper.createFromList(["var", "null", "undefined", "true", "false"]);
	exports.__esModule = true;
	//# sourceMappingURL=lexer.js.map

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var annotations_1 = __webpack_require__(126);
	var decorators_1 = __webpack_require__(127);
	exports.Inject = decorators_1.makeParamDecorator(annotations_1.InjectAnnotation);
	exports.InjectPromise = decorators_1.makeParamDecorator(annotations_1.InjectPromiseAnnotation);
	exports.InjectLazy = decorators_1.makeParamDecorator(annotations_1.InjectLazyAnnotation);
	exports.Optional = decorators_1.makeParamDecorator(annotations_1.OptionalAnnotation);
	exports.Injectable = decorators_1.makeDecorator(annotations_1.InjectableAnnotation);
	exports.__esModule = true;
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This indirection is needed to free up Component, etc symbols in the public API
	 * to be used by the decorator versions of these annotations.
	 */
	var annotations_impl_1 = __webpack_require__(119);
	exports.InjectAnnotation = annotations_impl_1.Inject;
	exports.InjectPromiseAnnotation = annotations_impl_1.InjectPromise;
	exports.InjectLazyAnnotation = annotations_impl_1.InjectLazy;
	exports.OptionalAnnotation = annotations_impl_1.Optional;
	exports.InjectableAnnotation = annotations_impl_1.Injectable;
	exports.DependencyAnnotation = annotations_impl_1.DependencyAnnotation;
	exports.__esModule = true;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	function makeDecorator(annotationCls) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var Reflect = lang_1.global.Reflect;
	        if (!(Reflect && Reflect.getMetadata)) {
	            throw 'reflect-metadata shim is required when using class decorators';
	        }
	        var annotationInstance = Object.create(annotationCls.prototype);
	        annotationCls.apply(annotationInstance, args);
	        return function (cls) {
	            var annotations = Reflect.getMetadata('annotations', cls);
	            annotations = annotations || [];
	            annotations.push(annotationInstance);
	            Reflect.defineMetadata('annotations', annotations, cls);
	            return cls;
	        };
	    };
	}
	exports.makeDecorator = makeDecorator;
	function makeParamDecorator(annotationCls) {
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i - 0] = arguments[_i];
	        }
	        var Reflect = lang_1.global.Reflect;
	        if (!(Reflect && Reflect.getMetadata)) {
	            throw 'reflect-metadata shim is required when using parameter decorators';
	        }
	        var annotationInstance = Object.create(annotationCls.prototype);
	        annotationCls.apply(annotationInstance, args);
	        return function (cls, unusedKey, index) {
	            var parameters = Reflect.getMetadata('parameters', cls);
	            parameters = parameters || [];
	            // there might be gaps if some in between parameters do not have annotations.
	            // we pad with nulls.
	            while (parameters.length <= index) {
	                parameters.push(null);
	            }
	            parameters[index] = parameters[index] || [];
	            var annotationsForParam = parameters[index];
	            annotationsForParam.push(annotationInstance);
	            Reflect.defineMetadata('parameters', parameters, cls);
	            return cls;
	        };
	    };
	}
	exports.makeParamDecorator = makeParamDecorator;
	exports.__esModule = true;
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(125);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var lexer_1 = __webpack_require__(124);
	var reflection_1 = __webpack_require__(129);
	var ast_1 = __webpack_require__(123);
	var _implicitReceiver = new ast_1.ImplicitReceiver();
	// TODO(tbosch): Cannot make this const/final right now because of the transpiler...
	var INTERPOLATION_REGEXP = lang_1.RegExpWrapper.create("\\{\\{(.*?)\\}\\}");
	var Parser = (function () {
	    function Parser(lexer, providedReflector) {
	        if (providedReflector === void 0) {
	            providedReflector = null;
	        }
	        this._lexer = lexer;
	        this._reflector = lang_1.isPresent(providedReflector) ? providedReflector : reflection_1.reflector;
	    }
	    Parser.prototype.parseAction = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.parseBinding = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	        return new ast_1.ASTWithSource(ast, input, location);
	    };
	    Parser.prototype.addPipes = function (bindingAst, pipes) {
	        if (collection_1.ListWrapper.isEmpty(pipes)) return bindingAst;
	        var res = collection_1.ListWrapper.reduce(pipes, function (result, currentPipeName) {
	            return new ast_1.Pipe(result, currentPipeName, [], false);
	        }, bindingAst.ast);
	        return new ast_1.ASTWithSource(res, bindingAst.source, bindingAst.location);
	    };
	    Parser.prototype.parseTemplateBindings = function (input, location) {
	        var tokens = this._lexer.tokenize(input);
	        return new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings();
	    };
	    Parser.prototype.parseInterpolation = function (input, location) {
	        var parts = lang_1.StringWrapper.split(input, INTERPOLATION_REGEXP);
	        if (parts.length <= 1) {
	            return null;
	        }
	        var strings = [];
	        var expressions = [];
	        for (var i = 0; i < parts.length; i++) {
	            var part = parts[i];
	            if (i % 2 === 0) {
	                // fixed string
	                collection_1.ListWrapper.push(strings, part);
	            } else {
	                var tokens = this._lexer.tokenize(part);
	                var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	                collection_1.ListWrapper.push(expressions, ast);
	            }
	        }
	        return new ast_1.ASTWithSource(new ast_1.Interpolation(strings, expressions), input, location);
	    };
	    Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	        return new ast_1.ASTWithSource(new ast_1.LiteralPrimitive(input), input, location);
	    };
	    Parser = __decorate([decorators_1.Injectable(), __metadata("design:paramtypes", [lexer_1.Lexer, reflection_1.Reflector])], Parser);
	    return Parser;
	})();
	exports.Parser = Parser;
	var _ParseAST = (function () {
	    function _ParseAST(input, location, tokens, reflector, parseAction) {
	        this.input = input;
	        this.location = location;
	        this.tokens = tokens;
	        this.reflector = reflector;
	        this.parseAction = parseAction;
	        this.index = 0;
	    }
	    _ParseAST.prototype.peek = function (offset) {
	        var i = this.index + offset;
	        return i < this.tokens.length ? this.tokens[i] : lexer_1.EOF;
	    };
	    Object.defineProperty(_ParseAST.prototype, "next", {
	        get: function get() {
	            return this.peek(0);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	        get: function get() {
	            return this.index < this.tokens.length ? this.next.index : this.input.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    _ParseAST.prototype.advance = function () {
	        this.index++;
	    };
	    _ParseAST.prototype.optionalCharacter = function (code) {
	        if (this.next.isCharacter(code)) {
	            this.advance();
	            return true;
	        } else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.optionalKeywordVar = function () {
	        if (this.peekKeywordVar()) {
	            this.advance();
	            return true;
	        } else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.peekKeywordVar = function () {
	        return this.next.isKeywordVar() || this.next.isOperator("#");
	    };
	    _ParseAST.prototype.expectCharacter = function (code) {
	        if (this.optionalCharacter(code)) return;
	        this.error("Missing expected " + lang_1.StringWrapper.fromCharCode(code));
	    };
	    _ParseAST.prototype.optionalOperator = function (op) {
	        if (this.next.isOperator(op)) {
	            this.advance();
	            return true;
	        } else {
	            return false;
	        }
	    };
	    _ParseAST.prototype.expectOperator = function (operator) {
	        if (this.optionalOperator(operator)) return;
	        this.error("Missing expected operator " + operator);
	    };
	    _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword()) {
	            this.error("Unexpected token " + n + ", expected identifier or keyword");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	        var n = this.next;
	        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	            this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	        }
	        this.advance();
	        return n.toString();
	    };
	    _ParseAST.prototype.parseChain = function () {
	        var exprs = [];
	        while (this.index < this.tokens.length) {
	            var expr = this.parsePipe();
	            collection_1.ListWrapper.push(exprs, expr);
	            if (this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                if (!this.parseAction) {
	                    this.error("Binding expression cannot contain chained expression");
	                }
	                while (this.optionalCharacter(lexer_1.$SEMICOLON)) {} // read all semicolons
	            } else if (this.index < this.tokens.length) {
	                this.error("Unexpected token '" + this.next + "'");
	            }
	        }
	        if (exprs.length == 0) return new ast_1.EmptyExpr();
	        if (exprs.length == 1) return exprs[0];
	        return new ast_1.Chain(exprs);
	    };
	    _ParseAST.prototype.parsePipe = function () {
	        var result = this.parseExpression();
	        if (this.optionalOperator("|")) {
	            return this.parseInlinedPipe(result);
	        } else {
	            return result;
	        }
	    };
	    _ParseAST.prototype.parseExpression = function () {
	        var start = this.inputIndex;
	        var result = this.parseConditional();
	        while (this.next.isOperator("=")) {
	            if (!result.isAssignable) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Expression " + expression + " is not assignable");
	            }
	            if (!this.parseAction) {
	                this.error("Binding expression cannot contain assignments");
	            }
	            this.expectOperator("=");
	            result = new ast_1.Assignment(result, this.parseConditional());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseConditional = function () {
	        var start = this.inputIndex;
	        var result = this.parseLogicalOr();
	        if (this.optionalOperator("?")) {
	            var yes = this.parseExpression();
	            if (!this.optionalCharacter(lexer_1.$COLON)) {
	                var end = this.inputIndex;
	                var expression = this.input.substring(start, end);
	                this.error("Conditional expression " + expression + " requires all 3 expressions");
	            }
	            var no = this.parseExpression();
	            return new ast_1.Conditional(result, yes, no);
	        } else {
	            return result;
	        }
	    };
	    _ParseAST.prototype.parseLogicalOr = function () {
	        // '||'
	        var result = this.parseLogicalAnd();
	        while (this.optionalOperator("||")) {
	            result = new ast_1.Binary("||", result, this.parseLogicalAnd());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLogicalAnd = function () {
	        // '&&'
	        var result = this.parseEquality();
	        while (this.optionalOperator("&&")) {
	            result = new ast_1.Binary("&&", result, this.parseEquality());
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseEquality = function () {
	        // '==','!=','===','!=='
	        var result = this.parseRelational();
	        while (true) {
	            if (this.optionalOperator("==")) {
	                result = new ast_1.Binary("==", result, this.parseRelational());
	            } else if (this.optionalOperator("===")) {
	                result = new ast_1.Binary("===", result, this.parseRelational());
	            } else if (this.optionalOperator("!=")) {
	                result = new ast_1.Binary("!=", result, this.parseRelational());
	            } else if (this.optionalOperator("!==")) {
	                result = new ast_1.Binary("!==", result, this.parseRelational());
	            } else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseRelational = function () {
	        // '<', '>', '<=', '>='
	        var result = this.parseAdditive();
	        while (true) {
	            if (this.optionalOperator("<")) {
	                result = new ast_1.Binary("<", result, this.parseAdditive());
	            } else if (this.optionalOperator(">")) {
	                result = new ast_1.Binary(">", result, this.parseAdditive());
	            } else if (this.optionalOperator("<=")) {
	                result = new ast_1.Binary("<=", result, this.parseAdditive());
	            } else if (this.optionalOperator(">=")) {
	                result = new ast_1.Binary(">=", result, this.parseAdditive());
	            } else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseAdditive = function () {
	        // '+', '-'
	        var result = this.parseMultiplicative();
	        while (true) {
	            if (this.optionalOperator("+")) {
	                result = new ast_1.Binary("+", result, this.parseMultiplicative());
	            } else if (this.optionalOperator("-")) {
	                result = new ast_1.Binary("-", result, this.parseMultiplicative());
	            } else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parseMultiplicative = function () {
	        // '*', '%', '/'
	        var result = this.parsePrefix();
	        while (true) {
	            if (this.optionalOperator("*")) {
	                result = new ast_1.Binary("*", result, this.parsePrefix());
	            } else if (this.optionalOperator("%")) {
	                result = new ast_1.Binary("%", result, this.parsePrefix());
	            } else if (this.optionalOperator("/")) {
	                result = new ast_1.Binary("/", result, this.parsePrefix());
	            } else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrefix = function () {
	        if (this.optionalOperator("+")) {
	            return this.parsePrefix();
	        } else if (this.optionalOperator("-")) {
	            return new ast_1.Binary("-", new ast_1.LiteralPrimitive(0), this.parsePrefix());
	        } else if (this.optionalOperator("!")) {
	            return new ast_1.PrefixNot(this.parsePrefix());
	        } else {
	            return this.parseCallChain();
	        }
	    };
	    _ParseAST.prototype.parseCallChain = function () {
	        var result = this.parsePrimary();
	        while (true) {
	            if (this.optionalCharacter(lexer_1.$PERIOD)) {
	                result = this.parseAccessMemberOrMethodCall(result);
	            } else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	                var key = this.parseExpression();
	                this.expectCharacter(lexer_1.$RBRACKET);
	                result = new ast_1.KeyedAccess(result, key);
	            } else if (this.optionalCharacter(lexer_1.$LPAREN)) {
	                var args = this.parseCallArguments();
	                this.expectCharacter(lexer_1.$RPAREN);
	                result = new ast_1.FunctionCall(result, args);
	            } else {
	                return result;
	            }
	        }
	    };
	    _ParseAST.prototype.parsePrimary = function () {
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var result = this.parsePipe();
	            this.expectCharacter(lexer_1.$RPAREN);
	            return result;
	        } else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(null);
	        } else if (this.next.isKeywordTrue()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(true);
	        } else if (this.next.isKeywordFalse()) {
	            this.advance();
	            return new ast_1.LiteralPrimitive(false);
	        } else if (this.optionalCharacter(lexer_1.$LBRACKET)) {
	            var elements = this.parseExpressionList(lexer_1.$RBRACKET);
	            this.expectCharacter(lexer_1.$RBRACKET);
	            return new ast_1.LiteralArray(elements);
	        } else if (this.next.isCharacter(lexer_1.$LBRACE)) {
	            return this.parseLiteralMap();
	        } else if (this.next.isIdentifier()) {
	            return this.parseAccessMemberOrMethodCall(_implicitReceiver);
	        } else if (this.next.isNumber()) {
	            var value = this.next.toNumber();
	            this.advance();
	            return new ast_1.LiteralPrimitive(value);
	        } else if (this.next.isString()) {
	            var literalValue = this.next.toString();
	            this.advance();
	            return new ast_1.LiteralPrimitive(literalValue);
	        } else if (this.index >= this.tokens.length) {
	            this.error("Unexpected end of expression: " + this.input);
	        } else {
	            this.error("Unexpected token " + this.next);
	        }
	    };
	    _ParseAST.prototype.parseExpressionList = function (terminator) {
	        var result = [];
	        if (!this.next.isCharacter(terminator)) {
	            do {
	                collection_1.ListWrapper.push(result, this.parseExpression());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	        }
	        return result;
	    };
	    _ParseAST.prototype.parseLiteralMap = function () {
	        var keys = [];
	        var values = [];
	        this.expectCharacter(lexer_1.$LBRACE);
	        if (!this.optionalCharacter(lexer_1.$RBRACE)) {
	            do {
	                var key = this.expectIdentifierOrKeywordOrString();
	                collection_1.ListWrapper.push(keys, key);
	                this.expectCharacter(lexer_1.$COLON);
	                collection_1.ListWrapper.push(values, this.parseExpression());
	            } while (this.optionalCharacter(lexer_1.$COMMA));
	            this.expectCharacter(lexer_1.$RBRACE);
	        }
	        return new ast_1.LiteralMap(keys, values);
	    };
	    _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver) {
	        var id = this.expectIdentifierOrKeyword();
	        if (this.optionalCharacter(lexer_1.$LPAREN)) {
	            var args = this.parseCallArguments();
	            this.expectCharacter(lexer_1.$RPAREN);
	            var fn = this.reflector.method(id);
	            return new ast_1.MethodCall(receiver, id, fn, args);
	        } else {
	            var getter = this.reflector.getter(id);
	            var setter = this.reflector.setter(id);
	            var am = new ast_1.AccessMember(receiver, id, getter, setter);
	            if (this.optionalOperator("|")) {
	                return this.parseInlinedPipe(am);
	            } else {
	                return am;
	            }
	        }
	    };
	    _ParseAST.prototype.parseInlinedPipe = function (result) {
	        do {
	            if (this.parseAction) {
	                this.error("Cannot have a pipe in an action expression");
	            }
	            var name = this.expectIdentifierOrKeyword();
	            var args = collection_1.ListWrapper.create();
	            while (this.optionalCharacter(lexer_1.$COLON)) {
	                collection_1.ListWrapper.push(args, this.parseExpression());
	            }
	            result = new ast_1.Pipe(result, name, args, true);
	        } while (this.optionalOperator("|"));
	        return result;
	    };
	    _ParseAST.prototype.parseCallArguments = function () {
	        if (this.next.isCharacter(lexer_1.$RPAREN)) return [];
	        var positionals = [];
	        do {
	            collection_1.ListWrapper.push(positionals, this.parseExpression());
	        } while (this.optionalCharacter(lexer_1.$COMMA));
	        return positionals;
	    };
	    /**
	     * An identifier, a keyword, a string with an optional `-` inbetween.
	     */
	    _ParseAST.prototype.expectTemplateBindingKey = function () {
	        var result = "";
	        var operatorFound = false;
	        do {
	            result += this.expectIdentifierOrKeywordOrString();
	            operatorFound = this.optionalOperator("-");
	            if (operatorFound) {
	                result += "-";
	            }
	        } while (operatorFound);
	        return result.toString();
	    };
	    _ParseAST.prototype.parseTemplateBindings = function () {
	        var bindings = [];
	        var prefix = null;
	        while (this.index < this.tokens.length) {
	            var keyIsVar = this.optionalKeywordVar();
	            var key = this.expectTemplateBindingKey();
	            if (!keyIsVar) {
	                if (prefix == null) {
	                    prefix = key;
	                } else {
	                    key = prefix + "-" + key;
	                }
	            }
	            this.optionalCharacter(lexer_1.$COLON);
	            var name = null;
	            var expression = null;
	            if (this.next !== lexer_1.EOF) {
	                if (keyIsVar) {
	                    if (this.optionalOperator("=")) {
	                        name = this.expectTemplateBindingKey();
	                    } else {
	                        name = "$implicit";
	                    }
	                } else if (!this.peekKeywordVar()) {
	                    var start = this.inputIndex;
	                    var ast = this.parsePipe();
	                    var source = this.input.substring(start, this.inputIndex);
	                    expression = new ast_1.ASTWithSource(ast, source, this.location);
	                }
	            }
	            collection_1.ListWrapper.push(bindings, new ast_1.TemplateBinding(key, keyIsVar, name, expression));
	            if (!this.optionalCharacter(lexer_1.$SEMICOLON)) {
	                this.optionalCharacter(lexer_1.$COMMA);
	            }
	        }
	        return bindings;
	    };
	    _ParseAST.prototype.error = function (message, index) {
	        if (index === void 0) {
	            index = null;
	        }
	        if (lang_1.isBlank(index)) index = this.index;
	        var location = index < this.tokens.length ? "at column " + (this.tokens[index].index + 1) + " in" : "at the end of the expression";
	        throw new lang_1.BaseException("Parser Error: " + message + " " + location + " [" + this.input + "] in " + this.location);
	    };
	    return _ParseAST;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=parser.js.map

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	var reflector_1 = __webpack_require__(130);
	var reflector_2 = __webpack_require__(130);
	exports.Reflector = reflector_2.Reflector;
	var reflection_capabilities_1 = __webpack_require__(132);
	exports.reflector = new reflector_1.Reflector(new reflection_capabilities_1.ReflectionCapabilities());
	exports.__esModule = true;
	//# sourceMappingURL=reflection.js.map

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	var types_1 = __webpack_require__(131);
	exports.SetterFn = types_1.SetterFn;
	exports.GetterFn = types_1.GetterFn;
	exports.MethodFn = types_1.MethodFn;
	var Reflector = (function () {
	    function Reflector(reflectionCapabilities) {
	        this._typeInfo = collection_1.MapWrapper.create();
	        this._getters = collection_1.MapWrapper.create();
	        this._setters = collection_1.MapWrapper.create();
	        this._methods = collection_1.MapWrapper.create();
	        this.reflectionCapabilities = reflectionCapabilities;
	    }
	    Reflector.prototype.registerType = function (type, typeInfo) {
	        collection_1.MapWrapper.set(this._typeInfo, type, typeInfo);
	    };
	    Reflector.prototype.registerGetters = function (getters) {
	        _mergeMaps(this._getters, getters);
	    };
	    Reflector.prototype.registerSetters = function (setters) {
	        _mergeMaps(this._setters, setters);
	    };
	    Reflector.prototype.registerMethods = function (methods) {
	        _mergeMaps(this._methods, methods);
	    };
	    Reflector.prototype.factory = function (type) {
	        if (collection_1.MapWrapper.contains(this._typeInfo, type)) {
	            return collection_1.MapWrapper.get(this._typeInfo, type)['factory'];
	        } else {
	            return this.reflectionCapabilities.factory(type);
	        }
	    };
	    Reflector.prototype.parameters = function (typeOfFunc) {
	        if (collection_1.MapWrapper.contains(this._typeInfo, typeOfFunc)) {
	            return collection_1.MapWrapper.get(this._typeInfo, typeOfFunc)['parameters'];
	        } else {
	            return this.reflectionCapabilities.parameters(typeOfFunc);
	        }
	    };
	    Reflector.prototype.annotations = function (typeOfFunc) {
	        if (collection_1.MapWrapper.contains(this._typeInfo, typeOfFunc)) {
	            return collection_1.MapWrapper.get(this._typeInfo, typeOfFunc)['annotations'];
	        } else {
	            return this.reflectionCapabilities.annotations(typeOfFunc);
	        }
	    };
	    Reflector.prototype.getter = function (name) {
	        if (collection_1.MapWrapper.contains(this._getters, name)) {
	            return collection_1.MapWrapper.get(this._getters, name);
	        } else {
	            return this.reflectionCapabilities.getter(name);
	        }
	    };
	    Reflector.prototype.setter = function (name) {
	        if (collection_1.MapWrapper.contains(this._setters, name)) {
	            return collection_1.MapWrapper.get(this._setters, name);
	        } else {
	            return this.reflectionCapabilities.setter(name);
	        }
	    };
	    Reflector.prototype.method = function (name) {
	        if (collection_1.MapWrapper.contains(this._methods, name)) {
	            return collection_1.MapWrapper.get(this._methods, name);
	        } else {
	            return this.reflectionCapabilities.method(name);
	        }
	    };
	    return Reflector;
	})();
	exports.Reflector = Reflector;
	function _mergeMaps(target, config) {
	    collection_1.StringMapWrapper.forEach(config, function (v, k) {
	        return collection_1.MapWrapper.set(target, k, v);
	    });
	}
	exports.__esModule = true;
	//# sourceMappingURL=reflector.js.map

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	exports.__esModule = true;
	//# sourceMappingURL=types.js.map

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var ReflectionCapabilities = (function () {
	    function ReflectionCapabilities(reflect) {
	        this._reflect = lang_1.isPresent(reflect) ? reflect : lang_1.global.Reflect;
	    }
	    ReflectionCapabilities.prototype.factory = function (t) {
	        switch (t.length) {
	            case 0:
	                return function () {
	                    return new t();
	                };
	            case 1:
	                return function (a1) {
	                    return new t(a1);
	                };
	            case 2:
	                return function (a1, a2) {
	                    return new t(a1, a2);
	                };
	            case 3:
	                return function (a1, a2, a3) {
	                    return new t(a1, a2, a3);
	                };
	            case 4:
	                return function (a1, a2, a3, a4) {
	                    return new t(a1, a2, a3, a4);
	                };
	            case 5:
	                return function (a1, a2, a3, a4, a5) {
	                    return new t(a1, a2, a3, a4, a5);
	                };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) {
	                    return new t(a1, a2, a3, a4, a5, a6);
	                };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7);
	                };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8);
	                };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9);
	                };
	            case 10:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
	                    return new t(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	                };
	        }
	        ;
	        throw new Error('Cannot create a factory for \'' + lang_1.stringify(t) + '\' because its constructor has more than 10 arguments');
	    };
	    ReflectionCapabilities.prototype._zipTypesAndAnnotaions = function (paramTypes, paramAnnotations) {
	        var result;
	        if (typeof paramTypes === 'undefined') {
	            result = collection_1.ListWrapper.createFixedSize(paramAnnotations.length);
	        } else {
	            result = collection_1.ListWrapper.createFixedSize(paramTypes.length);
	        }
	        for (var i = 0; i < result.length; i++) {
	            // TS outputs Object for parameters without types, while Traceur omits
	            // the annotations. For now we preserve the Traceur behavior to aid
	            // migration, but this can be revisited.
	            if (typeof paramTypes === 'undefined') {
	                result[i] = [];
	            } else if (paramTypes[i] != Object) {
	                result[i] = [paramTypes[i]];
	            } else {
	                result[i] = [];
	            }
	            if (lang_1.isPresent(paramAnnotations) && lang_1.isPresent(paramAnnotations[i])) {
	                result[i] = result[i].concat(paramAnnotations[i]);
	            }
	        }
	        return result;
	    };
	    ReflectionCapabilities.prototype.parameters = function (typeOfFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOfFunc.parameters)) {
	            return typeOfFunc.parameters;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var paramAnnotations = this._reflect.getMetadata('parameters', typeOfFunc);
	            var paramTypes = this._reflect.getMetadata('design:paramtypes', typeOfFunc);
	            if (lang_1.isPresent(paramTypes) || lang_1.isPresent(paramAnnotations)) {
	                return this._zipTypesAndAnnotaions(paramTypes, paramAnnotations);
	            }
	        }
	        return collection_1.ListWrapper.createFixedSize(typeOfFunc.length);
	    };
	    ReflectionCapabilities.prototype.annotations = function (typeOfFunc) {
	        // Prefer the direct API.
	        if (lang_1.isPresent(typeOfFunc.annotations)) {
	            return typeOfFunc.annotations;
	        }
	        if (lang_1.isPresent(this._reflect) && lang_1.isPresent(this._reflect.getMetadata)) {
	            var annotations = this._reflect.getMetadata('annotations', typeOfFunc);
	            if (lang_1.isPresent(annotations)) return annotations;
	        }
	        return [];
	    };
	    ReflectionCapabilities.prototype.getter = function (name) {
	        return new Function('o', 'return o.' + name + ';');
	    };
	    ReflectionCapabilities.prototype.setter = function (name) {
	        return new Function('o', 'v', 'return o.' + name + ' = v;');
	    };
	    ReflectionCapabilities.prototype.method = function (name) {
	        var functionBody = 'if (!o.' + name + ') throw new Error(\'"' + name + '" is undefined\');\n        return o.' + name + '.apply(o, args);';
	        return new Function('o', 'args', functionBody);
	    };
	    return ReflectionCapabilities;
	})();
	exports.ReflectionCapabilities = ReflectionCapabilities;
	exports.__esModule = true;
	//# sourceMappingURL=reflection_capabilities.js.map

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var Locals = (function () {
	    function Locals(parent, current) {
	        this.parent = parent;
	        this.current = current;
	    }
	    Locals.prototype.contains = function (name) {
	        if (collection_1.MapWrapper.contains(this.current, name)) {
	            return true;
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.contains(name);
	        }
	        return false;
	    };
	    Locals.prototype.get = function (name) {
	        if (collection_1.MapWrapper.contains(this.current, name)) {
	            return collection_1.MapWrapper.get(this.current, name);
	        }
	        if (lang_1.isPresent(this.parent)) {
	            return this.parent.get(name);
	        }
	        throw new lang_1.BaseException('Cannot find \'' + name + '\'');
	    };
	    Locals.prototype.set = function (name, value) {
	        // TODO(rado): consider removing this check if we can guarantee this is not
	        // exposed to the public API.
	        // TODO: vsavkin maybe it should check only the local map
	        if (collection_1.MapWrapper.contains(this.current, name)) {
	            collection_1.MapWrapper.set(this.current, name, value);
	        } else {
	            throw new lang_1.BaseException('Setting of new keys post-construction is not supported.');
	        }
	    };
	    Locals.prototype.clearValues = function () {
	        collection_1.MapWrapper.clearValues(this.current);
	    };
	    return Locals;
	})();
	exports.Locals = Locals;
	exports.__esModule = true;
	//# sourceMappingURL=locals.js.map

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var ExpressionChangedAfterItHasBeenChecked = (function (_super) {
	    __extends(ExpressionChangedAfterItHasBeenChecked, _super);
	    function ExpressionChangedAfterItHasBeenChecked(proto, change) {
	        _super.call(this);
	        this.message = "Expression '" + proto.expressionAsString + "' has changed after it was checked. " + ("Previous value: '" + change.previousValue + "'. Current value: '" + change.currentValue + "'");
	    }
	    ExpressionChangedAfterItHasBeenChecked.prototype.toString = function () {
	        return this.message;
	    };
	    return ExpressionChangedAfterItHasBeenChecked;
	})(lang_1.BaseException);
	exports.ExpressionChangedAfterItHasBeenChecked = ExpressionChangedAfterItHasBeenChecked;
	var ChangeDetectionError = (function (_super) {
	    __extends(ChangeDetectionError, _super);
	    function ChangeDetectionError(proto, originalException) {
	        _super.call(this);
	        this.originalException = originalException;
	        this.location = proto.expressionAsString;
	        this.message = this.originalException + " in [" + this.location + "]";
	    }
	    ChangeDetectionError.prototype.toString = function () {
	        return this.message;
	    };
	    return ChangeDetectionError;
	})(lang_1.BaseException);
	exports.ChangeDetectionError = ChangeDetectionError;
	exports.__esModule = true;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var ProtoChangeDetector = (function () {
	    function ProtoChangeDetector() {}
	    ProtoChangeDetector.prototype.instantiate = function (dispatcher) {
	        return null;
	    };
	    return ProtoChangeDetector;
	})();
	exports.ProtoChangeDetector = ProtoChangeDetector;
	/**
	 * Interface used by Angular to control the change detection strategy for an application.
	 *
	 * Angular implements the following change detection strategies by default:
	 *
	 * - {@link DynamicChangeDetection}: slower, but does not require `eval()`.
	 * - {@link JitChangeDetection}: faster, but requires `eval()`.
	 *
	 * In JavaScript, you should always use `JitChangeDetection`, unless you are in an environment that
	 *has
	 * [CSP](https://developer.mozilla.org/en-US/docs/Web/Security/CSP), such as a Chrome Extension.
	 *
	 * In Dart, use `DynamicChangeDetection` during development. The Angular transformer generates an
	 *analog to the
	 * `JitChangeDetection` strategy at compile time.
	 *
	 *
	 * See: {@link DynamicChangeDetection}, {@link JitChangeDetection}
	 *
	 * # Example
	 * ```javascript
	 * bootstrap(MyApp, [bind(ChangeDetection).toClass(DynamicChangeDetection)]);
	 * ```
	 * @exportedAs angular2/change_detection
	 */
	var ChangeDetection = (function () {
	    function ChangeDetection() {}
	    ChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        return null;
	    };
	    return ChangeDetection;
	})();
	exports.ChangeDetection = ChangeDetection;
	var ChangeDispatcher = (function () {
	    function ChangeDispatcher() {}
	    ChangeDispatcher.prototype.notifyOnBinding = function (bindingRecord, value) {};
	    return ChangeDispatcher;
	})();
	exports.ChangeDispatcher = ChangeDispatcher;
	var ChangeDetector = (function () {
	    function ChangeDetector() {}
	    ChangeDetector.prototype.addChild = function (cd) {};
	    ChangeDetector.prototype.addShadowDomChild = function (cd) {};
	    ChangeDetector.prototype.removeChild = function (cd) {};
	    ChangeDetector.prototype.removeShadowDomChild = function (cd) {};
	    ChangeDetector.prototype.remove = function () {};
	    ChangeDetector.prototype.hydrate = function (context, locals, directives) {};
	    ChangeDetector.prototype.dehydrate = function () {};
	    ChangeDetector.prototype.markPathToRootAsCheckOnce = function () {};
	    ChangeDetector.prototype.detectChanges = function () {};
	    ChangeDetector.prototype.checkNoChanges = function () {};
	    return ChangeDetector;
	})();
	exports.ChangeDetector = ChangeDetector;
	var ChangeDetectorDefinition = (function () {
	    function ChangeDetectorDefinition(id, strategy, variableNames, bindingRecords, directiveRecords) {
	        this.id = id;
	        this.strategy = strategy;
	        this.variableNames = variableNames;
	        this.bindingRecords = bindingRecords;
	        this.directiveRecords = directiveRecords;
	    }
	    return ChangeDetectorDefinition;
	})();
	exports.ChangeDetectorDefinition = ChangeDetectorDefinition;
	exports.__esModule = true;
	//# sourceMappingURL=interfaces.js.map

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	// TODO:vsavkin Use enums after switching to TypeScript
	/**
	 * CHECK_ONCE means that after calling detectChanges the mode of the change detector
	 * will become CHECKED.
	 */
	exports.CHECK_ONCE = "CHECK_ONCE";
	/**
	 * CHECKED means that the change detector should be skipped until its mode changes to
	 * CHECK_ONCE or CHECK_ALWAYS.
	 */
	exports.CHECKED = "CHECKED";
	/**
	 * CHECK_ALWAYS means that after calling detectChanges the mode of the change detector
	 * will remain CHECK_ALWAYS.
	 */
	exports.CHECK_ALWAYS = "ALWAYS_CHECK";
	/**
	 * DETACHED means that the change detector sub tree is not a part of the main tree and
	 * should be skipped.
	 */
	exports.DETACHED = "DETACHED";
	/**
	 * ON_PUSH means that the change detector's mode will be set to CHECK_ONCE during hydration.
	 */
	exports.ON_PUSH = "ON_PUSH";
	/**
	 * DEFAULT means that the change detector's mode will be set to CHECK_ALWAYS during hydration.
	 */
	exports.DEFAULT = "DEFAULT";
	exports.__esModule = true;
	//# sourceMappingURL=constants.js.map

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var ast_1 = __webpack_require__(123);
	var interfaces_1 = __webpack_require__(135);
	var change_detection_util_1 = __webpack_require__(139);
	var dynamic_change_detector_1 = __webpack_require__(138);
	var change_detection_jit_generator_1 = __webpack_require__(144);
	var directive_record_1 = __webpack_require__(145);
	var coalesce_1 = __webpack_require__(146);
	var proto_record_1 = __webpack_require__(143);
	var DynamicProtoChangeDetector = (function (_super) {
	    __extends(DynamicProtoChangeDetector, _super);
	    function DynamicProtoChangeDetector(_pipeRegistry, definition) {
	        _super.call(this);
	        this._pipeRegistry = _pipeRegistry;
	        this.definition = definition;
	        this._records = this._createRecords(definition);
	    }
	    DynamicProtoChangeDetector.prototype.instantiate = function (dispatcher) {
	        return new dynamic_change_detector_1.DynamicChangeDetector(this.definition.strategy, dispatcher, this._pipeRegistry, this._records, this.definition.directiveRecords);
	    };
	    DynamicProtoChangeDetector.prototype._createRecords = function (definition) {
	        var recordBuilder = new ProtoRecordBuilder();
	        collection_1.ListWrapper.forEach(definition.bindingRecords, function (b) {
	            recordBuilder.addAst(b, definition.variableNames);
	        });
	        return coalesce_1.coalesce(recordBuilder.records);
	    };
	    return DynamicProtoChangeDetector;
	})(interfaces_1.ProtoChangeDetector);
	exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
	var _jitProtoChangeDetectorClassCounter = 0;
	var JitProtoChangeDetector = (function (_super) {
	    __extends(JitProtoChangeDetector, _super);
	    function JitProtoChangeDetector(_pipeRegistry, definition) {
	        _super.call(this);
	        this._pipeRegistry = _pipeRegistry;
	        this.definition = definition;
	        this._factory = this._createFactory(definition);
	    }
	    JitProtoChangeDetector.prototype.instantiate = function (dispatcher) {
	        return this._factory(dispatcher, this._pipeRegistry);
	    };
	    JitProtoChangeDetector.prototype._createFactory = function (definition) {
	        var recordBuilder = new ProtoRecordBuilder();
	        collection_1.ListWrapper.forEach(definition.bindingRecords, function (b) {
	            recordBuilder.addAst(b, definition.variableNames);
	        });
	        var c = _jitProtoChangeDetectorClassCounter++;
	        var records = coalesce_1.coalesce(recordBuilder.records);
	        var typeName = 'ChangeDetector' + c;
	        return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(typeName, definition.strategy, records, this.definition.directiveRecords).generate();
	    };
	    return JitProtoChangeDetector;
	})(interfaces_1.ProtoChangeDetector);
	exports.JitProtoChangeDetector = JitProtoChangeDetector;
	var ProtoRecordBuilder = (function () {
	    function ProtoRecordBuilder() {
	        this.records = [];
	    }
	    ProtoRecordBuilder.prototype.addAst = function (b, variableNames) {
	        if (variableNames === void 0) {
	            variableNames = null;
	        }
	        var oldLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(oldLast) && oldLast.bindingRecord.directiveRecord == b.directiveRecord) {
	            oldLast.lastInDirective = false;
	        }
	        _ConvertAstIntoProtoRecords.append(this.records, b, variableNames);
	        var newLast = collection_1.ListWrapper.last(this.records);
	        if (lang_1.isPresent(newLast) && newLast !== oldLast) {
	            newLast.lastInBinding = true;
	            newLast.lastInDirective = true;
	        }
	    };
	    return ProtoRecordBuilder;
	})();
	var _ConvertAstIntoProtoRecords = (function () {
	    function _ConvertAstIntoProtoRecords(_records, _bindingRecord, _expressionAsString, _variableNames) {
	        this._records = _records;
	        this._bindingRecord = _bindingRecord;
	        this._expressionAsString = _expressionAsString;
	        this._variableNames = _variableNames;
	    }
	    _ConvertAstIntoProtoRecords.append = function (records, b, variableNames) {
	        var c = new _ConvertAstIntoProtoRecords(records, b, b.ast.toString(), variableNames);
	        b.ast.visit(c);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver = function (ast) {
	        return this._bindingRecord.implicitReceiver;
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitInterpolation = function (ast) {
	        var args = this._visitAll(ast.expressions);
	        return this._addRecord(proto_record_1.RECORD_TYPE_INTERPOLATE, 'interpolate', _interpolationFn(ast.strings), args, ast.strings, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive = function (ast) {
	        return this._addRecord(proto_record_1.RECORD_TYPE_CONST, 'literal', ast.value, [], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitAccessMember = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name) && ast.receiver instanceof ast_1.ImplicitReceiver) {
	            return this._addRecord(proto_record_1.RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);
	        } else {
	            return this._addRecord(proto_record_1.RECORD_TYPE_PROPERTY, ast.name, ast.getter, [], null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitMethodCall = function (ast) {
	        var receiver = ast.receiver.visit(this);
	        var args = this._visitAll(ast.args);
	        if (lang_1.isPresent(this._variableNames) && collection_1.ListWrapper.contains(this._variableNames, ast.name)) {
	            var target = this._addRecord(proto_record_1.RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);
	            return this._addRecord(proto_record_1.RECORD_TYPE_INVOKE_CLOSURE, 'closure', null, args, null, target);
	        } else {
	            return this._addRecord(proto_record_1.RECORD_TYPE_INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
	        }
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitFunctionCall = function (ast) {
	        var target = ast.target.visit(this);
	        var args = this._visitAll(ast.args);
	        return this._addRecord(proto_record_1.RECORD_TYPE_INVOKE_CLOSURE, 'closure', null, args, null, target);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralArray = function (ast) {
	        var primitiveName = 'arrayFn' + ast.expressions.length;
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitLiteralMap = function (ast) {
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, _mapPrimitiveName(ast.keys), change_detection_util_1.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitBinary = function (ast) {
	        var left = ast.left.visit(this);
	        var right = ast.right.visit(this);
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPrefixNot = function (ast) {
	        var exp = ast.expression.visit(this);
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, 'operation_negate', change_detection_util_1.ChangeDetectionUtil.operation_negate, [exp], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitConditional = function (ast) {
	        var c = ast.condition.visit(this);
	        var t = ast.trueExp.visit(this);
	        var f = ast.falseExp.visit(this);
	        return this._addRecord(proto_record_1.RECORD_TYPE_PRIMITIVE_OP, 'cond', change_detection_util_1.ChangeDetectionUtil.cond, [c, t, f], null, 0);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitPipe = function (ast) {
	        var value = ast.exp.visit(this);
	        var type = ast.inBinding ? proto_record_1.RECORD_TYPE_BINDING_PIPE : proto_record_1.RECORD_TYPE_PIPE;
	        return this._addRecord(type, ast.name, ast.name, [], null, value);
	    };
	    _ConvertAstIntoProtoRecords.prototype.visitKeyedAccess = function (ast) {
	        var obj = ast.obj.visit(this);
	        var key = ast.key.visit(this);
	        return this._addRecord(proto_record_1.RECORD_TYPE_KEYED_ACCESS, 'keyedAccess', change_detection_util_1.ChangeDetectionUtil.keyedAccess, [key], null, obj);
	    };
	    _ConvertAstIntoProtoRecords.prototype._visitAll = function (asts) {
	        var res = collection_1.ListWrapper.createFixedSize(asts.length);
	        for (var i = 0; i < asts.length; ++i) {
	            res[i] = asts[i].visit(this);
	        }
	        return res;
	    };
	    _ConvertAstIntoProtoRecords.prototype._addRecord = function (type, name, funcOrValue, args, fixedArgs, context) {
	        var selfIndex = this._records.length + 1;
	        if (context instanceof directive_record_1.DirectiveIndex) {
	            collection_1.ListWrapper.push(this._records, new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this._bindingRecord, this._expressionAsString, false, false));
	        } else {
	            collection_1.ListWrapper.push(this._records, new proto_record_1.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this._bindingRecord, this._expressionAsString, false, false));
	        }
	        return selfIndex;
	    };
	    return _ConvertAstIntoProtoRecords;
	})();
	function _arrayFn(length) {
	    switch (length) {
	        case 0:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn0;
	        case 1:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn1;
	        case 2:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn2;
	        case 3:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn3;
	        case 4:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn4;
	        case 5:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn5;
	        case 6:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn6;
	        case 7:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn7;
	        case 8:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn8;
	        case 9:
	            return change_detection_util_1.ChangeDetectionUtil.arrayFn9;
	        default:
	            throw new lang_1.BaseException('Does not support literal maps with more than 9 elements');
	    }
	}
	function _mapPrimitiveName(keys) {
	    var stringifiedKeys = collection_1.ListWrapper.join(collection_1.ListWrapper.map(keys, function (k) {
	        return lang_1.isString(k) ? '"' + k + '"' : '' + k;
	    }), ', ');
	    return 'mapFn([' + stringifiedKeys + '])';
	}
	function _operationToPrimitiveName(operation) {
	    switch (operation) {
	        case '+':
	            return 'operation_add';
	        case '-':
	            return 'operation_subtract';
	        case '*':
	            return 'operation_multiply';
	        case '/':
	            return 'operation_divide';
	        case '%':
	            return 'operation_remainder';
	        case '==':
	            return 'operation_equals';
	        case '!=':
	            return 'operation_not_equals';
	        case '===':
	            return 'operation_identical';
	        case '!==':
	            return 'operation_not_identical';
	        case '<':
	            return 'operation_less_then';
	        case '>':
	            return 'operation_greater_then';
	        case '<=':
	            return 'operation_less_or_equals_then';
	        case '>=':
	            return 'operation_greater_or_equals_then';
	        case '&&':
	            return 'operation_logical_and';
	        case '||':
	            return 'operation_logical_or';
	        default:
	            throw new lang_1.BaseException('Unsupported operation ' + operation);
	    }
	}
	function _operationToFunction(operation) {
	    switch (operation) {
	        case '+':
	            return change_detection_util_1.ChangeDetectionUtil.operation_add;
	        case '-':
	            return change_detection_util_1.ChangeDetectionUtil.operation_subtract;
	        case '*':
	            return change_detection_util_1.ChangeDetectionUtil.operation_multiply;
	        case '/':
	            return change_detection_util_1.ChangeDetectionUtil.operation_divide;
	        case '%':
	            return change_detection_util_1.ChangeDetectionUtil.operation_remainder;
	        case '==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_equals;
	        case '!=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_equals;
	        case '===':
	            return change_detection_util_1.ChangeDetectionUtil.operation_identical;
	        case '!==':
	            return change_detection_util_1.ChangeDetectionUtil.operation_not_identical;
	        case '<':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_then;
	        case '>':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_then;
	        case '<=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_less_or_equals_then;
	        case '>=':
	            return change_detection_util_1.ChangeDetectionUtil.operation_greater_or_equals_then;
	        case '&&':
	            return change_detection_util_1.ChangeDetectionUtil.operation_logical_and;
	        case '||':
	            return change_detection_util_1.ChangeDetectionUtil.operation_logical_or;
	        default:
	            throw new lang_1.BaseException('Unsupported operation ' + operation);
	    }
	}
	function s(v) {
	    return lang_1.isPresent(v) ? '' + v : '';
	}
	function _interpolationFn(strings) {
	    var length = strings.length;
	    var c0 = length > 0 ? strings[0] : null;
	    var c1 = length > 1 ? strings[1] : null;
	    var c2 = length > 2 ? strings[2] : null;
	    var c3 = length > 3 ? strings[3] : null;
	    var c4 = length > 4 ? strings[4] : null;
	    var c5 = length > 5 ? strings[5] : null;
	    var c6 = length > 6 ? strings[6] : null;
	    var c7 = length > 7 ? strings[7] : null;
	    var c8 = length > 8 ? strings[8] : null;
	    var c9 = length > 9 ? strings[9] : null;
	    switch (length - 1) {
	        case 1:
	            return function (a1) {
	                return c0 + s(a1) + c1;
	            };
	        case 2:
	            return function (a1, a2) {
	                return c0 + s(a1) + c1 + s(a2) + c2;
	            };
	        case 3:
	            return function (a1, a2, a3) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3;
	            };
	        case 4:
	            return function (a1, a2, a3, a4) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4;
	            };
	        case 5:
	            return function (a1, a2, a3, a4, a5) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
	            };
	        case 6:
	            return function (a1, a2, a3, a4, a5, a6) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
	            };
	        case 7:
	            return function (a1, a2, a3, a4, a5, a6, a7) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7;
	            };
	        case 8:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8;
	            };
	        case 9:
	            return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8 + s(a9) + c9;
	            };
	        default:
	            throw new lang_1.BaseException('Does not support more than 9 expressions');
	    }
	}
	exports.__esModule = true;
	//# sourceMappingURL=proto_change_detector.js.map

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var abstract_change_detector_1 = __webpack_require__(141);
	var change_detection_util_1 = __webpack_require__(139);
	var proto_record_1 = __webpack_require__(143);
	var exceptions_1 = __webpack_require__(134);
	var DynamicChangeDetector = (function (_super) {
	    __extends(DynamicChangeDetector, _super);
	    function DynamicChangeDetector(changeControlStrategy, dispatcher, pipeRegistry, protos, directiveRecords) {
	        _super.call(this);
	        this.changeControlStrategy = changeControlStrategy;
	        this.dispatcher = dispatcher;
	        this.pipeRegistry = pipeRegistry;
	        this.protos = protos;
	        this.directiveRecords = directiveRecords;
	        this.values = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.pipes = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.prevContexts = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        this.changes = collection_1.ListWrapper.createFixedSize(protos.length + 1);
	        collection_1.ListWrapper.fill(this.values, change_detection_util_1.uninitialized);
	        collection_1.ListWrapper.fill(this.pipes, null);
	        collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.uninitialized);
	        collection_1.ListWrapper.fill(this.changes, false);
	        this.locals = null;
	        this.directives = null;
	    }
	    DynamicChangeDetector.prototype.hydrate = function (context, locals, directives) {
	        this.mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.changeControlStrategy);
	        this.values[0] = context;
	        this.locals = locals;
	        this.directives = directives;
	    };
	    DynamicChangeDetector.prototype.dehydrate = function () {
	        this._destroyPipes();
	        collection_1.ListWrapper.fill(this.values, change_detection_util_1.uninitialized);
	        collection_1.ListWrapper.fill(this.changes, false);
	        collection_1.ListWrapper.fill(this.pipes, null);
	        collection_1.ListWrapper.fill(this.prevContexts, change_detection_util_1.uninitialized);
	        this.locals = null;
	    };
	    DynamicChangeDetector.prototype._destroyPipes = function () {
	        for (var i = 0; i < this.pipes.length; ++i) {
	            if (lang_1.isPresent(this.pipes[i])) {
	                this.pipes[i].onDestroy();
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.hydrated = function () {
	        return this.values[0] !== change_detection_util_1.uninitialized;
	    };
	    DynamicChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) {
	        var protos = this.protos;
	        var changes = null;
	        var isChanged = false;
	        for (var i = 0; i < protos.length; ++i) {
	            var proto = protos[i];
	            var bindingRecord = proto.bindingRecord;
	            var directiveRecord = bindingRecord.directiveRecord;
	            var change = this._check(proto, throwOnChange);
	            if (lang_1.isPresent(change)) {
	                this._updateDirectiveOrElement(change, bindingRecord);
	                isChanged = true;
	                changes = this._addChange(bindingRecord, change, changes);
	            }
	            if (proto.lastInDirective) {
	                if (lang_1.isPresent(changes)) {
	                    this._getDirectiveFor(directiveRecord.directiveIndex).onChange(changes);
	                    changes = null;
	                }
	                if (isChanged && bindingRecord.isOnPushChangeDetection()) {
	                    this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
	                }
	                isChanged = false;
	            }
	        }
	    };
	    DynamicChangeDetector.prototype.callOnAllChangesDone = function () {
	        var dirs = this.directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callOnAllChangesDone) {
	                this._getDirectiveFor(dir.directiveIndex).onAllChangesDone();
	            }
	        }
	    };
	    DynamicChangeDetector.prototype._updateDirectiveOrElement = function (change, bindingRecord) {
	        if (lang_1.isBlank(bindingRecord.directiveRecord)) {
	            this.dispatcher.notifyOnBinding(bindingRecord, change.currentValue);
	        } else {
	            var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
	            bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
	        }
	    };
	    DynamicChangeDetector.prototype._addChange = function (bindingRecord, change, changes) {
	        if (bindingRecord.callOnChange()) {
	            return change_detection_util_1.ChangeDetectionUtil.addChange(changes, bindingRecord.propertyName, change);
	        } else {
	            return changes;
	        }
	    };
	    DynamicChangeDetector.prototype._getDirectiveFor = function (directiveIndex) {
	        return this.directives.getDirectiveFor(directiveIndex);
	    };
	    DynamicChangeDetector.prototype._getDetectorFor = function (directiveIndex) {
	        return this.directives.getDetectorFor(directiveIndex);
	    };
	    DynamicChangeDetector.prototype._check = function (proto, throwOnChange) {
	        try {
	            if (proto.mode === proto_record_1.RECORD_TYPE_PIPE || proto.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE) {
	                return this._pipeCheck(proto, throwOnChange);
	            } else {
	                return this._referenceCheck(proto, throwOnChange);
	            }
	        } catch (e) {
	            throw new exceptions_1.ChangeDetectionError(proto, e);
	        }
	    };
	    DynamicChangeDetector.prototype._referenceCheck = function (proto, throwOnChange) {
	        if (this._pureFuncAndArgsDidNotChange(proto)) {
	            this._setChanged(proto, false);
	            return null;
	        }
	        var prevValue = this._readSelf(proto);
	        var currValue = this._calculateCurrValue(proto);
	        if (!isSame(prevValue, currValue)) {
	            if (proto.lastInBinding) {
	                var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                if (throwOnChange) change_detection_util_1.ChangeDetectionUtil.throwOnChange(proto, change);
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return change;
	            } else {
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return null;
	            }
	        } else {
	            this._setChanged(proto, false);
	            return null;
	        }
	    };
	    DynamicChangeDetector.prototype._calculateCurrValue = function (proto) {
	        switch (proto.mode) {
	            case proto_record_1.RECORD_TYPE_SELF:
	                return this._readContext(proto);
	            case proto_record_1.RECORD_TYPE_CONST:
	                return proto.funcOrValue;
	            case proto_record_1.RECORD_TYPE_PROPERTY:
	                var context = this._readContext(proto);
	                return proto.funcOrValue(context);
	            case proto_record_1.RECORD_TYPE_LOCAL:
	                return this.locals.get(proto.name);
	            case proto_record_1.RECORD_TYPE_INVOKE_METHOD:
	                var context = this._readContext(proto);
	                var args = this._readArgs(proto);
	                return proto.funcOrValue(context, args);
	            case proto_record_1.RECORD_TYPE_KEYED_ACCESS:
	                var arg = this._readArgs(proto)[0];
	                return this._readContext(proto)[arg];
	            case proto_record_1.RECORD_TYPE_INVOKE_CLOSURE:
	                return lang_1.FunctionWrapper.apply(this._readContext(proto), this._readArgs(proto));
	            case proto_record_1.RECORD_TYPE_INTERPOLATE:
	            case proto_record_1.RECORD_TYPE_PRIMITIVE_OP:
	                return lang_1.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto));
	            default:
	                throw new lang_1.BaseException('Unknown operation ' + proto.mode);
	        }
	    };
	    DynamicChangeDetector.prototype._pipeCheck = function (proto, throwOnChange) {
	        var context = this._readContext(proto);
	        var pipe = this._pipeFor(proto, context);
	        var prevValue = this._readSelf(proto);
	        var currValue = pipe.transform(context);
	        if (!isSame(prevValue, currValue)) {
	            currValue = change_detection_util_1.ChangeDetectionUtil.unwrapValue(currValue);
	            if (proto.lastInBinding) {
	                var change = change_detection_util_1.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	                if (throwOnChange) change_detection_util_1.ChangeDetectionUtil.throwOnChange(proto, change);
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return change;
	            } else {
	                this._writeSelf(proto, currValue);
	                this._setChanged(proto, true);
	                return null;
	            }
	        } else {
	            this._setChanged(proto, false);
	            return null;
	        }
	    };
	    DynamicChangeDetector.prototype._pipeFor = function (proto, context) {
	        var storedPipe = this._readPipe(proto);
	        if (lang_1.isPresent(storedPipe) && storedPipe.supports(context)) {
	            return storedPipe;
	        }
	        if (lang_1.isPresent(storedPipe)) {
	            storedPipe.onDestroy();
	        }
	        // Currently, only pipes that used in bindings in the template get
	        // the changeDetectorRef of the encompassing component.
	        //
	        // In the future, pipes declared in the bind configuration should
	        // be able to access the changeDetectorRef of that component.
	        var cdr = proto.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE ? this.ref : null;
	        var pipe = this.pipeRegistry.get(proto.name, context, cdr);
	        this._writePipe(proto, pipe);
	        return pipe;
	    };
	    DynamicChangeDetector.prototype._readContext = function (proto) {
	        if (proto.contextIndex == -1) {
	            return this._getDirectiveFor(proto.directiveIndex);
	        } else {
	            return this.values[proto.contextIndex];
	        }
	        return this.values[proto.contextIndex];
	    };
	    DynamicChangeDetector.prototype._readSelf = function (proto) {
	        return this.values[proto.selfIndex];
	    };
	    DynamicChangeDetector.prototype._writeSelf = function (proto, value) {
	        this.values[proto.selfIndex] = value;
	    };
	    DynamicChangeDetector.prototype._readPipe = function (proto) {
	        return this.pipes[proto.selfIndex];
	    };
	    DynamicChangeDetector.prototype._writePipe = function (proto, value) {
	        this.pipes[proto.selfIndex] = value;
	    };
	    DynamicChangeDetector.prototype._setChanged = function (proto, value) {
	        this.changes[proto.selfIndex] = value;
	    };
	    DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange = function (proto) {
	        return proto.isPureFunction() && !this._argsChanged(proto);
	    };
	    DynamicChangeDetector.prototype._argsChanged = function (proto) {
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            if (this.changes[args[i]]) {
	                return true;
	            }
	        }
	        return false;
	    };
	    DynamicChangeDetector.prototype._readArgs = function (proto) {
	        var res = collection_1.ListWrapper.createFixedSize(proto.args.length);
	        var args = proto.args;
	        for (var i = 0; i < args.length; ++i) {
	            res[i] = this.values[args[i]];
	        }
	        return res;
	    };
	    return DynamicChangeDetector;
	})(abstract_change_detector_1.AbstractChangeDetector);
	exports.DynamicChangeDetector = DynamicChangeDetector;
	function isSame(a, b) {
	    if (a === b) return true;
	    if (a instanceof String && b instanceof String && a == b) return true;
	    if (a !== a && b !== b) return true;
	    return false;
	}
	exports.__esModule = true;
	//# sourceMappingURL=dynamic_change_detector.js.map

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var exceptions_1 = __webpack_require__(134);
	var pipe_1 = __webpack_require__(140);
	var constants_1 = __webpack_require__(136);
	exports.uninitialized = new Object();
	var SimpleChange = (function () {
	    function SimpleChange(previousValue, currentValue) {
	        this.previousValue = previousValue;
	        this.currentValue = currentValue;
	    }
	    return SimpleChange;
	})();
	exports.SimpleChange = SimpleChange;
	var _simpleChangesIndex = 0;
	var _simpleChanges = [new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null)];
	function _simpleChange(previousValue, currentValue) {
	    var index = _simpleChangesIndex++ % 20;
	    var s = _simpleChanges[index];
	    s.previousValue = previousValue;
	    s.currentValue = currentValue;
	    return s;
	}
	var ChangeDetectionUtil = (function () {
	    function ChangeDetectionUtil() {}
	    ChangeDetectionUtil.uninitialized = function () {
	        return exports.uninitialized;
	    };
	    ChangeDetectionUtil.arrayFn0 = function () {
	        return [];
	    };
	    ChangeDetectionUtil.arrayFn1 = function (a1) {
	        return [a1];
	    };
	    ChangeDetectionUtil.arrayFn2 = function (a1, a2) {
	        return [a1, a2];
	    };
	    ChangeDetectionUtil.arrayFn3 = function (a1, a2, a3) {
	        return [a1, a2, a3];
	    };
	    ChangeDetectionUtil.arrayFn4 = function (a1, a2, a3, a4) {
	        return [a1, a2, a3, a4];
	    };
	    ChangeDetectionUtil.arrayFn5 = function (a1, a2, a3, a4, a5) {
	        return [a1, a2, a3, a4, a5];
	    };
	    ChangeDetectionUtil.arrayFn6 = function (a1, a2, a3, a4, a5, a6) {
	        return [a1, a2, a3, a4, a5, a6];
	    };
	    ChangeDetectionUtil.arrayFn7 = function (a1, a2, a3, a4, a5, a6, a7) {
	        return [a1, a2, a3, a4, a5, a6, a7];
	    };
	    ChangeDetectionUtil.arrayFn8 = function (a1, a2, a3, a4, a5, a6, a7, a8) {
	        return [a1, a2, a3, a4, a5, a6, a7, a8];
	    };
	    ChangeDetectionUtil.arrayFn9 = function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
	    };
	    ChangeDetectionUtil.operation_negate = function (value) {
	        return !value;
	    };
	    ChangeDetectionUtil.operation_add = function (left, right) {
	        return left + right;
	    };
	    ChangeDetectionUtil.operation_subtract = function (left, right) {
	        return left - right;
	    };
	    ChangeDetectionUtil.operation_multiply = function (left, right) {
	        return left * right;
	    };
	    ChangeDetectionUtil.operation_divide = function (left, right) {
	        return left / right;
	    };
	    ChangeDetectionUtil.operation_remainder = function (left, right) {
	        return left % right;
	    };
	    ChangeDetectionUtil.operation_equals = function (left, right) {
	        return left == right;
	    };
	    ChangeDetectionUtil.operation_not_equals = function (left, right) {
	        return left != right;
	    };
	    ChangeDetectionUtil.operation_identical = function (left, right) {
	        return left === right;
	    };
	    ChangeDetectionUtil.operation_not_identical = function (left, right) {
	        return left !== right;
	    };
	    ChangeDetectionUtil.operation_less_then = function (left, right) {
	        return left < right;
	    };
	    ChangeDetectionUtil.operation_greater_then = function (left, right) {
	        return left > right;
	    };
	    ChangeDetectionUtil.operation_less_or_equals_then = function (left, right) {
	        return left <= right;
	    };
	    ChangeDetectionUtil.operation_greater_or_equals_then = function (left, right) {
	        return left >= right;
	    };
	    ChangeDetectionUtil.operation_logical_and = function (left, right) {
	        return left && right;
	    };
	    ChangeDetectionUtil.operation_logical_or = function (left, right) {
	        return left || right;
	    };
	    ChangeDetectionUtil.cond = function (cond, trueVal, falseVal) {
	        return cond ? trueVal : falseVal;
	    };
	    ChangeDetectionUtil.mapFn = function (keys) {
	        function buildMap(values) {
	            var res = collection_1.StringMapWrapper.create();
	            for (var i = 0; i < keys.length; ++i) {
	                collection_1.StringMapWrapper.set(res, keys[i], values[i]);
	            }
	            return res;
	        }
	        switch (keys.length) {
	            case 0:
	                return function () {
	                    return [];
	                };
	            case 1:
	                return function (a1) {
	                    return buildMap([a1]);
	                };
	            case 2:
	                return function (a1, a2) {
	                    return buildMap([a1, a2]);
	                };
	            case 3:
	                return function (a1, a2, a3) {
	                    return buildMap([a1, a2, a3]);
	                };
	            case 4:
	                return function (a1, a2, a3, a4) {
	                    return buildMap([a1, a2, a3, a4]);
	                };
	            case 5:
	                return function (a1, a2, a3, a4, a5) {
	                    return buildMap([a1, a2, a3, a4, a5]);
	                };
	            case 6:
	                return function (a1, a2, a3, a4, a5, a6) {
	                    return buildMap([a1, a2, a3, a4, a5, a6]);
	                };
	            case 7:
	                return function (a1, a2, a3, a4, a5, a6, a7) {
	                    return buildMap([a1, a2, a3, a4, a5, a6, a7]);
	                };
	            case 8:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8) {
	                    return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]);
	                };
	            case 9:
	                return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	                    return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
	                };
	            default:
	                throw new lang_1.BaseException('Does not support literal maps with more than 9 elements');
	        }
	    };
	    ChangeDetectionUtil.keyedAccess = function (obj, args) {
	        return obj[args[0]];
	    };
	    ChangeDetectionUtil.unwrapValue = function (value) {
	        if (value instanceof pipe_1.WrappedValue) {
	            return value.wrapped;
	        } else {
	            return value;
	        }
	    };
	    ChangeDetectionUtil.throwOnChange = function (proto, change) {
	        throw new exceptions_1.ExpressionChangedAfterItHasBeenChecked(proto, change);
	    };
	    ChangeDetectionUtil.changeDetectionMode = function (strategy) {
	        return strategy == constants_1.ON_PUSH ? constants_1.CHECK_ONCE : constants_1.CHECK_ALWAYS;
	    };
	    ChangeDetectionUtil.simpleChange = function (previousValue, currentValue) {
	        return _simpleChange(previousValue, currentValue);
	    };
	    ChangeDetectionUtil.addChange = function (changes, propertyName, change) {
	        if (lang_1.isBlank(changes)) {
	            changes = {};
	        }
	        changes[propertyName] = change;
	        return changes;
	    };
	    return ChangeDetectionUtil;
	})();
	exports.ChangeDetectionUtil = ChangeDetectionUtil;
	exports.__esModule = true;
	//# sourceMappingURL=change_detection_util.js.map

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	/**
	 * Indicates that the result of a {@link Pipe} transformation has changed even though the reference
	 *has not changed.
	 *
	 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	 *
	 * @exportedAs angular2/pipes
	 */
	var WrappedValue = (function () {
	    function WrappedValue(wrapped) {
	        this.wrapped = wrapped;
	    }
	    WrappedValue.wrap = function (value) {
	        var w = _wrappedValues[_wrappedIndex++ % 5];
	        w.wrapped = value;
	        return w;
	    };
	    return WrappedValue;
	})();
	exports.WrappedValue = WrappedValue;
	var _wrappedValues = [new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null)];
	var _wrappedIndex = 0;
	/**
	 * An interface for extending the list of pipes known to Angular.
	 *
	 * If you are writing a custom {@link Pipe}, you must extend this interface.
	 *
	 * #Example
	 *
	 * ```
	 * class DoublePipe extends Pipe {
	 *  supports(obj) {
	 *    return true;
	 *  }
	 *
	 *  transform(value) {
	 *    return `${value}${value}`;
	 *  }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var Pipe = (function () {
	    function Pipe() {}
	    Pipe.prototype.supports = function (obj) {
	        return false;
	    };
	    Pipe.prototype.onDestroy = function () {};
	    Pipe.prototype.transform = function (value) {
	        return null;
	    };
	    return Pipe;
	})();
	exports.Pipe = Pipe;
	// TODO: vsavkin: make it an interface
	var PipeFactory = (function () {
	    function PipeFactory() {}
	    PipeFactory.prototype.supports = function (obs) {
	        _abstract();
	        return false;
	    };
	    PipeFactory.prototype.create = function (cdRef) {
	        _abstract();
	        return null;
	    };
	    PipeFactory = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], PipeFactory);
	    return PipeFactory;
	})();
	exports.PipeFactory = PipeFactory;
	function _abstract() {
	    throw new lang_1.BaseException("This method is abstract");
	}
	exports.__esModule = true;
	//# sourceMappingURL=pipe.js.map

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var change_detector_ref_1 = __webpack_require__(142);
	var interfaces_1 = __webpack_require__(135);
	var constants_1 = __webpack_require__(136);
	var AbstractChangeDetector = (function (_super) {
	    __extends(AbstractChangeDetector, _super);
	    function AbstractChangeDetector() {
	        _super.call(this);
	        this.lightDomChildren = [];
	        this.shadowDomChildren = [];
	        this.ref = new change_detector_ref_1.ChangeDetectorRef(this);
	        this.mode = null;
	    }
	    AbstractChangeDetector.prototype.addChild = function (cd) {
	        collection_1.ListWrapper.push(this.lightDomChildren, cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeChild = function (cd) {
	        collection_1.ListWrapper.remove(this.lightDomChildren, cd);
	    };
	    AbstractChangeDetector.prototype.addShadowDomChild = function (cd) {
	        collection_1.ListWrapper.push(this.shadowDomChildren, cd);
	        cd.parent = this;
	    };
	    AbstractChangeDetector.prototype.removeShadowDomChild = function (cd) {
	        collection_1.ListWrapper.remove(this.shadowDomChildren, cd);
	    };
	    AbstractChangeDetector.prototype.remove = function () {
	        this.parent.removeChild(this);
	    };
	    AbstractChangeDetector.prototype.detectChanges = function () {
	        this._detectChanges(false);
	    };
	    AbstractChangeDetector.prototype.checkNoChanges = function () {
	        this._detectChanges(true);
	    };
	    AbstractChangeDetector.prototype._detectChanges = function (throwOnChange) {
	        if (this.mode === constants_1.DETACHED || this.mode === constants_1.CHECKED) return;
	        this.detectChangesInRecords(throwOnChange);
	        this._detectChangesInLightDomChildren(throwOnChange);
	        if (throwOnChange === false) this.callOnAllChangesDone();
	        this._detectChangesInShadowDomChildren(throwOnChange);
	        if (this.mode === constants_1.CHECK_ONCE) this.mode = constants_1.CHECKED;
	    };
	    AbstractChangeDetector.prototype.detectChangesInRecords = function (throwOnChange) {};
	    AbstractChangeDetector.prototype.callOnAllChangesDone = function () {};
	    AbstractChangeDetector.prototype._detectChangesInLightDomChildren = function (throwOnChange) {
	        var c = this.lightDomChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i]._detectChanges(throwOnChange);
	        }
	    };
	    AbstractChangeDetector.prototype._detectChangesInShadowDomChildren = function (throwOnChange) {
	        var c = this.shadowDomChildren;
	        for (var i = 0; i < c.length; ++i) {
	            c[i]._detectChanges(throwOnChange);
	        }
	    };
	    AbstractChangeDetector.prototype.markAsCheckOnce = function () {
	        this.mode = constants_1.CHECK_ONCE;
	    };
	    AbstractChangeDetector.prototype.markPathToRootAsCheckOnce = function () {
	        var c = this;
	        while (lang_1.isPresent(c) && c.mode != constants_1.DETACHED) {
	            if (c.mode === constants_1.CHECKED) c.mode = constants_1.CHECK_ONCE;
	            c = c.parent;
	        }
	    };
	    return AbstractChangeDetector;
	})(interfaces_1.ChangeDetector);
	exports.AbstractChangeDetector = AbstractChangeDetector;
	exports.__esModule = true;
	//# sourceMappingURL=abstract_change_detector.js.map

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	var constants_1 = __webpack_require__(136);
	/**
	 * Controls change detection.
	 *
	 * {@link ChangeDetectorRef} allows requesting checks for detectors that rely on observables. It
	 *also allows detaching and
	 * attaching change detector subtrees.
	 *
	 * @exportedAs angular2/change_detection
	 */
	var ChangeDetectorRef = (function () {
	  function ChangeDetectorRef(_cd) {
	    this._cd = _cd;
	  }
	  /**
	   * Request to check all ON_PUSH ancestors.
	   */
	  ChangeDetectorRef.prototype.requestCheck = function () {
	    this._cd.markPathToRootAsCheckOnce();
	  };
	  /**
	   * Detaches the change detector from the change detector tree.
	   *
	   * The detached change detector will not be checked until it is reattached.
	   */
	  ChangeDetectorRef.prototype.detach = function () {
	    this._cd.mode = constants_1.DETACHED;
	  };
	  /**
	   * Reattach the change detector to the change detector tree.
	   *
	   * This also requests a check of this change detector. This reattached change detector will be
	   *checked during the
	   * next change detection run.
	   */
	  ChangeDetectorRef.prototype.reattach = function () {
	    this._cd.mode = constants_1.CHECK_ALWAYS;
	    this.requestCheck();
	  };
	  return ChangeDetectorRef;
	})();
	exports.ChangeDetectorRef = ChangeDetectorRef;
	exports.__esModule = true;
	//# sourceMappingURL=change_detector_ref.js.map

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	exports.RECORD_TYPE_SELF = 0;
	exports.RECORD_TYPE_CONST = 1;
	exports.RECORD_TYPE_PRIMITIVE_OP = 2;
	exports.RECORD_TYPE_PROPERTY = 3;
	exports.RECORD_TYPE_LOCAL = 4;
	exports.RECORD_TYPE_INVOKE_METHOD = 5;
	exports.RECORD_TYPE_INVOKE_CLOSURE = 6;
	exports.RECORD_TYPE_KEYED_ACCESS = 7;
	exports.RECORD_TYPE_PIPE = 8;
	exports.RECORD_TYPE_BINDING_PIPE = 9;
	exports.RECORD_TYPE_INTERPOLATE = 10;
	var ProtoRecord = (function () {
	    function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, expressionAsString, lastInBinding, lastInDirective) {
	        this.mode = mode;
	        this.name = name;
	        this.funcOrValue = funcOrValue;
	        this.args = args;
	        this.fixedArgs = fixedArgs;
	        this.contextIndex = contextIndex;
	        this.directiveIndex = directiveIndex;
	        this.selfIndex = selfIndex;
	        this.bindingRecord = bindingRecord;
	        this.expressionAsString = expressionAsString;
	        this.lastInBinding = lastInBinding;
	        this.lastInDirective = lastInDirective;
	    }
	    ProtoRecord.prototype.isPureFunction = function () {
	        return this.mode === exports.RECORD_TYPE_INTERPOLATE || this.mode === exports.RECORD_TYPE_PRIMITIVE_OP;
	    };
	    return ProtoRecord;
	})();
	exports.ProtoRecord = ProtoRecord;
	exports.__esModule = true;
	//# sourceMappingURL=proto_record.js.map

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var abstract_change_detector_1 = __webpack_require__(141);
	var change_detection_util_1 = __webpack_require__(139);
	var proto_record_1 = __webpack_require__(143);
	/**
	 * The code generator takes a list of proto records and creates a function/class
	 * that "emulates" what the developer would write by hand to implement the same
	 * kind of behaviour.
	 *
	 * The implementation comprises two parts:
	 * * ChangeDetectorJITGenerator has the logic of how everything fits together.
	 * * template functions (e.g., constructorTemplate) define what code is generated.
	*/
	var ABSTRACT_CHANGE_DETECTOR = 'AbstractChangeDetector';
	var UTIL = 'ChangeDetectionUtil';
	var DISPATCHER_ACCESSOR = 'this.dispatcher';
	var PIPE_REGISTRY_ACCESSOR = 'this.pipeRegistry';
	var PROTOS_ACCESSOR = 'this.protos';
	var DIRECTIVES_ACCESSOR = 'this.directiveRecords';
	var CONTEXT_ACCESSOR = 'this.context';
	var IS_CHANGED_LOCAL = 'isChanged';
	var CHANGES_LOCAL = 'changes';
	var LOCALS_ACCESSOR = 'this.locals';
	var MODE_ACCESSOR = 'this.mode';
	var TEMP_LOCAL = 'temp';
	var CURRENT_PROTO = 'currentProto';
	function typeTemplate(type, cons, detectChanges, notifyOnAllChangesDone, setContext) {
	    return '\n' + cons + '\n' + detectChanges + '\n' + notifyOnAllChangesDone + '\n' + setContext + ';\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ' + type + '(dispatcher, pipeRegistry, protos, directiveRecords);\n}\n';
	}
	function constructorTemplate(type, fieldsDefinitions) {
	    return '\nvar ' + type + ' = function ' + type + '(dispatcher, pipeRegistry, protos, directiveRecords) {\n' + ABSTRACT_CHANGE_DETECTOR + '.call(this);\n' + DISPATCHER_ACCESSOR + ' = dispatcher;\n' + PIPE_REGISTRY_ACCESSOR + ' = pipeRegistry;\n' + PROTOS_ACCESSOR + ' = protos;\n' + DIRECTIVES_ACCESSOR + ' = directiveRecords;\n' + LOCALS_ACCESSOR + ' = null;\n' + fieldsDefinitions + '\n}\n\n' + type + '.prototype = Object.create(' + ABSTRACT_CHANGE_DETECTOR + '.prototype);\n';
	}
	function pipeOnDestroyTemplate(pipeNames) {
	    return pipeNames.map(function (p) {
	        return p + '.onDestroy()';
	    }).join('\n');
	}
	function hydrateTemplate(type, mode, fieldDefinitions, pipeOnDestroy, directiveFieldNames, detectorFieldNames) {
	    var directiveInit = '';
	    for (var i = 0; i < directiveFieldNames.length; ++i) {
	        directiveInit += directiveFieldNames[i] + ' = directives.getDirectiveFor(this.directiveRecords[' + i + '].directiveIndex);\n';
	    }
	    var detectorInit = '';
	    for (var i = 0; i < detectorFieldNames.length; ++i) {
	        detectorInit += detectorFieldNames[i] + ' = directives.getDetectorFor(this.directiveRecords[' + i + '].directiveIndex);\n';
	    }
	    return '\n' + type + '.prototype.hydrate = function(context, locals, directives) {\n  ' + MODE_ACCESSOR + ' = "' + mode + '";\n  ' + CONTEXT_ACCESSOR + ' = context;\n  ' + LOCALS_ACCESSOR + ' = locals;\n  ' + directiveInit + '\n  ' + detectorInit + '\n}\n' + type + '.prototype.dehydrate = function() {\n  ' + pipeOnDestroy + '\n  ' + fieldDefinitions + '\n  ' + LOCALS_ACCESSOR + ' = null;\n}\n' + type + '.prototype.hydrated = function() {\n  return ' + CONTEXT_ACCESSOR + ' !== ' + UTIL + '.uninitialized();\n}\n';
	}
	function detectChangesTemplate(type, body) {
	    return '\n' + type + '.prototype.detectChangesInRecords = function(throwOnChange) {\n  ' + body + '\n}\n';
	}
	function callOnAllChangesDoneTemplate(type, body) {
	    return '\n' + type + '.prototype.callOnAllChangesDone = function() {\n  ' + body + '\n}\n';
	}
	function onAllChangesDoneTemplate(directive) {
	    return directive + '.onAllChangesDone();';
	}
	function detectChangesBodyTemplate(localDefinitions, changeDefinitions, records) {
	    return '\n' + localDefinitions + '\n' + changeDefinitions + '\nvar ' + TEMP_LOCAL + ';\nvar ' + IS_CHANGED_LOCAL + ' = false;\nvar ' + CURRENT_PROTO + ';\nvar ' + CHANGES_LOCAL + ' = null;\n\ncontext = ' + CONTEXT_ACCESSOR + ';\n' + records + '\n';
	}
	function pipeCheckTemplate(protoIndex, context, bindingPropagationConfig, pipe, pipeType, oldValue, newValue, change, update, addToChanges, lastInDirective) {
	    return '\n' + CURRENT_PROTO + ' = ' + PROTOS_ACCESSOR + '[' + protoIndex + '];\nif (' + pipe + ' === ' + UTIL + '.uninitialized()) {\n  ' + pipe + ' = ' + PIPE_REGISTRY_ACCESSOR + '.get(\'' + pipeType + '\', ' + context + ', ' + bindingPropagationConfig + ');\n} else if (!' + pipe + '.supports(' + context + ')) {\n  ' + pipe + '.onDestroy();\n  ' + pipe + ' = ' + PIPE_REGISTRY_ACCESSOR + '.get(\'' + pipeType + '\', ' + context + ', ' + bindingPropagationConfig + ');\n}\n\n' + newValue + ' = ' + pipe + '.transform(' + context + ');\nif (' + oldValue + ' !== ' + newValue + ') {\n  ' + newValue + ' = ' + UTIL + '.unwrapValue(' + newValue + ');\n  ' + change + ' = true;\n  ' + update + '\n  ' + addToChanges + '\n  ' + oldValue + ' = ' + newValue + ';\n}\n' + lastInDirective + '\n';
	}
	function referenceCheckTemplate(protoIndex, assignment, oldValue, newValue, change, update, addToChanges, lastInDirective) {
	    return '\n' + CURRENT_PROTO + ' = ' + PROTOS_ACCESSOR + '[' + protoIndex + '];\n' + assignment + '\nif (' + newValue + ' !== ' + oldValue + ' || (' + newValue + ' !== ' + newValue + ') && (' + oldValue + ' !== ' + oldValue + ')) {\n  ' + change + ' = true;\n  ' + update + '\n  ' + addToChanges + '\n  ' + oldValue + ' = ' + newValue + ';\n}\n' + lastInDirective + '\n';
	}
	function assignmentTemplate(field, value) {
	    return field + ' = ' + value + ';';
	}
	function localDefinitionsTemplate(names) {
	    return names.map(function (n) {
	        return 'var ' + n + ';';
	    }).join('\n');
	}
	function changeDefinitionsTemplate(names) {
	    return names.map(function (n) {
	        return 'var ' + n + ' = false;';
	    }).join('\n');
	}
	function fieldDefinitionsTemplate(names) {
	    return names.map(function (n) {
	        return n + ' = ' + UTIL + '.uninitialized();';
	    }).join('\n');
	}
	function ifChangedGuardTemplate(changeNames, body) {
	    var cond = changeNames.join(' || ');
	    return '\nif (' + cond + ') {\n  ' + body + '\n}\n';
	}
	function addToChangesTemplate(oldValue, newValue) {
	    return CHANGES_LOCAL + ' = ' + UTIL + '.addChange(' + CHANGES_LOCAL + ', ' + CURRENT_PROTO + '.bindingRecord.propertyName, ' + UTIL + '.simpleChange(' + oldValue + ', ' + newValue + '));';
	}
	function updateDirectiveTemplate(oldValue, newValue, directiveProperty) {
	    return '\nif(throwOnChange) ' + UTIL + '.throwOnChange(' + CURRENT_PROTO + ', ' + UTIL + '.simpleChange(' + oldValue + ', ' + newValue + '));\n' + directiveProperty + ' = ' + newValue + ';\n' + IS_CHANGED_LOCAL + ' = true;\n  ';
	}
	function updateElementTemplate(oldValue, newValue) {
	    return '\nif(throwOnChange) ' + UTIL + '.throwOnChange(' + CURRENT_PROTO + ', ' + UTIL + '.simpleChange(' + oldValue + ', ' + newValue + '));\n' + DISPATCHER_ACCESSOR + '.notifyOnBinding(' + CURRENT_PROTO + '.bindingRecord, ' + newValue + ');\n  ';
	}
	function notifyOnChangesTemplate(directive) {
	    return '\nif(' + CHANGES_LOCAL + ') {\n  ' + directive + '.onChange(' + CHANGES_LOCAL + ');\n  ' + CHANGES_LOCAL + ' = null;\n}\n';
	}
	function notifyOnPushDetectorsTemplate(detector) {
	    return '\nif(' + IS_CHANGED_LOCAL + ') {\n  ' + detector + '.markAsCheckOnce();\n}\n';
	}
	function lastInDirectiveTemplate(notifyOnChanges, notifyOnPush) {
	    return '\n' + notifyOnChanges + '\n' + notifyOnPush + '\n' + IS_CHANGED_LOCAL + ' = false;\n';
	}
	var ChangeDetectorJITGenerator = (function () {
	    function ChangeDetectorJITGenerator(typeName, changeDetectionStrategy, records, directiveRecords) {
	        this.typeName = typeName;
	        this.changeDetectionStrategy = changeDetectionStrategy;
	        this.records = records;
	        this.directiveRecords = directiveRecords;
	        this.localNames = this.getLocalNames(records);
	        this.changeNames = this.getChangeNames(this.localNames);
	        this.fieldNames = this.getFieldNames(this.localNames);
	        this.pipeNames = this.getPipeNames(this.localNames);
	    }
	    ChangeDetectorJITGenerator.prototype.getLocalNames = function (records) {
	        var index = 0;
	        var names = records.map(function (r) {
	            var sanitizedName = r.name.replace(new RegExp('\\W', 'g'), '');
	            return '' + sanitizedName + index++;
	        });
	        return ['context'].concat(names);
	    };
	    ChangeDetectorJITGenerator.prototype.getChangeNames = function (localNames) {
	        return localNames.map(function (n) {
	            return 'change_' + n;
	        });
	    };
	    ChangeDetectorJITGenerator.prototype.getFieldNames = function (localNames) {
	        return localNames.map(function (n) {
	            return 'this.' + n;
	        });
	    };
	    ChangeDetectorJITGenerator.prototype.getPipeNames = function (localNames) {
	        return localNames.map(function (n) {
	            return 'this.' + n + '_pipe';
	        });
	    };
	    ChangeDetectorJITGenerator.prototype.generate = function () {
	        var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genCallOnAllChangesDone(), this.genHydrate());
	        return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', 'directiveRecords', text)(abstract_change_detector_1.AbstractChangeDetector, change_detection_util_1.ChangeDetectionUtil, this.records, this.directiveRecords);
	    };
	    ChangeDetectorJITGenerator.prototype.genConstructor = function () {
	        return constructorTemplate(this.typeName, this.genFieldDefinitions());
	    };
	    ChangeDetectorJITGenerator.prototype.genHydrate = function () {
	        var mode = change_detection_util_1.ChangeDetectionUtil.changeDetectionMode(this.changeDetectionStrategy);
	        return hydrateTemplate(this.typeName, mode, this.genFieldDefinitions(), pipeOnDestroyTemplate(this.getNonNullPipeNames()), this.getDirectiveFieldNames(), this.getDetectorFieldNames());
	    };
	    ChangeDetectorJITGenerator.prototype.getDirectiveFieldNames = function () {
	        var _this = this;
	        return this.directiveRecords.map(function (d) {
	            return _this.getDirective(d.directiveIndex);
	        });
	    };
	    ChangeDetectorJITGenerator.prototype.getDetectorFieldNames = function () {
	        var _this = this;
	        return this.directiveRecords.filter(function (r) {
	            return r.isOnPushChangeDetection();
	        }).map(function (d) {
	            return _this.getDetector(d.directiveIndex);
	        });
	    };
	    ChangeDetectorJITGenerator.prototype.getDirective = function (d) {
	        return 'this.directive_' + d.name;
	    };
	    ChangeDetectorJITGenerator.prototype.getDetector = function (d) {
	        return 'this.detector_' + d.name;
	    };
	    ChangeDetectorJITGenerator.prototype.genFieldDefinitions = function () {
	        var fields = [];
	        fields = fields.concat(this.fieldNames);
	        fields = fields.concat(this.getNonNullPipeNames());
	        fields = fields.concat(this.getDirectiveFieldNames());
	        fields = fields.concat(this.getDetectorFieldNames());
	        return fieldDefinitionsTemplate(fields);
	    };
	    ChangeDetectorJITGenerator.prototype.getNonNullPipeNames = function () {
	        var _this = this;
	        var pipes = [];
	        this.records.forEach(function (r) {
	            if (r.mode === proto_record_1.RECORD_TYPE_PIPE || r.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE) {
	                pipes.push(_this.pipeNames[r.selfIndex]);
	            }
	        });
	        return pipes;
	    };
	    ChangeDetectorJITGenerator.prototype.genDetectChanges = function () {
	        var body = this.genDetectChangesBody();
	        return detectChangesTemplate(this.typeName, body);
	    };
	    ChangeDetectorJITGenerator.prototype.genCallOnAllChangesDone = function () {
	        var notifications = [];
	        var dirs = this.directiveRecords;
	        for (var i = dirs.length - 1; i >= 0; --i) {
	            var dir = dirs[i];
	            if (dir.callOnAllChangesDone) {
	                var directive = 'this.directive_' + dir.directiveIndex.name;
	                notifications.push(onAllChangesDoneTemplate(directive));
	            }
	        }
	        return callOnAllChangesDoneTemplate(this.typeName, notifications.join(';\n'));
	    };
	    ChangeDetectorJITGenerator.prototype.genDetectChangesBody = function () {
	        var _this = this;
	        var rec = this.records.map(function (r) {
	            return _this.genRecord(r);
	        }).join('\n');
	        return detectChangesBodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec);
	    };
	    ChangeDetectorJITGenerator.prototype.genLocalDefinitions = function () {
	        return localDefinitionsTemplate(this.localNames);
	    };
	    ChangeDetectorJITGenerator.prototype.genChangeDefinitions = function () {
	        return changeDefinitionsTemplate(this.changeNames);
	    };
	    ChangeDetectorJITGenerator.prototype.genRecord = function (r) {
	        if (r.mode === proto_record_1.RECORD_TYPE_PIPE || r.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE) {
	            return this.genPipeCheck(r);
	        } else {
	            return this.genReferenceCheck(r);
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genPipeCheck = function (r) {
	        var context = this.localNames[r.contextIndex];
	        var oldValue = this.fieldNames[r.selfIndex];
	        var newValue = this.localNames[r.selfIndex];
	        var change = this.changeNames[r.selfIndex];
	        var pipe = this.pipeNames[r.selfIndex];
	        var cdRef = r.mode === proto_record_1.RECORD_TYPE_BINDING_PIPE ? 'this.ref' : 'null';
	        var update = this.genUpdateDirectiveOrElement(r);
	        var addToChanges = this.genAddToChanges(r);
	        var lastInDirective = this.genLastInDirective(r);
	        return pipeCheckTemplate(r.selfIndex - 1, context, cdRef, pipe, r.name, oldValue, newValue, change, update, addToChanges, lastInDirective);
	    };
	    ChangeDetectorJITGenerator.prototype.genReferenceCheck = function (r) {
	        var oldValue = this.fieldNames[r.selfIndex];
	        var newValue = this.localNames[r.selfIndex];
	        var change = this.changeNames[r.selfIndex];
	        var assignment = this.genUpdateCurrentValue(r);
	        var update = this.genUpdateDirectiveOrElement(r);
	        var addToChanges = this.genAddToChanges(r);
	        var lastInDirective = this.genLastInDirective(r);
	        var check = referenceCheckTemplate(r.selfIndex - 1, assignment, oldValue, newValue, change, update, addToChanges, lastInDirective);
	        if (r.isPureFunction()) {
	            return this.ifChangedGuard(r, check);
	        } else {
	            return check;
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genUpdateCurrentValue = function (r) {
	        var context = this.getContext(r);
	        var newValue = this.localNames[r.selfIndex];
	        var args = this.genArgs(r);
	        switch (r.mode) {
	            case proto_record_1.RECORD_TYPE_SELF:
	                return assignmentTemplate(newValue, context);
	            case proto_record_1.RECORD_TYPE_CONST:
	                return newValue + ' = ' + this.genLiteral(r.funcOrValue);
	            case proto_record_1.RECORD_TYPE_PROPERTY:
	                return assignmentTemplate(newValue, context + '.' + r.name);
	            case proto_record_1.RECORD_TYPE_LOCAL:
	                return assignmentTemplate(newValue, LOCALS_ACCESSOR + '.get(\'' + r.name + '\')');
	            case proto_record_1.RECORD_TYPE_INVOKE_METHOD:
	                return assignmentTemplate(newValue, context + '.' + r.name + '(' + args + ')');
	            case proto_record_1.RECORD_TYPE_INVOKE_CLOSURE:
	                return assignmentTemplate(newValue, context + '(' + args + ')');
	            case proto_record_1.RECORD_TYPE_PRIMITIVE_OP:
	                return assignmentTemplate(newValue, UTIL + '.' + r.name + '(' + args + ')');
	            case proto_record_1.RECORD_TYPE_INTERPOLATE:
	                return assignmentTemplate(newValue, this.genInterpolation(r));
	            case proto_record_1.RECORD_TYPE_KEYED_ACCESS:
	                var key = this.localNames[r.args[0]];
	                return assignmentTemplate(newValue, context + '[' + key + ']');
	            default:
	                throw new lang_1.BaseException('Unknown operation ' + r.mode);
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.getContext = function (r) {
	        if (r.contextIndex == -1) {
	            return this.getDirective(r.directiveIndex);
	        } else {
	            return this.localNames[r.contextIndex];
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.ifChangedGuard = function (r, body) {
	        var _this = this;
	        return ifChangedGuardTemplate(r.args.map(function (a) {
	            return _this.changeNames[a];
	        }), body);
	    };
	    ChangeDetectorJITGenerator.prototype.genInterpolation = function (r) {
	        var res = '';
	        for (var i = 0; i < r.args.length; ++i) {
	            res += this.genLiteral(r.fixedArgs[i]);
	            res += ' + ';
	            res += this.localNames[r.args[i]];
	            res += ' + ';
	        }
	        res += this.genLiteral(r.fixedArgs[r.args.length]);
	        return res;
	    };
	    ChangeDetectorJITGenerator.prototype.genLiteral = function (value) {
	        return JSON.stringify(value);
	    };
	    ChangeDetectorJITGenerator.prototype.genUpdateDirectiveOrElement = function (r) {
	        if (!r.lastInBinding) return '';
	        var newValue = this.localNames[r.selfIndex];
	        var oldValue = this.fieldNames[r.selfIndex];
	        var br = r.bindingRecord;
	        if (br.isDirective()) {
	            var directiveProperty = this.getDirective(br.directiveRecord.directiveIndex) + '.' + br.propertyName;
	            return updateDirectiveTemplate(oldValue, newValue, directiveProperty);
	        } else {
	            return updateElementTemplate(oldValue, newValue);
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genAddToChanges = function (r) {
	        var newValue = this.localNames[r.selfIndex];
	        var oldValue = this.fieldNames[r.selfIndex];
	        return r.bindingRecord.callOnChange() ? addToChangesTemplate(oldValue, newValue) : '';
	    };
	    ChangeDetectorJITGenerator.prototype.genLastInDirective = function (r) {
	        var onChanges = this.genNotifyOnChanges(r);
	        var onPush = this.genNotifyOnPushDetectors(r);
	        return lastInDirectiveTemplate(onChanges, onPush);
	    };
	    ChangeDetectorJITGenerator.prototype.genNotifyOnChanges = function (r) {
	        var br = r.bindingRecord;
	        if (r.lastInDirective && br.callOnChange()) {
	            return notifyOnChangesTemplate(this.getDirective(br.directiveRecord.directiveIndex));
	        } else {
	            return '';
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genNotifyOnPushDetectors = function (r) {
	        var br = r.bindingRecord;
	        if (r.lastInDirective && br.isOnPushChangeDetection()) {
	            return notifyOnPushDetectorsTemplate(this.getDetector(br.directiveRecord.directiveIndex));
	        } else {
	            return '';
	        }
	    };
	    ChangeDetectorJITGenerator.prototype.genArgs = function (r) {
	        var _this = this;
	        return r.args.map(function (arg) {
	            return _this.localNames[arg];
	        }).join(', ');
	    };
	    return ChangeDetectorJITGenerator;
	})();
	exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;
	exports.__esModule = true;
	//# sourceMappingURL=change_detection_jit_generator.js.map

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	var constants_1 = __webpack_require__(136);
	var lang_1 = __webpack_require__(118);
	var DirectiveIndex = (function () {
	    function DirectiveIndex(elementIndex, directiveIndex) {
	        this.elementIndex = elementIndex;
	        this.directiveIndex = directiveIndex;
	    }
	    Object.defineProperty(DirectiveIndex.prototype, 'name', {
	        get: function get() {
	            return this.elementIndex + '_' + this.directiveIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DirectiveIndex;
	})();
	exports.DirectiveIndex = DirectiveIndex;
	var DirectiveRecord = (function () {
	    function DirectiveRecord(directiveIndex, callOnAllChangesDone, callOnChange, changeDetection) {
	        this.directiveIndex = directiveIndex;
	        this.callOnAllChangesDone = callOnAllChangesDone;
	        this.callOnChange = callOnChange;
	        this.changeDetection = changeDetection;
	    }
	    DirectiveRecord.prototype.isOnPushChangeDetection = function () {
	        return lang_1.StringWrapper.equals(this.changeDetection, constants_1.ON_PUSH);
	    };
	    return DirectiveRecord;
	})();
	exports.DirectiveRecord = DirectiveRecord;
	exports.__esModule = true;
	//# sourceMappingURL=directive_record.js.map

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var proto_record_1 = __webpack_require__(143);
	/**
	 * Removes "duplicate" records. It assuming that record evaluation does not
	 * have side-effects.
	 *
	 * Records that are not last in bindings are removed and all the indices
	 * of the records that depend on them are updated.
	 *
	 * Records that are last in bindings CANNOT be removed, and instead are
	 * replaced with very cheap SELF records.
	 */
	function coalesce(records) {
	    var res = collection_1.ListWrapper.create();
	    var indexMap = collection_1.MapWrapper.create();
	    for (var i = 0; i < records.length; ++i) {
	        var r = records[i];
	        var record = _replaceIndices(r, res.length + 1, indexMap);
	        var matchingRecord = _findMatching(record, res);
	        if (lang_1.isPresent(matchingRecord) && record.lastInBinding) {
	            collection_1.ListWrapper.push(res, _selfRecord(record, matchingRecord.selfIndex, res.length + 1));
	            collection_1.MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);
	        } else if (lang_1.isPresent(matchingRecord) && !record.lastInBinding) {
	            collection_1.MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);
	        } else {
	            collection_1.ListWrapper.push(res, record);
	            collection_1.MapWrapper.set(indexMap, r.selfIndex, record.selfIndex);
	        }
	    }
	    return res;
	}
	exports.coalesce = coalesce;
	function _selfRecord(r, contextIndex, selfIndex) {
	    return new proto_record_1.ProtoRecord(proto_record_1.RECORD_TYPE_SELF, 'self', null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);
	}
	function _findMatching(r, rs) {
	    return collection_1.ListWrapper.find(rs, function (rr) {
	        return rr.mode === r.mode && rr.funcOrValue === r.funcOrValue && rr.contextIndex === r.contextIndex && collection_1.ListWrapper.equals(rr.args, r.args);
	    });
	}
	function _replaceIndices(r, selfIndex, indexMap) {
	    var args = collection_1.ListWrapper.map(r.args, function (a) {
	        return _map(indexMap, a);
	    });
	    var contextIndex = _map(indexMap, r.contextIndex);
	    return new proto_record_1.ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);
	}
	function _map(indexMap, value) {
	    var r = collection_1.MapWrapper.get(indexMap, value);
	    return lang_1.isPresent(r) ? r : value;
	}
	exports.__esModule = true;
	//# sourceMappingURL=coalesce.js.map

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var DIRECTIVE = "directive";
	var ELEMENT = "element";
	var TEXT_NODE = "textNode";
	var BindingRecord = (function () {
	    function BindingRecord(mode, implicitReceiver, ast, elementIndex, propertyName, setter, directiveRecord) {
	        this.mode = mode;
	        this.implicitReceiver = implicitReceiver;
	        this.ast = ast;
	        this.elementIndex = elementIndex;
	        this.propertyName = propertyName;
	        this.setter = setter;
	        this.directiveRecord = directiveRecord;
	    }
	    BindingRecord.prototype.callOnChange = function () {
	        return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.callOnChange;
	    };
	    BindingRecord.prototype.isOnPushChangeDetection = function () {
	        return lang_1.isPresent(this.directiveRecord) && this.directiveRecord.isOnPushChangeDetection();
	    };
	    BindingRecord.prototype.isDirective = function () {
	        return this.mode === DIRECTIVE;
	    };
	    BindingRecord.prototype.isElement = function () {
	        return this.mode === ELEMENT;
	    };
	    BindingRecord.prototype.isTextNode = function () {
	        return this.mode === TEXT_NODE;
	    };
	    BindingRecord.createForDirective = function (ast, propertyName, setter, directiveRecord) {
	        return new BindingRecord(DIRECTIVE, 0, ast, 0, propertyName, setter, directiveRecord);
	    };
	    BindingRecord.createForElement = function (ast, elementIndex, propertyName) {
	        return new BindingRecord(ELEMENT, 0, ast, elementIndex, propertyName, null, null);
	    };
	    BindingRecord.createForHostProperty = function (directiveIndex, ast, propertyName) {
	        return new BindingRecord(ELEMENT, directiveIndex, ast, directiveIndex.elementIndex, propertyName, null, null);
	    };
	    BindingRecord.createForTextNode = function (ast, elementIndex) {
	        return new BindingRecord(TEXT_NODE, 0, ast, elementIndex, null, null, null);
	    };
	    return BindingRecord;
	})();
	exports.BindingRecord = BindingRecord;
	exports.__esModule = true;
	//# sourceMappingURL=binding_record.js.map

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var decorators_1 = __webpack_require__(125);
	var PipeRegistry = (function () {
	    function PipeRegistry(config) {
	        this.config = config;
	    }
	    PipeRegistry.prototype.get = function (type, obj, cdRef) {
	        var listOfConfigs = this.config[type];
	        if (lang_1.isBlank(listOfConfigs)) {
	            throw new lang_1.BaseException("Cannot find '" + type + "' pipe supporting object '" + obj + "'");
	        }
	        var matchingConfig = collection_1.ListWrapper.find(listOfConfigs, function (pipeConfig) {
	            return pipeConfig.supports(obj);
	        });
	        if (lang_1.isBlank(matchingConfig)) {
	            throw new lang_1.BaseException("Cannot find '" + type + "' pipe supporting object '" + obj + "'");
	        }
	        return matchingConfig.create(cdRef);
	    };
	    PipeRegistry = __decorate([decorators_1.Injectable(), __metadata("design:paramtypes", [Object])], PipeRegistry);
	    return PipeRegistry;
	})();
	exports.PipeRegistry = PipeRegistry;
	exports.__esModule = true;
	//# sourceMappingURL=pipe_registry.js.map

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	var pipe_1 = __webpack_require__(140);
	/**
	 * @exportedAs angular2/pipes
	 */
	var NullPipeFactory = (function (_super) {
	    __extends(NullPipeFactory, _super);
	    function NullPipeFactory() {
	        _super.call(this);
	    }
	    NullPipeFactory.prototype.supports = function (obj) {
	        return NullPipe.supportsObj(obj);
	    };
	    NullPipeFactory.prototype.create = function (cdRef) {
	        return new NullPipe();
	    };
	    NullPipeFactory = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], NullPipeFactory);
	    return NullPipeFactory;
	})(pipe_1.PipeFactory);
	exports.NullPipeFactory = NullPipeFactory;
	/**
	 * @exportedAs angular2/pipes
	 */
	var NullPipe = (function (_super) {
	    __extends(NullPipe, _super);
	    function NullPipe() {
	        _super.call(this);
	        this.called = false;
	    }
	    NullPipe.supportsObj = function (obj) {
	        return lang_1.isBlank(obj);
	    };
	    NullPipe.prototype.supports = function (obj) {
	        return NullPipe.supportsObj(obj);
	    };
	    NullPipe.prototype.transform = function (value) {
	        if (!this.called) {
	            this.called = true;
	            return pipe_1.WrappedValue.wrap(null);
	        } else {
	            return null;
	        }
	    };
	    return NullPipe;
	})(pipe_1.Pipe);
	exports.NullPipe = NullPipe;
	exports.__esModule = true;
	//# sourceMappingURL=null_pipe.js.map

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var proto_change_detector_1 = __webpack_require__(137);
	var pipe_registry_1 = __webpack_require__(148);
	var iterable_changes_1 = __webpack_require__(152);
	var keyvalue_changes_1 = __webpack_require__(153);
	var observable_pipe_1 = __webpack_require__(154);
	var promise_pipe_1 = __webpack_require__(158);
	var uppercase_pipe_1 = __webpack_require__(159);
	var lowercase_pipe_1 = __webpack_require__(151);
	var json_pipe_1 = __webpack_require__(160);
	var null_pipe_1 = __webpack_require__(149);
	var interfaces_1 = __webpack_require__(135);
	var decorators_1 = __webpack_require__(125);
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	/**
	 * Structural diffing for `Object`s and `Map`s.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.keyValDiff = [new keyvalue_changes_1.KeyValueChangesFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Structural diffing for `Iterable` types such as `Array`s.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.iterableDiff = [new iterable_changes_1.IterableChangesFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Async binding to such types as Observable.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.async = [new observable_pipe_1.ObservablePipeFactory(), new promise_pipe_1.PromisePipeFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Uppercase text transform.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.uppercase = [new uppercase_pipe_1.UpperCaseFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Lowercase text transform.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.lowercase = [new lowercase_pipe_1.LowerCaseFactory(), new null_pipe_1.NullPipeFactory()];
	/**
	 * Json stringify transform.
	 *
	 * @exportedAs angular2/pipes
	 */
	exports.json = [new json_pipe_1.JsonPipeFactory(), new null_pipe_1.NullPipeFactory()];
	exports.defaultPipes = {
	    "iterableDiff": exports.iterableDiff,
	    "keyValDiff": exports.keyValDiff,
	    "async": exports.async,
	    "uppercase": exports.uppercase,
	    "lowercase": exports.lowercase,
	    "json": exports.json
	};
	exports.preGeneratedProtoDetectors = {};
	/**
	 * Implements change detection using a map of pregenerated proto detectors.
	 *
	 * @exportedAs angular2/change_detection
	 */
	var PreGeneratedChangeDetection = (function (_super) {
	    __extends(PreGeneratedChangeDetection, _super);
	    function PreGeneratedChangeDetection(registry, protoChangeDetectors) {
	        _super.call(this);
	        this.registry = registry;
	        this._dynamicChangeDetection = new DynamicChangeDetection(registry);
	        this._protoChangeDetectorFactories = lang_1.isPresent(protoChangeDetectors) ? protoChangeDetectors : exports.preGeneratedProtoDetectors;
	    }
	    PreGeneratedChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        var id = definition.id;
	        if (collection_1.StringMapWrapper.contains(this._protoChangeDetectorFactories, id)) {
	            return collection_1.StringMapWrapper.get(this._protoChangeDetectorFactories, id)(this.registry);
	        }
	        return this._dynamicChangeDetection.createProtoChangeDetector(definition);
	    };
	    return PreGeneratedChangeDetection;
	})(interfaces_1.ChangeDetection);
	exports.PreGeneratedChangeDetection = PreGeneratedChangeDetection;
	/**
	 * Implements change detection that does not require `eval()`.
	 *
	 * This is slower than {@link JitChangeDetection}.
	 *
	 * @exportedAs angular2/change_detection
	 */
	var DynamicChangeDetection = (function (_super) {
	    __extends(DynamicChangeDetection, _super);
	    function DynamicChangeDetection(registry) {
	        _super.call(this);
	        this.registry = registry;
	    }
	    DynamicChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        return new proto_change_detector_1.DynamicProtoChangeDetector(this.registry, definition);
	    };
	    DynamicChangeDetection = __decorate([decorators_1.Injectable(), __metadata("design:paramtypes", [pipe_registry_1.PipeRegistry])], DynamicChangeDetection);
	    return DynamicChangeDetection;
	})(interfaces_1.ChangeDetection);
	exports.DynamicChangeDetection = DynamicChangeDetection;
	/**
	 * Implements faster change detection, by generating source code.
	 *
	 * This requires `eval()`. For change detection that does not require `eval()`, see {@link
	 *DynamicChangeDetection}.
	 *
	 * @exportedAs angular2/change_detection
	 */
	var JitChangeDetection = (function (_super) {
	    __extends(JitChangeDetection, _super);
	    function JitChangeDetection(registry) {
	        _super.call(this);
	        this.registry = registry;
	    }
	    JitChangeDetection.prototype.createProtoChangeDetector = function (definition) {
	        return new proto_change_detector_1.JitProtoChangeDetector(this.registry, definition);
	    };
	    JitChangeDetection = __decorate([decorators_1.Injectable(), __metadata("design:paramtypes", [pipe_registry_1.PipeRegistry])], JitChangeDetection);
	    return JitChangeDetection;
	})(interfaces_1.ChangeDetection);
	exports.JitChangeDetection = JitChangeDetection;
	exports.defaultPipeRegistry = new pipe_registry_1.PipeRegistry(exports.defaultPipes);
	exports.__esModule = true;
	//# sourceMappingURL=change_detection.js.map

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var pipe_1 = __webpack_require__(140);
	/**
	 * Implements lowercase transforms to text.
	 *
	 * # Example
	 *
	 * In this example we transform the user text lowercase.
	 *
	 *  ```
	 * @Component({
	 *   selector: "username-cmp"
	 * })
	 * @View({
	 *   template: "Username: {{ user | lowercase }}"
	 * })
	 * class Username {
	 *   user:string;
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var LowerCasePipe = (function (_super) {
	    __extends(LowerCasePipe, _super);
	    function LowerCasePipe() {
	        _super.call(this);
	        this._latestValue = null;
	    }
	    LowerCasePipe.prototype.supports = function (str) {
	        return lang_1.isString(str);
	    };
	    LowerCasePipe.prototype.onDestroy = function () {
	        this._latestValue = null;
	    };
	    LowerCasePipe.prototype.transform = function (value) {
	        if (this._latestValue !== value) {
	            this._latestValue = value;
	            return lang_1.StringWrapper.toLowerCase(value);
	        } else {
	            return this._latestValue;
	        }
	    };
	    return LowerCasePipe;
	})(pipe_1.Pipe);
	exports.LowerCasePipe = LowerCasePipe;
	/**
	 * @exportedAs angular2/pipes
	 */
	var LowerCaseFactory = (function () {
	    function LowerCaseFactory() {}
	    LowerCaseFactory.prototype.supports = function (str) {
	        return lang_1.isString(str);
	    };
	    LowerCaseFactory.prototype.create = function () {
	        return new LowerCasePipe();
	    };
	    return LowerCaseFactory;
	})();
	exports.LowerCaseFactory = LowerCaseFactory;
	exports.__esModule = true;
	//# sourceMappingURL=lowercase_pipe.js.map

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var lang_2 = __webpack_require__(118);
	var pipe_1 = __webpack_require__(140);
	var IterableChangesFactory = (function (_super) {
	    __extends(IterableChangesFactory, _super);
	    function IterableChangesFactory() {
	        _super.call(this);
	    }
	    IterableChangesFactory.prototype.supports = function (obj) {
	        return IterableChanges.supportsObj(obj);
	    };
	    IterableChangesFactory.prototype.create = function (cdRef) {
	        return new IterableChanges();
	    };
	    IterableChangesFactory = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], IterableChangesFactory);
	    return IterableChangesFactory;
	})(pipe_1.PipeFactory);
	exports.IterableChangesFactory = IterableChangesFactory;
	/**
	 * @exportedAs angular2/pipes
	 */
	var IterableChanges = (function (_super) {
	    __extends(IterableChanges, _super);
	    function IterableChanges() {
	        _super.call(this);
	        this._collection = null;
	        this._length = null;
	        /// Keeps track of the used records at any point in time (during & across `_check()` calls)
	        this._linkedRecords = null;
	        /// Keeps track of the removed records at any point in time during `_check()` calls.
	        this._unlinkedRecords = null;
	        this._previousItHead = null;
	        this._itHead = null;
	        this._itTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._movesHead = null;
	        this._movesTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    IterableChanges.supportsObj = function (obj) {
	        return collection_1.isListLikeIterable(obj);
	    };
	    IterableChanges.prototype.supports = function (obj) {
	        return IterableChanges.supportsObj(obj);
	    };
	    Object.defineProperty(IterableChanges.prototype, "collection", {
	        get: function get() {
	            return this._collection;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(IterableChanges.prototype, "length", {
	        get: function get() {
	            return this._length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    IterableChanges.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._itHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachMovedItem = function (fn) {
	        var record;
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    IterableChanges.prototype.transform = function (collection) {
	        if (this.check(collection)) {
	            return pipe_1.WrappedValue.wrap(this);
	        } else {
	            return this;
	        }
	    };
	    // todo(vicb): optim for UnmodifiableListView (frozen arrays)
	    IterableChanges.prototype.check = function (collection) {
	        var _this = this;
	        this._reset();
	        var record = this._itHead;
	        var mayBeDirty = false;
	        var index;
	        var item;
	        if (collection_1.ListWrapper.isList(collection)) {
	            var list = collection;
	            this._length = collection.length;
	            for (index = 0; index < this._length; index++) {
	                item = list[index];
	                if (record === null || !lang_2.looseIdentical(record.item, item)) {
	                    record = this._mismatch(record, item, index);
	                    mayBeDirty = true;
	                } else if (mayBeDirty) {
	                    // TODO(misko): can we limit this to duplicates only?
	                    record = this._verifyReinsertion(record, item, index);
	                }
	                record = record._next;
	            }
	        } else {
	            index = 0;
	            collection_1.iterateListLike(collection, function (item) {
	                if (record === null || !lang_2.looseIdentical(record.item, item)) {
	                    record = _this._mismatch(record, item, index);
	                    mayBeDirty = true;
	                } else if (mayBeDirty) {
	                    // TODO(misko): can we limit this to duplicates only?
	                    record = _this._verifyReinsertion(record, item, index);
	                }
	                record = record._next;
	                index++;
	            });
	            this._length = index;
	        }
	        this._truncate(record);
	        this._collection = collection;
	        return this.isDirty;
	    };
	    Object.defineProperty(IterableChanges.prototype, "isDirty", {
	        // CollectionChanges is considered dirty if it has any additions, moves or removals.
	        get: function get() {
	            return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Reset the state of the change objects to show no changes. This means set previousKey to
	     * currentKey, and clear all of the queues (additions, moves, removals).
	     * Set the previousIndexes of moved and added items to their currentIndexes
	     * Reset the list of additions, moves and removals
	     */
	    IterableChanges.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            var nextRecord;
	            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                record.previousIndex = record.currentIndex;
	            }
	            this._additionsHead = this._additionsTail = null;
	            for (record = this._movesHead; record !== null; record = nextRecord) {
	                record.previousIndex = record.currentIndex;
	                nextRecord = record._nextMoved;
	            }
	            this._movesHead = this._movesTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    /**
	     * This is the core function which handles differences between collections.
	     *
	     * - `record` is the record which we saw at this position last time. If null then it is a new
	     *   item.
	     * - `item` is the current item in the collection
	     * - `index` is the position of the item in the collection
	     */
	    IterableChanges.prototype._mismatch = function (record, item, index) {
	        // The previous record after which we will append the current one.
	        var previousRecord;
	        if (record === null) {
	            previousRecord = this._itTail;
	        } else {
	            previousRecord = record._prev;
	            // Remove the record from the collection since we know it does not match the item.
	            this._remove(record);
	        }
	        // Attempt to see if we have seen the item before.
	        record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);
	        if (record !== null) {
	            // We have seen this before, we need to move it forward in the collection.
	            this._moveAfter(record, previousRecord, index);
	        } else {
	            // Never seen it, check evicted list.
	            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	            if (record !== null) {
	                // It is an item which we have evicted earlier: reinsert it back into the list.
	                this._reinsertAfter(record, previousRecord, index);
	            } else {
	                // It is a new item: add it.
	                record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);
	            }
	        }
	        return record;
	    };
	    /**
	     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	     *
	     * Use case: `[a, a]` => `[b, a, a]`
	     *
	     * If we did not have this check then the insertion of `b` would:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) leave `a` at index `1` as is. <-- this is wrong!
	     *   3) reinsert `a` at index 2. <-- this is wrong!
	     *
	     * The correct behavior is:
	     *   1) evict first `a`
	     *   2) insert `b` at `0` index.
	     *   3) reinsert `a` at index 1.
	     *   3) move `a` at from `1` to `2`.
	     *
	     *
	     * Double check that we have not evicted a duplicate item. We need to check if the item type may
	     * have already been removed:
	     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	     * at the end.
	     */
	    IterableChanges.prototype._verifyReinsertion = function (record, item, index) {
	        var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	        if (reinsertRecord !== null) {
	            record = this._reinsertAfter(reinsertRecord, record._prev, index);
	        } else if (record.currentIndex != index) {
	            record.currentIndex = index;
	            this._addToMoves(record, index);
	        }
	        return record;
	    };
	    /**
	     * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
	     *
	     * - `record` The first excess {@link CollectionChangeRecord}.
	     */
	    IterableChanges.prototype._truncate = function (record) {
	        // Anything after that needs to be removed;
	        while (record !== null) {
	            var nextRecord = record._next;
	            this._addToRemovals(this._unlink(record));
	            record = nextRecord;
	        }
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.clear();
	        }
	        if (this._additionsTail !== null) {
	            this._additionsTail._nextAdded = null;
	        }
	        if (this._movesTail !== null) {
	            this._movesTail._nextMoved = null;
	        }
	        if (this._itTail !== null) {
	            this._itTail._next = null;
	        }
	        if (this._removalsTail !== null) {
	            this._removalsTail._nextRemoved = null;
	        }
	    };
	    IterableChanges.prototype._reinsertAfter = function (record, prevRecord, index) {
	        if (this._unlinkedRecords !== null) {
	            this._unlinkedRecords.remove(record);
	        }
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        } else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        } else {
	            next._prevRemoved = prev;
	        }
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    IterableChanges.prototype._moveAfter = function (record, prevRecord, index) {
	        this._unlink(record);
	        this._insertAfter(record, prevRecord, index);
	        this._addToMoves(record, index);
	        return record;
	    };
	    IterableChanges.prototype._addAfter = function (record, prevRecord, index) {
	        this._insertAfter(record, prevRecord, index);
	        if (this._additionsTail === null) {
	            // todo(vicb)
	            // assert(this._additionsHead === null);
	            this._additionsTail = this._additionsHead = record;
	        } else {
	            // todo(vicb)
	            // assert(_additionsTail._nextAdded === null);
	            // assert(record._nextAdded === null);
	            this._additionsTail = this._additionsTail._nextAdded = record;
	        }
	        return record;
	    };
	    IterableChanges.prototype._insertAfter = function (record, prevRecord, index) {
	        // todo(vicb)
	        // assert(record != prevRecord);
	        // assert(record._next === null);
	        // assert(record._prev === null);
	        var next = prevRecord === null ? this._itHead : prevRecord._next;
	        // todo(vicb)
	        // assert(next != record);
	        // assert(prevRecord != record);
	        record._next = next;
	        record._prev = prevRecord;
	        if (next === null) {
	            this._itTail = record;
	        } else {
	            next._prev = record;
	        }
	        if (prevRecord === null) {
	            this._itHead = record;
	        } else {
	            prevRecord._next = record;
	        }
	        if (this._linkedRecords === null) {
	            this._linkedRecords = new _DuplicateMap();
	        }
	        this._linkedRecords.put(record);
	        record.currentIndex = index;
	        return record;
	    };
	    IterableChanges.prototype._remove = function (record) {
	        return this._addToRemovals(this._unlink(record));
	    };
	    IterableChanges.prototype._unlink = function (record) {
	        if (this._linkedRecords !== null) {
	            this._linkedRecords.remove(record);
	        }
	        var prev = record._prev;
	        var next = record._next;
	        // todo(vicb)
	        // assert((record._prev = null) === null);
	        // assert((record._next = null) === null);
	        if (prev === null) {
	            this._itHead = next;
	        } else {
	            prev._next = next;
	        }
	        if (next === null) {
	            this._itTail = prev;
	        } else {
	            next._prev = prev;
	        }
	        return record;
	    };
	    IterableChanges.prototype._addToMoves = function (record, toIndex) {
	        // todo(vicb)
	        // assert(record._nextMoved === null);
	        if (record.previousIndex === toIndex) {
	            return record;
	        }
	        if (this._movesTail === null) {
	            // todo(vicb)
	            // assert(_movesHead === null);
	            this._movesTail = this._movesHead = record;
	        } else {
	            // todo(vicb)
	            // assert(_movesTail._nextMoved === null);
	            this._movesTail = this._movesTail._nextMoved = record;
	        }
	        return record;
	    };
	    IterableChanges.prototype._addToRemovals = function (record) {
	        if (this._unlinkedRecords === null) {
	            this._unlinkedRecords = new _DuplicateMap();
	        }
	        this._unlinkedRecords.put(record);
	        record.currentIndex = null;
	        record._nextRemoved = null;
	        if (this._removalsTail === null) {
	            // todo(vicb)
	            // assert(_removalsHead === null);
	            this._removalsTail = this._removalsHead = record;
	            record._prevRemoved = null;
	        } else {
	            // todo(vicb)
	            // assert(_removalsTail._nextRemoved === null);
	            // assert(record._nextRemoved === null);
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = this._removalsTail._nextRemoved = record;
	        }
	        return record;
	    };
	    IterableChanges.prototype.toString = function () {
	        var record;
	        var list = [];
	        for (record = this._itHead; record !== null; record = record._next) {
	            collection_1.ListWrapper.push(list, record);
	        }
	        var previous = [];
	        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	            collection_1.ListWrapper.push(previous, record);
	        }
	        var additions = [];
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            collection_1.ListWrapper.push(additions, record);
	        }
	        var moves = [];
	        for (record = this._movesHead; record !== null; record = record._nextMoved) {
	            collection_1.ListWrapper.push(moves, record);
	        }
	        var removals = [];
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            collection_1.ListWrapper.push(removals, record);
	        }
	        return "collection: " + list.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "moves: " + moves.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n";
	    };
	    return IterableChanges;
	})(pipe_1.Pipe);
	exports.IterableChanges = IterableChanges;
	/**
	 * @exportedAs angular2/pipes
	 */
	var CollectionChangeRecord = (function () {
	    function CollectionChangeRecord(item) {
	        this.currentIndex = null;
	        this.previousIndex = null;
	        this.item = item;
	        this._nextPrevious = null;
	        this._prev = null;
	        this._next = null;
	        this._prevDup = null;
	        this._nextDup = null;
	        this._prevRemoved = null;
	        this._nextRemoved = null;
	        this._nextAdded = null;
	        this._nextMoved = null;
	    }
	    CollectionChangeRecord.prototype.toString = function () {
	        return this.previousIndex === this.currentIndex ? lang_2.stringify(this.item) : lang_2.stringify(this.item) + "[" + lang_2.stringify(this.previousIndex) + "->" + lang_2.stringify(this.currentIndex) + "]";
	    };
	    return CollectionChangeRecord;
	})();
	exports.CollectionChangeRecord = CollectionChangeRecord;
	// A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
	var _DuplicateItemRecordList = (function () {
	    function _DuplicateItemRecordList() {
	        this._head = null;
	        this._tail = null;
	    }
	    /**
	     * Append the record to the list of duplicates.
	     *
	     * Note: by design all records in the list of duplicates hold the same value in record.item.
	     */
	    _DuplicateItemRecordList.prototype.add = function (record) {
	        if (this._head === null) {
	            this._head = this._tail = record;
	            record._nextDup = null;
	            record._prevDup = null;
	        } else {
	            // todo(vicb)
	            // assert(record.item ==  _head.item ||
	            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	            this._tail._nextDup = record;
	            record._prevDup = this._tail;
	            record._nextDup = null;
	            this._tail = record;
	        }
	    };
	    // Returns a CollectionChangeRecord having CollectionChangeRecord.item == item and
	    // CollectionChangeRecord.currentIndex >= afterIndex
	    _DuplicateItemRecordList.prototype.get = function (item, afterIndex) {
	        var record;
	        for (record = this._head; record !== null; record = record._nextDup) {
	            if ((afterIndex === null || afterIndex < record.currentIndex) && lang_2.looseIdentical(record.item, item)) {
	                return record;
	            }
	        }
	        return null;
	    };
	    /**
	     * Remove one {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * Returns whether the list of duplicates is empty.
	     */
	    _DuplicateItemRecordList.prototype.remove = function (record) {
	        // todo(vicb)
	        // assert(() {
	        //  // verify that the record being removed is in the list.
	        //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	        //    if (identical(cursor, record)) return true;
	        //  }
	        //  return false;
	        //});
	        var prev = record._prevDup;
	        var next = record._nextDup;
	        if (prev === null) {
	            this._head = next;
	        } else {
	            prev._nextDup = next;
	        }
	        if (next === null) {
	            this._tail = prev;
	        } else {
	            next._prevDup = prev;
	        }
	        return this._head === null;
	    };
	    return _DuplicateItemRecordList;
	})();
	var _DuplicateMap = (function () {
	    function _DuplicateMap() {
	        this.map = collection_1.MapWrapper.create();
	    }
	    _DuplicateMap.prototype.put = function (record) {
	        // todo(vicb) handle corner cases
	        var key = lang_2.getMapKey(record.item);
	        var duplicates = collection_1.MapWrapper.get(this.map, key);
	        if (!lang_2.isPresent(duplicates)) {
	            duplicates = new _DuplicateItemRecordList();
	            collection_1.MapWrapper.set(this.map, key, duplicates);
	        }
	        duplicates.add(record);
	    };
	    /**
	     * Retrieve the `value` using key. Because the CollectionChangeRecord value maybe one which we
	     * have already iterated over, we use the afterIndex to pretend it is not there.
	     *
	     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	     * have any more `a`s needs to return the last `a` not the first or second.
	     */
	    _DuplicateMap.prototype.get = function (value, afterIndex) {
	        if (afterIndex === void 0) {
	            afterIndex = null;
	        }
	        var key = lang_2.getMapKey(value);
	        var recordList = collection_1.MapWrapper.get(this.map, key);
	        return lang_2.isBlank(recordList) ? null : recordList.get(value, afterIndex);
	    };
	    /**
	     * Removes a {@link CollectionChangeRecord} from the list of duplicates.
	     *
	     * The list of duplicates also is removed from the map if it gets empty.
	     */
	    _DuplicateMap.prototype.remove = function (record) {
	        var key = lang_2.getMapKey(record.item);
	        // todo(vicb)
	        // assert(this.map.containsKey(key));
	        var recordList = collection_1.MapWrapper.get(this.map, key);
	        // Remove the list of duplicates when it gets empty
	        if (recordList.remove(record)) {
	            collection_1.MapWrapper["delete"](this.map, key);
	        }
	        return record;
	    };
	    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	        get: function get() {
	            return collection_1.MapWrapper.size(this.map) === 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    _DuplicateMap.prototype.clear = function () {
	        collection_1.MapWrapper.clear(this.map);
	    };
	    _DuplicateMap.prototype.toString = function () {
	        return "_DuplicateMap(" + lang_2.stringify(this.map) + ")";
	    };
	    return _DuplicateMap;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=iterable_changes.js.map

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var pipe_1 = __webpack_require__(140);
	/**
	 * @exportedAs angular2/pipes
	 */
	var KeyValueChangesFactory = (function (_super) {
	    __extends(KeyValueChangesFactory, _super);
	    function KeyValueChangesFactory() {
	        _super.call(this);
	    }
	    KeyValueChangesFactory.prototype.supports = function (obj) {
	        return KeyValueChanges.supportsObj(obj);
	    };
	    KeyValueChangesFactory.prototype.create = function (cdRef) {
	        return new KeyValueChanges();
	    };
	    KeyValueChangesFactory = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], KeyValueChangesFactory);
	    return KeyValueChangesFactory;
	})(pipe_1.PipeFactory);
	exports.KeyValueChangesFactory = KeyValueChangesFactory;
	/**
	 * @exportedAs angular2/pipes
	 */
	var KeyValueChanges = (function (_super) {
	    __extends(KeyValueChanges, _super);
	    function KeyValueChanges() {
	        _super.call(this);
	        this._records = collection_1.MapWrapper.create();
	        this._mapHead = null;
	        this._previousMapHead = null;
	        this._changesHead = null;
	        this._changesTail = null;
	        this._additionsHead = null;
	        this._additionsTail = null;
	        this._removalsHead = null;
	        this._removalsTail = null;
	    }
	    KeyValueChanges.supportsObj = function (obj) {
	        return obj instanceof Map || lang_1.isJsObject(obj);
	    };
	    KeyValueChanges.prototype.supports = function (obj) {
	        return KeyValueChanges.supportsObj(obj);
	    };
	    KeyValueChanges.prototype.transform = function (map) {
	        if (this.check(map)) {
	            return pipe_1.WrappedValue.wrap(this);
	        } else {
	            return this;
	        }
	    };
	    Object.defineProperty(KeyValueChanges.prototype, "isDirty", {
	        get: function get() {
	            return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    KeyValueChanges.prototype.forEachItem = function (fn) {
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachPreviousItem = function (fn) {
	        var record;
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachChangedItem = function (fn) {
	        var record;
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachAddedItem = function (fn) {
	        var record;
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.forEachRemovedItem = function (fn) {
	        var record;
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            fn(record);
	        }
	    };
	    KeyValueChanges.prototype.check = function (map) {
	        var _this = this;
	        this._reset();
	        var records = this._records;
	        var oldSeqRecord = this._mapHead;
	        var lastOldSeqRecord = null;
	        var lastNewSeqRecord = null;
	        var seqChanged = false;
	        this._forEach(map, function (value, key) {
	            var newSeqRecord;
	            if (oldSeqRecord !== null && key === oldSeqRecord.key) {
	                newSeqRecord = oldSeqRecord;
	                if (!lang_1.looseIdentical(value, oldSeqRecord.currentValue)) {
	                    oldSeqRecord.previousValue = oldSeqRecord.currentValue;
	                    oldSeqRecord.currentValue = value;
	                    _this._addToChanges(oldSeqRecord);
	                }
	            } else {
	                seqChanged = true;
	                if (oldSeqRecord !== null) {
	                    oldSeqRecord._next = null;
	                    _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                    _this._addToRemovals(oldSeqRecord);
	                }
	                if (collection_1.MapWrapper.contains(records, key)) {
	                    newSeqRecord = collection_1.MapWrapper.get(records, key);
	                } else {
	                    newSeqRecord = new KVChangeRecord(key);
	                    collection_1.MapWrapper.set(records, key, newSeqRecord);
	                    newSeqRecord.currentValue = value;
	                    _this._addToAdditions(newSeqRecord);
	                }
	            }
	            if (seqChanged) {
	                if (_this._isInRemovals(newSeqRecord)) {
	                    _this._removeFromRemovals(newSeqRecord);
	                }
	                if (lastNewSeqRecord == null) {
	                    _this._mapHead = newSeqRecord;
	                } else {
	                    lastNewSeqRecord._next = newSeqRecord;
	                }
	            }
	            lastOldSeqRecord = oldSeqRecord;
	            lastNewSeqRecord = newSeqRecord;
	            oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
	        });
	        this._truncate(lastOldSeqRecord, oldSeqRecord);
	        return this.isDirty;
	    };
	    KeyValueChanges.prototype._reset = function () {
	        if (this.isDirty) {
	            var record;
	            // Record the state of the mapping
	            for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                record._nextPrevious = record._next;
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                record.previousValue = record.currentValue;
	            }
	            for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                record.previousValue = record.currentValue;
	            }
	            // todo(vicb) once assert is supported
	            // assert(() {
	            //  var r = _changesHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextChanged;
	            //    r._nextChanged = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _additionsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextAdded;
	            //    r._nextAdded = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  r = _removalsHead;
	            //  while (r != null) {
	            //    var nextRecord = r._nextRemoved;
	            //    r._nextRemoved = null;
	            //    r = nextRecord;
	            //  }
	            //
	            //  return true;
	            //});
	            this._changesHead = this._changesTail = null;
	            this._additionsHead = this._additionsTail = null;
	            this._removalsHead = this._removalsTail = null;
	        }
	    };
	    KeyValueChanges.prototype._truncate = function (lastRecord, record) {
	        while (record !== null) {
	            if (lastRecord === null) {
	                this._mapHead = null;
	            } else {
	                lastRecord._next = null;
	            }
	            var nextRecord = record._next;
	            // todo(vicb) assert
	            // assert((() {
	            //  record._next = null;
	            //  return true;
	            //}));
	            this._addToRemovals(record);
	            lastRecord = record;
	            record = nextRecord;
	        }
	        for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	            rec.previousValue = rec.currentValue;
	            rec.currentValue = null;
	            collection_1.MapWrapper["delete"](this._records, rec.key);
	        }
	    };
	    KeyValueChanges.prototype._isInRemovals = function (record) {
	        return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
	    };
	    KeyValueChanges.prototype._addToRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._removalsHead === null) {
	            this._removalsHead = this._removalsTail = record;
	        } else {
	            this._removalsTail._nextRemoved = record;
	            record._prevRemoved = this._removalsTail;
	            this._removalsTail = record;
	        }
	    };
	    KeyValueChanges.prototype._removeFromSeq = function (prev, record) {
	        var next = record._next;
	        if (prev === null) {
	            this._mapHead = next;
	        } else {
	            prev._next = next;
	        }
	        // todo(vicb) assert
	        // assert((() {
	        //  record._next = null;
	        //  return true;
	        //})());
	    };
	    KeyValueChanges.prototype._removeFromRemovals = function (record) {
	        // todo(vicb) assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        var prev = record._prevRemoved;
	        var next = record._nextRemoved;
	        if (prev === null) {
	            this._removalsHead = next;
	        } else {
	            prev._nextRemoved = next;
	        }
	        if (next === null) {
	            this._removalsTail = prev;
	        } else {
	            next._prevRemoved = prev;
	        }
	        record._prevRemoved = record._nextRemoved = null;
	    };
	    KeyValueChanges.prototype._addToAdditions = function (record) {
	        // todo(vicb): assert
	        // assert(record._next == null);
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._additionsHead === null) {
	            this._additionsHead = this._additionsTail = record;
	        } else {
	            this._additionsTail._nextAdded = record;
	            this._additionsTail = record;
	        }
	    };
	    KeyValueChanges.prototype._addToChanges = function (record) {
	        // todo(vicb) assert
	        // assert(record._nextAdded == null);
	        // assert(record._nextChanged == null);
	        // assert(record._nextRemoved == null);
	        // assert(record._prevRemoved == null);
	        if (this._changesHead === null) {
	            this._changesHead = this._changesTail = record;
	        } else {
	            this._changesTail._nextChanged = record;
	            this._changesTail = record;
	        }
	    };
	    KeyValueChanges.prototype.toString = function () {
	        var items = [];
	        var previous = [];
	        var changes = [];
	        var additions = [];
	        var removals = [];
	        var record;
	        for (record = this._mapHead; record !== null; record = record._next) {
	            collection_1.ListWrapper.push(items, lang_1.stringify(record));
	        }
	        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	            collection_1.ListWrapper.push(previous, lang_1.stringify(record));
	        }
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	            collection_1.ListWrapper.push(changes, lang_1.stringify(record));
	        }
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	            collection_1.ListWrapper.push(additions, lang_1.stringify(record));
	        }
	        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	            collection_1.ListWrapper.push(removals, lang_1.stringify(record));
	        }
	        return "map: " + items.join(", ") + "\n" + "previous: " + previous.join(", ") + "\n" + "additions: " + additions.join(", ") + "\n" + "changes: " + changes.join(", ") + "\n" + "removals: " + removals.join(", ") + "\n";
	    };
	    KeyValueChanges.prototype._forEach = function (obj, fn) {
	        if (obj instanceof Map) {
	            collection_1.MapWrapper.forEach(obj, fn);
	        } else {
	            collection_1.StringMapWrapper.forEach(obj, fn);
	        }
	    };
	    return KeyValueChanges;
	})(pipe_1.Pipe);
	exports.KeyValueChanges = KeyValueChanges;
	/**
	 * @exportedAs angular2/pipes
	 */
	var KVChangeRecord = (function () {
	    function KVChangeRecord(key) {
	        this.key = key;
	        this.previousValue = null;
	        this.currentValue = null;
	        this._nextPrevious = null;
	        this._next = null;
	        this._nextAdded = null;
	        this._nextRemoved = null;
	        this._prevRemoved = null;
	        this._nextChanged = null;
	    }
	    KVChangeRecord.prototype.toString = function () {
	        return lang_1.looseIdentical(this.previousValue, this.currentValue) ? lang_1.stringify(this.key) : lang_1.stringify(this.key) + "[" + lang_1.stringify(this.previousValue) + "->" + lang_1.stringify(this.currentValue) + "]";
	    };
	    return KVChangeRecord;
	})();
	exports.KVChangeRecord = KVChangeRecord;
	exports.__esModule = true;
	//# sourceMappingURL=keyvalue_changes.js.map

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var async_1 = __webpack_require__(155);
	var lang_1 = __webpack_require__(118);
	var pipe_1 = __webpack_require__(140);
	/**
	 * Implements async bindings to Observable.
	 *
	 * # Example
	 *
	 * In this example we bind the description observable to the DOM. The async pipe will convert an
	 *observable to the
	 * latest value it emitted. It will also request a change detection check when a new value is
	 *emitted.
	 *
	 *  ```
	 * @Component({
	 *   selector: "task-cmp",
	 *   changeDetection: ON_PUSH
	 * })
	 * @View({
	 *   template: "Task Description {{ description | async }}"
	 * })
	 * class Task {
	 *  description:Observable<string>;
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var ObservablePipe = (function (_super) {
	    __extends(ObservablePipe, _super);
	    function ObservablePipe(ref) {
	        _super.call(this);
	        this._ref = ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._observable = null;
	    }
	    ObservablePipe.prototype.supports = function (obs) {
	        return async_1.ObservableWrapper.isObservable(obs);
	    };
	    ObservablePipe.prototype.onDestroy = function () {
	        if (lang_1.isPresent(this._subscription)) {
	            this._dispose();
	        }
	    };
	    ObservablePipe.prototype.transform = function (obs) {
	        if (lang_1.isBlank(this._subscription)) {
	            this._subscribe(obs);
	            return null;
	        }
	        if (obs !== this._observable) {
	            this._dispose();
	            return this.transform(obs);
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        } else {
	            this._latestReturnedValue = this._latestValue;
	            return pipe_1.WrappedValue.wrap(this._latestValue);
	        }
	    };
	    ObservablePipe.prototype._subscribe = function (obs) {
	        var _this = this;
	        this._observable = obs;
	        this._subscription = async_1.ObservableWrapper.subscribe(obs, function (value) {
	            _this._updateLatestValue(value);
	        }, function (e) {
	            throw e;
	        });
	    };
	    ObservablePipe.prototype._dispose = function () {
	        async_1.ObservableWrapper.dispose(this._subscription);
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	        this._subscription = null;
	        this._observable = null;
	    };
	    ObservablePipe.prototype._updateLatestValue = function (value) {
	        this._latestValue = value;
	        this._ref.requestCheck();
	    };
	    return ObservablePipe;
	})(pipe_1.Pipe);
	exports.ObservablePipe = ObservablePipe;
	/**
	 * Provides a factory for [ObervablePipe].
	 *
	 * @exportedAs angular2/pipes
	 */
	var ObservablePipeFactory = (function (_super) {
	    __extends(ObservablePipeFactory, _super);
	    function ObservablePipeFactory() {
	        _super.call(this);
	    }
	    ObservablePipeFactory.prototype.supports = function (obs) {
	        return async_1.ObservableWrapper.isObservable(obs);
	    };
	    ObservablePipeFactory.prototype.create = function (cdRef) {
	        return new ObservablePipe(cdRef);
	    };
	    ObservablePipeFactory = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], ObservablePipeFactory);
	    return ObservablePipeFactory;
	})(pipe_1.PipeFactory);
	exports.ObservablePipeFactory = ObservablePipeFactory;
	exports.__esModule = true;
	//# sourceMappingURL=observable_pipe.js.map

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/es6-promise/es6-promise.d.ts" />
	/// <reference path="../../typings/rx/rx.all.d.ts" />
	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var Rx = __webpack_require__(156);
	exports.Promise = lang_1.global.Promise;
	var PromiseWrapper = (function () {
	    function PromiseWrapper() {}
	    PromiseWrapper.resolve = function (obj) {
	        return exports.Promise.resolve(obj);
	    };
	    PromiseWrapper.reject = function (obj, _) {
	        return exports.Promise.reject(obj);
	    };
	    // Note: We can't rename this method into `catch`, as this is not a valid
	    // method name in Dart.
	    PromiseWrapper.catchError = function (promise, onError) {
	        return promise['catch'](onError);
	    };
	    PromiseWrapper.all = function (promises) {
	        if (promises.length == 0) return exports.Promise.resolve([]);
	        return exports.Promise.all(promises);
	    };
	    PromiseWrapper.then = function (promise, success, rejection) {
	        return promise.then(success, rejection);
	    };
	    PromiseWrapper.completer = function () {
	        var resolve;
	        var reject;
	        var p = new exports.Promise(function (res, rej) {
	            resolve = res;
	            reject = rej;
	        });
	        return { promise: p, resolve: resolve, reject: reject };
	    };
	    PromiseWrapper.isPromise = function (maybePromise) {
	        return maybePromise instanceof exports.Promise;
	    };
	    return PromiseWrapper;
	})();
	exports.PromiseWrapper = PromiseWrapper;
	var TimerWrapper = (function () {
	    function TimerWrapper() {}
	    TimerWrapper.setTimeout = function (fn, millis) {
	        return lang_1.global.setTimeout(fn, millis);
	    };
	    TimerWrapper.clearTimeout = function (id) {
	        lang_1.global.clearTimeout(id);
	    };
	    TimerWrapper.setInterval = function (fn, millis) {
	        return lang_1.global.setInterval(fn, millis);
	    };
	    TimerWrapper.clearInterval = function (id) {
	        lang_1.global.clearInterval(id);
	    };
	    return TimerWrapper;
	})();
	exports.TimerWrapper = TimerWrapper;
	var ObservableWrapper = (function () {
	    function ObservableWrapper() {}
	    ObservableWrapper.subscribe = function (emitter, onNext, onThrow, onReturn) {
	        if (onThrow === void 0) {
	            onThrow = null;
	        }
	        if (onReturn === void 0) {
	            onReturn = null;
	        }
	        return emitter.observer({ next: onNext, 'throw': onThrow, 'return': onReturn });
	    };
	    ObservableWrapper.isObservable = function (obs) {
	        return obs instanceof Observable;
	    };
	    ObservableWrapper.dispose = function (subscription) {
	        subscription.dispose();
	    };
	    ObservableWrapper.callNext = function (emitter, value) {
	        emitter.next(value);
	    };
	    ObservableWrapper.callThrow = function (emitter, error) {
	        emitter['throw'](error);
	    };
	    ObservableWrapper.callReturn = function (emitter) {
	        emitter['return'](null);
	    };
	    return ObservableWrapper;
	})();
	exports.ObservableWrapper = ObservableWrapper;
	// TODO: vsavkin change to interface
	var Observable = (function () {
	    function Observable() {}
	    Observable.prototype.observer = function (generator) {
	        return null;
	    };
	    return Observable;
	})();
	exports.Observable = Observable;
	/**
	 * Use Rx.Observable but provides an adapter to make it work as specified here:
	 * https://github.com/jhusain/observable-spec
	 *
	 * Once a reference implementation of the spec is available, switch to it.
	 */
	var EventEmitter = (function (_super) {
	    __extends(EventEmitter, _super);
	    function EventEmitter() {
	        _super.call(this);
	        // System creates a different object for import * than Typescript es5 emit.
	        if (Rx.hasOwnProperty('default')) {
	            this._subject = new Rx['default'].Rx.Subject();
	            this._immediateScheduler = Rx['default'].Rx.Scheduler.immediate;
	        } else {
	            this._subject = new Rx.Subject();
	            this._immediateScheduler = Rx.Scheduler.immediate;
	        }
	    }
	    EventEmitter.prototype.observer = function (generator) {
	        return this._subject.observeOn(this._immediateScheduler).subscribe(function (value) {
	            setTimeout(function () {
	                return generator.next(value);
	            });
	        }, function (error) {
	            return generator['throw'] ? generator['throw'](error) : null;
	        }, function () {
	            return generator['return'] ? generator['return']() : null;
	        });
	    };
	    EventEmitter.prototype.toRx = function () {
	        return this._subject;
	    };
	    EventEmitter.prototype.next = function (value) {
	        this._subject.onNext(value);
	    };
	    EventEmitter.prototype['throw'] = function (error) {
	        this._subject.onError(error);
	    };
	    EventEmitter.prototype['return'] = function (value) {
	        this._subject.onCompleted();
	    };
	    return EventEmitter;
	})(Observable);
	exports.EventEmitter = EventEmitter;
	exports.__esModule = true;
	//# sourceMappingURL=async.js.map

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global, process) {// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

	;(function (undefined) {

	  var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	  };

	  var root = objectTypes[typeof window] && window || this,
	      freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
	      freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
	      moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
	      freeGlobal = objectTypes[typeof global] && global;

	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    root = freeGlobal;
	  }

	  var Rx = {
	    internals: {},
	    config: {
	      Promise: root.Promise
	    },
	    helpers: {}
	  };

	  // Defaults
	  var noop = Rx.helpers.noop = function () {},
	      notDefined = Rx.helpers.notDefined = function (x) {
	    return typeof x === 'undefined';
	  },
	      isScheduler = Rx.helpers.isScheduler = function (x) {
	    return x instanceof Rx.Scheduler;
	  },
	      identity = Rx.helpers.identity = function (x) {
	    return x;
	  },
	      pluck = Rx.helpers.pluck = function (property) {
	    return function (x) {
	      return x[property];
	    };
	  },
	      just = Rx.helpers.just = function (value) {
	    return function () {
	      return value;
	    };
	  },
	      defaultNow = Rx.helpers.defaultNow = Date.now,
	      defaultComparer = Rx.helpers.defaultComparer = function (x, y) {
	    return isEqual(x, y);
	  },
	      defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) {
	    return x > y ? 1 : x < y ? -1 : 0;
	  },
	      defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) {
	    return x.toString();
	  },
	      defaultError = Rx.helpers.defaultError = function (err) {
	    throw err;
	  },
	      isPromise = Rx.helpers.isPromise = function (p) {
	    return !!p && typeof p.then === 'function';
	  },
	      asArray = Rx.helpers.asArray = function () {
	    return Array.prototype.slice.call(arguments);
	  },
	      not = Rx.helpers.not = function (a) {
	    return !a;
	  },
	      isFunction = Rx.helpers.isFunction = (function () {

	    var isFn = function isFn(value) {
	      return typeof value == 'function' || false;
	    };

	    // fallback for older versions of Chrome and Safari
	    if (isFn(/x/)) {
	      isFn = function (value) {
	        return typeof value == 'function' && toString.call(value) == '[object Function]';
	      };
	    }

	    return isFn;
	  })();

	  function cloneArray(arr) {
	    for (var a = [], i = 0, len = arr.length; i < len; i++) {
	      a.push(arr[i]);
	    }return a;
	  }

	  Rx.config.longStackSupport = false;
	  var hasStacks = false;
	  try {
	    throw new Error();
	  } catch (e) {
	    hasStacks = !!e.stack;
	  }

	  // All code after this point will be filtered from stack traces reported by RxJS
	  var rStartingLine = captureLine(),
	      rFileName;

	  var STACK_JUMP_SEPARATOR = 'From previous event:';

	  function makeStackTraceLong(error, observable) {
	    // If possible, transform the error stack trace by removing Node and RxJS
	    // cruft, then concatenating with the stack trace of `observable`.
	    if (hasStacks && observable.stack && typeof error === 'object' && error !== null && error.stack && error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1) {
	      var stacks = [];
	      for (var o = observable; !!o; o = o.source) {
	        if (o.stack) {
	          stacks.unshift(o.stack);
	        }
	      }
	      stacks.unshift(error.stack);

	      var concatedStacks = stacks.join('\n' + STACK_JUMP_SEPARATOR + '\n');
	      error.stack = filterStackString(concatedStacks);
	    }
	  }

	  function filterStackString(stackString) {
	    var lines = stackString.split('\n'),
	        desiredLines = [];
	    for (var i = 0, len = lines.length; i < len; i++) {
	      var line = lines[i];

	      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	        desiredLines.push(line);
	      }
	    }
	    return desiredLines.join('\n');
	  }

	  function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	    if (!fileNameAndLineNumber) {
	      return false;
	    }
	    var fileName = fileNameAndLineNumber[0],
	        lineNumber = fileNameAndLineNumber[1];

	    return fileName === rFileName && lineNumber >= rStartingLine && lineNumber <= rEndingLine;
	  }

	  function isNodeFrame(stackLine) {
	    return stackLine.indexOf('(module.js:') !== -1 || stackLine.indexOf('(node.js:') !== -1;
	  }

	  function captureLine() {
	    if (!hasStacks) {
	      return;
	    }

	    try {
	      throw new Error();
	    } catch (e) {
	      var lines = e.stack.split('\n');
	      var firstLine = lines[0].indexOf('@') > 0 ? lines[1] : lines[2];
	      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	      if (!fileNameAndLineNumber) {
	        return;
	      }

	      rFileName = fileNameAndLineNumber[0];
	      return fileNameAndLineNumber[1];
	    }
	  }

	  function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) {
	      return [attempt1[1], Number(attempt1[2])];
	    }

	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) {
	      return [attempt2[1], Number(attempt2[2])];
	    }

	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) {
	      return [attempt3[1], Number(attempt3[2])];
	    }
	  }

	  var EmptyError = Rx.EmptyError = function () {
	    this.message = 'Sequence contains no elements.';
	    Error.call(this);
	  };
	  EmptyError.prototype = Error.prototype;

	  var ObjectDisposedError = Rx.ObjectDisposedError = function () {
	    this.message = 'Object has been disposed';
	    Error.call(this);
	  };
	  ObjectDisposedError.prototype = Error.prototype;

	  var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function () {
	    this.message = 'Argument out of range';
	    Error.call(this);
	  };
	  ArgumentOutOfRangeError.prototype = Error.prototype;

	  var NotSupportedError = Rx.NotSupportedError = function (message) {
	    this.message = message || 'This operation is not supported';
	    Error.call(this);
	  };
	  NotSupportedError.prototype = Error.prototype;

	  var NotImplementedError = Rx.NotImplementedError = function (message) {
	    this.message = message || 'This operation is not implemented';
	    Error.call(this);
	  };
	  NotImplementedError.prototype = Error.prototype;

	  var notImplemented = Rx.helpers.notImplemented = function () {
	    throw new NotImplementedError();
	  };

	  var notSupported = Rx.helpers.notSupported = function () {
	    throw new NotSupportedError();
	  };

	  // Shim in iterator support
	  var $iterator$ = typeof Symbol === 'function' && Symbol.iterator || '_es6shim_iterator_';
	  // Bug for mozilla version
	  if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
	    $iterator$ = '@@iterator';
	  }

	  var doneEnumerator = Rx.doneEnumerator = { done: true, value: undefined };

	  var isIterable = Rx.helpers.isIterable = function (o) {
	    return o[$iterator$] !== undefined;
	  };

	  var isArrayLike = Rx.helpers.isArrayLike = function (o) {
	    return o && o.length !== undefined;
	  };

	  Rx.helpers.iterator = $iterator$;

	  var bindCallback = Rx.internals.bindCallback = function (func, thisArg, argCount) {
	    if (typeof thisArg === 'undefined') {
	      return func;
	    }
	    switch (argCount) {
	      case 0:
	        return function () {
	          return func.call(thisArg);
	        };
	      case 1:
	        return function (arg) {
	          return func.call(thisArg, arg);
	        };
	      case 2:
	        return function (value, index) {
	          return func.call(thisArg, value, index);
	        };
	      case 3:
	        return function (value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	    }

	    return function () {
	      return func.apply(thisArg, arguments);
	    };
	  };

	  /** Used to determine if values are of the language type Object */
	  var dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
	      dontEnumsLength = dontEnums.length;

	  /** `Object#toString` result shortcuts */
	  var argsClass = '[object Arguments]',
	      arrayClass = '[object Array]',
	      boolClass = '[object Boolean]',
	      dateClass = '[object Date]',
	      errorClass = '[object Error]',
	      funcClass = '[object Function]',
	      numberClass = '[object Number]',
	      objectClass = '[object Object]',
	      regexpClass = '[object RegExp]',
	      stringClass = '[object String]';

	  var toString = Object.prototype.toString,
	      hasOwnProperty = Object.prototype.hasOwnProperty,
	      supportsArgsClass = toString.call(arguments) == argsClass,
	      // For less <IE9 && FF<4
	  supportNodeClass,
	      errorProto = Error.prototype,
	      objectProto = Object.prototype,
	      stringProto = String.prototype,
	      propertyIsEnumerable = objectProto.propertyIsEnumerable;

	  try {
	    supportNodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
	  } catch (e) {
	    supportNodeClass = true;
	  }

	  var nonEnumProps = {};
	  nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	  nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
	  nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
	  nonEnumProps[objectClass] = { 'constructor': true };

	  var support = {};
	  (function () {
	    var ctor = function ctor() {
	      this.x = 1;
	    },
	        props = [];

	    ctor.prototype = { 'valueOf': 1, 'y': 1 };
	    for (var key in new ctor()) {
	      props.push(key);
	    }
	    for (key in arguments) {}

	    // Detect if `name` or `message` properties of `Error.prototype` are enumerable by default.
	    support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');

	    // Detect if `prototype` properties are enumerable by default.
	    support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');

	    // Detect if `arguments` object indexes are non-enumerable
	    support.nonEnumArgs = key != 0;

	    // Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	    support.nonEnumShadows = !/valueOf/.test(props);
	  })(1);

	  var isObject = Rx.internals.isObject = function (value) {
	    var type = typeof value;
	    return value && (type == 'function' || type == 'object') || false;
	  };

	  function keysIn(object) {
	    var result = [];
	    if (!isObject(object)) {
	      return result;
	    }
	    if (support.nonEnumArgs && object.length && isArguments(object)) {
	      object = slice.call(object);
	    }
	    var skipProto = support.enumPrototypes && typeof object == 'function',
	        skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error);

	    for (var key in object) {
	      if (!(skipProto && key == 'prototype') && !(skipErrorProps && (key == 'message' || key == 'name'))) {
	        result.push(key);
	      }
	    }

	    if (support.nonEnumShadows && object !== objectProto) {
	      var ctor = object.constructor,
	          index = -1,
	          length = dontEnumsLength;

	      if (object === (ctor && ctor.prototype)) {
	        var className = object === stringProto ? stringClass : object === errorProto ? errorClass : toString.call(object),
	            nonEnum = nonEnumProps[className];
	      }
	      while (++index < length) {
	        key = dontEnums[index];
	        if (!(nonEnum && nonEnum[key]) && hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	    }
	    return result;
	  }

	  function internalFor(object, callback, keysFunc) {
	    var index = -1,
	        props = keysFunc(object),
	        length = props.length;

	    while (++index < length) {
	      var key = props[index];
	      if (callback(object[key], key, object) === false) {
	        break;
	      }
	    }
	    return object;
	  }

	  function internalForIn(object, callback) {
	    return internalFor(object, callback, keysIn);
	  }

	  function isNode(value) {
	    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
	    // methods that are `typeof` "string" and still can coerce nodes to strings
	    return typeof value.toString != 'function' && typeof (value + '') == 'string';
	  }

	  var isArguments = function isArguments(value) {
	    return value && typeof value == 'object' ? toString.call(value) == argsClass : false;
	  };

	  // fallback for browsers that can't detect `arguments` objects by [[Class]]
	  if (!supportsArgsClass) {
	    isArguments = function (value) {
	      return value && typeof value == 'object' ? hasOwnProperty.call(value, 'callee') : false;
	    };
	  }

	  var isEqual = Rx.internals.isEqual = function (x, y) {
	    return deepEquals(x, y, [], []);
	  };

	  /** @private
	   * Used for deep comparison
	   **/
	  function deepEquals(a, b, stackA, stackB) {
	    // exit early for identical values
	    if (a === b) {
	      // treat `+0` vs. `-0` as not equal
	      return a !== 0 || 1 / a == 1 / b;
	    }

	    var type = typeof a,
	        otherType = typeof b;

	    // exit early for unlike primitive values
	    if (a === a && (a == null || b == null || type != 'function' && type != 'object' && otherType != 'function' && otherType != 'object')) {
	      return false;
	    }

	    // compare [[Class]] names
	    var className = toString.call(a),
	        otherClass = toString.call(b);

	    if (className == argsClass) {
	      className = objectClass;
	    }
	    if (otherClass == argsClass) {
	      otherClass = objectClass;
	    }
	    if (className != otherClass) {
	      return false;
	    }
	    switch (className) {
	      case boolClass:
	      case dateClass:
	        // coerce dates and booleans to numbers, dates to milliseconds and booleans
	        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
	        return +a == +b;

	      case numberClass:
	        // treat `NaN` vs. `NaN` as equal
	        return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;

	      case regexpClass:
	      case stringClass:
	        // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
	        // treat string primitives and their corresponding object instances as equal
	        return a == String(b);
	    }
	    var isArr = className == arrayClass;
	    if (!isArr) {

	      // exit for functions and DOM nodes
	      if (className != objectClass || !support.nodeClass && (isNode(a) || isNode(b))) {
	        return false;
	      }
	      // in older versions of Opera, `arguments` objects have `Array` constructors
	      var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
	          ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;

	      // non `Object` object instances with different constructors are not equal
	      if (ctorA != ctorB && !(hasOwnProperty.call(a, 'constructor') && hasOwnProperty.call(b, 'constructor')) && !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // assume cyclic structures are equal
	    // the algorithm for detecting cyclic structures is adapted from ES 5.1
	    // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
	    var initedStack = !stackA;
	    stackA || (stackA = []);
	    stackB || (stackB = []);

	    var length = stackA.length;
	    while (length--) {
	      if (stackA[length] == a) {
	        return stackB[length] == b;
	      }
	    }
	    var size = 0;
	    var result = true;

	    // add `a` and `b` to the stack of traversed objects
	    stackA.push(a);
	    stackB.push(b);

	    // recursively compare objects and arrays (susceptible to call stack limits)
	    if (isArr) {
	      // compare lengths to determine if a deep comparison is necessary
	      length = a.length;
	      size = b.length;
	      result = size == length;

	      if (result) {
	        // deep compare the contents, ignoring non-numeric properties
	        while (size--) {
	          var index = length,
	              value = b[size];

	          if (!(result = deepEquals(a[size], value, stackA, stackB))) {
	            break;
	          }
	        }
	      }
	    } else {
	      // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
	      // which, in this case, is more costly
	      internalForIn(b, function (value, key, b) {
	        if (hasOwnProperty.call(b, key)) {
	          // count the number of properties.
	          size++;
	          // deep compare each property value.
	          return result = hasOwnProperty.call(a, key) && deepEquals(a[key], value, stackA, stackB);
	        }
	      });

	      if (result) {
	        // ensure both objects have the same number of properties
	        internalForIn(a, function (value, key, a) {
	          if (hasOwnProperty.call(a, key)) {
	            // `size` will be `-1` if `a` has more properties than `b`
	            return result = --size > -1;
	          }
	        });
	      }
	    }
	    stackA.pop();
	    stackB.pop();

	    return result;
	  }

	  var hasProp = ({}).hasOwnProperty,
	      slice = Array.prototype.slice;

	  var inherits = this.inherits = Rx.internals.inherits = function (child, parent) {
	    function __() {
	      this.constructor = child;
	    }
	    __.prototype = parent.prototype;
	    child.prototype = new __();
	  };

	  var addProperties = Rx.internals.addProperties = function (obj) {
	    for (var sources = [], i = 1, len = arguments.length; i < len; i++) {
	      sources.push(arguments[i]);
	    }
	    for (var idx = 0, ln = sources.length; idx < ln; idx++) {
	      var source = sources[idx];
	      for (var prop in source) {
	        obj[prop] = source[prop];
	      }
	    }
	  };

	  // Rx Utils
	  var addRef = Rx.internals.addRef = function (xs, r) {
	    return new AnonymousObservable(function (observer) {
	      return new CompositeDisposable(r.getDisposable(), xs.subscribe(observer));
	    });
	  };

	  function arrayInitialize(count, factory) {
	    var a = new Array(count);
	    for (var i = 0; i < count; i++) {
	      a[i] = factory();
	    }
	    return a;
	  }

	  var errorObj = { e: {} };
	  var tryCatchTarget;
	  function tryCatcher() {
	    try {
	      return tryCatchTarget.apply(this, arguments);
	    } catch (e) {
	      errorObj.e = e;
	      return errorObj;
	    }
	  }
	  function tryCatch(fn) {
	    if (!isFunction(fn)) {
	      throw new TypeError('fn must be a function');
	    }
	    tryCatchTarget = fn;
	    return tryCatcher;
	  }
	  function thrower(e) {
	    throw e;
	  }

	  // Collections
	  function IndexedItem(id, value) {
	    this.id = id;
	    this.value = value;
	  }

	  IndexedItem.prototype.compareTo = function (other) {
	    var c = this.value.compareTo(other.value);
	    c === 0 && (c = this.id - other.id);
	    return c;
	  };

	  // Priority Queue for Scheduling
	  var PriorityQueue = Rx.internals.PriorityQueue = function (capacity) {
	    this.items = new Array(capacity);
	    this.length = 0;
	  };

	  var priorityProto = PriorityQueue.prototype;
	  priorityProto.isHigherPriority = function (left, right) {
	    return this.items[left].compareTo(this.items[right]) < 0;
	  };

	  priorityProto.percolate = function (index) {
	    if (index >= this.length || index < 0) {
	      return;
	    }
	    var parent = index - 1 >> 1;
	    if (parent < 0 || parent === index) {
	      return;
	    }
	    if (this.isHigherPriority(index, parent)) {
	      var temp = this.items[index];
	      this.items[index] = this.items[parent];
	      this.items[parent] = temp;
	      this.percolate(parent);
	    }
	  };

	  priorityProto.heapify = function (index) {
	    +index || (index = 0);
	    if (index >= this.length || index < 0) {
	      return;
	    }
	    var left = 2 * index + 1,
	        right = 2 * index + 2,
	        first = index;
	    if (left < this.length && this.isHigherPriority(left, first)) {
	      first = left;
	    }
	    if (right < this.length && this.isHigherPriority(right, first)) {
	      first = right;
	    }
	    if (first !== index) {
	      var temp = this.items[index];
	      this.items[index] = this.items[first];
	      this.items[first] = temp;
	      this.heapify(first);
	    }
	  };

	  priorityProto.peek = function () {
	    return this.items[0].value;
	  };

	  priorityProto.removeAt = function (index) {
	    this.items[index] = this.items[--this.length];
	    this.items[this.length] = undefined;
	    this.heapify();
	  };

	  priorityProto.dequeue = function () {
	    var result = this.peek();
	    this.removeAt(0);
	    return result;
	  };

	  priorityProto.enqueue = function (item) {
	    var index = this.length++;
	    this.items[index] = new IndexedItem(PriorityQueue.count++, item);
	    this.percolate(index);
	  };

	  priorityProto.remove = function (item) {
	    for (var i = 0; i < this.length; i++) {
	      if (this.items[i].value === item) {
	        this.removeAt(i);
	        return true;
	      }
	    }
	    return false;
	  };
	  PriorityQueue.count = 0;

	  /**
	   * Represents a group of disposable resources that are disposed together.
	   * @constructor
	   */
	  var CompositeDisposable = Rx.CompositeDisposable = function () {
	    var args = [],
	        i,
	        len;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	      len = args.length;
	    } else {
	      len = arguments.length;
	      args = new Array(len);
	      for (i = 0; i < len; i++) {
	        args[i] = arguments[i];
	      }
	    }
	    for (i = 0; i < len; i++) {
	      if (!isDisposable(args[i])) {
	        throw new TypeError('Not a disposable');
	      }
	    }
	    this.disposables = args;
	    this.isDisposed = false;
	    this.length = args.length;
	  };

	  var CompositeDisposablePrototype = CompositeDisposable.prototype;

	  /**
	   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
	   * @param {Mixed} item Disposable to add.
	   */
	  CompositeDisposablePrototype.add = function (item) {
	    if (this.isDisposed) {
	      item.dispose();
	    } else {
	      this.disposables.push(item);
	      this.length++;
	    }
	  };

	  /**
	   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
	   * @param {Mixed} item Disposable to remove.
	   * @returns {Boolean} true if found; false otherwise.
	   */
	  CompositeDisposablePrototype.remove = function (item) {
	    var shouldDispose = false;
	    if (!this.isDisposed) {
	      var idx = this.disposables.indexOf(item);
	      if (idx !== -1) {
	        shouldDispose = true;
	        this.disposables.splice(idx, 1);
	        this.length--;
	        item.dispose();
	      }
	    }
	    return shouldDispose;
	  };

	  /**
	   *  Disposes all disposables in the group and removes them from the group.
	   */
	  CompositeDisposablePrototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      var len = this.disposables.length,
	          currentDisposables = new Array(len);
	      for (var i = 0; i < len; i++) {
	        currentDisposables[i] = this.disposables[i];
	      }
	      this.disposables = [];
	      this.length = 0;

	      for (i = 0; i < len; i++) {
	        currentDisposables[i].dispose();
	      }
	    }
	  };

	  /**
	   * Provides a set of static methods for creating Disposables.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   */
	  var Disposable = Rx.Disposable = function (action) {
	    this.isDisposed = false;
	    this.action = action || noop;
	  };

	  /** Performs the task of cleaning up resources. */
	  Disposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.action();
	      this.isDisposed = true;
	    }
	  };

	  /**
	   * Creates a disposable object that invokes the specified action when disposed.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   * @return {Disposable} The disposable object that runs the given action upon disposal.
	   */
	  var disposableCreate = Disposable.create = function (action) {
	    return new Disposable(action);
	  };

	  /**
	   * Gets the disposable that does nothing when disposed.
	   */
	  var disposableEmpty = Disposable.empty = { dispose: noop };

	  /**
	   * Validates whether the given object is a disposable
	   * @param {Object} Object to test whether it has a dispose method
	   * @returns {Boolean} true if a disposable object, else false.
	   */
	  var isDisposable = Disposable.isDisposable = function (d) {
	    return d && isFunction(d.dispose);
	  };

	  var checkDisposed = Disposable.checkDisposed = function (disposable) {
	    if (disposable.isDisposed) {
	      throw new ObjectDisposedError();
	    }
	  };

	  var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = (function () {
	    function BooleanDisposable() {
	      this.isDisposed = false;
	      this.current = null;
	    }

	    var booleanDisposablePrototype = BooleanDisposable.prototype;

	    /**
	     * Gets the underlying disposable.
	     * @return The underlying disposable.
	     */
	    booleanDisposablePrototype.getDisposable = function () {
	      return this.current;
	    };

	    /**
	     * Sets the underlying disposable.
	     * @param {Disposable} value The new underlying disposable.
	     */
	    booleanDisposablePrototype.setDisposable = function (value) {
	      var shouldDispose = this.isDisposed;
	      if (!shouldDispose) {
	        var old = this.current;
	        this.current = value;
	      }
	      old && old.dispose();
	      shouldDispose && value && value.dispose();
	    };

	    /**
	     * Disposes the underlying disposable as well as all future replacements.
	     */
	    booleanDisposablePrototype.dispose = function () {
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        var old = this.current;
	        this.current = null;
	      }
	      old && old.dispose();
	    };

	    return BooleanDisposable;
	  })();
	  var SerialDisposable = Rx.SerialDisposable = SingleAssignmentDisposable;

	  /**
	   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
	   */
	  var RefCountDisposable = Rx.RefCountDisposable = (function () {

	    function InnerDisposable(disposable) {
	      this.disposable = disposable;
	      this.disposable.count++;
	      this.isInnerDisposed = false;
	    }

	    InnerDisposable.prototype.dispose = function () {
	      if (!this.disposable.isDisposed && !this.isInnerDisposed) {
	        this.isInnerDisposed = true;
	        this.disposable.count--;
	        if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
	          this.disposable.isDisposed = true;
	          this.disposable.underlyingDisposable.dispose();
	        }
	      }
	    };

	    /**
	     * Initializes a new instance of the RefCountDisposable with the specified disposable.
	     * @constructor
	     * @param {Disposable} disposable Underlying disposable.
	      */
	    function RefCountDisposable(disposable) {
	      this.underlyingDisposable = disposable;
	      this.isDisposed = false;
	      this.isPrimaryDisposed = false;
	      this.count = 0;
	    }

	    /**
	     * Disposes the underlying disposable only when all dependent disposables have been disposed
	     */
	    RefCountDisposable.prototype.dispose = function () {
	      if (!this.isDisposed && !this.isPrimaryDisposed) {
	        this.isPrimaryDisposed = true;
	        if (this.count === 0) {
	          this.isDisposed = true;
	          this.underlyingDisposable.dispose();
	        }
	      }
	    };

	    /**
	     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
	     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
	     */
	    RefCountDisposable.prototype.getDisposable = function () {
	      return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
	    };

	    return RefCountDisposable;
	  })();

	  function ScheduledDisposable(scheduler, disposable) {
	    this.scheduler = scheduler;
	    this.disposable = disposable;
	    this.isDisposed = false;
	  }

	  function scheduleItem(s, self) {
	    if (!self.isDisposed) {
	      self.isDisposed = true;
	      self.disposable.dispose();
	    }
	  }

	  ScheduledDisposable.prototype.dispose = function () {
	    this.scheduler.scheduleWithState(this, scheduleItem);
	  };

	  var ScheduledItem = Rx.internals.ScheduledItem = function (scheduler, state, action, dueTime, comparer) {
	    this.scheduler = scheduler;
	    this.state = state;
	    this.action = action;
	    this.dueTime = dueTime;
	    this.comparer = comparer || defaultSubComparer;
	    this.disposable = new SingleAssignmentDisposable();
	  };

	  ScheduledItem.prototype.invoke = function () {
	    this.disposable.setDisposable(this.invokeCore());
	  };

	  ScheduledItem.prototype.compareTo = function (other) {
	    return this.comparer(this.dueTime, other.dueTime);
	  };

	  ScheduledItem.prototype.isCancelled = function () {
	    return this.disposable.isDisposed;
	  };

	  ScheduledItem.prototype.invokeCore = function () {
	    return this.action(this.scheduler, this.state);
	  };

	  /** Provides a set of static properties to access commonly used schedulers. */
	  var Scheduler = Rx.Scheduler = (function () {

	    function Scheduler(now, schedule, scheduleRelative, scheduleAbsolute) {
	      this.now = now;
	      this._schedule = schedule;
	      this._scheduleRelative = scheduleRelative;
	      this._scheduleAbsolute = scheduleAbsolute;
	    }

	    function invokeAction(scheduler, action) {
	      action();
	      return disposableEmpty;
	    }

	    var schedulerProto = Scheduler.prototype;

	    /**
	     * Schedules an action to be executed.
	     * @param {Function} action Action to execute.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.schedule = function (action) {
	      return this._schedule(action, invokeAction);
	    };

	    /**
	     * Schedules an action to be executed.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithState = function (state, action) {
	      return this._schedule(state, action);
	    };

	    /**
	     * Schedules an action to be executed after the specified relative due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithRelative = function (dueTime, action) {
	      return this._scheduleRelative(action, dueTime, invokeAction);
	    };

	    /**
	     * Schedules an action to be executed after dueTime.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithRelativeAndState = function (state, dueTime, action) {
	      return this._scheduleRelative(state, dueTime, action);
	    };

	    /**
	     * Schedules an action to be executed at the specified absolute due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	      */
	    schedulerProto.scheduleWithAbsolute = function (dueTime, action) {
	      return this._scheduleAbsolute(action, dueTime, invokeAction);
	    };

	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number}dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithAbsoluteAndState = function (state, dueTime, action) {
	      return this._scheduleAbsolute(state, dueTime, action);
	    };

	    /** Gets the current time according to the local machine's system clock. */
	    Scheduler.now = defaultNow;

	    /**
	     * Normalizes the specified TimeSpan value to a positive value.
	     * @param {Number} timeSpan The time span value to normalize.
	     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
	     */
	    Scheduler.normalize = function (timeSpan) {
	      timeSpan < 0 && (timeSpan = 0);
	      return timeSpan;
	    };

	    return Scheduler;
	  })();

	  var normalizeTime = Scheduler.normalize;

	  (function (schedulerProto) {

	    function invokeRecImmediate(scheduler, pair) {
	      var state = pair[0],
	          action = pair[1],
	          group = new CompositeDisposable();

	      function recursiveAction(state1) {
	        action(state1, function (state2) {
	          var isAdded = false,
	              isDone = false,
	              d = scheduler.scheduleWithState(state2, function (scheduler1, state3) {
	            if (isAdded) {
	              group.remove(d);
	            } else {
	              isDone = true;
	            }
	            recursiveAction(state3);
	            return disposableEmpty;
	          });
	          if (!isDone) {
	            group.add(d);
	            isAdded = true;
	          }
	        });
	      }

	      recursiveAction(state);
	      return group;
	    }

	    function invokeRecDate(scheduler, pair, method) {
	      var state = pair[0],
	          action = pair[1],
	          group = new CompositeDisposable();
	      function recursiveAction(state1) {
	        action(state1, function (state2, dueTime1) {
	          var isAdded = false,
	              isDone = false,
	              d = scheduler[method](state2, dueTime1, function (scheduler1, state3) {
	            if (isAdded) {
	              group.remove(d);
	            } else {
	              isDone = true;
	            }
	            recursiveAction(state3);
	            return disposableEmpty;
	          });
	          if (!isDone) {
	            group.add(d);
	            isAdded = true;
	          }
	        });
	      };
	      recursiveAction(state);
	      return group;
	    }

	    function scheduleInnerRecursive(action, self) {
	      action(function (dt) {
	        self(action, dt);
	      });
	    }

	    /**
	     * Schedules an action to be executed recursively.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursive = function (action) {
	      return this.scheduleRecursiveWithState(action, function (_action, self) {
	        _action(function () {
	          self(_action);
	        });
	      });
	    };

	    /**
	     * Schedules an action to be executed recursively.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithState = function (state, action) {
	      return this.scheduleWithState([state, action], invokeRecImmediate);
	    };

	    /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithRelative = function (dueTime, action) {
	      return this.scheduleRecursiveWithRelativeAndState(action, dueTime, scheduleInnerRecursive);
	    };

	    /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithRelativeAndState = function (state, dueTime, action) {
	      return this._scheduleRelative([state, action], dueTime, function (s, p) {
	        return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
	      });
	    };

	    /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithAbsolute = function (dueTime, action) {
	      return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, scheduleInnerRecursive);
	    };

	    /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithAbsoluteAndState = function (state, dueTime, action) {
	      return this._scheduleAbsolute([state, action], dueTime, function (s, p) {
	        return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
	      });
	    };
	  })(Scheduler.prototype);

	  (function (schedulerProto) {

	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    Scheduler.prototype.schedulePeriodic = function (period, action) {
	      return this.schedulePeriodicWithState(null, period, action);
	    };

	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    Scheduler.prototype.schedulePeriodicWithState = function (state, period, action) {
	      if (typeof root.setInterval === 'undefined') {
	        throw new NotSupportedError();
	      }
	      period = normalizeTime(period);
	      var s = state,
	          id = root.setInterval(function () {
	        s = action(s);
	      }, period);
	      return disposableCreate(function () {
	        root.clearInterval(id);
	      });
	    };
	  })(Scheduler.prototype);

	  (function (schedulerProto) {
	    /**
	     * Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
	     * @param {Function} handler Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.
	     * @returns {Scheduler} Wrapper around the original scheduler, enforcing exception handling.
	     */
	    schedulerProto.catchError = schedulerProto['catch'] = function (handler) {
	      return new CatchScheduler(this, handler);
	    };
	  })(Scheduler.prototype);

	  var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function () {
	    function tick(command, recurse) {
	      recurse(0, this._period);
	      try {
	        this._state = this._action(this._state);
	      } catch (e) {
	        this._cancel.dispose();
	        throw e;
	      }
	    }

	    function SchedulePeriodicRecursive(scheduler, state, period, action) {
	      this._scheduler = scheduler;
	      this._state = state;
	      this._period = period;
	      this._action = action;
	    }

	    SchedulePeriodicRecursive.prototype.start = function () {
	      var d = new SingleAssignmentDisposable();
	      this._cancel = d;
	      d.setDisposable(this._scheduler.scheduleRecursiveWithRelativeAndState(0, this._period, tick.bind(this)));

	      return d;
	    };

	    return SchedulePeriodicRecursive;
	  })();

	  /** Gets a scheduler that schedules work immediately on the current thread. */
	  var immediateScheduler = Scheduler.immediate = (function () {
	    function scheduleNow(state, action) {
	      return action(this, state);
	    }
	    return new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
	  })();

	  /**
	   * Gets a scheduler that schedules work as soon as possible on the current thread.
	   */
	  var currentThreadScheduler = Scheduler.currentThread = (function () {
	    var queue;

	    function runTrampoline() {
	      while (queue.length > 0) {
	        var item = queue.dequeue();
	        !item.isCancelled() && item.invoke();
	      }
	    }

	    function scheduleNow(state, action) {
	      var si = new ScheduledItem(this, state, action, this.now());

	      if (!queue) {
	        queue = new PriorityQueue(4);
	        queue.enqueue(si);

	        var result = tryCatch(runTrampoline)();
	        queue = null;
	        if (result === errorObj) {
	          return thrower(result.e);
	        }
	      } else {
	        queue.enqueue(si);
	      }
	      return si.disposable;
	    }

	    var currentScheduler = new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
	    currentScheduler.scheduleRequired = function () {
	      return !queue;
	    };

	    return currentScheduler;
	  })();

	  var scheduleMethod, clearMethod;

	  var localTimer = (function () {
	    var localSetTimeout,
	        localClearTimeout = noop;
	    if (!!root.WScript) {
	      localSetTimeout = function (fn, time) {
	        root.WScript.Sleep(time);
	        fn();
	      };
	    } else if (!!root.setTimeout) {
	      localSetTimeout = root.setTimeout;
	      localClearTimeout = root.clearTimeout;
	    } else {
	      throw new NotSupportedError();
	    }

	    return {
	      setTimeout: localSetTimeout,
	      clearTimeout: localClearTimeout
	    };
	  })();
	  var localSetTimeout = localTimer.setTimeout,
	      localClearTimeout = localTimer.clearTimeout;

	  (function () {

	    var nextHandle = 1,
	        tasksByHandle = {},
	        currentlyRunning = false;

	    clearMethod = function (handle) {
	      delete tasksByHandle[handle];
	    };

	    function runTask(handle) {
	      if (currentlyRunning) {
	        localSetTimeout(function () {
	          runTask(handle);
	        }, 0);
	      } else {
	        var task = tasksByHandle[handle];
	        if (task) {
	          currentlyRunning = true;
	          var result = tryCatch(task)();
	          clearMethod(handle);
	          currentlyRunning = false;
	          if (result === errorObj) {
	            return thrower(result.e);
	          }
	        }
	      }
	    }

	    var reNative = RegExp('^' + String(toString).replace(/[.*+?^${}()|[\]\\]/g, '\\$&').replace(/toString| for [^\]]+/g, '.*?') + '$');

	    var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' && !reNative.test(setImmediate) && setImmediate;

	    function postMessageSupported() {
	      // Ensure not in a worker
	      if (!root.postMessage || root.importScripts) {
	        return false;
	      }
	      var isAsync = false,
	          oldHandler = root.onmessage;
	      // Test for async
	      root.onmessage = function () {
	        isAsync = true;
	      };
	      root.postMessage('', '*');
	      root.onmessage = oldHandler;

	      return isAsync;
	    }

	    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
	    if (isFunction(setImmediate)) {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        setImmediate(function () {
	          runTask(id);
	        });

	        return id;
	      };
	    } else if (typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]') {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        process.nextTick(function () {
	          runTask(id);
	        });

	        return id;
	      };
	    } else if (postMessageSupported()) {
	      var onGlobalPostMessage = function (event) {
	        // Only if we're a match to avoid any other global events
	        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
	          runTask(event.data.substring(MSG_PREFIX.length));
	        }
	      };

	      var MSG_PREFIX = 'ms.rx.schedule' + Math.random();

	      if (root.addEventListener) {
	        root.addEventListener('message', onGlobalPostMessage, false);
	      } else {
	        root.attachEvent('onmessage', onGlobalPostMessage, false);
	      }

	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        root.postMessage(MSG_PREFIX + currentId, '*');
	        return id;
	      };
	    } else if (!!root.MessageChannel) {
	      var channel = new root.MessageChannel();

	      channel.port1.onmessage = function (e) {
	        runTask(e.data);
	      };

	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        channel.port2.postMessage(id);
	        return id;
	      };
	    } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {

	      scheduleMethod = function (action) {
	        var scriptElement = root.document.createElement('script');
	        var id = nextHandle++;
	        tasksByHandle[id] = action;

	        scriptElement.onreadystatechange = function () {
	          runTask(id);
	          scriptElement.onreadystatechange = null;
	          scriptElement.parentNode.removeChild(scriptElement);
	          scriptElement = null;
	        };
	        root.document.documentElement.appendChild(scriptElement);
	        return id;
	      };
	    } else {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        localSetTimeout(function () {
	          runTask(id);
	        }, 0);

	        return id;
	      };
	    }
	  })();

	  /**
	   * Gets a scheduler that schedules work via a timed callback based upon platform.
	   */
	  var timeoutScheduler = Scheduler.timeout = Scheduler['default'] = (function () {

	    function scheduleNow(state, action) {
	      var scheduler = this,
	          disposable = new SingleAssignmentDisposable();
	      var id = scheduleMethod(function () {
	        if (!disposable.isDisposed) {
	          disposable.setDisposable(action(scheduler, state));
	        }
	      });
	      return new CompositeDisposable(disposable, disposableCreate(function () {
	        clearMethod(id);
	      }));
	    }

	    function scheduleRelative(state, dueTime, action) {
	      var scheduler = this,
	          dt = Scheduler.normalize(dueTime);
	      if (dt === 0) {
	        return scheduler.scheduleWithState(state, action);
	      }
	      var disposable = new SingleAssignmentDisposable();
	      var id = localSetTimeout(function () {
	        if (!disposable.isDisposed) {
	          disposable.setDisposable(action(scheduler, state));
	        }
	      }, dt);
	      return new CompositeDisposable(disposable, disposableCreate(function () {
	        localClearTimeout(id);
	      }));
	    }

	    function scheduleAbsolute(state, dueTime, action) {
	      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
	    }

	    return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
	  })();

	  var CatchScheduler = (function (__super__) {

	    function scheduleNow(state, action) {
	      return this._scheduler.scheduleWithState(state, this._wrap(action));
	    }

	    function scheduleRelative(state, dueTime, action) {
	      return this._scheduler.scheduleWithRelativeAndState(state, dueTime, this._wrap(action));
	    }

	    function scheduleAbsolute(state, dueTime, action) {
	      return this._scheduler.scheduleWithAbsoluteAndState(state, dueTime, this._wrap(action));
	    }

	    inherits(CatchScheduler, __super__);

	    function CatchScheduler(scheduler, handler) {
	      this._scheduler = scheduler;
	      this._handler = handler;
	      this._recursiveOriginal = null;
	      this._recursiveWrapper = null;
	      __super__.call(this, this._scheduler.now.bind(this._scheduler), scheduleNow, scheduleRelative, scheduleAbsolute);
	    }

	    CatchScheduler.prototype._clone = function (scheduler) {
	      return new CatchScheduler(scheduler, this._handler);
	    };

	    CatchScheduler.prototype._wrap = function (action) {
	      var parent = this;
	      return function (self, state) {
	        try {
	          return action(parent._getRecursiveWrapper(self), state);
	        } catch (e) {
	          if (!parent._handler(e)) {
	            throw e;
	          }
	          return disposableEmpty;
	        }
	      };
	    };

	    CatchScheduler.prototype._getRecursiveWrapper = function (scheduler) {
	      if (this._recursiveOriginal !== scheduler) {
	        this._recursiveOriginal = scheduler;
	        var wrapper = this._clone(scheduler);
	        wrapper._recursiveOriginal = scheduler;
	        wrapper._recursiveWrapper = wrapper;
	        this._recursiveWrapper = wrapper;
	      }
	      return this._recursiveWrapper;
	    };

	    CatchScheduler.prototype.schedulePeriodicWithState = function (state, period, action) {
	      var self = this,
	          failed = false,
	          d = new SingleAssignmentDisposable();

	      d.setDisposable(this._scheduler.schedulePeriodicWithState(state, period, function (state1) {
	        if (failed) {
	          return null;
	        }
	        try {
	          return action(state1);
	        } catch (e) {
	          failed = true;
	          if (!self._handler(e)) {
	            throw e;
	          }
	          d.dispose();
	          return null;
	        }
	      }));

	      return d;
	    };

	    return CatchScheduler;
	  })(Scheduler);

	  /**
	   *  Represents a notification to an observer.
	   */
	  var Notification = Rx.Notification = (function () {
	    function Notification(kind, value, exception, accept, acceptObservable, toString) {
	      this.kind = kind;
	      this.value = value;
	      this.exception = exception;
	      this._accept = accept;
	      this._acceptObservable = acceptObservable;
	      this.toString = toString;
	    }

	    /**
	     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
	     *
	     * @memberOf Notification
	     * @param {Any} observerOrOnNext Delegate to invoke for an OnNext notification or Observer to invoke the notification on..
	     * @param {Function} onError Delegate to invoke for an OnError notification.
	     * @param {Function} onCompleted Delegate to invoke for an OnCompleted notification.
	     * @returns {Any} Result produced by the observation.
	     */
	    Notification.prototype.accept = function (observerOrOnNext, onError, onCompleted) {
	      return observerOrOnNext && typeof observerOrOnNext === 'object' ? this._acceptObservable(observerOrOnNext) : this._accept(observerOrOnNext, onError, onCompleted);
	    };

	    /**
	     * Returns an observable sequence with a single notification.
	     *
	     * @memberOf Notifications
	     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
	     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
	     */
	    Notification.prototype.toObservable = function (scheduler) {
	      var self = this;
	      isScheduler(scheduler) || (scheduler = immediateScheduler);
	      return new AnonymousObservable(function (observer) {
	        return scheduler.scheduleWithState(self, function (_, notification) {
	          notification._acceptObservable(observer);
	          notification.kind === 'N' && observer.onCompleted();
	        });
	      });
	    };

	    return Notification;
	  })();

	  /**
	   * Creates an object that represents an OnNext notification to an observer.
	   * @param {Any} value The value contained in the notification.
	   * @returns {Notification} The OnNext notification containing the value.
	   */
	  var notificationCreateOnNext = Notification.createOnNext = (function () {
	    function _accept(onNext) {
	      return onNext(this.value);
	    }
	    function _acceptObservable(observer) {
	      return observer.onNext(this.value);
	    }
	    function toString() {
	      return 'OnNext(' + this.value + ')';
	    }

	    return function (value) {
	      return new Notification('N', value, null, _accept, _acceptObservable, toString);
	    };
	  })();

	  /**
	   * Creates an object that represents an OnError notification to an observer.
	   * @param {Any} error The exception contained in the notification.
	   * @returns {Notification} The OnError notification containing the exception.
	   */
	  var notificationCreateOnError = Notification.createOnError = (function () {
	    function _accept(onNext, onError) {
	      return onError(this.exception);
	    }
	    function _acceptObservable(observer) {
	      return observer.onError(this.exception);
	    }
	    function toString() {
	      return 'OnError(' + this.exception + ')';
	    }

	    return function (e) {
	      return new Notification('E', null, e, _accept, _acceptObservable, toString);
	    };
	  })();

	  /**
	   * Creates an object that represents an OnCompleted notification to an observer.
	   * @returns {Notification} The OnCompleted notification.
	   */
	  var notificationCreateOnCompleted = Notification.createOnCompleted = (function () {
	    function _accept(onNext, onError, onCompleted) {
	      return onCompleted();
	    }
	    function _acceptObservable(observer) {
	      return observer.onCompleted();
	    }
	    function toString() {
	      return 'OnCompleted()';
	    }

	    return function () {
	      return new Notification('C', null, null, _accept, _acceptObservable, toString);
	    };
	  })();

	  var Enumerator = Rx.internals.Enumerator = function (next) {
	    this._next = next;
	  };

	  Enumerator.prototype.next = function () {
	    return this._next();
	  };

	  Enumerator.prototype[$iterator$] = function () {
	    return this;
	  };

	  var Enumerable = Rx.internals.Enumerable = function (iterator) {
	    this._iterator = iterator;
	  };

	  Enumerable.prototype[$iterator$] = function () {
	    return this._iterator();
	  };

	  Enumerable.prototype.concat = function () {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var e = sources[$iterator$]();

	      var isDisposed,
	          subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        if (isDisposed) {
	          return;
	        }
	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return o.onError(ex);
	        }

	        if (currentItem.done) {
	          return o.onCompleted();
	        }

	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(currentValue.subscribe(function (x) {
	          o.onNext(x);
	        }, function (err) {
	          o.onError(err);
	        }, self));
	      });

	      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };

	  Enumerable.prototype.catchError = function () {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var e = sources[$iterator$]();

	      var isDisposed,
	          subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursiveWithState(null, function (lastException, self) {
	        if (isDisposed) {
	          return;
	        }

	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return observer.onError(ex);
	        }

	        if (currentItem.done) {
	          if (lastException !== null) {
	            o.onError(lastException);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }

	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(currentValue.subscribe(function (x) {
	          o.onNext(x);
	        }, self, function () {
	          o.onCompleted();
	        }));
	      });
	      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };

	  Enumerable.prototype.catchErrorWhen = function (notificationHandler) {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var exceptions = new Subject(),
	          notifier = new Subject(),
	          handled = notificationHandler(exceptions),
	          notificationDisposable = handled.subscribe(notifier);

	      var e = sources[$iterator$]();

	      var isDisposed,
	          lastException,
	          subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        if (isDisposed) {
	          return;
	        }

	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return o.onError(ex);
	        }

	        if (currentItem.done) {
	          if (lastException) {
	            o.onError(lastException);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }

	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));

	        var outer = new SingleAssignmentDisposable();
	        var inner = new SingleAssignmentDisposable();
	        subscription.setDisposable(new CompositeDisposable(inner, outer));
	        outer.setDisposable(currentValue.subscribe(function (x) {
	          o.onNext(x);
	        }, function (exn) {
	          inner.setDisposable(notifier.subscribe(self, function (ex) {
	            o.onError(ex);
	          }, function () {
	            o.onCompleted();
	          }));

	          exceptions.onNext(exn);
	        }, function () {
	          o.onCompleted();
	        }));
	      });

	      return new CompositeDisposable(notificationDisposable, subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };

	  var enumerableRepeat = Enumerable.repeat = function (value, repeatCount) {
	    if (repeatCount == null) {
	      repeatCount = -1;
	    }
	    return new Enumerable(function () {
	      var left = repeatCount;
	      return new Enumerator(function () {
	        if (left === 0) {
	          return doneEnumerator;
	        }
	        if (left > 0) {
	          left--;
	        }
	        return { done: false, value: value };
	      });
	    });
	  };

	  var enumerableOf = Enumerable.of = function (source, selector, thisArg) {
	    if (selector) {
	      var selectorFn = bindCallback(selector, thisArg, 3);
	    }
	    return new Enumerable(function () {
	      var index = -1;
	      return new Enumerator(function () {
	        return ++index < source.length ? { done: false, value: !selector ? source[index] : selectorFn(source[index], index, source) } : doneEnumerator;
	      });
	    });
	  };

	  /**
	   * Supports push-style iteration over an observable sequence.
	   */
	  var Observer = Rx.Observer = function () {};

	  /**
	   *  Creates a notification callback from an observer.
	   * @returns The action that forwards its input notification to the underlying observer.
	   */
	  Observer.prototype.toNotifier = function () {
	    var observer = this;
	    return function (n) {
	      return n.accept(observer);
	    };
	  };

	  /**
	   *  Hides the identity of an observer.
	   * @returns An observer that hides the identity of the specified observer.
	   */
	  Observer.prototype.asObserver = function () {
	    return new AnonymousObserver(this.onNext.bind(this), this.onError.bind(this), this.onCompleted.bind(this));
	  };

	  /**
	   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
	   *  If a violation is detected, an Error is thrown from the offending observer method call.
	   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.
	   */
	  Observer.prototype.checked = function () {
	    return new CheckedObserver(this);
	  };

	  /**
	   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
	   * @param {Function} [onNext] Observer's OnNext action implementation.
	   * @param {Function} [onError] Observer's OnError action implementation.
	   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
	   * @returns {Observer} The observer object implemented using the given actions.
	   */
	  var observerCreate = Observer.create = function (onNext, onError, onCompleted) {
	    onNext || (onNext = noop);
	    onError || (onError = defaultError);
	    onCompleted || (onCompleted = noop);
	    return new AnonymousObserver(onNext, onError, onCompleted);
	  };

	  /**
	   *  Creates an observer from a notification callback.
	   *
	   * @static
	   * @memberOf Observer
	   * @param {Function} handler Action that handles a notification.
	   * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
	   */
	  Observer.fromNotifier = function (handler, thisArg) {
	    return new AnonymousObserver(function (x) {
	      return handler.call(thisArg, notificationCreateOnNext(x));
	    }, function (e) {
	      return handler.call(thisArg, notificationCreateOnError(e));
	    }, function () {
	      return handler.call(thisArg, notificationCreateOnCompleted());
	    });
	  };

	  /**
	   * Schedules the invocation of observer methods on the given scheduler.
	   * @param {Scheduler} scheduler Scheduler to schedule observer messages on.
	   * @returns {Observer} Observer whose messages are scheduled on the given scheduler.
	   */
	  Observer.prototype.notifyOn = function (scheduler) {
	    return new ObserveOnObserver(scheduler, this);
	  };

	  Observer.prototype.makeSafe = function (disposable) {
	    return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);
	  };

	  /**
	   * Abstract base class for implementations of the Observer class.
	   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
	   */
	  var AbstractObserver = Rx.internals.AbstractObserver = (function (__super__) {
	    inherits(AbstractObserver, __super__);

	    /**
	     * Creates a new observer in a non-stopped state.
	     */
	    function AbstractObserver() {
	      this.isStopped = false;
	      __super__.call(this);
	    }

	    // Must be implemented by other observers
	    AbstractObserver.prototype.next = notImplemented;
	    AbstractObserver.prototype.error = notImplemented;
	    AbstractObserver.prototype.completed = notImplemented;

	    /**
	     * Notifies the observer of a new element in the sequence.
	     * @param {Any} value Next element in the sequence.
	     */
	    AbstractObserver.prototype.onNext = function (value) {
	      if (!this.isStopped) {
	        this.next(value);
	      }
	    };

	    /**
	     * Notifies the observer that an exception has occurred.
	     * @param {Any} error The error that has occurred.
	     */
	    AbstractObserver.prototype.onError = function (error) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(error);
	      }
	    };

	    /**
	     * Notifies the observer of the end of the sequence.
	     */
	    AbstractObserver.prototype.onCompleted = function () {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.completed();
	      }
	    };

	    /**
	     * Disposes the observer, causing it to transition to the stopped state.
	     */
	    AbstractObserver.prototype.dispose = function () {
	      this.isStopped = true;
	    };

	    AbstractObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(e);
	        return true;
	      }

	      return false;
	    };

	    return AbstractObserver;
	  })(Observer);

	  /**
	   * Class to create an Observer instance from delegate-based implementations of the on* methods.
	   */
	  var AnonymousObserver = Rx.AnonymousObserver = (function (__super__) {
	    inherits(AnonymousObserver, __super__);

	    /**
	     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
	     * @param {Any} onNext Observer's OnNext action implementation.
	     * @param {Any} onError Observer's OnError action implementation.
	     * @param {Any} onCompleted Observer's OnCompleted action implementation.
	     */
	    function AnonymousObserver(onNext, onError, onCompleted) {
	      __super__.call(this);
	      this._onNext = onNext;
	      this._onError = onError;
	      this._onCompleted = onCompleted;
	    }

	    /**
	     * Calls the onNext action.
	     * @param {Any} value Next element in the sequence.
	     */
	    AnonymousObserver.prototype.next = function (value) {
	      this._onNext(value);
	    };

	    /**
	     * Calls the onError action.
	     * @param {Any} error The error that has occurred.
	     */
	    AnonymousObserver.prototype.error = function (error) {
	      this._onError(error);
	    };

	    /**
	     *  Calls the onCompleted action.
	     */
	    AnonymousObserver.prototype.completed = function () {
	      this._onCompleted();
	    };

	    return AnonymousObserver;
	  })(AbstractObserver);

	  var CheckedObserver = (function (__super__) {
	    inherits(CheckedObserver, __super__);

	    function CheckedObserver(observer) {
	      __super__.call(this);
	      this._observer = observer;
	      this._state = 0; // 0 - idle, 1 - busy, 2 - done
	    }

	    var CheckedObserverPrototype = CheckedObserver.prototype;

	    CheckedObserverPrototype.onNext = function (value) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onNext).call(this._observer, value);
	      this._state = 0;
	      res === errorObj && thrower(res.e);
	    };

	    CheckedObserverPrototype.onError = function (err) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onError).call(this._observer, err);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };

	    CheckedObserverPrototype.onCompleted = function () {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onCompleted).call(this._observer);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };

	    CheckedObserverPrototype.checkAccess = function () {
	      if (this._state === 1) {
	        throw new Error('Re-entrancy detected');
	      }
	      if (this._state === 2) {
	        throw new Error('Observer completed');
	      }
	      if (this._state === 0) {
	        this._state = 1;
	      }
	    };

	    return CheckedObserver;
	  })(Observer);

	  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (__super__) {
	    inherits(ScheduledObserver, __super__);

	    function ScheduledObserver(scheduler, observer) {
	      __super__.call(this);
	      this.scheduler = scheduler;
	      this.observer = observer;
	      this.isAcquired = false;
	      this.hasFaulted = false;
	      this.queue = [];
	      this.disposable = new SerialDisposable();
	    }

	    ScheduledObserver.prototype.next = function (value) {
	      var self = this;
	      this.queue.push(function () {
	        self.observer.onNext(value);
	      });
	    };

	    ScheduledObserver.prototype.error = function (e) {
	      var self = this;
	      this.queue.push(function () {
	        self.observer.onError(e);
	      });
	    };

	    ScheduledObserver.prototype.completed = function () {
	      var self = this;
	      this.queue.push(function () {
	        self.observer.onCompleted();
	      });
	    };

	    ScheduledObserver.prototype.ensureActive = function () {
	      var isOwner = false,
	          parent = this;
	      if (!this.hasFaulted && this.queue.length > 0) {
	        isOwner = !this.isAcquired;
	        this.isAcquired = true;
	      }
	      if (isOwner) {
	        this.disposable.setDisposable(this.scheduler.scheduleRecursive(function (self) {
	          var work;
	          if (parent.queue.length > 0) {
	            work = parent.queue.shift();
	          } else {
	            parent.isAcquired = false;
	            return;
	          }
	          try {
	            work();
	          } catch (ex) {
	            parent.queue = [];
	            parent.hasFaulted = true;
	            throw ex;
	          }
	          self();
	        }));
	      }
	    };

	    ScheduledObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.disposable.dispose();
	    };

	    return ScheduledObserver;
	  })(AbstractObserver);

	  var ObserveOnObserver = (function (__super__) {
	    inherits(ObserveOnObserver, __super__);

	    function ObserveOnObserver(scheduler, observer, cancel) {
	      __super__.call(this, scheduler, observer);
	      this._cancel = cancel;
	    }

	    ObserveOnObserver.prototype.next = function (value) {
	      __super__.prototype.next.call(this, value);
	      this.ensureActive();
	    };

	    ObserveOnObserver.prototype.error = function (e) {
	      __super__.prototype.error.call(this, e);
	      this.ensureActive();
	    };

	    ObserveOnObserver.prototype.completed = function () {
	      __super__.prototype.completed.call(this);
	      this.ensureActive();
	    };

	    ObserveOnObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this._cancel && this._cancel.dispose();
	      this._cancel = null;
	    };

	    return ObserveOnObserver;
	  })(ScheduledObserver);

	  var observableProto;

	  /**
	   * Represents a push-style collection.
	   */
	  var Observable = Rx.Observable = (function () {

	    function Observable(subscribe) {
	      if (Rx.config.longStackSupport && hasStacks) {
	        try {
	          throw new Error();
	        } catch (e) {
	          this.stack = e.stack.substring(e.stack.indexOf('\n') + 1);
	        }

	        var self = this;
	        this._subscribe = function (observer) {
	          var oldOnError = observer.onError.bind(observer);

	          observer.onError = function (err) {
	            makeStackTraceLong(err, self);
	            oldOnError(err);
	          };

	          return subscribe.call(self, observer);
	        };
	      } else {
	        this._subscribe = subscribe;
	      }
	    }

	    observableProto = Observable.prototype;

	    /**
	     *  Subscribes an observer to the observable sequence.
	     *  @param {Mixed} [observerOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
	     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
	     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
	     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribe = observableProto.forEach = function (observerOrOnNext, onError, onCompleted) {
	      return this._subscribe(typeof observerOrOnNext === 'object' ? observerOrOnNext : observerCreate(observerOrOnNext, onError, onCompleted));
	    };

	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onNext The function to invoke on each element in the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnNext = function (onNext, thisArg) {
	      return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function (x) {
	        onNext.call(thisArg, x);
	      } : onNext));
	    };

	    /**
	     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
	     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnError = function (onError, thisArg) {
	      return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function (e) {
	        onError.call(thisArg, e);
	      } : onError));
	    };

	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnCompleted = function (onCompleted, thisArg) {
	      return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function () {
	        onCompleted.call(thisArg);
	      } : onCompleted));
	    };

	    return Observable;
	  })();

	  var ObservableBase = Rx.ObservableBase = (function (__super__) {
	    inherits(ObservableBase, __super__);

	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber : isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }

	    function setDisposable(s, state) {
	      var ado = state[0],
	          self = state[1];
	      var sub = tryCatch(self.subscribeCore).call(self, ado);

	      if (sub === errorObj) {
	        if (!ado.fail(errorObj.e)) {
	          return thrower(errorObj.e);
	        }
	      }
	      ado.setDisposable(fixSubscriber(sub));
	    }

	    function subscribe(observer) {
	      var ado = new AutoDetachObserver(observer),
	          state = [ado, this];

	      if (currentThreadScheduler.scheduleRequired()) {
	        currentThreadScheduler.scheduleWithState(state, setDisposable);
	      } else {
	        setDisposable(null, state);
	      }
	      return ado;
	    }

	    function ObservableBase() {
	      __super__.call(this, subscribe);
	    }

	    ObservableBase.prototype.subscribeCore = notImplemented;

	    return ObservableBase;
	  })(Observable);

	  /**
	  *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
	  *
	  *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
	  *  that require to be run on a scheduler, use subscribeOn.
	  *
	  *  @param {Scheduler} scheduler Scheduler to notify observers on.
	  *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.
	  */
	  observableProto.observeOn = function (scheduler) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      return source.subscribe(new ObserveOnObserver(scheduler, observer));
	    }, source);
	  };

	  /**
	  *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
	  *  see the remarks section for more information on the distinction between subscribeOn and observeOn.
	   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
	  *  callbacks on a scheduler, use observeOn.
	   *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.
	  *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.
	  */
	  observableProto.subscribeOn = function (scheduler) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var m = new SingleAssignmentDisposable(),
	          d = new SerialDisposable();
	      d.setDisposable(m);
	      m.setDisposable(scheduler.schedule(function () {
	        d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(observer)));
	      }));
	      return d;
	    }, source);
	  };

	  /**
	   * Converts a Promise to an Observable sequence
	   * @param {Promise} An ES6 Compliant promise.
	   * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
	   */
	  var observableFromPromise = Observable.fromPromise = function (promise) {
	    return observableDefer(function () {
	      var subject = new Rx.AsyncSubject();

	      promise.then(function (value) {
	        subject.onNext(value);
	        subject.onCompleted();
	      }, subject.onError.bind(subject));

	      return subject;
	    });
	  };

	  /*
	   * Converts an existing observable sequence to an ES6 Compatible Promise
	   * @example
	   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
	   *
	   * // With config
	   * Rx.config.Promise = RSVP.Promise;
	   * var promise = Rx.Observable.return(42).toPromise();
	   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
	   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
	   */
	  observableProto.toPromise = function (promiseCtor) {
	    promiseCtor || (promiseCtor = Rx.config.Promise);
	    if (!promiseCtor) {
	      throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise');
	    }
	    var source = this;
	    return new promiseCtor(function (resolve, reject) {
	      // No cancellation can be done
	      var value,
	          hasValue = false;
	      source.subscribe(function (v) {
	        value = v;
	        hasValue = true;
	      }, reject, function () {
	        hasValue && resolve(value);
	      });
	    });
	  };

	  var ToArrayObservable = (function (__super__) {
	    inherits(ToArrayObservable, __super__);
	    function ToArrayObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }

	    ToArrayObservable.prototype.subscribeCore = function (observer) {
	      return this.source.subscribe(new ToArrayObserver(observer));
	    };

	    return ToArrayObservable;
	  })(ObservableBase);

	  function ToArrayObserver(observer) {
	    this.observer = observer;
	    this.a = [];
	    this.isStopped = false;
	  }
	  ToArrayObserver.prototype.onNext = function (x) {
	    if (!this.isStopped) {
	      this.a.push(x);
	    }
	  };
	  ToArrayObserver.prototype.onError = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	    }
	  };
	  ToArrayObserver.prototype.onCompleted = function () {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onNext(this.a);
	      this.observer.onCompleted();
	    }
	  };
	  ToArrayObserver.prototype.dispose = function () {
	    this.isStopped = true;
	  };
	  ToArrayObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }

	    return false;
	  };

	  /**
	  * Creates an array from an observable sequence.
	  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.
	  */
	  observableProto.toArray = function () {
	    return new ToArrayObservable(this);
	  };

	  /**
	   *  Creates an observable sequence from a specified subscribe method implementation.
	   * @example
	   *  var res = Rx.Observable.create(function (observer) { return function () { } );
	   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );
	   *  var res = Rx.Observable.create(function (observer) { } );
	   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
	   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
	   */
	  Observable.create = Observable.createWithDisposable = function (subscribe, parent) {
	    return new AnonymousObservable(subscribe, parent);
	  };

	  /**
	   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
	   *
	   * @example
	   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });
	   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
	   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
	   */
	  var observableDefer = Observable.defer = function (observableFactory) {
	    return new AnonymousObservable(function (observer) {
	      var result;
	      try {
	        result = observableFactory();
	      } catch (e) {
	        return observableThrow(e).subscribe(observer);
	      }
	      isPromise(result) && (result = observableFromPromise(result));
	      return result.subscribe(observer);
	    });
	  };

	  /**
	   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
	   *
	   * @example
	   *  var res = Rx.Observable.empty();
	   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);
	   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
	   * @returns {Observable} An observable sequence with no elements.
	   */
	  var observableEmpty = Observable.empty = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithState(null, function () {
	        observer.onCompleted();
	      });
	    });
	  };

	  var FromObservable = (function (__super__) {
	    inherits(FromObservable, __super__);
	    function FromObservable(iterable, mapper, scheduler) {
	      this.iterable = iterable;
	      this.mapper = mapper;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }

	    FromObservable.prototype.subscribeCore = function (observer) {
	      var sink = new FromSink(observer, this);
	      return sink.run();
	    };

	    return FromObservable;
	  })(ObservableBase);

	  var FromSink = (function () {
	    function FromSink(observer, parent) {
	      this.observer = observer;
	      this.parent = parent;
	    }

	    FromSink.prototype.run = function () {
	      var list = Object(this.parent.iterable),
	          it = getIterable(list),
	          observer = this.observer,
	          mapper = this.parent.mapper;

	      function loopRecursive(i, recurse) {
	        try {
	          var next = it.next();
	        } catch (e) {
	          return observer.onError(e);
	        }
	        if (next.done) {
	          return observer.onCompleted();
	        }

	        var result = next.value;

	        if (mapper) {
	          try {
	            result = mapper(result, i);
	          } catch (e) {
	            return observer.onError(e);
	          }
	        }

	        observer.onNext(result);
	        recurse(i + 1);
	      }

	      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	    };

	    return FromSink;
	  })();

	  var maxSafeInteger = Math.pow(2, 53) - 1;

	  function StringIterable(str) {
	    this._s = s;
	  }

	  StringIterable.prototype[$iterator$] = function () {
	    return new StringIterator(this._s);
	  };

	  function StringIterator(str) {
	    this._s = s;
	    this._l = s.length;
	    this._i = 0;
	  }

	  StringIterator.prototype[$iterator$] = function () {
	    return this;
	  };

	  StringIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._s.charAt(this._i++) } : doneEnumerator;
	  };

	  function ArrayIterable(a) {
	    this._a = a;
	  }

	  ArrayIterable.prototype[$iterator$] = function () {
	    return new ArrayIterator(this._a);
	  };

	  function ArrayIterator(a) {
	    this._a = a;
	    this._l = toLength(a);
	    this._i = 0;
	  }

	  ArrayIterator.prototype[$iterator$] = function () {
	    return this;
	  };

	  ArrayIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._a[this._i++] } : doneEnumerator;
	  };

	  function numberIsFinite(value) {
	    return typeof value === 'number' && root.isFinite(value);
	  }

	  function isNan(n) {
	    return n !== n;
	  }

	  function getIterable(o) {
	    var i = o[$iterator$],
	        it;
	    if (!i && typeof o === 'string') {
	      it = new StringIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i && o.length !== undefined) {
	      it = new ArrayIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i) {
	      throw new TypeError('Object is not iterable');
	    }
	    return o[$iterator$]();
	  }

	  function sign(value) {
	    var number = +value;
	    if (number === 0) {
	      return number;
	    }
	    if (isNaN(number)) {
	      return number;
	    }
	    return number < 0 ? -1 : 1;
	  }

	  function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) {
	      return 0;
	    }
	    if (len === 0 || !numberIsFinite(len)) {
	      return len;
	    }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) {
	      return 0;
	    }
	    if (len > maxSafeInteger) {
	      return maxSafeInteger;
	    }
	    return len;
	  }

	  /**
	  * This method creates a new Observable sequence from an array-like or iterable object.
	  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.
	  * @param {Function} [mapFn] Map function to call on every element of the array.
	  * @param {Any} [thisArg] The context to use calling the mapFn if provided.
	  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.
	  */
	  var observableFrom = Observable.from = function (iterable, mapFn, thisArg, scheduler) {
	    if (iterable == null) {
	      throw new Error('iterable cannot be null.');
	    }
	    if (mapFn && !isFunction(mapFn)) {
	      throw new Error('mapFn when provided must be a function');
	    }
	    if (mapFn) {
	      var mapper = bindCallback(mapFn, thisArg, 2);
	    }
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromObservable(iterable, mapper, scheduler);
	  };

	  var FromArrayObservable = (function (__super__) {
	    inherits(FromArrayObservable, __super__);
	    function FromArrayObservable(args, scheduler) {
	      this.args = args;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }

	    FromArrayObservable.prototype.subscribeCore = function (observer) {
	      var sink = new FromArraySink(observer, this);
	      return sink.run();
	    };

	    return FromArrayObservable;
	  })(ObservableBase);

	  function FromArraySink(observer, parent) {
	    this.observer = observer;
	    this.parent = parent;
	  }

	  FromArraySink.prototype.run = function () {
	    var observer = this.observer,
	        args = this.parent.args,
	        len = args.length;
	    function loopRecursive(i, recurse) {
	      if (i < len) {
	        observer.onNext(args[i]);
	        recurse(i + 1);
	      } else {
	        observer.onCompleted();
	      }
	    }

	    return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	  };

	  /**
	  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
	  * @deprecated use Observable.from or Observable.of
	  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
	  */
	  var observableFromArray = Observable.fromArray = function (array, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler);
	  };

	  /**
	   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generate = function (initialState, condition, iterate, resultSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new AnonymousObservable(function (o) {
	      var first = true;
	      return scheduler.scheduleRecursiveWithState(initialState, function (state, self) {
	        var hasResult, result;
	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          hasResult && (result = resultSelector(state));
	        } catch (e) {
	          return o.onError(e);
	        }
	        if (hasResult) {
	          o.onNext(result);
	          self(state);
	        } else {
	          o.onCompleted();
	        }
	      });
	    });
	  };

	  function observableOf(scheduler, array) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler);
	  }

	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.of = function () {
	    var len = arguments.length,
	        args = new Array(len);
	    for (var i = 0; i < len; i++) {
	      args[i] = arguments[i];
	    }
	    return new FromArrayObservable(args, currentThreadScheduler);
	  };

	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.ofWithScheduler = function (scheduler) {
	    var len = arguments.length,
	        args = new Array(len - 1);
	    for (var i = 1; i < len; i++) {
	      args[i - 1] = arguments[i];
	    }
	    return new FromArrayObservable(args, scheduler);
	  };

	  /**
	   * Creates an Observable sequence from changes to an array using Array.observe.
	   * @param {Array} array An array to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an array from Array.observe.
	   */
	  Observable.ofArrayChanges = function (array) {
	    if (!Array.isArray(array)) {
	      throw new TypeError('Array.observe only accepts arrays.');
	    }
	    if (typeof Array.observe !== 'function' && typeof Array.unobserve !== 'function') {
	      throw new TypeError('Array.observe is not supported on your platform');
	    }
	    return new AnonymousObservable(function (observer) {
	      function observerFn(changes) {
	        for (var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }

	      Array.observe(array, observerFn);

	      return function () {
	        Array.unobserve(array, observerFn);
	      };
	    });
	  };

	  /**
	   * Creates an Observable sequence from changes to an object using Object.observe.
	   * @param {Object} obj An object to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an object from Object.observe.
	   */
	  Observable.ofObjectChanges = function (obj) {
	    if (obj == null) {
	      throw new TypeError('object must not be null or undefined.');
	    }
	    if (typeof Object.observe !== 'function' && typeof Object.unobserve !== 'function') {
	      throw new TypeError('Array.observe is not supported on your platform');
	    }
	    return new AnonymousObservable(function (observer) {
	      function observerFn(changes) {
	        for (var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }

	      Object.observe(obj, observerFn);

	      return function () {
	        Object.unobserve(obj, observerFn);
	      };
	    });
	  };

	  /**
	   *  Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
	   * @returns {Observable} An observable sequence whose observers will never get called.
	   */
	  var observableNever = Observable.never = function () {
	    return new AnonymousObservable(function () {
	      return disposableEmpty;
	    });
	  };

	  /**
	   * Convert an object into an observable sequence of [key, value] pairs.
	   * @param {Object} obj The object to inspect.
	   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	   * @returns {Observable} An observable sequence of [key, value] pairs from the object.
	   */
	  Observable.pairs = function (obj, scheduler) {
	    scheduler || (scheduler = Rx.Scheduler.currentThread);
	    return new AnonymousObservable(function (observer) {
	      var keys = Object.keys(obj),
	          len = keys.length;
	      return scheduler.scheduleRecursiveWithState(0, function (idx, self) {
	        if (idx < len) {
	          var key = keys[idx];
	          observer.onNext([key, obj[key]]);
	          self(idx + 1);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };

	  var RangeObservable = (function (__super__) {
	    inherits(RangeObservable, __super__);
	    function RangeObservable(start, count, scheduler) {
	      this.start = start;
	      this.count = count;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }

	    RangeObservable.prototype.subscribeCore = function (observer) {
	      var sink = new RangeSink(observer, this);
	      return sink.run();
	    };

	    return RangeObservable;
	  })(ObservableBase);

	  var RangeSink = (function () {
	    function RangeSink(observer, parent) {
	      this.observer = observer;
	      this.parent = parent;
	    }

	    RangeSink.prototype.run = function () {
	      var start = this.parent.start,
	          count = this.parent.count,
	          observer = this.observer;
	      function loopRecursive(i, recurse) {
	        if (i < count) {
	          observer.onNext(start + i);
	          recurse(i + 1);
	        } else {
	          observer.onCompleted();
	        }
	      }

	      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	    };

	    return RangeSink;
	  })();

	  /**
	  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
	  * @param {Number} start The value of the first integer in the sequence.
	  * @param {Number} count The number of sequential integers to generate.
	  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
	  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
	  */
	  Observable.range = function (start, count, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new RangeObservable(start, count, scheduler);
	  };

	  /**
	   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.repeat(42);
	   *  var res = Rx.Observable.repeat(42, 4);
	   *  3 - res = Rx.Observable.repeat(42, 4, Rx.Scheduler.timeout);
	   *  4 - res = Rx.Observable.repeat(42, null, Rx.Scheduler.timeout);
	   * @param {Mixed} value Element to repeat.
	   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
	   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
	   */
	  Observable.repeat = function (value, repeatCount, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return observableReturn(value, scheduler).repeat(repeatCount == null ? -1 : repeatCount);
	  };

	  /**
	   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
	   *  There is an alias called 'just' or browsers <IE9.
	   * @param {Mixed} value Single element in the resulting observable sequence.
	   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence containing the single specified element.
	   */
	  var observableReturn = Observable['return'] = Observable.just = Observable.returnValue = function (value, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (o) {
	      return scheduler.scheduleWithState(value, function (_, v) {
	        o.onNext(v);
	        o.onCompleted();
	      });
	    });
	  };

	  /**
	   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
	   *  There is an alias to this method called 'throwError' for browsers <IE9.
	   * @param {Mixed} error An object used for the sequence's termination.
	   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
	   */
	  var observableThrow = Observable['throw'] = Observable.throwError = function (error, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (observer) {
	      return scheduler.schedule(function () {
	        observer.onError(error);
	      });
	    });
	  };

	  /** @deprecated use #some instead */
	  Observable.throwException = function () {
	    //deprecate('throwException', 'throwError');
	    return Observable.throwError.apply(null, arguments);
	  };

	  /**
	   * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
	   * @param {Function} resourceFactory Factory function to obtain a resource object.
	   * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.
	   * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.
	   */
	  Observable.using = function (resourceFactory, observableFactory) {
	    return new AnonymousObservable(function (observer) {
	      var disposable = disposableEmpty,
	          resource,
	          source;
	      try {
	        resource = resourceFactory();
	        resource && (disposable = resource);
	        source = observableFactory(resource);
	      } catch (exception) {
	        return new CompositeDisposable(observableThrow(exception).subscribe(observer), disposable);
	      }
	      return new CompositeDisposable(source.subscribe(observer), disposable);
	    });
	  };

	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   * @param {Observable} rightSource Second observable sequence or Promise.
	   * @returns {Observable} {Observable} An observable sequence that surfaces either of the given sequences, whichever reacted first.
	   */
	  observableProto.amb = function (rightSource) {
	    var leftSource = this;
	    return new AnonymousObservable(function (observer) {
	      var choice,
	          leftChoice = 'L',
	          rightChoice = 'R',
	          leftSubscription = new SingleAssignmentDisposable(),
	          rightSubscription = new SingleAssignmentDisposable();

	      isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));

	      function choiceL() {
	        if (!choice) {
	          choice = leftChoice;
	          rightSubscription.dispose();
	        }
	      }

	      function choiceR() {
	        if (!choice) {
	          choice = rightChoice;
	          leftSubscription.dispose();
	        }
	      }

	      leftSubscription.setDisposable(leftSource.subscribe(function (left) {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onNext(left);
	        }
	      }, function (err) {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onError(err);
	        }
	      }, function () {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onCompleted();
	        }
	      }));

	      rightSubscription.setDisposable(rightSource.subscribe(function (right) {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onNext(right);
	        }
	      }, function (err) {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onError(err);
	        }
	      }, function () {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onCompleted();
	        }
	      }));

	      return new CompositeDisposable(leftSubscription, rightSubscription);
	    });
	  };

	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   *
	   * @example
	   * var = Rx.Observable.amb(xs, ys, zs);
	   * @returns {Observable} An observable sequence that surfaces any of the given sequences, whichever reacted first.
	   */
	  Observable.amb = function () {
	    var acc = observableNever(),
	        items = [];
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      for (var i = 0, len = arguments.length; i < len; i++) {
	        items.push(arguments[i]);
	      }
	    }

	    function func(previous, current) {
	      return previous.amb(current);
	    }
	    for (var i = 0, len = items.length; i < len; i++) {
	      acc = func(acc, items[i]);
	    }
	    return acc;
	  };

	  function observableCatchHandler(source, handler) {
	    return new AnonymousObservable(function (o) {
	      var d1 = new SingleAssignmentDisposable(),
	          subscription = new SerialDisposable();
	      subscription.setDisposable(d1);
	      d1.setDisposable(source.subscribe(function (x) {
	        o.onNext(x);
	      }, function (e) {
	        try {
	          var result = handler(e);
	        } catch (ex) {
	          return o.onError(ex);
	        }
	        isPromise(result) && (result = observableFromPromise(result));

	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(result.subscribe(o));
	      }, function (x) {
	        o.onCompleted(x);
	      }));

	      return subscription;
	    }, source);
	  }

	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @example
	   * 1 - xs.catchException(ys)
	   * 2 - xs.catchException(function (ex) { return ys(ex); })
	   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
	   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
	   */
	  observableProto['catch'] = observableProto.catchError = observableProto.catchException = function (handlerOrSecond) {
	    return typeof handlerOrSecond === 'function' ? observableCatchHandler(this, handlerOrSecond) : observableCatch([this, handlerOrSecond]);
	  };

	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.
	   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
	   */
	  var observableCatch = Observable.catchError = Observable['catch'] = Observable.catchException = function () {
	    var items = [];
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      for (var i = 0, len = arguments.length; i < len; i++) {
	        items.push(arguments[i]);
	      }
	    }
	    return enumerableOf(items).catchError();
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   * This can be in the form of an argument list of observables or an array.
	   *
	   * @example
	   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.combineLatest = function () {
	    var len = arguments.length,
	        args = new Array(len);
	    for (var i = 0; i < len; i++) {
	      args[i] = arguments[i];
	    }
	    if (Array.isArray(args[0])) {
	      args[0].unshift(this);
	    } else {
	      args.unshift(this);
	    }
	    return combineLatest.apply(this, args);
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   *
	   * @example
	   * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  var combineLatest = Observable.combineLatest = function () {
	    var len = arguments.length,
	        args = new Array(len);
	    for (var i = 0; i < len; i++) {
	      args[i] = arguments[i];
	    }
	    var resultSelector = args.pop();
	    Array.isArray(args[0]) && (args = args[0]);

	    return new AnonymousObservable(function (o) {
	      var n = args.length,
	          falseFactory = function falseFactory() {
	        return false;
	      },
	          hasValue = arrayInitialize(n, falseFactory),
	          hasValueAll = false,
	          isDone = arrayInitialize(n, falseFactory),
	          values = new Array(n);

	      function next(i) {
	        hasValue[i] = true;
	        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
	          try {
	            var res = resultSelector.apply(null, values);
	          } catch (e) {
	            return o.onError(e);
	          }
	          o.onNext(res);
	        } else if (isDone.filter(function (x, j) {
	          return j !== i;
	        }).every(identity)) {
	          o.onCompleted();
	        }
	      }

	      function done(i) {
	        isDone[i] = true;
	        isDone.every(identity) && o.onCompleted();
	      }

	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var source = args[i],
	              sad = new SingleAssignmentDisposable();
	          isPromise(source) && (source = observableFromPromise(source));
	          sad.setDisposable(source.subscribe(function (x) {
	            values[i] = x;
	            next(i);
	          }, function (e) {
	            o.onError(e);
	          }, function () {
	            done(i);
	          }));
	          subscriptions[i] = sad;
	        })(idx);
	      }

	      return new CompositeDisposable(subscriptions);
	    }, this);
	  };

	  /**
	   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  observableProto.concat = function () {
	    for (var args = [], i = 0, len = arguments.length; i < len; i++) {
	      args.push(arguments[i]);
	    }
	    args.unshift(this);
	    return observableConcat.apply(null, args);
	  };

	  /**
	   * Concatenates all the observable sequences.
	   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  var observableConcat = Observable.concat = function () {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      args = new Array(arguments.length);
	      for (var i = 0, len = arguments.length; i < len; i++) {
	        args[i] = arguments[i];
	      }
	    }
	    return enumerableOf(args).concat();
	  };

	  /**
	   * Concatenates an observable sequence of observable sequences.
	   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.
	   */
	  observableProto.concatAll = observableProto.concatObservable = function () {
	    return this.merge(1);
	  };

	  var MergeObservable = (function (__super__) {
	    inherits(MergeObservable, __super__);

	    function MergeObservable(source, maxConcurrent) {
	      this.source = source;
	      this.maxConcurrent = maxConcurrent;
	      __super__.call(this);
	    }

	    MergeObservable.prototype.subscribeCore = function (observer) {
	      var g = new CompositeDisposable();
	      g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
	      return g;
	    };

	    return MergeObservable;
	  })(ObservableBase);

	  var MergeObserver = (function () {
	    function MergeObserver(o, max, g) {
	      this.o = o;
	      this.max = max;
	      this.g = g;
	      this.done = false;
	      this.q = [];
	      this.activeCount = 0;
	      this.isStopped = false;
	    }
	    MergeObserver.prototype.handleSubscribe = function (xs) {
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);
	      isPromise(xs) && (xs = observableFromPromise(xs));
	      sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
	    };
	    MergeObserver.prototype.onNext = function (innerSource) {
	      if (this.isStopped) {
	        return;
	      }
	      if (this.activeCount < this.max) {
	        this.activeCount++;
	        this.handleSubscribe(innerSource);
	      } else {
	        this.q.push(innerSource);
	      }
	    };
	    MergeObserver.prototype.onError = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	      }
	    };
	    MergeObserver.prototype.onCompleted = function () {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.done = true;
	        this.activeCount === 0 && this.o.onCompleted();
	      }
	    };
	    MergeObserver.prototype.dispose = function () {
	      this.isStopped = true;
	    };
	    MergeObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	        return true;
	      }

	      return false;
	    };

	    function InnerObserver(parent, sad) {
	      this.parent = parent;
	      this.sad = sad;
	      this.isStopped = false;
	    }
	    InnerObserver.prototype.onNext = function (x) {
	      if (!this.isStopped) {
	        this.parent.o.onNext(x);
	      }
	    };
	    InnerObserver.prototype.onError = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	      }
	    };
	    InnerObserver.prototype.onCompleted = function () {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        var parent = this.parent;
	        parent.g.remove(this.sad);
	        if (parent.q.length > 0) {
	          parent.handleSubscribe(parent.q.shift());
	        } else {
	          parent.activeCount--;
	          parent.done && parent.activeCount === 0 && parent.o.onCompleted();
	        }
	      }
	    };
	    InnerObserver.prototype.dispose = function () {
	      this.isStopped = true;
	    };
	    InnerObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	        return true;
	      }

	      return false;
	    };

	    return MergeObserver;
	  })();

	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
	  * Or merges two observable sequences into a single observable sequence.
	  *
	  * @example
	  * 1 - merged = sources.merge(1);
	  * 2 - merged = source.merge(otherSource);
	  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.merge = function (maxConcurrentOrOther) {
	    return typeof maxConcurrentOrOther !== 'number' ? observableMerge(this, maxConcurrentOrOther) : new MergeObservable(this, maxConcurrentOrOther);
	  };

	  /**
	   * Merges all the observable sequences into a single observable sequence.
	   * The scheduler is optional and if not specified, the immediate scheduler is used.
	   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.
	   */
	  var observableMerge = Observable.merge = function () {
	    var scheduler,
	        sources = [],
	        i,
	        len = arguments.length;
	    if (!arguments[0]) {
	      scheduler = immediateScheduler;
	      for (i = 1; i < len; i++) {
	        sources.push(arguments[i]);
	      }
	    } else if (isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      for (i = 1; i < len; i++) {
	        sources.push(arguments[i]);
	      }
	    } else {
	      scheduler = immediateScheduler;
	      for (i = 0; i < len; i++) {
	        sources.push(arguments[i]);
	      }
	    }
	    if (Array.isArray(sources[0])) {
	      sources = sources[0];
	    }
	    return observableOf(scheduler, sources).mergeAll();
	  };

	  var MergeAllObservable = (function (__super__) {
	    inherits(MergeAllObservable, __super__);

	    function MergeAllObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }

	    MergeAllObservable.prototype.subscribeCore = function (observer) {
	      var g = new CompositeDisposable(),
	          m = new SingleAssignmentDisposable();
	      g.add(m);
	      m.setDisposable(this.source.subscribe(new MergeAllObserver(observer, g)));
	      return g;
	    };

	    return MergeAllObservable;
	  })(ObservableBase);

	  var MergeAllObserver = (function () {

	    function MergeAllObserver(o, g) {
	      this.o = o;
	      this.g = g;
	      this.isStopped = false;
	      this.done = false;
	    }
	    MergeAllObserver.prototype.onNext = function (innerSource) {
	      if (this.isStopped) {
	        return;
	      }
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);

	      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	      sad.setDisposable(innerSource.subscribe(new InnerObserver(this, this.g, sad)));
	    };
	    MergeAllObserver.prototype.onError = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	      }
	    };
	    MergeAllObserver.prototype.onCompleted = function () {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.done = true;
	        this.g.length === 1 && this.o.onCompleted();
	      }
	    };
	    MergeAllObserver.prototype.dispose = function () {
	      this.isStopped = true;
	    };
	    MergeAllObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	        return true;
	      }

	      return false;
	    };

	    function InnerObserver(parent, g, sad) {
	      this.parent = parent;
	      this.g = g;
	      this.sad = sad;
	      this.isStopped = false;
	    }
	    InnerObserver.prototype.onNext = function (x) {
	      if (!this.isStopped) {
	        this.parent.o.onNext(x);
	      }
	    };
	    InnerObserver.prototype.onError = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	      }
	    };
	    InnerObserver.prototype.onCompleted = function () {
	      if (!this.isStopped) {
	        var parent = this.parent;
	        this.isStopped = true;
	        parent.g.remove(this.sad);
	        parent.done && parent.g.length === 1 && parent.o.onCompleted();
	      }
	    };
	    InnerObserver.prototype.dispose = function () {
	      this.isStopped = true;
	    };
	    InnerObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	        return true;
	      }

	      return false;
	    };

	    return MergeAllObserver;
	  })();

	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.mergeAll = observableProto.mergeObservable = function () {
	    return new MergeAllObservable(this);
	  };

	  var CompositeError = Rx.CompositeError = function (errors) {
	    this.name = 'NotImplementedError';
	    this.innerErrors = errors;
	    this.message = 'This contains multiple errors. Check the innerErrors';
	    Error.call(this);
	  };
	  CompositeError.prototype = Error.prototype;

	  /**
	  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to
	  * receive all successfully emitted items from all of the source Observables without being interrupted by
	  * an error notification from one of them.
	  *
	  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an
	  * error via the Observer's onError, mergeDelayError will refrain from propagating that
	  * error notification until all of the merged Observables have finished emitting items.
	  * @param {Array | Arguments} args Arguments or an array to merge.
	  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable
	  */
	  Observable.mergeDelayError = function () {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      var len = arguments.length;
	      args = new Array(len);
	      for (var i = 0; i < len; i++) {
	        args[i] = arguments[i];
	      }
	    }
	    var source = observableOf(null, args);

	    return new AnonymousObservable(function (o) {
	      var group = new CompositeDisposable(),
	          m = new SingleAssignmentDisposable(),
	          isStopped = false,
	          errors = [];

	      function setCompletion() {
	        if (errors.length === 0) {
	          o.onCompleted();
	        } else if (errors.length === 1) {
	          o.onError(errors[0]);
	        } else {
	          o.onError(new CompositeError(errors));
	        }
	      }

	      group.add(m);

	      m.setDisposable(source.subscribe(function (innerSource) {
	        var innerSubscription = new SingleAssignmentDisposable();
	        group.add(innerSubscription);

	        // Check for promises support
	        isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	        innerSubscription.setDisposable(innerSource.subscribe(function (x) {
	          o.onNext(x);
	        }, function (e) {
	          errors.push(e);
	          group.remove(innerSubscription);
	          isStopped && group.length === 1 && setCompletion();
	        }, function () {
	          group.remove(innerSubscription);
	          isStopped && group.length === 1 && setCompletion();
	        }));
	      }, function (e) {
	        errors.push(e);
	        isStopped = true;
	        group.length === 1 && setCompletion();
	      }, function () {
	        isStopped = true;
	        group.length === 1 && setCompletion();
	      }));
	      return group;
	    });
	  };

	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.
	   * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.
	   */
	  observableProto.onErrorResumeNext = function (second) {
	    if (!second) {
	      throw new Error('Second observable is required');
	    }
	    return onErrorResumeNext([this, second]);
	  };

	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   *
	   * @example
	   * 1 - res = Rx.Observable.onErrorResumeNext(xs, ys, zs);
	   * 1 - res = Rx.Observable.onErrorResumeNext([xs, ys, zs]);
	   * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.
	   */
	  var onErrorResumeNext = Observable.onErrorResumeNext = function () {
	    var sources = [];
	    if (Array.isArray(arguments[0])) {
	      sources = arguments[0];
	    } else {
	      for (var i = 0, len = arguments.length; i < len; i++) {
	        sources.push(arguments[i]);
	      }
	    }
	    return new AnonymousObservable(function (observer) {
	      var pos = 0,
	          subscription = new SerialDisposable(),
	          cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        var current, d;
	        if (pos < sources.length) {
	          current = sources[pos++];
	          isPromise(current) && (current = observableFromPromise(current));
	          d = new SingleAssignmentDisposable();
	          subscription.setDisposable(d);
	          d.setDisposable(current.subscribe(observer.onNext.bind(observer), self, self));
	        } else {
	          observer.onCompleted();
	        }
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    });
	  };

	  /**
	   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
	   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
	   */
	  observableProto.skipUntil = function (other) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var isOpen = false;
	      var disposables = new CompositeDisposable(source.subscribe(function (left) {
	        isOpen && o.onNext(left);
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        isOpen && o.onCompleted();
	      }));

	      isPromise(other) && (other = observableFromPromise(other));

	      var rightSubscription = new SingleAssignmentDisposable();
	      disposables.add(rightSubscription);
	      rightSubscription.setDisposable(other.subscribe(function () {
	        isOpen = true;
	        rightSubscription.dispose();
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        rightSubscription.dispose();
	      }));

	      return disposables;
	    }, source);
	  };

	  /**
	   * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */
	  observableProto['switch'] = observableProto.switchLatest = function () {
	    var sources = this;
	    return new AnonymousObservable(function (observer) {
	      var hasLatest = false,
	          innerSubscription = new SerialDisposable(),
	          isStopped = false,
	          latest = 0,
	          subscription = sources.subscribe(function (innerSource) {
	        var d = new SingleAssignmentDisposable(),
	            id = ++latest;
	        hasLatest = true;
	        innerSubscription.setDisposable(d);

	        // Check if Promise or Observable
	        isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	        d.setDisposable(innerSource.subscribe(function (x) {
	          latest === id && observer.onNext(x);
	        }, function (e) {
	          latest === id && observer.onError(e);
	        }, function () {
	          if (latest === id) {
	            hasLatest = false;
	            isStopped && observer.onCompleted();
	          }
	        }));
	      }, function (e) {
	        observer.onError(e);
	      }, function () {
	        isStopped = true;
	        !hasLatest && observer.onCompleted();
	      });
	      return new CompositeDisposable(subscription, innerSubscription);
	    }, sources);
	  };

	  /**
	   * Returns the values from the source observable sequence until the other observable sequence produces a value.
	   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
	   */
	  observableProto.takeUntil = function (other) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      isPromise(other) && (other = observableFromPromise(other));
	      return new CompositeDisposable(source.subscribe(o), other.subscribe(function () {
	        o.onCompleted();
	      }, function (e) {
	        o.onError(e);
	      }, noop));
	    }, source);
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.
	   *
	   * @example
	   * 1 - obs = obs1.withLatestFrom(obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = obs1.withLatestFrom([obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.withLatestFrom = function () {
	    var len = arguments.length,
	        args = new Array(len);
	    for (var i = 0; i < len; i++) {
	      args[i] = arguments[i];
	    }
	    var resultSelector = args.pop(),
	        source = this;

	    if (typeof source === 'undefined') {
	      throw new Error('Source observable not found for withLatestFrom().');
	    }
	    if (typeof resultSelector !== 'function') {
	      throw new Error('withLatestFrom() expects a resultSelector function.');
	    }
	    if (Array.isArray(args[0])) {
	      args = args[0];
	    }

	    return new AnonymousObservable(function (observer) {
	      var falseFactory = function falseFactory() {
	        return false;
	      },
	          n = args.length,
	          hasValue = arrayInitialize(n, falseFactory),
	          hasValueAll = false,
	          values = new Array(n);

	      var subscriptions = new Array(n + 1);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var other = args[i],
	              sad = new SingleAssignmentDisposable();
	          isPromise(other) && (other = observableFromPromise(other));
	          sad.setDisposable(other.subscribe(function (x) {
	            values[i] = x;
	            hasValue[i] = true;
	            hasValueAll = hasValue.every(identity);
	          }, observer.onError.bind(observer), function () {}));
	          subscriptions[i] = sad;
	        })(idx);
	      }

	      var sad = new SingleAssignmentDisposable();
	      sad.setDisposable(source.subscribe(function (x) {
	        var res;
	        var allValues = [x].concat(values);
	        if (!hasValueAll) return;
	        try {
	          res = resultSelector.apply(null, allValues);
	        } catch (ex) {
	          observer.onError(ex);
	          return;
	        }
	        observer.onNext(res);
	      }, observer.onError.bind(observer), function () {
	        observer.onCompleted();
	      }));
	      subscriptions[n] = sad;

	      return new CompositeDisposable(subscriptions);
	    }, this);
	  };

	  function zipArray(second, resultSelector) {
	    var first = this;
	    return new AnonymousObservable(function (observer) {
	      var index = 0,
	          len = second.length;
	      return first.subscribe(function (left) {
	        if (index < len) {
	          var right = second[index++],
	              result;
	          try {
	            result = resultSelector(left, right);
	          } catch (e) {
	            return observer.onError(e);
	          }
	          observer.onNext(result);
	        } else {
	          observer.onCompleted();
	        }
	      }, function (e) {
	        observer.onError(e);
	      }, function () {
	        observer.onCompleted();
	      });
	    }, first);
	  }

	  function falseFactory() {
	    return false;
	  }
	  function emptyArrayFactory() {
	    return [];
	  }

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
	   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
	   *
	   * @example
	   * 1 - res = obs1.zip(obs2, fn);
	   * 1 - res = x1.zip([1,2,3], fn);
	   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
	   */
	  observableProto.zip = function () {
	    if (Array.isArray(arguments[0])) {
	      return zipArray.apply(this, arguments);
	    }
	    var len = arguments.length,
	        args = new Array(len);
	    for (var i = 0; i < len; i++) {
	      args[i] = arguments[i];
	    }

	    var parent = this,
	        resultSelector = args.pop();
	    args.unshift(parent);
	    return new AnonymousObservable(function (observer) {
	      var n = args.length,
	          queues = arrayInitialize(n, emptyArrayFactory),
	          isDone = arrayInitialize(n, falseFactory);

	      function next(i) {
	        var res, queuedValues;
	        if (queues.every(function (x) {
	          return x.length > 0;
	        })) {
	          try {
	            queuedValues = queues.map(function (x) {
	              return x.shift();
	            });
	            res = resultSelector.apply(parent, queuedValues);
	          } catch (ex) {
	            observer.onError(ex);
	            return;
	          }
	          observer.onNext(res);
	        } else if (isDone.filter(function (x, j) {
	          return j !== i;
	        }).every(identity)) {
	          observer.onCompleted();
	        }
	      };

	      function done(i) {
	        isDone[i] = true;
	        if (isDone.every(function (x) {
	          return x;
	        })) {
	          observer.onCompleted();
	        }
	      }

	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var source = args[i],
	              sad = new SingleAssignmentDisposable();
	          isPromise(source) && (source = observableFromPromise(source));
	          sad.setDisposable(source.subscribe(function (x) {
	            queues[i].push(x);
	            next(i);
	          }, function (e) {
	            observer.onError(e);
	          }, function () {
	            done(i);
	          }));
	          subscriptions[i] = sad;
	        })(idx);
	      }

	      return new CompositeDisposable(subscriptions);
	    }, parent);
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
	   * @param arguments Observable sources.
	   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  Observable.zip = function () {
	    var len = arguments.length,
	        args = new Array(len);
	    for (var i = 0; i < len; i++) {
	      args[i] = arguments[i];
	    }
	    var first = args.shift();
	    return first.zip.apply(first, args);
	  };

	  /**
	   * Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
	   * @param arguments Observable sources.
	   * @returns {Observable} An observable sequence containing lists of elements at corresponding indexes.
	   */
	  Observable.zipArray = function () {
	    var sources;
	    if (Array.isArray(arguments[0])) {
	      sources = arguments[0];
	    } else {
	      var len = arguments.length;
	      sources = new Array(len);
	      for (var i = 0; i < len; i++) {
	        sources[i] = arguments[i];
	      }
	    }
	    return new AnonymousObservable(function (observer) {
	      var n = sources.length,
	          queues = arrayInitialize(n, function () {
	        return [];
	      }),
	          isDone = arrayInitialize(n, function () {
	        return false;
	      });

	      function next(i) {
	        if (queues.every(function (x) {
	          return x.length > 0;
	        })) {
	          var res = queues.map(function (x) {
	            return x.shift();
	          });
	          observer.onNext(res);
	        } else if (isDone.filter(function (x, j) {
	          return j !== i;
	        }).every(identity)) {
	          observer.onCompleted();
	          return;
	        }
	      };

	      function done(i) {
	        isDone[i] = true;
	        if (isDone.every(identity)) {
	          observer.onCompleted();
	          return;
	        }
	      }

	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          subscriptions[i] = new SingleAssignmentDisposable();
	          subscriptions[i].setDisposable(sources[i].subscribe(function (x) {
	            queues[i].push(x);
	            next(i);
	          }, function (e) {
	            observer.onError(e);
	          }, function () {
	            done(i);
	          }));
	        })(idx);
	      }

	      return new CompositeDisposable(subscriptions);
	    });
	  };

	  /**
	   *  Hides the identity of an observable sequence.
	   * @returns {Observable} An observable sequence that hides the identity of the source sequence.
	   */
	  observableProto.asObservable = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(o);
	    }, this);
	  };

	  /**
	   *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
	   *
	   * @example
	   *  var res = xs.bufferWithCount(10);
	   *  var res = xs.bufferWithCount(10, 1);
	   * @param {Number} count Length of each buffer.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.
	   * @returns {Observable} An observable sequence of buffers.
	   */
	  observableProto.bufferWithCount = function (count, skip) {
	    if (typeof skip !== 'number') {
	      skip = count;
	    }
	    return this.windowWithCount(count, skip).selectMany(function (x) {
	      return x.toArray();
	    }).where(function (x) {
	      return x.length > 0;
	    });
	  };

	  /**
	   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
	   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
	   */
	  observableProto.dematerialize = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(function (x) {
	        return x.accept(o);
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, this);
	  };

	  /**
	   *  Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
	   *
	   *  var obs = observable.distinctUntilChanged();
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; });
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; }, function (x, y) { return x === y; });
	   *
	   * @param {Function} [keySelector] A function to compute the comparison key for each element. If not provided, it projects the value.
	   * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
	   * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
	   */
	  observableProto.distinctUntilChanged = function (keySelector, comparer) {
	    var source = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var hasCurrentKey = false,
	          currentKey;
	      return source.subscribe(function (value) {
	        var key = value;
	        if (keySelector) {
	          try {
	            key = keySelector(value);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        if (hasCurrentKey) {
	          try {
	            var comparerEquals = comparer(currentKey, key);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        if (!hasCurrentKey || !comparerEquals) {
	          hasCurrentKey = true;
	          currentKey = key;
	          o.onNext(value);
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, this);
	  };

	  /**
	   *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.
	   * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto['do'] = observableProto.tap = observableProto.doAction = function (observerOrOnNext, onError, onCompleted) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var tapObserver = !observerOrOnNext || isFunction(observerOrOnNext) ? observerCreate(observerOrOnNext || noop, onError || noop, onCompleted || noop) : observerOrOnNext;

	      return source.subscribe(function (x) {
	        try {
	          tapObserver.onNext(x);
	        } catch (e) {
	          observer.onError(e);
	        }
	        observer.onNext(x);
	      }, function (err) {
	        try {
	          tapObserver.onError(err);
	        } catch (e) {
	          observer.onError(e);
	        }
	        observer.onError(err);
	      }, function () {
	        try {
	          tapObserver.onCompleted();
	        } catch (e) {
	          observer.onError(e);
	        }
	        observer.onCompleted();
	      });
	    }, this);
	  };

	  /**
	   *  Invokes an action for each element in the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onNext Action to invoke for each element in the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnNext = observableProto.tapOnNext = function (onNext, thisArg) {
	    return this.tap(typeof thisArg !== 'undefined' ? function (x) {
	      onNext.call(thisArg, x);
	    } : onNext);
	  };

	  /**
	   *  Invokes an action upon exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnError = observableProto.tapOnError = function (onError, thisArg) {
	    return this.tap(noop, typeof thisArg !== 'undefined' ? function (e) {
	      onError.call(thisArg, e);
	    } : onError);
	  };

	  /**
	   *  Invokes an action upon graceful termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnCompleted = observableProto.tapOnCompleted = function (onCompleted, thisArg) {
	    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function () {
	      onCompleted.call(thisArg);
	    } : onCompleted);
	  };

	  /**
	   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
	   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
	   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.
	   */
	  observableProto['finally'] = observableProto.ensure = function (action) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var subscription;
	      try {
	        subscription = source.subscribe(observer);
	      } catch (e) {
	        action();
	        throw e;
	      }
	      return disposableCreate(function () {
	        try {
	          subscription.dispose();
	        } catch (e) {
	          throw e;
	        } finally {
	          action();
	        }
	      });
	    }, this);
	  };

	  /**
	   * @deprecated use #finally or #ensure instead.
	   */
	  observableProto.finallyAction = function (action) {
	    //deprecate('finallyAction', 'finally or ensure');
	    return this.ensure(action);
	  };

	  /**
	   *  Ignores all elements in an observable sequence leaving only the termination messages.
	   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.
	   */
	  observableProto.ignoreElements = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(noop, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Materializes the implicit notifications of an observable sequence as explicit notification values.
	   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
	   */
	  observableProto.materialize = function () {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      return source.subscribe(function (value) {
	        observer.onNext(notificationCreateOnNext(value));
	      }, function (e) {
	        observer.onNext(notificationCreateOnError(e));
	        observer.onCompleted();
	      }, function () {
	        observer.onNext(notificationCreateOnCompleted());
	        observer.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
	   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
	   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.
	   */
	  observableProto.repeat = function (repeatCount) {
	    return enumerableRepeat(this, repeatCount).concat();
	  };

	  /**
	   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
	   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);
	   *
	   * @example
	   *  var res = retried = retry.repeat();
	   *  var res = retried = retry.repeat(2);
	   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */
	  observableProto.retry = function (retryCount) {
	    return enumerableRepeat(this, retryCount).catchError();
	  };

	  /**
	   *  Repeats the source observable sequence upon error each time the notifier emits or until it successfully terminates. 
	   *  if the notifier completes, the observable sequence completes.
	   *
	   * @example
	   *  var timer = Observable.timer(500);
	   *  var source = observable.retryWhen(timer);
	   * @param {Observable} [notifier] An observable that triggers the retries or completes the observable with onNext or onCompleted respectively.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */
	  observableProto.retryWhen = function (notifier) {
	    return enumerableRepeat(this).catchErrorWhen(notifier);
	  };
	  /**
	   *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
	   *  For aggregation behavior with no intermediate results, see Observable.aggregate.
	   * @example
	   *  var res = source.scan(function (acc, x) { return acc + x; });
	   *  var res = source.scan(0, function (acc, x) { return acc + x; });
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing the accumulated values.
	   */
	  observableProto.scan = function () {
	    var hasSeed = false,
	        seed,
	        accumulator,
	        source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[0];
	      accumulator = arguments[1];
	    } else {
	      accumulator = arguments[0];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe(function (x) {
	        !hasValue && (hasValue = true);
	        try {
	          if (hasAccumulation) {
	            accumulation = accumulator(accumulation, x);
	          } else {
	            accumulation = hasSeed ? accumulator(seed, x) : x;
	            hasAccumulation = true;
	          }
	        } catch (e) {
	          o.onError(e);
	          return;
	        }

	        o.onNext(accumulation);
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        !hasValue && hasSeed && o.onNext(seed);
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Bypasses a specified number of elements at the end of an observable sequence.
	   * @description
	   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
	   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
	   * @param count Number of elements to bypass at the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.
	   */
	  observableProto.skipLast = function (count) {
	    if (count < 0) {
	      throw new ArgumentOutOfRangeError();
	    }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && o.onNext(q.shift());
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
	   *  @example
	   *  var res = source.startWith(1, 2, 3);
	   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
	   * @param {Arguments} args The specified values to prepend to the observable sequence
	   * @returns {Observable} The source sequence prepended with the specified values.
	   */
	  observableProto.startWith = function () {
	    var values,
	        scheduler,
	        start = 0;
	    if (!!arguments.length && isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      start = 1;
	    } else {
	      scheduler = immediateScheduler;
	    }
	    for (var args = [], i = start, len = arguments.length; i < len; i++) {
	      args.push(arguments[i]);
	    }
	    return enumerableOf([observableFromArray(args, scheduler), this]).concat();
	  };

	  /**
	   *  Returns a specified number of contiguous elements from the end of an observable sequence.
	   * @description
	   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
	   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLast = function (count) {
	    if (count < 0) {
	      throw new ArgumentOutOfRangeError();
	    }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && q.shift();
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        while (q.length > 0) {
	          o.onNext(q.shift());
	        }
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.
	   *
	   * @description
	   *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the
	   *  source sequence, this buffer is produced on the result sequence.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLastBuffer = function (count) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && q.shift();
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onNext(q);
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
	   *
	   *  var res = xs.windowWithCount(10);
	   *  var res = xs.windowWithCount(10, 1);
	   * @param {Number} count Length of each window.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithCount = function (count, skip) {
	    var source = this;
	    +count || (count = 0);
	    Math.abs(count) === Infinity && (count = 0);
	    if (count <= 0) {
	      throw new ArgumentOutOfRangeError();
	    }
	    skip == null && (skip = count);
	    +skip || (skip = 0);
	    Math.abs(skip) === Infinity && (skip = 0);

	    if (skip <= 0) {
	      throw new ArgumentOutOfRangeError();
	    }
	    return new AnonymousObservable(function (observer) {
	      var m = new SingleAssignmentDisposable(),
	          refCountDisposable = new RefCountDisposable(m),
	          n = 0,
	          q = [];

	      function createWindow() {
	        var s = new Subject();
	        q.push(s);
	        observer.onNext(addRef(s, refCountDisposable));
	      }

	      createWindow();

	      m.setDisposable(source.subscribe(function (x) {
	        for (var i = 0, len = q.length; i < len; i++) {
	          q[i].onNext(x);
	        }
	        var c = n - count + 1;
	        c >= 0 && c % skip === 0 && q.shift().onCompleted();
	        ++n % skip === 0 && createWindow();
	      }, function (e) {
	        while (q.length > 0) {
	          q.shift().onError(e);
	        }
	        observer.onError(e);
	      }, function () {
	        while (q.length > 0) {
	          q.shift().onCompleted();
	        }
	        observer.onCompleted();
	      }));
	      return refCountDisposable;
	    }, source);
	  };

	  function concatMap(source, selector, thisArg) {
	    var selectorFunc = bindCallback(selector, thisArg, 3);
	    return source.map(function (x, i) {
	      var result = selectorFunc(x, i, source);
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
	      return result;
	    }).concatAll();
	  }

	  /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.concatMap(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the
	   * source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */
	  observableProto.selectConcat = observableProto.concatMap = function (selector, resultSelector, thisArg) {
	    if (isFunction(selector) && isFunction(resultSelector)) {
	      return this.concatMap(function (x, i) {
	        var selectorResult = selector(x, i);
	        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
	        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));

	        return selectorResult.map(function (y, i2) {
	          return resultSelector(x, y, i, i2);
	        });
	      });
	    }
	    return isFunction(selector) ? concatMap(this, selector, thisArg) : concatMap(this, function () {
	      return selector;
	    });
	  };

	  /**
	   * Projects each notification of an observable sequence to an observable sequence and concats the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.concatMapObserver = observableProto.selectConcatObserver = function (onNext, onError, onCompleted, thisArg) {
	    var source = this,
	        onNextFunc = bindCallback(onNext, thisArg, 2),
	        onErrorFunc = bindCallback(onError, thisArg, 1),
	        onCompletedFunc = bindCallback(onCompleted, thisArg, 0);
	    return new AnonymousObservable(function (observer) {
	      var index = 0;
	      return source.subscribe(function (x) {
	        var result;
	        try {
	          result = onNextFunc(x, index++);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        isPromise(result) && (result = observableFromPromise(result));
	        observer.onNext(result);
	      }, function (err) {
	        var result;
	        try {
	          result = onErrorFunc(err);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        isPromise(result) && (result = observableFromPromise(result));
	        observer.onNext(result);
	        observer.onCompleted();
	      }, function () {
	        var result;
	        try {
	          result = onCompletedFunc();
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        isPromise(result) && (result = observableFromPromise(result));
	        observer.onNext(result);
	        observer.onCompleted();
	      });
	    }, this).concatAll();
	  };

	  /**
	   *  Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
	   *
	   *  var res = obs = xs.defaultIfEmpty();
	   *  2 - obs = xs.defaultIfEmpty(false);
	   *
	   * @memberOf Observable#
	   * @param defaultValue The value to return if the sequence is empty. If not provided, this defaults to null.
	   * @returns {Observable} An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.
	   */
	  observableProto.defaultIfEmpty = function (defaultValue) {
	    var source = this;
	    defaultValue === undefined && (defaultValue = null);
	    return new AnonymousObservable(function (observer) {
	      var found = false;
	      return source.subscribe(function (x) {
	        found = true;
	        observer.onNext(x);
	      }, function (e) {
	        observer.onError(e);
	      }, function () {
	        !found && observer.onNext(defaultValue);
	        observer.onCompleted();
	      });
	    }, source);
	  };

	  // Swap out for Array.findIndex
	  function arrayIndexOfComparer(array, item, comparer) {
	    for (var i = 0, len = array.length; i < len; i++) {
	      if (comparer(array[i], item)) {
	        return i;
	      }
	    }
	    return -1;
	  }

	  function HashSet(comparer) {
	    this.comparer = comparer;
	    this.set = [];
	  }
	  HashSet.prototype.push = function (value) {
	    var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
	    retValue && this.set.push(value);
	    return retValue;
	  };

	  /**
	   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
	   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.
	   *
	   * @example
	   *  var res = obs = xs.distinct();
	   *  2 - obs = xs.distinct(function (x) { return x.id; });
	   *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });
	   * @param {Function} [keySelector]  A function to compute the comparison key for each element.
	   * @param {Function} [comparer]  Used to compare items in the collection.
	   * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.
	   */
	  observableProto.distinct = function (keySelector, comparer) {
	    var source = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var hashSet = new HashSet(comparer);
	      return source.subscribe(function (x) {
	        var key = x;

	        if (keySelector) {
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        hashSet.push(key) && o.onNext(x);
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, this);
	  };

	  /**
	   *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
	   *
	   * @example
	   *  var res = observable.groupBy(function (x) { return x.id; });
	   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });
	   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });
	   * @param {Function} keySelector A function to extract the key for each element.
	   * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.
	   * @param {Function} [comparer] Used to determine whether the objects are equal.
	   * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	   */
	  observableProto.groupBy = function (keySelector, elementSelector, comparer) {
	    return this.groupByUntil(keySelector, elementSelector, observableNever, comparer);
	  };

	  /**
	   *  Groups the elements of an observable sequence according to a specified key selector function.
	   *  A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
	   *  key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
	   *
	   * @example
	   *  var res = observable.groupByUntil(function (x) { return x.id; }, null,  function () { return Rx.Observable.never(); });
	   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); });
	   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); }, function (x) { return x.toString(); });
	   * @param {Function} keySelector A function to extract the key for each element.
	   * @param {Function} durationSelector A function to signal the expiration of a group.
	   * @param {Function} [comparer] Used to compare objects. When not specified, the default comparer is used.
	   * @returns {Observable}
	   *  A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	   *  If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
	   *
	   */
	  observableProto.groupByUntil = function (keySelector, elementSelector, durationSelector, comparer) {
	    var source = this;
	    elementSelector || (elementSelector = identity);
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (observer) {
	      function handleError(e) {
	        return function (item) {
	          item.onError(e);
	        };
	      }
	      var map = new Dictionary(0, comparer),
	          groupDisposable = new CompositeDisposable(),
	          refCountDisposable = new RefCountDisposable(groupDisposable);

	      groupDisposable.add(source.subscribe(function (x) {
	        var key;
	        try {
	          key = keySelector(x);
	        } catch (e) {
	          map.getValues().forEach(handleError(e));
	          observer.onError(e);
	          return;
	        }

	        var fireNewMapEntry = false,
	            writer = map.tryGetValue(key);
	        if (!writer) {
	          writer = new Subject();
	          map.set(key, writer);
	          fireNewMapEntry = true;
	        }

	        if (fireNewMapEntry) {
	          var group = new GroupedObservable(key, writer, refCountDisposable),
	              durationGroup = new GroupedObservable(key, writer);
	          try {
	            duration = durationSelector(durationGroup);
	          } catch (e) {
	            map.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }

	          observer.onNext(group);

	          var md = new SingleAssignmentDisposable();
	          groupDisposable.add(md);

	          var expire = function expire() {
	            map.remove(key) && writer.onCompleted();
	            groupDisposable.remove(md);
	          };

	          md.setDisposable(duration.take(1).subscribe(noop, function (exn) {
	            map.getValues().forEach(handleError(exn));
	            observer.onError(exn);
	          }, expire));
	        }

	        var element;
	        try {
	          element = elementSelector(x);
	        } catch (e) {
	          map.getValues().forEach(handleError(e));
	          observer.onError(e);
	          return;
	        }

	        writer.onNext(element);
	      }, function (ex) {
	        map.getValues().forEach(handleError(ex));
	        observer.onError(ex);
	      }, function () {
	        map.getValues().forEach(function (item) {
	          item.onCompleted();
	        });
	        observer.onCompleted();
	      }));

	      return refCountDisposable;
	    }, source);
	  };

	  var MapObservable = (function (__super__) {
	    inherits(MapObservable, __super__);

	    function MapObservable(source, selector, thisArg) {
	      this.source = source;
	      this.selector = bindCallback(selector, thisArg, 3);
	      __super__.call(this);
	    }

	    MapObservable.prototype.internalMap = function (selector, thisArg) {
	      var self = this;
	      return new MapObservable(this.source, function (x, i, o) {
	        return selector.call(this, self.selector(x, i, o), i, o);
	      }, thisArg);
	    };

	    MapObservable.prototype.subscribeCore = function (observer) {
	      return this.source.subscribe(new MapObserver(observer, this.selector, this));
	    };

	    return MapObservable;
	  })(ObservableBase);

	  function MapObserver(observer, selector, source) {
	    this.observer = observer;
	    this.selector = selector;
	    this.source = source;
	    this.i = 0;
	    this.isStopped = false;
	  }

	  MapObserver.prototype.onNext = function (x) {
	    if (this.isStopped) {
	      return;
	    }
	    var result = tryCatch(this.selector).call(this, x, this.i++, this.source);
	    if (result === errorObj) {
	      return this.observer.onError(result.e);
	    }
	    this.observer.onNext(result);
	  };
	  MapObserver.prototype.onError = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;this.observer.onError(e);
	    }
	  };
	  MapObserver.prototype.onCompleted = function () {
	    if (!this.isStopped) {
	      this.isStopped = true;this.observer.onCompleted();
	    }
	  };
	  MapObserver.prototype.dispose = function () {
	    this.isStopped = true;
	  };
	  MapObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }

	    return false;
	  };

	  /**
	  * Projects each element of an observable sequence into a new form by incorporating the element's index.
	  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.
	  */
	  observableProto.map = observableProto.select = function (selector, thisArg) {
	    var selectorFn = typeof selector === 'function' ? selector : function () {
	      return selector;
	    };
	    return this instanceof MapObservable ? this.internalMap(selectorFn, thisArg) : new MapObservable(this, selectorFn, thisArg);
	  };

	  /**
	   * Retrieves the value of a specified nested property from all elements in
	   * the Observable sequence.
	   * @param {Arguments} arguments The nested properties to pluck.
	   * @returns {Observable} Returns a new Observable sequence of property values.
	   */
	  observableProto.pluck = function () {
	    var args = arguments,
	        len = arguments.length;
	    if (len === 0) {
	      throw new Error('List of properties cannot be empty.');
	    }
	    return this.map(function (x) {
	      var currentProp = x;
	      for (var i = 0; i < len; i++) {
	        var p = currentProp[args[i]];
	        if (typeof p !== 'undefined') {
	          currentProp = p;
	        } else {
	          return undefined;
	        }
	      }
	      return currentProp;
	    });
	  };

	  function flatMap(source, selector, thisArg) {
	    var selectorFunc = bindCallback(selector, thisArg, 3);
	    return source.map(function (x, i) {
	      var result = selectorFunc(x, i, source);
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
	      return result;
	    }).mergeAll();
	  }

	  /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.selectMany(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */
	  observableProto.selectMany = observableProto.flatMap = function (selector, resultSelector, thisArg) {
	    if (isFunction(selector) && isFunction(resultSelector)) {
	      return this.flatMap(function (x, i) {
	        var selectorResult = selector(x, i);
	        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
	        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));

	        return selectorResult.map(function (y, i2) {
	          return resultSelector(x, y, i, i2);
	        });
	      }, thisArg);
	    }
	    return isFunction(selector) ? flatMap(this, selector, thisArg) : flatMap(this, function () {
	      return selector;
	    });
	  };

	  /**
	   * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.flatMapObserver = observableProto.selectManyObserver = function (onNext, onError, onCompleted, thisArg) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var index = 0;

	      return source.subscribe(function (x) {
	        var result;
	        try {
	          result = onNext.call(thisArg, x, index++);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        isPromise(result) && (result = observableFromPromise(result));
	        observer.onNext(result);
	      }, function (err) {
	        var result;
	        try {
	          result = onError.call(thisArg, err);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        isPromise(result) && (result = observableFromPromise(result));
	        observer.onNext(result);
	        observer.onCompleted();
	      }, function () {
	        var result;
	        try {
	          result = onCompleted.call(thisArg);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        isPromise(result) && (result = observableFromPromise(result));
	        observer.onNext(result);
	        observer.onCompleted();
	      });
	    }, source).mergeAll();
	  };

	  /**
	   *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then
	   *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences
	   *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */
	  observableProto.selectSwitch = observableProto.flatMapLatest = observableProto.switchMap = function (selector, thisArg) {
	    return this.select(selector, thisArg).switchLatest();
	  };

	  /**
	   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
	   * @param {Number} count The number of elements to skip before returning the remaining elements.
	   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.
	   */
	  observableProto.skip = function (count) {
	    if (count < 0) {
	      throw new ArgumentOutOfRangeError();
	    }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var remaining = count;
	      return source.subscribe(function (x) {
	        if (remaining <= 0) {
	          o.onNext(x);
	        } else {
	          remaining--;
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
	   *  The element's index is used in the logic of the predicate function.
	   *
	   *  var res = source.skipWhile(function (value) { return value < 10; });
	   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
	   */
	  observableProto.skipWhile = function (predicate, thisArg) {
	    var source = this,
	        callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0,
	          running = false;
	      return source.subscribe(function (x) {
	        if (!running) {
	          try {
	            running = !callback(x, i++, source);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        running && o.onNext(x);
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
	   *
	   *  var res = source.take(5);
	   *  var res = source.take(0, Rx.Scheduler.timeout);
	   * @param {Number} count The number of elements to return.
	   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
	   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.
	   */
	  observableProto.take = function (count, scheduler) {
	    if (count < 0) {
	      throw new ArgumentOutOfRangeError();
	    }
	    if (count === 0) {
	      return observableEmpty(scheduler);
	    }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var remaining = count;
	      return source.subscribe(function (x) {
	        if (remaining-- > 0) {
	          o.onNext(x);
	          remaining === 0 && o.onCompleted();
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Returns elements from an observable sequence as long as a specified condition is true.
	   *  The element's index is used in the logic of the predicate function.
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
	   */
	  observableProto.takeWhile = function (predicate, thisArg) {
	    var source = this,
	        callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0,
	          running = true;
	      return source.subscribe(function (x) {
	        if (running) {
	          try {
	            running = callback(x, i++, source);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	          if (running) {
	            o.onNext(x);
	          } else {
	            o.onCompleted();
	          }
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, source);
	  };

	  var FilterObservable = (function (__super__) {
	    inherits(FilterObservable, __super__);

	    function FilterObservable(source, predicate, thisArg) {
	      this.source = source;
	      this.predicate = bindCallback(predicate, thisArg, 3);
	      __super__.call(this);
	    }

	    FilterObservable.prototype.subscribeCore = function (observer) {
	      return this.source.subscribe(new FilterObserver(observer, this.predicate, this));
	    };

	    FilterObservable.prototype.internalFilter = function (predicate, thisArg) {
	      var self = this;
	      return new FilterObservable(this.source, function (x, i, o) {
	        return self.predicate(x, i, o) && predicate.call(this, x, i, o);
	      }, thisArg);
	    };

	    return FilterObservable;
	  })(ObservableBase);

	  function FilterObserver(observer, predicate, source) {
	    this.observer = observer;
	    this.predicate = predicate;
	    this.source = source;
	    this.i = 0;
	    this.isStopped = false;
	  }

	  FilterObserver.prototype.onNext = function (x) {
	    if (this.isStopped) {
	      return;
	    }
	    var shouldYield = tryCatch(this.predicate).call(this, x, this.i++, this.source);
	    if (shouldYield === errorObj) {
	      return this.observer.onError(shouldYield.e);
	    }
	    shouldYield && this.observer.onNext(x);
	  };
	  FilterObserver.prototype.onError = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;this.observer.onError(e);
	    }
	  };
	  FilterObserver.prototype.onCompleted = function () {
	    if (!this.isStopped) {
	      this.isStopped = true;this.observer.onCompleted();
	    }
	  };
	  FilterObserver.prototype.dispose = function () {
	    this.isStopped = true;
	  };
	  FilterObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }
	    return false;
	  };

	  /**
	  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
	  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.
	  */
	  observableProto.filter = observableProto.where = function (predicate, thisArg) {
	    return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) : new FilterObservable(this, predicate, thisArg);
	  };

	  function extremaBy(source, keySelector, comparer) {
	    return new AnonymousObservable(function (o) {
	      var hasValue = false,
	          lastKey = null,
	          list = [];
	      return source.subscribe(function (x) {
	        var comparison, key;
	        try {
	          key = keySelector(x);
	        } catch (ex) {
	          o.onError(ex);
	          return;
	        }
	        comparison = 0;
	        if (!hasValue) {
	          hasValue = true;
	          lastKey = key;
	        } else {
	          try {
	            comparison = comparer(key, lastKey);
	          } catch (ex1) {
	            o.onError(ex1);
	            return;
	          }
	        }
	        if (comparison > 0) {
	          lastKey = key;
	          list = [];
	        }
	        if (comparison >= 0) {
	          list.push(x);
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onNext(list);
	        o.onCompleted();
	      });
	    }, source);
	  }

	  function firstOnly(x) {
	    if (x.length === 0) {
	      throw new EmptyError();
	    }
	    return x[0];
	  }

	  /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @deprecated Use #reduce instead
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */
	  observableProto.aggregate = function () {
	    var hasSeed = false,
	        accumulator,
	        seed,
	        source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[0];
	      accumulator = arguments[1];
	    } else {
	      accumulator = arguments[0];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe(function (x) {
	        !hasValue && (hasValue = true);
	        try {
	          if (hasAccumulation) {
	            accumulation = accumulator(accumulation, x);
	          } else {
	            accumulation = hasSeed ? accumulator(seed, x) : x;
	            hasAccumulation = true;
	          }
	        } catch (e) {
	          return o.onError(e);
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        hasValue && o.onNext(accumulation);
	        !hasValue && hasSeed && o.onNext(seed);
	        !hasValue && !hasSeed && o.onError(new EmptyError());
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @param {Any} [seed] The initial accumulator value.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */
	  observableProto.reduce = function (accumulator) {
	    var hasSeed = false,
	        seed,
	        source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[1];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe(function (x) {
	        !hasValue && (hasValue = true);
	        try {
	          if (hasAccumulation) {
	            accumulation = accumulator(accumulation, x);
	          } else {
	            accumulation = hasSeed ? accumulator(seed, x) : x;
	            hasAccumulation = true;
	          }
	        } catch (e) {
	          return o.onError(e);
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        hasValue && o.onNext(accumulation);
	        !hasValue && hasSeed && o.onNext(seed);
	        !hasValue && !hasSeed && o.onError(new EmptyError());
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.
	   */
	  observableProto.some = function (predicate, thisArg) {
	    var source = this;
	    return predicate ? source.filter(predicate, thisArg).some() : new AnonymousObservable(function (observer) {
	      return source.subscribe(function () {
	        observer.onNext(true);
	        observer.onCompleted();
	      }, function (e) {
	        observer.onError(e);
	      }, function () {
	        observer.onNext(false);
	        observer.onCompleted();
	      });
	    }, source);
	  };

	  /** @deprecated use #some instead */
	  observableProto.any = function () {
	    //deprecate('any', 'some');
	    return this.some.apply(this, arguments);
	  };

	  /**
	   * Determines whether an observable sequence is empty.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence is empty.
	   */
	  observableProto.isEmpty = function () {
	    return this.any().map(not);
	  };

	  /**
	   * Determines whether all elements of an observable sequence satisfy a condition.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.
	   */
	  observableProto.every = function (predicate, thisArg) {
	    return this.filter(function (v) {
	      return !predicate(v);
	    }, thisArg).some().map(not);
	  };

	  /** @deprecated use #every instead */
	  observableProto.all = function () {
	    //deprecate('all', 'every');
	    return this.every.apply(this, arguments);
	  };

	  /**
	   * Determines whether an observable sequence includes a specified element with an optional equality comparer.
	   * @param searchElement The value to locate in the source sequence.
	   * @param {Number} [fromIndex] An equality comparer to compare elements.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence includes an element that has the specified value from the given index.
	   */
	  observableProto.includes = function (searchElement, fromIndex) {
	    var source = this;
	    function comparer(a, b) {
	      return a === 0 && b === 0 || (a === b || isNaN(a) && isNaN(b));
	    }
	    return new AnonymousObservable(function (o) {
	      var i = 0,
	          n = +fromIndex || 0;
	      Math.abs(n) === Infinity && (n = 0);
	      if (n < 0) {
	        o.onNext(false);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	      return source.subscribe(function (x) {
	        if (i++ >= n && comparer(x, searchElement)) {
	          o.onNext(true);
	          o.onCompleted();
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onNext(false);
	        o.onCompleted();
	      });
	    }, this);
	  };

	  /**
	   * @deprecated use #includes instead.
	   */
	  observableProto.contains = function (searchElement, fromIndex) {
	    //deprecate('contains', 'includes');
	    observableProto.includes(searchElement, fromIndex);
	  };
	  /**
	   * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.
	   * @example
	   * res = source.count();
	   * res = source.count(function (x) { return x > 3; });
	   * @param {Function} [predicate]A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.
	   */
	  observableProto.count = function (predicate, thisArg) {
	    return predicate ? this.filter(predicate, thisArg).count() : this.reduce(function (count) {
	      return count + 1;
	    }, 0);
	  };

	  /**
	   * Returns the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   * @param {Any} searchElement Element to locate in the array.
	   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
	   * @returns {Observable} And observable sequence containing the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   */
	  observableProto.indexOf = function (searchElement, fromIndex) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var i = 0,
	          n = +fromIndex || 0;
	      Math.abs(n) === Infinity && (n = 0);
	      if (n < 0) {
	        o.onNext(-1);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	      return source.subscribe(function (x) {
	        if (i >= n && x === searchElement) {
	          o.onNext(i);
	          o.onCompleted();
	        }
	        i++;
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onNext(-1);
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   * Computes the sum of a sequence of values that are obtained by invoking an optional transform function on each element of the input sequence, else if not specified computes the sum on each item in the sequence.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the sum of the values in the source sequence.
	   */
	  observableProto.sum = function (keySelector, thisArg) {
	    return keySelector && isFunction(keySelector) ? this.map(keySelector, thisArg).sum() : this.reduce(function (prev, curr) {
	      return prev + curr;
	    }, 0);
	  };

	  /**
	   * Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
	   * @example
	   * var res = source.minBy(function (x) { return x.value; });
	   * var res = source.minBy(function (x) { return x.value; }, function (x, y) { return x - y; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer] Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a minimum key value.
	   */
	  observableProto.minBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return extremaBy(this, keySelector, function (x, y) {
	      return comparer(x, y) * -1;
	    });
	  };

	  /**
	   * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.
	   * @example
	   * var res = source.min();
	   * var res = source.min(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.
	   */
	  observableProto.min = function (comparer) {
	    return this.minBy(identity, comparer).map(function (x) {
	      return firstOnly(x);
	    });
	  };

	  /**
	   * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.
	   * @example
	   * var res = source.maxBy(function (x) { return x.value; });
	   * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer]  Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.
	   */
	  observableProto.maxBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return extremaBy(this, keySelector, comparer);
	  };

	  /**
	   * Returns the maximum value in an observable sequence according to the specified comparer.
	   * @example
	   * var res = source.max();
	   * var res = source.max(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the maximum element in the source sequence.
	   */
	  observableProto.max = function (comparer) {
	    return this.maxBy(identity, comparer).map(function (x) {
	      return firstOnly(x);
	    });
	  };

	  /**
	   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the average of the sequence of values.
	   */
	  observableProto.average = function (keySelector, thisArg) {
	    return keySelector && isFunction(keySelector) ? this.map(keySelector, thisArg).average() : this.reduce(function (prev, cur) {
	      return {
	        sum: prev.sum + cur,
	        count: prev.count + 1
	      };
	    }, { sum: 0, count: 0 }).map(function (s) {
	      if (s.count === 0) {
	        throw new EmptyError();
	      }
	      return s.sum / s.count;
	    });
	  };

	  /**
	   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
	   *
	   * @example
	   * var res = res = source.sequenceEqual([1,2,3]);
	   * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });
	   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));
	   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });
	   * @param {Observable} second Second observable sequence or array to compare.
	   * @param {Function} [comparer] Comparer used to compare elements of both sequences.
	   * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.
	   */
	  observableProto.sequenceEqual = function (second, comparer) {
	    var first = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var donel = false,
	          doner = false,
	          ql = [],
	          qr = [];
	      var subscription1 = first.subscribe(function (x) {
	        var equal, v;
	        if (qr.length > 0) {
	          v = qr.shift();
	          try {
	            equal = comparer(v, x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (doner) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          ql.push(x);
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        donel = true;
	        if (ql.length === 0) {
	          if (qr.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (doner) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });

	      (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
	      isPromise(second) && (second = observableFromPromise(second));
	      var subscription2 = second.subscribe(function (x) {
	        var equal;
	        if (ql.length > 0) {
	          var v = ql.shift();
	          try {
	            equal = comparer(v, x);
	          } catch (exception) {
	            o.onError(exception);
	            return;
	          }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (donel) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          qr.push(x);
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        doner = true;
	        if (qr.length === 0) {
	          if (ql.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (donel) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });
	      return new CompositeDisposable(subscription1, subscription2);
	    }, first);
	  };

	  function elementAtOrDefault(source, index, hasDefault, defaultValue) {
	    if (index < 0) {
	      throw new ArgumentOutOfRangeError();
	    }
	    return new AnonymousObservable(function (o) {
	      var i = index;
	      return source.subscribe(function (x) {
	        if (i-- === 0) {
	          o.onNext(x);
	          o.onCompleted();
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        if (!hasDefault) {
	          o.onError(new ArgumentOutOfRangeError());
	        } else {
	          o.onNext(defaultValue);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }

	  /**
	   * Returns the element at a specified index in a sequence.
	   * @example
	   * var res = source.elementAt(5);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence.
	   */
	  observableProto.elementAt = function (index) {
	    return elementAtOrDefault(this, index, false);
	  };

	  /**
	   * Returns the element at a specified index in a sequence or a default value if the index is out of range.
	   * @example
	   * var res = source.elementAtOrDefault(5);
	   * var res = source.elementAtOrDefault(5, 0);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.
	   */
	  observableProto.elementAtOrDefault = function (index, defaultValue) {
	    return elementAtOrDefault(this, index, true, defaultValue);
	  };

	  function singleOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      var value = defaultValue,
	          seenValue = false;
	      return source.subscribe(function (x) {
	        if (seenValue) {
	          o.onError(new Error('Sequence contains more than one element'));
	        } else {
	          value = x;
	          seenValue = true;
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        if (!seenValue && !hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(value);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }

	  /**
	   * Returns the only element of an observable sequence that satisfies the condition in the optional predicate, and reports an exception if there is not exactly one element in the observable sequence.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.
	   */
	  observableProto.single = function (predicate, thisArg) {
	    return predicate && isFunction(predicate) ? this.where(predicate, thisArg).single() : singleOrDefaultAsync(this, false);
	  };

	  /**
	   * Returns the only element of an observable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the observable sequence.
	   * @example
	   * var res = res = source.singleOrDefault();
	   * var res = res = source.singleOrDefault(function (x) { return x === 42; });
	   * res = source.singleOrDefault(function (x) { return x === 42; }, 0);
	   * res = source.singleOrDefault(null, 0);
	   * @memberOf Observable#
	   * @param {Function} predicate A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.singleOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate && isFunction(predicate) ? this.filter(predicate, thisArg).singleOrDefault(null, defaultValue) : singleOrDefaultAsync(this, true, defaultValue);
	  };

	  function firstOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(function (x) {
	        o.onNext(x);
	        o.onCompleted();
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        if (!hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(defaultValue);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }

	  /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate if present else the first item in the sequence.
	   * @example
	   * var res = res = source.first();
	   * var res = res = source.first(function (x) { return x > 3; });
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate if provided, else the first item in the sequence.
	   */
	  observableProto.first = function (predicate, thisArg) {
	    return predicate ? this.where(predicate, thisArg).first() : firstOrDefaultAsync(this, false);
	  };

	  /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.firstOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate ? this.where(predicate).firstOrDefault(null, defaultValue) : firstOrDefaultAsync(this, true, defaultValue);
	  };

	  function lastOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      var value = defaultValue,
	          seenValue = false;
	      return source.subscribe(function (x) {
	        value = x;
	        seenValue = true;
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        if (!seenValue && !hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(value);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }

	  /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate if specified, else the last element.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.
	   */
	  observableProto.last = function (predicate, thisArg) {
	    return predicate ? this.where(predicate, thisArg).last() : lastOrDefaultAsync(this, false);
	  };

	  /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.lastOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate ? this.where(predicate, thisArg).lastOrDefault(null, defaultValue) : lastOrDefaultAsync(this, true, defaultValue);
	  };

	  function findValue(source, predicate, thisArg, yieldIndex) {
	    var callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0;
	      return source.subscribe(function (x) {
	        var shouldRun;
	        try {
	          shouldRun = callback(x, i, source);
	        } catch (e) {
	          o.onError(e);
	          return;
	        }
	        if (shouldRun) {
	          o.onNext(yieldIndex ? i : x);
	          o.onCompleted();
	        } else {
	          i++;
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onNext(yieldIndex ? -1 : undefined);
	        o.onCompleted();
	      });
	    }, source);
	  }

	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the first element that matches the conditions defined by the specified predicate, if found; otherwise, undefined.
	   */
	  observableProto.find = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, false);
	  };

	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns
	   * an Observable sequence with the zero-based index of the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.
	  */
	  observableProto.findIndex = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, true);
	  };

	  /**
	   * Converts the observable sequence to a Set if it exists.
	   * @returns {Observable} An observable sequence with a single value of a Set containing the values from the observable sequence.
	   */
	  observableProto.toSet = function () {
	    if (typeof root.Set === 'undefined') {
	      throw new TypeError();
	    }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var s = new root.Set();
	      return source.subscribe(function (x) {
	        s.add(x);
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onNext(s);
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	  * Converts the observable sequence to a Map if it exists.
	  * @param {Function} keySelector A function which produces the key for the Map.
	  * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.
	  * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.
	  */
	  observableProto.toMap = function (keySelector, elementSelector) {
	    if (typeof root.Map === 'undefined') {
	      throw new TypeError();
	    }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var m = new root.Map();
	      return source.subscribe(function (x) {
	        var key;
	        try {
	          key = keySelector(x);
	        } catch (e) {
	          o.onError(e);
	          return;
	        }

	        var element = x;
	        if (elementSelector) {
	          try {
	            element = elementSelector(x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }

	        m.set(key, element);
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onNext(m);
	        o.onCompleted();
	      });
	    }, source);
	  };

	  var fnString = 'function',
	      throwString = 'throw',
	      isObject = Rx.internals.isObject;

	  function toThunk(obj, ctx) {
	    if (Array.isArray(obj)) {
	      return objectToThunk.call(ctx, obj);
	    }
	    if (isGeneratorFunction(obj)) {
	      return observableSpawn(obj.call(ctx));
	    }
	    if (isGenerator(obj)) {
	      return observableSpawn(obj);
	    }
	    if (isObservable(obj)) {
	      return observableToThunk(obj);
	    }
	    if (isPromise(obj)) {
	      return promiseToThunk(obj);
	    }
	    if (typeof obj === fnString) {
	      return obj;
	    }
	    if (isObject(obj) || Array.isArray(obj)) {
	      return objectToThunk.call(ctx, obj);
	    }

	    return obj;
	  }

	  function objectToThunk(obj) {
	    var ctx = this;

	    return function (done) {
	      var keys = Object.keys(obj),
	          pending = keys.length,
	          results = new obj.constructor(),
	          finished;

	      if (!pending) {
	        timeoutScheduler.schedule(function () {
	          done(null, results);
	        });
	        return;
	      }

	      for (var i = 0, len = keys.length; i < len; i++) {
	        run(obj[keys[i]], keys[i]);
	      }

	      function run(fn, key) {
	        if (finished) {
	          return;
	        }
	        try {
	          fn = toThunk(fn, ctx);

	          if (typeof fn !== fnString) {
	            results[key] = fn;
	            return --pending || done(null, results);
	          }

	          fn.call(ctx, function (err, res) {
	            if (finished) {
	              return;
	            }

	            if (err) {
	              finished = true;
	              return done(err);
	            }

	            results[key] = res;
	            --pending || done(null, results);
	          });
	        } catch (e) {
	          finished = true;
	          done(e);
	        }
	      }
	    };
	  }

	  function observableToThunk(observable) {
	    return function (fn) {
	      var value,
	          hasValue = false;
	      observable.subscribe(function (v) {
	        value = v;
	        hasValue = true;
	      }, fn, function () {
	        hasValue && fn(null, value);
	      });
	    };
	  }

	  function promiseToThunk(promise) {
	    return function (fn) {
	      promise.then(function (res) {
	        fn(null, res);
	      }, fn);
	    };
	  }

	  function isObservable(obj) {
	    return obj && typeof obj.subscribe === fnString;
	  }

	  function isGeneratorFunction(obj) {
	    return obj && obj.constructor && obj.constructor.name === 'GeneratorFunction';
	  }

	  function isGenerator(obj) {
	    return obj && typeof obj.next === fnString && typeof obj[throwString] === fnString;
	  }

	  /*
	   * Spawns a generator function which allows for Promises, Observable sequences, Arrays, Objects, Generators and functions.
	   * @param {Function} The spawning function.
	   * @returns {Function} a function which has a done continuation.
	   */
	  var observableSpawn = Rx.spawn = function (fn) {
	    var isGenFun = isGeneratorFunction(fn);

	    return function (done) {
	      var ctx = this,
	          gen = fn;

	      if (isGenFun) {
	        for (var args = [], i = 0, len = arguments.length; i < len; i++) {
	          args.push(arguments[i]);
	        }
	        var len = args.length,
	            hasCallback = len && typeof args[len - 1] === fnString;

	        done = hasCallback ? args.pop() : handleError;
	        gen = fn.apply(this, args);
	      } else {
	        done = done || handleError;
	      }

	      next();

	      function exit(err, res) {
	        timeoutScheduler.schedule(done.bind(ctx, err, res));
	      }

	      function next(err, res) {
	        var ret;

	        // multiple args
	        if (arguments.length > 2) {
	          for (var res = [], i = 1, len = arguments.length; i < len; i++) {
	            res.push(arguments[i]);
	          }
	        }

	        if (err) {
	          try {
	            ret = gen[throwString](err);
	          } catch (e) {
	            return exit(e);
	          }
	        }

	        if (!err) {
	          try {
	            ret = gen.next(res);
	          } catch (e) {
	            return exit(e);
	          }
	        }

	        if (ret.done) {
	          return exit(null, ret.value);
	        }

	        ret.value = toThunk(ret.value, ctx);

	        if (typeof ret.value === fnString) {
	          var called = false;
	          try {
	            ret.value.call(ctx, function () {
	              if (called) {
	                return;
	              }

	              called = true;
	              next.apply(ctx, arguments);
	            });
	          } catch (e) {
	            timeoutScheduler.schedule(function () {
	              if (called) {
	                return;
	              }

	              called = true;
	              next.call(ctx, e);
	            });
	          }
	          return;
	        }

	        // Not supported
	        next(new TypeError('Rx.spawn only supports a function, Promise, Observable, Object or Array.'));
	      }
	    };
	  };

	  function handleError(err) {
	    if (!err) {
	      return;
	    }
	    timeoutScheduler.schedule(function () {
	      throw err;
	    });
	  }

	  /**
	   * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.
	   *
	   * @example
	   * var res = Rx.Observable.start(function () { console.log('hello'); });
	   * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);
	   * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);
	   *
	   * @param {Function} func Function to run asynchronously.
	   * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   *
	   * Remarks
	   * * The function is called immediately, not during the subscription of the resulting sequence.
	   * * Multiple subscriptions to the resulting sequence can observe the function's result.
	   */
	  Observable.start = function (func, context, scheduler) {
	    return observableToAsync(func, context, scheduler)();
	  };

	  /**
	   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
	   * @param {Function} function Function to convert to an asynchronous function.
	   * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Function} Asynchronous function.
	   */
	  var observableToAsync = Observable.toAsync = function (func, context, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return function () {
	      var args = arguments,
	          subject = new AsyncSubject();

	      scheduler.schedule(function () {
	        var result;
	        try {
	          result = func.apply(context, args);
	        } catch (e) {
	          subject.onError(e);
	          return;
	        }
	        subject.onNext(result);
	        subject.onCompleted();
	      });
	      return subject.asObservable();
	    };
	  };

	  /**
	   * Converts a callback function to an observable sequence.
	   *
	   * @param {Function} function Function with a callback as the last parameter to convert to an Observable sequence.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
	   * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
	   */
	  Observable.fromCallback = function (func, context, selector) {
	    return function () {
	      var len = arguments.length,
	          args = new Array(len);
	      for (var i = 0; i < len; i++) {
	        args[i] = arguments[i];
	      }

	      return new AnonymousObservable(function (observer) {
	        function handler() {
	          var len = arguments.length,
	              results = new Array(len);
	          for (var i = 0; i < len; i++) {
	            results[i] = arguments[i];
	          }

	          if (selector) {
	            try {
	              results = selector.apply(context, results);
	            } catch (e) {
	              return observer.onError(e);
	            }

	            observer.onNext(results);
	          } else {
	            if (results.length <= 1) {
	              observer.onNext.apply(observer, results);
	            } else {
	              observer.onNext(results);
	            }
	          }

	          observer.onCompleted();
	        }

	        args.push(handler);
	        func.apply(context, args);
	      }).publishLast().refCount();
	    };
	  };

	  /**
	   * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
	   * @param {Function} func The function to call
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
	   * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
	   */
	  Observable.fromNodeCallback = function (func, context, selector) {
	    return function () {
	      var len = arguments.length,
	          args = new Array(len);
	      for (var i = 0; i < len; i++) {
	        args[i] = arguments[i];
	      }

	      return new AnonymousObservable(function (observer) {
	        function handler(err) {
	          if (err) {
	            observer.onError(err);
	            return;
	          }

	          var len = arguments.length,
	              results = [];
	          for (var i = 1; i < len; i++) {
	            results[i - 1] = arguments[i];
	          }

	          if (selector) {
	            try {
	              results = selector.apply(context, results);
	            } catch (e) {
	              return observer.onError(e);
	            }
	            observer.onNext(results);
	          } else {
	            if (results.length <= 1) {
	              observer.onNext.apply(observer, results);
	            } else {
	              observer.onNext(results);
	            }
	          }

	          observer.onCompleted();
	        }

	        args.push(handler);
	        func.apply(context, args);
	      }).publishLast().refCount();
	    };
	  };

	  function createListener(element, name, handler) {
	    if (element.addEventListener) {
	      element.addEventListener(name, handler, false);
	      return disposableCreate(function () {
	        element.removeEventListener(name, handler, false);
	      });
	    }
	    throw new Error('No listener found');
	  }

	  function createEventListener(el, eventName, handler) {
	    var disposables = new CompositeDisposable();

	    // Asume NodeList
	    if (Object.prototype.toString.call(el) === '[object NodeList]') {
	      for (var i = 0, len = el.length; i < len; i++) {
	        disposables.add(createEventListener(el.item(i), eventName, handler));
	      }
	    } else if (el) {
	      disposables.add(createListener(el, eventName, handler));
	    }

	    return disposables;
	  }

	  /**
	   * Configuration option to determine whether to use native events only
	   */
	  Rx.config.useNativeEvents = false;

	  /**
	   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
	   *
	   * @example
	   *   var source = Rx.Observable.fromEvent(element, 'mouseup');
	   *
	   * @param {Object} element The DOMElement or NodeList to attach a listener.
	   * @param {String} eventName The event name to attach the observable sequence.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
	   */
	  Observable.fromEvent = function (element, eventName, selector) {
	    // Node.js specific
	    if (element.addListener) {
	      return fromEventPattern(function (h) {
	        element.addListener(eventName, h);
	      }, function (h) {
	        element.removeListener(eventName, h);
	      }, selector);
	    }

	    // Use only if non-native events are allowed
	    if (!Rx.config.useNativeEvents) {
	      // Handles jq, Angular.js, Zepto, Marionette, Ember.js
	      if (typeof element.on === 'function' && typeof element.off === 'function') {
	        return fromEventPattern(function (h) {
	          element.on(eventName, h);
	        }, function (h) {
	          element.off(eventName, h);
	        }, selector);
	      }
	    }
	    return new AnonymousObservable(function (observer) {
	      return createEventListener(element, eventName, function handler(e) {
	        var results = e;

	        if (selector) {
	          try {
	            results = selector(arguments);
	          } catch (err) {
	            return observer.onError(err);
	          }
	        }

	        observer.onNext(results);
	      });
	    }).publish().refCount();
	  };

	  /**
	   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
	   * @param {Function} addHandler The function to add a handler to the emitter.
	   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence which wraps an event from an event emitter
	   */
	  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) {
	    return new AnonymousObservable(function (observer) {
	      function innerHandler(e) {
	        var result = e;
	        if (selector) {
	          try {
	            result = selector(arguments);
	          } catch (err) {
	            return observer.onError(err);
	          }
	        }
	        observer.onNext(result);
	      }

	      var returnValue = addHandler(innerHandler);
	      return disposableCreate(function () {
	        if (removeHandler) {
	          removeHandler(innerHandler, returnValue);
	        }
	      });
	    }).publish().refCount();
	  };

	  /**
	   * Invokes the asynchronous function, surfacing the result through an observable sequence.
	   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   */
	  Observable.startAsync = function (functionAsync) {
	    var promise;
	    try {
	      promise = functionAsync();
	    } catch (e) {
	      return observableThrow(e);
	    }
	    return observableFromPromise(promise);
	  };

	  var PausableObservable = (function (__super__) {

	    inherits(PausableObservable, __super__);

	    function subscribe(observer) {
	      var conn = this.source.publish(),
	          subscription = conn.subscribe(observer),
	          connection = disposableEmpty;

	      var pausable = this.pauser.distinctUntilChanged().subscribe(function (b) {
	        if (b) {
	          connection = conn.connect();
	        } else {
	          connection.dispose();
	          connection = disposableEmpty;
	        }
	      });

	      return new CompositeDisposable(subscription, connection, pausable);
	    }

	    function PausableObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();

	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }

	      __super__.call(this, subscribe, source);
	    }

	    PausableObservable.prototype.pause = function () {
	      this.controller.onNext(false);
	    };

	    PausableObservable.prototype.resume = function () {
	      this.controller.onNext(true);
	    };

	    return PausableObservable;
	  })(Observable);

	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausable(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausable = function (pauser) {
	    return new PausableObservable(this, pauser);
	  };

	  function combineLatestSource(source, subject, resultSelector) {
	    return new AnonymousObservable(function (o) {
	      var hasValue = [false, false],
	          hasValueAll = false,
	          isDone = false,
	          values = new Array(2),
	          err;

	      function next(x, i) {
	        values[i] = x;
	        var res;
	        hasValue[i] = true;
	        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
	          if (err) {
	            o.onError(err);
	            return;
	          }

	          try {
	            res = resultSelector.apply(null, values);
	          } catch (ex) {
	            o.onError(ex);
	            return;
	          }
	          o.onNext(res);
	        }
	        if (isDone && values[1]) {
	          o.onCompleted();
	        }
	      }

	      return new CompositeDisposable(source.subscribe(function (x) {
	        next(x, 0);
	      }, function (e) {
	        if (values[1]) {
	          o.onError(e);
	        } else {
	          err = e;
	        }
	      }, function () {
	        isDone = true;
	        values[1] && o.onCompleted();
	      }), subject.subscribe(function (x) {
	        next(x, 1);
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        isDone = true;
	        next(true, 1);
	      }));
	    }, source);
	  }

	  var PausableBufferedObservable = (function (__super__) {

	    inherits(PausableBufferedObservable, __super__);

	    function subscribe(o) {
	      var q = [],
	          previousShouldFire;

	      var subscription = combineLatestSource(this.source, this.pauser.distinctUntilChanged().startWith(false), function (data, shouldFire) {
	        return { data: data, shouldFire: shouldFire };
	      }).subscribe(function (results) {
	        if (previousShouldFire !== undefined && results.shouldFire != previousShouldFire) {
	          previousShouldFire = results.shouldFire;
	          // change in shouldFire
	          if (results.shouldFire) {
	            while (q.length > 0) {
	              o.onNext(q.shift());
	            }
	          }
	        } else {
	          previousShouldFire = results.shouldFire;
	          // new data
	          if (results.shouldFire) {
	            o.onNext(results.data);
	          } else {
	            q.push(results.data);
	          }
	        }
	      }, function (err) {
	        // Empty buffer before sending error
	        while (q.length > 0) {
	          o.onNext(q.shift());
	        }
	        o.onError(err);
	      }, function () {
	        // Empty buffer before sending completion
	        while (q.length > 0) {
	          o.onNext(q.shift());
	        }
	        o.onCompleted();
	      });
	      return subscription;
	    }

	    function PausableBufferedObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();

	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }

	      __super__.call(this, subscribe, source);
	    }

	    PausableBufferedObservable.prototype.pause = function () {
	      this.controller.onNext(false);
	    };

	    PausableBufferedObservable.prototype.resume = function () {
	      this.controller.onNext(true);
	    };

	    return PausableBufferedObservable;
	  })(Observable);

	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
	   * and yields the values that were buffered while paused.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausableBuffered = function (subject) {
	    return new PausableBufferedObservable(this, subject);
	  };

	  var ControlledObservable = (function (__super__) {

	    inherits(ControlledObservable, __super__);

	    function subscribe(observer) {
	      return this.source.subscribe(observer);
	    }

	    function ControlledObservable(source, enableQueue) {
	      __super__.call(this, subscribe, source);
	      this.subject = new ControlledSubject(enableQueue);
	      this.source = source.multicast(this.subject).refCount();
	    }

	    ControlledObservable.prototype.request = function (numberOfItems) {
	      if (numberOfItems == null) {
	        numberOfItems = -1;
	      }
	      return this.subject.request(numberOfItems);
	    };

	    return ControlledObservable;
	  })(Observable);

	  var ControlledSubject = (function (__super__) {

	    function subscribe(observer) {
	      return this.subject.subscribe(observer);
	    }

	    inherits(ControlledSubject, __super__);

	    function ControlledSubject(enableQueue) {
	      enableQueue == null && (enableQueue = true);

	      __super__.call(this, subscribe);
	      this.subject = new Subject();
	      this.enableQueue = enableQueue;
	      this.queue = enableQueue ? [] : null;
	      this.requestedCount = 0;
	      this.requestedDisposable = disposableEmpty;
	      this.error = null;
	      this.hasFailed = false;
	      this.hasCompleted = false;
	    }

	    addProperties(ControlledSubject.prototype, Observer, {
	      onCompleted: function onCompleted() {
	        this.hasCompleted = true;
	        if (!this.enableQueue || this.queue.length === 0) this.subject.onCompleted();else this.queue.push(Rx.Notification.createOnCompleted());
	      },
	      onError: function onError(error) {
	        this.hasFailed = true;
	        this.error = error;
	        if (!this.enableQueue || this.queue.length === 0) this.subject.onError(error);else this.queue.push(Rx.Notification.createOnError(error));
	      },
	      onNext: function onNext(value) {
	        var hasRequested = false;

	        if (this.requestedCount === 0) {
	          this.enableQueue && this.queue.push(Rx.Notification.createOnNext(value));
	        } else {
	          this.requestedCount !== -1 && this.requestedCount-- === 0 && this.disposeCurrentRequest();
	          hasRequested = true;
	        }
	        hasRequested && this.subject.onNext(value);
	      },
	      _processRequest: function _processRequest(numberOfItems) {
	        if (this.enableQueue) {
	          while (this.queue.length >= numberOfItems && numberOfItems > 0 || this.queue.length > 0 && this.queue[0].kind !== 'N') {
	            var first = this.queue.shift();
	            first.accept(this.subject);
	            if (first.kind === 'N') numberOfItems--;else {
	              this.disposeCurrentRequest();this.queue = [];
	            }
	          }

	          return { numberOfItems: numberOfItems, returnValue: this.queue.length !== 0 };
	        }

	        //TODO I don't think this is ever necessary, since termination of a sequence without a queue occurs in the onCompletion or onError function
	        //if (this.hasFailed) {
	        //  this.subject.onError(this.error);
	        //} else if (this.hasCompleted) {
	        //  this.subject.onCompleted();
	        //}

	        return { numberOfItems: numberOfItems, returnValue: false };
	      },
	      request: function request(number) {
	        this.disposeCurrentRequest();
	        var self = this,
	            r = this._processRequest(number);

	        var number = r.numberOfItems;
	        if (!r.returnValue) {
	          this.requestedCount = number;
	          this.requestedDisposable = disposableCreate(function () {
	            self.requestedCount = 0;
	          });

	          return this.requestedDisposable;
	        } else {
	          return disposableEmpty;
	        }
	      },
	      disposeCurrentRequest: function disposeCurrentRequest() {
	        this.requestedDisposable.dispose();
	        this.requestedDisposable = disposableEmpty;
	      }
	    });

	    return ControlledSubject;
	  })(Observable);

	  /**
	   * Attaches a controller to the observable sequence with the ability to queue.
	   * @example
	   * var source = Rx.Observable.interval(100).controlled();
	   * source.request(3); // Reads 3 values
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.controlled = function (enableQueue) {
	    if (enableQueue == null) {
	      enableQueue = true;
	    }
	    return new ControlledObservable(this, enableQueue);
	  };

	  var StopAndWaitObservable = (function (__super__) {

	    function subscribe(observer) {
	      this.subscription = this.source.subscribe(new StopAndWaitObserver(observer, this, this.subscription));

	      var self = this;
	      timeoutScheduler.schedule(function () {
	        self.source.request(1);
	      });

	      return this.subscription;
	    }

	    inherits(StopAndWaitObservable, __super__);

	    function StopAndWaitObservable(source) {
	      __super__.call(this, subscribe, source);
	      this.source = source;
	    }

	    var StopAndWaitObserver = (function (__sub__) {

	      inherits(StopAndWaitObserver, __sub__);

	      function StopAndWaitObserver(observer, observable, cancel) {
	        __sub__.call(this);
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	      }

	      var stopAndWaitObserverProto = StopAndWaitObserver.prototype;

	      stopAndWaitObserverProto.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };

	      stopAndWaitObserverProto.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      };

	      stopAndWaitObserverProto.next = function (value) {
	        this.observer.onNext(value);

	        var self = this;
	        timeoutScheduler.schedule(function () {
	          self.observable.source.request(1);
	        });
	      };

	      stopAndWaitObserverProto.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };

	      return StopAndWaitObserver;
	    })(AbstractObserver);

	    return StopAndWaitObservable;
	  })(Observable);

	  /**
	   * Attaches a stop and wait observable to the current observable.
	   * @returns {Observable} A stop and wait observable.
	   */
	  ControlledObservable.prototype.stopAndWait = function () {
	    return new StopAndWaitObservable(this);
	  };

	  var WindowedObservable = (function (__super__) {

	    function subscribe(observer) {
	      this.subscription = this.source.subscribe(new WindowedObserver(observer, this, this.subscription));

	      var self = this;
	      timeoutScheduler.schedule(function () {
	        self.source.request(self.windowSize);
	      });

	      return this.subscription;
	    }

	    inherits(WindowedObservable, __super__);

	    function WindowedObservable(source, windowSize) {
	      __super__.call(this, subscribe, source);
	      this.source = source;
	      this.windowSize = windowSize;
	    }

	    var WindowedObserver = (function (__sub__) {

	      inherits(WindowedObserver, __sub__);

	      function WindowedObserver(observer, observable, cancel) {
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	        this.received = 0;
	      }

	      var windowedObserverPrototype = WindowedObserver.prototype;

	      windowedObserverPrototype.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };

	      windowedObserverPrototype.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      };

	      windowedObserverPrototype.next = function (value) {
	        this.observer.onNext(value);

	        this.received = ++this.received % this.observable.windowSize;
	        if (this.received === 0) {
	          var self = this;
	          timeoutScheduler.schedule(function () {
	            self.observable.source.request(self.observable.windowSize);
	          });
	        }
	      };

	      windowedObserverPrototype.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };

	      return WindowedObserver;
	    })(AbstractObserver);

	    return WindowedObservable;
	  })(Observable);

	  /**
	   * Creates a sliding windowed observable based upon the window size.
	   * @param {Number} windowSize The number of items in the window
	   * @returns {Observable} A windowed observable based upon the window size.
	   */
	  ControlledObservable.prototype.windowed = function (windowSize) {
	    return new WindowedObservable(this, windowSize);
	  };

	  /**
	   * Pipes the existing Observable sequence into a Node.js Stream.
	   * @param {Stream} dest The destination Node.js stream.
	   * @returns {Stream} The destination stream.
	   */
	  observableProto.pipe = function (dest) {
	    var source = this.pausableBuffered();

	    function onDrain() {
	      source.resume();
	    }

	    dest.addListener('drain', onDrain);

	    source.subscribe(function (x) {
	      !dest.write(String(x)) && source.pause();
	    }, function (err) {
	      dest.emit('error', err);
	    }, function () {
	      // Hack check because STDIO is not closable
	      !dest._isStdio && dest.end();
	      dest.removeListener('drain', onDrain);
	    });

	    source.resume();

	    return dest;
	  };

	  /**
	   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
	   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
	   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
	   *
	   * @example
	   * 1 - res = source.multicast(observable);
	   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
	   *
	   * @param {Function|Subject} subjectOrSubjectSelector
	   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
	   * Or:
	   * Subject to push source elements into.
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.multicast = function (subjectOrSubjectSelector, selector) {
	    var source = this;
	    return typeof subjectOrSubjectSelector === 'function' ? new AnonymousObservable(function (observer) {
	      var connectable = source.multicast(subjectOrSubjectSelector());
	      return new CompositeDisposable(selector(connectable).subscribe(observer), connectable.connect());
	    }, source) : new ConnectableObservable(source, subjectOrSubjectSelector);
	  };

	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of Multicast using a regular Subject.
	   *
	   * @example
	   * var resres = source.publish();
	   * var res = source.publish(function (x) { return x; });
	   *
	   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publish = function (selector) {
	    return selector && isFunction(selector) ? this.multicast(function () {
	      return new Subject();
	    }, selector) : this.multicast(new Subject());
	  };

	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.share = function () {
	    return this.publish().refCount();
	  };

	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
	   * This operator is a specialization of Multicast using a AsyncSubject.
	   *
	   * @example
	   * var res = source.publishLast();
	   * var res = source.publishLast(function (x) { return x; });
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishLast = function (selector) {
	    return selector && isFunction(selector) ? this.multicast(function () {
	      return new AsyncSubject();
	    }, selector) : this.multicast(new AsyncSubject());
	  };

	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
	   * This operator is a specialization of Multicast using a BehaviorSubject.
	   *
	   * @example
	   * var res = source.publishValue(42);
	   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishValue = function (initialValueOrSelector, initialValue) {
	    return arguments.length === 2 ? this.multicast(function () {
	      return new BehaviorSubject(initialValue);
	    }, initialValueOrSelector) : this.multicast(new BehaviorSubject(initialValueOrSelector));
	  };

	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
	   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareValue = function (initialValue) {
	    return this.publishValue(initialValue).refCount();
	  };

	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of Multicast using a ReplaySubject.
	   *
	   * @example
	   * var res = source.replay(null, 3);
	   * var res = source.replay(null, 3, 500);
	   * var res = source.replay(null, 3, 500, scheduler);
	   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param windowSize [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.replay = function (selector, bufferSize, windowSize, scheduler) {
	    return selector && isFunction(selector) ? this.multicast(function () {
	      return new ReplaySubject(bufferSize, windowSize, scheduler);
	    }, selector) : this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
	  };

	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   *
	   * @example
	   * var res = source.shareReplay(3);
	   * var res = source.shareReplay(3, 500);
	   * var res = source.shareReplay(3, 500, scheduler);
	   *
	    * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param window [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareReplay = function (bufferSize, windowSize, scheduler) {
	    return this.replay(null, bufferSize, windowSize, scheduler).refCount();
	  };

	  var InnerSubscription = function InnerSubscription(subject, observer) {
	    this.subject = subject;
	    this.observer = observer;
	  };

	  InnerSubscription.prototype.dispose = function () {
	    if (!this.subject.isDisposed && this.observer !== null) {
	      var idx = this.subject.observers.indexOf(this.observer);
	      this.subject.observers.splice(idx, 1);
	      this.observer = null;
	    }
	  };

	  /**
	   *  Represents a value that changes over time.
	   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
	   */
	  var BehaviorSubject = Rx.BehaviorSubject = (function (__super__) {
	    function subscribe(observer) {
	      checkDisposed(this);
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        observer.onNext(this.value);
	        return new InnerSubscription(this, observer);
	      }
	      if (this.hasError) {
	        observer.onError(this.error);
	      } else {
	        observer.onCompleted();
	      }
	      return disposableEmpty;
	    }

	    inherits(BehaviorSubject, __super__);

	    /**
	     *  Initializes a new instance of the BehaviorSubject class which creates a subject that caches its last value and starts with the specified value.
	     *  @param {Mixed} value Initial value sent to observers when no other value has been received by the subject yet.
	     */
	    function BehaviorSubject(value) {
	      __super__.call(this, subscribe);
	      this.value = value, this.observers = [], this.isDisposed = false, this.isStopped = false, this.hasError = false;
	    }

	    addProperties(BehaviorSubject.prototype, Observer, {
	      /**
	       * Gets the current value or throws an exception.
	       * Value is frozen after onCompleted is called.
	       * After onError is called always throws the specified exception.
	       * An exception is always thrown after dispose is called.
	       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.
	       */
	      getValue: function getValue() {
	        checkDisposed(this);
	        if (this.hasError) {
	          throw this.error;
	        }
	        return this.value;
	      },
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function hasObservers() {
	        return this.observers.length > 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function onCompleted() {
	        checkDisposed(this);
	        if (this.isStopped) {
	          return;
	        }
	        this.isStopped = true;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onCompleted();
	        }

	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function onError(error) {
	        checkDisposed(this);
	        if (this.isStopped) {
	          return;
	        }
	        this.isStopped = true;
	        this.hasError = true;
	        this.error = error;

	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onError(error);
	        }

	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function onNext(value) {
	        checkDisposed(this);
	        if (this.isStopped) {
	          return;
	        }
	        this.value = value;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onNext(value);
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function dispose() {
	        this.isDisposed = true;
	        this.observers = null;
	        this.value = null;
	        this.exception = null;
	      }
	    });

	    return BehaviorSubject;
	  })(Observable);

	  /**
	   * Represents an object that is both an observable sequence as well as an observer.
	   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
	   */
	  var ReplaySubject = Rx.ReplaySubject = (function (__super__) {

	    var maxSafeInteger = Math.pow(2, 53) - 1;

	    function createRemovableDisposable(subject, observer) {
	      return disposableCreate(function () {
	        observer.dispose();
	        !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
	      });
	    }

	    function subscribe(observer) {
	      var so = new ScheduledObserver(this.scheduler, observer),
	          subscription = createRemovableDisposable(this, so);
	      checkDisposed(this);
	      this._trim(this.scheduler.now());
	      this.observers.push(so);

	      for (var i = 0, len = this.q.length; i < len; i++) {
	        so.onNext(this.q[i].value);
	      }

	      if (this.hasError) {
	        so.onError(this.error);
	      } else if (this.isStopped) {
	        so.onCompleted();
	      }

	      so.ensureActive();
	      return subscription;
	    }

	    inherits(ReplaySubject, __super__);

	    /**
	     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
	     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
	     *  @param {Number} [windowSize] Maximum time length of the replay buffer.
	     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
	     */
	    function ReplaySubject(bufferSize, windowSize, scheduler) {
	      this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
	      this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
	      this.scheduler = scheduler || currentThreadScheduler;
	      this.q = [];
	      this.observers = [];
	      this.isStopped = false;
	      this.isDisposed = false;
	      this.hasError = false;
	      this.error = null;
	      __super__.call(this, subscribe);
	    }

	    addProperties(ReplaySubject.prototype, Observer.prototype, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function hasObservers() {
	        return this.observers.length > 0;
	      },
	      _trim: function _trim(now) {
	        while (this.q.length > this.bufferSize) {
	          this.q.shift();
	        }
	        while (this.q.length > 0 && now - this.q[0].interval > this.windowSize) {
	          this.q.shift();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function onNext(value) {
	        checkDisposed(this);
	        if (this.isStopped) {
	          return;
	        }
	        var now = this.scheduler.now();
	        this.q.push({ interval: now, value: value });
	        this._trim(now);

	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onNext(value);
	          observer.ensureActive();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function onError(error) {
	        checkDisposed(this);
	        if (this.isStopped) {
	          return;
	        }
	        this.isStopped = true;
	        this.error = error;
	        this.hasError = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onError(error);
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function onCompleted() {
	        checkDisposed(this);
	        if (this.isStopped) {
	          return;
	        }
	        this.isStopped = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onCompleted();
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function dispose() {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });

	    return ReplaySubject;
	  })(Observable);

	  var ConnectableObservable = Rx.ConnectableObservable = (function (__super__) {
	    inherits(ConnectableObservable, __super__);

	    function ConnectableObservable(source, subject) {
	      var hasSubscription = false,
	          subscription,
	          sourceObservable = source.asObservable();

	      this.connect = function () {
	        if (!hasSubscription) {
	          hasSubscription = true;
	          subscription = new CompositeDisposable(sourceObservable.subscribe(subject), disposableCreate(function () {
	            hasSubscription = false;
	          }));
	        }
	        return subscription;
	      };

	      __super__.call(this, function (o) {
	        return subject.subscribe(o);
	      });
	    }

	    ConnectableObservable.prototype.refCount = function () {
	      var connectableSubscription,
	          count = 0,
	          source = this;
	      return new AnonymousObservable(function (observer) {
	        var shouldConnect = ++count === 1,
	            subscription = source.subscribe(observer);
	        shouldConnect && (connectableSubscription = source.connect());
	        return function () {
	          subscription.dispose();
	          --count === 0 && connectableSubscription.dispose();
	        };
	      });
	    };

	    return ConnectableObservable;
	  })(Observable);

	  var Dictionary = (function () {

	    var primes = [1, 3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143, 4194301, 8388593, 16777213, 33554393, 67108859, 134217689, 268435399, 536870909, 1073741789, 2147483647],
	        noSuchkey = 'no such key',
	        duplicatekey = 'duplicate key';

	    function isPrime(candidate) {
	      if ((candidate & 1) === 0) {
	        return candidate === 2;
	      }
	      var num1 = Math.sqrt(candidate),
	          num2 = 3;
	      while (num2 <= num1) {
	        if (candidate % num2 === 0) {
	          return false;
	        }
	        num2 += 2;
	      }
	      return true;
	    }

	    function getPrime(min) {
	      var index, num, candidate;
	      for (index = 0; index < primes.length; ++index) {
	        num = primes[index];
	        if (num >= min) {
	          return num;
	        }
	      }
	      candidate = min | 1;
	      while (candidate < primes[primes.length - 1]) {
	        if (isPrime(candidate)) {
	          return candidate;
	        }
	        candidate += 2;
	      }
	      return min;
	    }

	    function stringHashFn(str) {
	      var hash = 757602046;
	      if (!str.length) {
	        return hash;
	      }
	      for (var i = 0, len = str.length; i < len; i++) {
	        var character = str.charCodeAt(i);
	        hash = (hash << 5) - hash + character;
	        hash = hash & hash;
	      }
	      return hash;
	    }

	    function numberHashFn(key) {
	      var c2 = 668265261;
	      key = key ^ 61 ^ key >>> 16;
	      key = key + (key << 3);
	      key = key ^ key >>> 4;
	      key = key * c2;
	      key = key ^ key >>> 15;
	      return key;
	    }

	    var getHashCode = (function () {
	      var uniqueIdCounter = 0;

	      return function (obj) {
	        if (obj == null) {
	          throw new Error(noSuchkey);
	        }

	        // Check for built-ins before tacking on our own for any object
	        if (typeof obj === 'string') {
	          return stringHashFn(obj);
	        }
	        if (typeof obj === 'number') {
	          return numberHashFn(obj);
	        }
	        if (typeof obj === 'boolean') {
	          return obj === true ? 1 : 0;
	        }
	        if (obj instanceof Date) {
	          return numberHashFn(obj.valueOf());
	        }
	        if (obj instanceof RegExp) {
	          return stringHashFn(obj.toString());
	        }
	        if (typeof obj.valueOf === 'function') {
	          // Hack check for valueOf
	          var valueOf = obj.valueOf();
	          if (typeof valueOf === 'number') {
	            return numberHashFn(valueOf);
	          }
	          if (typeof valueOf === 'string') {
	            return stringHashFn(valueOf);
	          }
	        }
	        if (obj.hashCode) {
	          return obj.hashCode();
	        }

	        var id = 17 * uniqueIdCounter++;
	        obj.hashCode = function () {
	          return id;
	        };
	        return id;
	      };
	    })();

	    function newEntry() {
	      return { key: null, value: null, next: 0, hashCode: 0 };
	    }

	    function Dictionary(capacity, comparer) {
	      if (capacity < 0) {
	        throw new ArgumentOutOfRangeError();
	      }
	      if (capacity > 0) {
	        this._initialize(capacity);
	      }

	      this.comparer = comparer || defaultComparer;
	      this.freeCount = 0;
	      this.size = 0;
	      this.freeList = -1;
	    }

	    var dictionaryProto = Dictionary.prototype;

	    dictionaryProto._initialize = function (capacity) {
	      var prime = getPrime(capacity),
	          i;
	      this.buckets = new Array(prime);
	      this.entries = new Array(prime);
	      for (i = 0; i < prime; i++) {
	        this.buckets[i] = -1;
	        this.entries[i] = newEntry();
	      }
	      this.freeList = -1;
	    };

	    dictionaryProto.add = function (key, value) {
	      this._insert(key, value, true);
	    };

	    dictionaryProto._insert = function (key, value, add) {
	      if (!this.buckets) {
	        this._initialize(0);
	      }
	      var index3,
	          num = getHashCode(key) & 2147483647,
	          index1 = num % this.buckets.length;
	      for (var index2 = this.buckets[index1]; index2 >= 0; index2 = this.entries[index2].next) {
	        if (this.entries[index2].hashCode === num && this.comparer(this.entries[index2].key, key)) {
	          if (add) {
	            throw new Error(duplicatekey);
	          }
	          this.entries[index2].value = value;
	          return;
	        }
	      }
	      if (this.freeCount > 0) {
	        index3 = this.freeList;
	        this.freeList = this.entries[index3].next;
	        --this.freeCount;
	      } else {
	        if (this.size === this.entries.length) {
	          this._resize();
	          index1 = num % this.buckets.length;
	        }
	        index3 = this.size;
	        ++this.size;
	      }
	      this.entries[index3].hashCode = num;
	      this.entries[index3].next = this.buckets[index1];
	      this.entries[index3].key = key;
	      this.entries[index3].value = value;
	      this.buckets[index1] = index3;
	    };

	    dictionaryProto._resize = function () {
	      var prime = getPrime(this.size * 2),
	          numArray = new Array(prime);
	      for (index = 0; index < numArray.length; ++index) {
	        numArray[index] = -1;
	      }
	      var entryArray = new Array(prime);
	      for (index = 0; index < this.size; ++index) {
	        entryArray[index] = this.entries[index];
	      }
	      for (var index = this.size; index < prime; ++index) {
	        entryArray[index] = newEntry();
	      }
	      for (var index1 = 0; index1 < this.size; ++index1) {
	        var index2 = entryArray[index1].hashCode % prime;
	        entryArray[index1].next = numArray[index2];
	        numArray[index2] = index1;
	      }
	      this.buckets = numArray;
	      this.entries = entryArray;
	    };

	    dictionaryProto.remove = function (key) {
	      if (this.buckets) {
	        var num = getHashCode(key) & 2147483647,
	            index1 = num % this.buckets.length,
	            index2 = -1;
	        for (var index3 = this.buckets[index1]; index3 >= 0; index3 = this.entries[index3].next) {
	          if (this.entries[index3].hashCode === num && this.comparer(this.entries[index3].key, key)) {
	            if (index2 < 0) {
	              this.buckets[index1] = this.entries[index3].next;
	            } else {
	              this.entries[index2].next = this.entries[index3].next;
	            }
	            this.entries[index3].hashCode = -1;
	            this.entries[index3].next = this.freeList;
	            this.entries[index3].key = null;
	            this.entries[index3].value = null;
	            this.freeList = index3;
	            ++this.freeCount;
	            return true;
	          } else {
	            index2 = index3;
	          }
	        }
	      }
	      return false;
	    };

	    dictionaryProto.clear = function () {
	      var index, len;
	      if (this.size <= 0) {
	        return;
	      }
	      for (index = 0, len = this.buckets.length; index < len; ++index) {
	        this.buckets[index] = -1;
	      }
	      for (index = 0; index < this.size; ++index) {
	        this.entries[index] = newEntry();
	      }
	      this.freeList = -1;
	      this.size = 0;
	    };

	    dictionaryProto._findEntry = function (key) {
	      if (this.buckets) {
	        var num = getHashCode(key) & 2147483647;
	        for (var index = this.buckets[num % this.buckets.length]; index >= 0; index = this.entries[index].next) {
	          if (this.entries[index].hashCode === num && this.comparer(this.entries[index].key, key)) {
	            return index;
	          }
	        }
	      }
	      return -1;
	    };

	    dictionaryProto.count = function () {
	      return this.size - this.freeCount;
	    };

	    dictionaryProto.tryGetValue = function (key) {
	      var entry = this._findEntry(key);
	      return entry >= 0 ? this.entries[entry].value : undefined;
	    };

	    dictionaryProto.getValues = function () {
	      var index = 0,
	          results = [];
	      if (this.entries) {
	        for (var index1 = 0; index1 < this.size; index1++) {
	          if (this.entries[index1].hashCode >= 0) {
	            results[index++] = this.entries[index1].value;
	          }
	        }
	      }
	      return results;
	    };

	    dictionaryProto.get = function (key) {
	      var entry = this._findEntry(key);
	      if (entry >= 0) {
	        return this.entries[entry].value;
	      }
	      throw new Error(noSuchkey);
	    };

	    dictionaryProto.set = function (key, value) {
	      this._insert(key, value, false);
	    };

	    dictionaryProto.containskey = function (key) {
	      return this._findEntry(key) >= 0;
	    };

	    return Dictionary;
	  })();

	  /**
	   *  Correlates the elements of two sequences based on overlapping durations.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.join = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (observer) {
	      var group = new CompositeDisposable();
	      var leftDone = false,
	          rightDone = false;
	      var leftId = 0,
	          rightId = 0;
	      var leftMap = new Dictionary(),
	          rightMap = new Dictionary();

	      group.add(left.subscribe(function (value) {
	        var id = leftId++;
	        var md = new SingleAssignmentDisposable();

	        leftMap.add(id, value);
	        group.add(md);

	        var expire = function expire() {
	          leftMap.remove(id) && leftMap.count() === 0 && leftDone && observer.onCompleted();
	          group.remove(md);
	        };

	        var duration;
	        try {
	          duration = leftDurationSelector(value);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }

	        md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));

	        rightMap.getValues().forEach(function (v) {
	          var result;
	          try {
	            result = resultSelector(value, v);
	          } catch (exn) {
	            observer.onError(exn);
	            return;
	          }

	          observer.onNext(result);
	        });
	      }, observer.onError.bind(observer), function () {
	        leftDone = true;
	        (rightDone || leftMap.count() === 0) && observer.onCompleted();
	      }));

	      group.add(right.subscribe(function (value) {
	        var id = rightId++;
	        var md = new SingleAssignmentDisposable();

	        rightMap.add(id, value);
	        group.add(md);

	        var expire = function expire() {
	          rightMap.remove(id) && rightMap.count() === 0 && rightDone && observer.onCompleted();
	          group.remove(md);
	        };

	        var duration;
	        try {
	          duration = rightDurationSelector(value);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }

	        md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));

	        leftMap.getValues().forEach(function (v) {
	          var result;
	          try {
	            result = resultSelector(v, value);
	          } catch (exn) {
	            observer.onError(exn);
	            return;
	          }

	          observer.onNext(result);
	        });
	      }, observer.onError.bind(observer), function () {
	        rightDone = true;
	        (leftDone || rightMap.count() === 0) && observer.onCompleted();
	      }));
	      return group;
	    }, left);
	  };

	  /**
	   *  Correlates the elements of two sequences based on overlapping durations, and groups the results.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.groupJoin = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (observer) {
	      var group = new CompositeDisposable();
	      var r = new RefCountDisposable(group);
	      var leftMap = new Dictionary(),
	          rightMap = new Dictionary();
	      var leftId = 0,
	          rightId = 0;

	      function handleError(e) {
	        return function (v) {
	          v.onError(e);
	        };
	      };

	      group.add(left.subscribe(function (value) {
	        var s = new Subject();
	        var id = leftId++;
	        leftMap.add(id, s);

	        var result;
	        try {
	          result = resultSelector(value, addRef(s, r));
	        } catch (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	          return;
	        }
	        observer.onNext(result);

	        rightMap.getValues().forEach(function (v) {
	          s.onNext(v);
	        });

	        var md = new SingleAssignmentDisposable();
	        group.add(md);

	        var expire = function expire() {
	          leftMap.remove(id) && s.onCompleted();
	          group.remove(md);
	        };

	        var duration;
	        try {
	          duration = leftDurationSelector(value);
	        } catch (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	          return;
	        }

	        md.setDisposable(duration.take(1).subscribe(noop, function (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	        }, expire));
	      }, function (e) {
	        leftMap.getValues().forEach(handleError(e));
	        observer.onError(e);
	      }, observer.onCompleted.bind(observer)));

	      group.add(right.subscribe(function (value) {
	        var id = rightId++;
	        rightMap.add(id, value);

	        var md = new SingleAssignmentDisposable();
	        group.add(md);

	        var expire = function expire() {
	          rightMap.remove(id);
	          group.remove(md);
	        };

	        var duration;
	        try {
	          duration = rightDurationSelector(value);
	        } catch (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	          return;
	        }
	        md.setDisposable(duration.take(1).subscribe(noop, function (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	        }, expire));

	        leftMap.getValues().forEach(function (v) {
	          v.onNext(value);
	        });
	      }, function (e) {
	        leftMap.getValues().forEach(handleError(e));
	        observer.onError(e);
	      }));

	      return r;
	    }, left);
	  };

	  /**
	   *  Projects each element of an observable sequence into zero or more buffers.
	   *
	   *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	   *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	   *  @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.buffer = function (bufferOpeningsOrClosingSelector, bufferClosingSelector) {
	    return this.window.apply(this, arguments).selectMany(function (x) {
	      return x.toArray();
	    });
	  };

	  /**
	   *  Projects each element of an observable sequence into zero or more windows.
	   *
	   *  @param {Mixed} windowOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	   *  @param {Function} [windowClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	   *  @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.window = function (windowOpeningsOrClosingSelector, windowClosingSelector) {
	    if (arguments.length === 1 && typeof arguments[0] !== 'function') {
	      return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);
	    }
	    return typeof windowOpeningsOrClosingSelector === 'function' ? observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) : observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);
	  };

	  function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {
	    return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function (_, win) {
	      return win;
	    });
	  }

	  function observableWindowWithBoundaries(windowBoundaries) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var win = new Subject(),
	          d = new CompositeDisposable(),
	          r = new RefCountDisposable(d);

	      observer.onNext(addRef(win, r));

	      d.add(source.subscribe(function (x) {
	        win.onNext(x);
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));

	      isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));

	      d.add(windowBoundaries.subscribe(function (w) {
	        win.onCompleted();
	        win = new Subject();
	        observer.onNext(addRef(win, r));
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));

	      return r;
	    }, source);
	  }

	  function observableWindowWithClosingSelector(windowClosingSelector) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var m = new SerialDisposable(),
	          d = new CompositeDisposable(m),
	          r = new RefCountDisposable(d),
	          win = new Subject();
	      observer.onNext(addRef(win, r));
	      d.add(source.subscribe(function (x) {
	        win.onNext(x);
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));

	      function createWindowClose() {
	        var windowClose;
	        try {
	          windowClose = windowClosingSelector();
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }

	        isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));

	        var m1 = new SingleAssignmentDisposable();
	        m.setDisposable(m1);
	        m1.setDisposable(windowClose.take(1).subscribe(noop, function (err) {
	          win.onError(err);
	          observer.onError(err);
	        }, function () {
	          win.onCompleted();
	          win = new Subject();
	          observer.onNext(addRef(win, r));
	          createWindowClose();
	        }));
	      }

	      createWindowClose();
	      return r;
	    }, source);
	  }

	  /**
	   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
	   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair.
	   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.
	   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.
	   */
	  observableProto.pairwise = function () {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var previous,
	          hasPrevious = false;
	      return source.subscribe(function (x) {
	        if (hasPrevious) {
	          observer.onNext([previous, x]);
	        } else {
	          hasPrevious = true;
	        }
	        previous = x;
	      }, observer.onError.bind(observer), observer.onCompleted.bind(observer));
	    }, source);
	  };

	  /**
	   * Returns two observables which partition the observations of the source by the given function.
	   * The first will trigger observations for those values for which the predicate returns true.
	   * The second will trigger observations for those values where the predicate returns false.
	   * The predicate is executed once for each subscribed observer.
	   * Both also propagate all error observations arising from the source and each completes
	   * when the source completes.
	   * @param {Function} predicate
	   *    The function to determine which output Observable will trigger a particular observation.
	   * @returns {Array}
	   *    An array of observables. The first triggers when the predicate returns true,
	   *    and the second triggers when the predicate returns false.
	  */
	  observableProto.partition = function (predicate, thisArg) {
	    return [this.filter(predicate, thisArg), this.filter(function (x, i, o) {
	      return !predicate.call(thisArg, x, i, o);
	    })];
	  };

	  function enumerableWhile(condition, source) {
	    return new Enumerable(function () {
	      return new Enumerator(function () {
	        return condition() ? { done: false, value: source } : { done: true, value: undefined };
	      });
	    });
	  }

	  /**
	  *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
	  *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.
	  *
	  * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.
	  * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	  */
	  observableProto.letBind = observableProto['let'] = function (func) {
	    return func(this);
	  };

	  /**
	  *  Determines whether an observable collection contains values. There is an alias for this method called 'ifThen' for browsers <IE9
	  *
	  * @example
	  *  1 - res = Rx.Observable.if(condition, obs1);
	  *  2 - res = Rx.Observable.if(condition, obs1, obs2);
	  *  3 - res = Rx.Observable.if(condition, obs1, scheduler);
	  * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.
	  * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.
	  * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.
	  * @returns {Observable} An observable sequence which is either the thenSource or elseSource.
	  */
	  Observable['if'] = Observable.ifThen = function (condition, thenSource, elseSourceOrScheduler) {
	    return observableDefer(function () {
	      elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());

	      isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));
	      isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));

	      // Assume a scheduler for empty only
	      typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));
	      return condition() ? thenSource : elseSourceOrScheduler;
	    });
	  };

	  /**
	  *  Concatenates the observable sequences obtained by running the specified result selector for each element in source.
	  * There is an alias for this method called 'forIn' for browsers <IE9
	  * @param {Array} sources An array of values to turn into an observable sequence.
	  * @param {Function} resultSelector A function to apply to each item in the sources array to turn it into an observable sequence.
	  * @returns {Observable} An observable sequence from the concatenated observable sequences.
	  */
	  Observable['for'] = Observable.forIn = function (sources, resultSelector, thisArg) {
	    return enumerableOf(sources, resultSelector, thisArg).concat();
	  };

	  /**
	  *  Repeats source as long as condition holds emulating a while loop.
	  * There is an alias for this method called 'whileDo' for browsers <IE9
	  *
	  * @param {Function} condition The condition which determines if the source will be repeated.
	  * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	  * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	  */
	  var observableWhileDo = Observable['while'] = Observable.whileDo = function (condition, source) {
	    isPromise(source) && (source = observableFromPromise(source));
	    return enumerableWhile(condition, source).concat();
	  };

	  /**
	  *  Repeats source as long as condition holds emulating a do while loop.
	  *
	  * @param {Function} condition The condition which determines if the source will be repeated.
	  * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	  * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	  */
	  observableProto.doWhile = function (condition) {
	    return observableConcat([this, observableWhileDo(condition, this)]);
	  };

	  /**
	  *  Uses selector to determine which source in sources to use.
	  *  There is an alias 'switchCase' for browsers <IE9.
	  *
	  * @example
	  *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 });
	  *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, obs0);
	  *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, scheduler);
	  *
	  * @param {Function} selector The function which extracts the value for to test in a case statement.
	  * @param {Array} sources A object which has keys which correspond to the case statement labels.
	  * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.
	  *
	  * @returns {Observable} An observable sequence which is determined by a case statement.
	  */
	  Observable['case'] = Observable.switchCase = function (selector, sources, defaultSourceOrScheduler) {
	    return observableDefer(function () {
	      isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
	      defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());

	      typeof defaultSourceOrScheduler.now === 'function' && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));

	      var result = sources[selector()];
	      isPromise(result) && (result = observableFromPromise(result));

	      return result || defaultSourceOrScheduler;
	    });
	  };

	  /**
	  *  Expands an observable sequence by recursively invoking selector.
	  *
	  * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.
	  * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.
	  * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.
	  */
	  observableProto.expand = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var q = [],
	          m = new SerialDisposable(),
	          d = new CompositeDisposable(m),
	          activeCount = 0,
	          isAcquired = false;

	      var ensureActive = function ensureActive() {
	        var isOwner = false;
	        if (q.length > 0) {
	          isOwner = !isAcquired;
	          isAcquired = true;
	        }
	        if (isOwner) {
	          m.setDisposable(scheduler.scheduleRecursive(function (self) {
	            var work;
	            if (q.length > 0) {
	              work = q.shift();
	            } else {
	              isAcquired = false;
	              return;
	            }
	            var m1 = new SingleAssignmentDisposable();
	            d.add(m1);
	            m1.setDisposable(work.subscribe(function (x) {
	              observer.onNext(x);
	              var result = null;
	              try {
	                result = selector(x);
	              } catch (e) {
	                observer.onError(e);
	              }
	              q.push(result);
	              activeCount++;
	              ensureActive();
	            }, observer.onError.bind(observer), function () {
	              d.remove(m1);
	              activeCount--;
	              if (activeCount === 0) {
	                observer.onCompleted();
	              }
	            }));
	            self();
	          }));
	        }
	      };

	      q.push(source);
	      activeCount++;
	      ensureActive();
	      return d;
	    }, this);
	  };

	  /**
	  *  Runs all observable sequences in parallel and collect their last elements.
	  *
	  * @example
	  *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);
	  *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);
	  * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.
	  */
	  Observable.forkJoin = function () {
	    var allSources = [];
	    if (Array.isArray(arguments[0])) {
	      allSources = arguments[0];
	    } else {
	      for (var i = 0, len = arguments.length; i < len; i++) {
	        allSources.push(arguments[i]);
	      }
	    }
	    return new AnonymousObservable(function (subscriber) {
	      var count = allSources.length;
	      if (count === 0) {
	        subscriber.onCompleted();
	        return disposableEmpty;
	      }
	      var group = new CompositeDisposable(),
	          finished = false,
	          hasResults = new Array(count),
	          hasCompleted = new Array(count),
	          results = new Array(count);

	      for (var idx = 0; idx < count; idx++) {
	        (function (i) {
	          var source = allSources[i];
	          isPromise(source) && (source = observableFromPromise(source));
	          group.add(source.subscribe(function (value) {
	            if (!finished) {
	              hasResults[i] = true;
	              results[i] = value;
	            }
	          }, function (e) {
	            finished = true;
	            subscriber.onError(e);
	            group.dispose();
	          }, function () {
	            if (!finished) {
	              if (!hasResults[i]) {
	                subscriber.onCompleted();
	                return;
	              }
	              hasCompleted[i] = true;
	              for (var ix = 0; ix < count; ix++) {
	                if (!hasCompleted[ix]) {
	                  return;
	                }
	              }
	              finished = true;
	              subscriber.onNext(results);
	              subscriber.onCompleted();
	            }
	          }));
	        })(idx);
	      }

	      return group;
	    });
	  };

	  /**
	  *  Runs two observable sequences in parallel and combines their last elemenets.
	  *
	  * @param {Observable} second Second observable sequence.
	  * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.
	  * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.
	  */
	  observableProto.forkJoin = function (second, resultSelector) {
	    var first = this;
	    return new AnonymousObservable(function (observer) {
	      var leftStopped = false,
	          rightStopped = false,
	          hasLeft = false,
	          hasRight = false,
	          lastLeft,
	          lastRight,
	          leftSubscription = new SingleAssignmentDisposable(),
	          rightSubscription = new SingleAssignmentDisposable();

	      isPromise(second) && (second = observableFromPromise(second));

	      leftSubscription.setDisposable(first.subscribe(function (left) {
	        hasLeft = true;
	        lastLeft = left;
	      }, function (err) {
	        rightSubscription.dispose();
	        observer.onError(err);
	      }, function () {
	        leftStopped = true;
	        if (rightStopped) {
	          if (!hasLeft) {
	            observer.onCompleted();
	          } else if (!hasRight) {
	            observer.onCompleted();
	          } else {
	            var result;
	            try {
	              result = resultSelector(lastLeft, lastRight);
	            } catch (e) {
	              observer.onError(e);
	              return;
	            }
	            observer.onNext(result);
	            observer.onCompleted();
	          }
	        }
	      }));

	      rightSubscription.setDisposable(second.subscribe(function (right) {
	        hasRight = true;
	        lastRight = right;
	      }, function (err) {
	        leftSubscription.dispose();
	        observer.onError(err);
	      }, function () {
	        rightStopped = true;
	        if (leftStopped) {
	          if (!hasLeft) {
	            observer.onCompleted();
	          } else if (!hasRight) {
	            observer.onCompleted();
	          } else {
	            var result;
	            try {
	              result = resultSelector(lastLeft, lastRight);
	            } catch (e) {
	              observer.onError(e);
	              return;
	            }
	            observer.onNext(result);
	            observer.onCompleted();
	          }
	        }
	      }));

	      return new CompositeDisposable(leftSubscription, rightSubscription);
	    }, first);
	  };

	  /**
	   * Comonadic bind operator.
	   * @param {Function} selector A transform function to apply to each element.
	   * @param {Object} scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.
	   * @returns {Observable} An observable sequence which results from the comonadic bind operation.
	   */
	  observableProto.manySelect = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    var source = this;
	    return observableDefer(function () {
	      var chain;

	      return source.map(function (x) {
	        var curr = new ChainObservable(x);

	        chain && chain.onNext(x);
	        chain = curr;

	        return curr;
	      }).tap(noop, function (e) {
	        chain && chain.onError(e);
	      }, function () {
	        chain && chain.onCompleted();
	      }).observeOn(scheduler).map(selector);
	    }, source);
	  };

	  var ChainObservable = (function (__super__) {

	    function subscribe(observer) {
	      var self = this,
	          g = new CompositeDisposable();
	      g.add(currentThreadScheduler.schedule(function () {
	        observer.onNext(self.head);
	        g.add(self.tail.mergeAll().subscribe(observer));
	      }));

	      return g;
	    }

	    inherits(ChainObservable, __super__);

	    function ChainObservable(head) {
	      __super__.call(this, subscribe);
	      this.head = head;
	      this.tail = new AsyncSubject();
	    }

	    addProperties(ChainObservable.prototype, Observer, {
	      onCompleted: function onCompleted() {
	        this.onNext(Observable.empty());
	      },
	      onError: function onError(e) {
	        this.onNext(Observable.throwError(e));
	      },
	      onNext: function onNext(v) {
	        this.tail.onNext(v);
	        this.tail.onCompleted();
	      }
	    });

	    return ChainObservable;
	  })(Observable);

	  /** @private */
	  var Map = root.Map || (function () {

	    function Map() {
	      this._keys = [];
	      this._values = [];
	    }

	    Map.prototype.get = function (key) {
	      var i = this._keys.indexOf(key);
	      return i !== -1 ? this._values[i] : undefined;
	    };

	    Map.prototype.set = function (key, value) {
	      var i = this._keys.indexOf(key);
	      i !== -1 && (this._values[i] = value);
	      this._values[this._keys.push(key) - 1] = value;
	    };

	    Map.prototype.forEach = function (callback, thisArg) {
	      for (var i = 0, len = this._keys.length; i < len; i++) {
	        callback.call(thisArg, this._values[i], this._keys[i]);
	      }
	    };

	    return Map;
	  })();

	  /**
	   * @constructor
	   * Represents a join pattern over observable sequences.
	   */
	  function Pattern(patterns) {
	    this.patterns = patterns;
	  }

	  /**
	   *  Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
	   *  @param other Observable sequence to match in addition to the current pattern.
	   *  @return {Pattern} Pattern object that matches when all observable sequences in the pattern have an available value.
	   */
	  Pattern.prototype.and = function (other) {
	    return new Pattern(this.patterns.concat(other));
	  };

	  /**
	   *  Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
	   *  @param {Function} selector Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.
	   *  @return {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  Pattern.prototype.thenDo = function (selector) {
	    return new Plan(this, selector);
	  };

	  function Plan(expression, selector) {
	    this.expression = expression;
	    this.selector = selector;
	  }

	  Plan.prototype.activate = function (externalSubscriptions, observer, deactivate) {
	    var self = this;
	    var joinObservers = [];
	    for (var i = 0, len = this.expression.patterns.length; i < len; i++) {
	      joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], observer.onError.bind(observer)));
	    }
	    var activePlan = new ActivePlan(joinObservers, function () {
	      var result;
	      try {
	        result = self.selector.apply(self, arguments);
	      } catch (e) {
	        observer.onError(e);
	        return;
	      }
	      observer.onNext(result);
	    }, function () {
	      for (var j = 0, jlen = joinObservers.length; j < jlen; j++) {
	        joinObservers[j].removeActivePlan(activePlan);
	      }
	      deactivate(activePlan);
	    });
	    for (i = 0, len = joinObservers.length; i < len; i++) {
	      joinObservers[i].addActivePlan(activePlan);
	    }
	    return activePlan;
	  };

	  function planCreateObserver(externalSubscriptions, observable, onError) {
	    var entry = externalSubscriptions.get(observable);
	    if (!entry) {
	      var observer = new JoinObserver(observable, onError);
	      externalSubscriptions.set(observable, observer);
	      return observer;
	    }
	    return entry;
	  }

	  function ActivePlan(joinObserverArray, onNext, onCompleted) {
	    this.joinObserverArray = joinObserverArray;
	    this.onNext = onNext;
	    this.onCompleted = onCompleted;
	    this.joinObservers = new Map();
	    for (var i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      var joinObserver = this.joinObserverArray[i];
	      this.joinObservers.set(joinObserver, joinObserver);
	    }
	  }

	  ActivePlan.prototype.dequeue = function () {
	    this.joinObservers.forEach(function (v) {
	      v.queue.shift();
	    });
	  };

	  ActivePlan.prototype.match = function () {
	    var i,
	        len,
	        hasValues = true;
	    for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      if (this.joinObserverArray[i].queue.length === 0) {
	        hasValues = false;
	        break;
	      }
	    }
	    if (hasValues) {
	      var firstValues = [],
	          isCompleted = false;
	      for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	        firstValues.push(this.joinObserverArray[i].queue[0]);
	        this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
	      }
	      if (isCompleted) {
	        this.onCompleted();
	      } else {
	        this.dequeue();
	        var values = [];
	        for (i = 0, len = firstValues.length; i < firstValues.length; i++) {
	          values.push(firstValues[i].value);
	        }
	        this.onNext.apply(this, values);
	      }
	    }
	  };

	  var JoinObserver = (function (__super__) {
	    inherits(JoinObserver, __super__);

	    function JoinObserver(source, onError) {
	      __super__.call(this);
	      this.source = source;
	      this.onError = onError;
	      this.queue = [];
	      this.activePlans = [];
	      this.subscription = new SingleAssignmentDisposable();
	      this.isDisposed = false;
	    }

	    var JoinObserverPrototype = JoinObserver.prototype;

	    JoinObserverPrototype.next = function (notification) {
	      if (!this.isDisposed) {
	        if (notification.kind === 'E') {
	          return this.onError(notification.exception);
	        }
	        this.queue.push(notification);
	        var activePlans = this.activePlans.slice(0);
	        for (var i = 0, len = activePlans.length; i < len; i++) {
	          activePlans[i].match();
	        }
	      }
	    };

	    JoinObserverPrototype.error = noop;
	    JoinObserverPrototype.completed = noop;

	    JoinObserverPrototype.addActivePlan = function (activePlan) {
	      this.activePlans.push(activePlan);
	    };

	    JoinObserverPrototype.subscribe = function () {
	      this.subscription.setDisposable(this.source.materialize().subscribe(this));
	    };

	    JoinObserverPrototype.removeActivePlan = function (activePlan) {
	      this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);
	      this.activePlans.length === 0 && this.dispose();
	    };

	    JoinObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        this.subscription.dispose();
	      }
	    };

	    return JoinObserver;
	  })(AbstractObserver);

	  /**
	   *  Creates a pattern that matches when both observable sequences have an available value.
	   *
	   *  @param right Observable sequence to match with the current sequence.
	   *  @return {Pattern} Pattern object that matches when both observable sequences have an available value.
	   */
	  observableProto.and = function (right) {
	    return new Pattern([this, right]);
	  };

	  /**
	   *  Matches when the observable sequence has an available value and projects the value.
	   *
	   *  @param {Function} selector Selector that will be invoked for values in the source sequence.
	   *  @returns {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  observableProto.thenDo = function (selector) {
	    return new Pattern([this]).thenDo(selector);
	  };

	  /**
	   *  Joins together the results from several patterns.
	   *
	   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.
	   *  @returns {Observable} Observable sequence with the results form matching several patterns.
	   */
	  Observable.when = function () {
	    var len = arguments.length,
	        plans;
	    if (Array.isArray(arguments[0])) {
	      plans = arguments[0];
	    } else {
	      plans = new Array(len);
	      for (var i = 0; i < len; i++) {
	        plans[i] = arguments[i];
	      }
	    }
	    return new AnonymousObservable(function (o) {
	      var activePlans = [],
	          externalSubscriptions = new Map();
	      var outObserver = observerCreate(function (x) {
	        o.onNext(x);
	      }, function (err) {
	        externalSubscriptions.forEach(function (v) {
	          v.onError(err);
	        });
	        o.onError(err);
	      }, function (x) {
	        o.onCompleted();
	      });
	      try {
	        for (var i = 0, len = plans.length; i < len; i++) {
	          activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function (activePlan) {
	            var idx = activePlans.indexOf(activePlan);
	            activePlans.splice(idx, 1);
	            activePlans.length === 0 && o.onCompleted();
	          }));
	        }
	      } catch (e) {
	        observableThrow(e).subscribe(o);
	      }
	      var group = new CompositeDisposable();
	      externalSubscriptions.forEach(function (joinObserver) {
	        joinObserver.subscribe();
	        group.add(joinObserver);
	      });

	      return group;
	    });
	  };

	  function observableTimerDate(dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithAbsolute(dueTime, function () {
	        observer.onNext(0);
	        observer.onCompleted();
	      });
	    });
	  }

	  function observableTimerDateAndPeriod(dueTime, period, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      var d = dueTime,
	          p = normalizeTime(period);
	      return scheduler.scheduleRecursiveWithAbsoluteAndState(0, d, function (count, self) {
	        if (p > 0) {
	          var now = scheduler.now();
	          d = d + p;
	          d <= now && (d = now + p);
	        }
	        observer.onNext(count);
	        self(count + 1, d);
	      });
	    });
	  }

	  function observableTimerTimeSpan(dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithRelative(normalizeTime(dueTime), function () {
	        observer.onNext(0);
	        observer.onCompleted();
	      });
	    });
	  }

	  function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
	    return dueTime === period ? new AnonymousObservable(function (observer) {
	      return scheduler.schedulePeriodicWithState(0, period, function (count) {
	        observer.onNext(count);
	        return count + 1;
	      });
	    }) : observableDefer(function () {
	      return observableTimerDateAndPeriod(scheduler.now() + dueTime, period, scheduler);
	    });
	  }

	  /**
	   *  Returns an observable sequence that produces a value after each period.
	   *
	   * @example
	   *  1 - res = Rx.Observable.interval(1000);
	   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
	   *
	   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
	   * @returns {Observable} An observable sequence that produces a value after each period.
	   */
	  var observableinterval = Observable.interval = function (period, scheduler) {
	    return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : timeoutScheduler);
	  };

	  /**
	   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.
	   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
	   */
	  var observableTimer = Observable.timer = function (dueTime, periodOrScheduler, scheduler) {
	    var period;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    if (periodOrScheduler !== undefined && typeof periodOrScheduler === 'number') {
	      period = periodOrScheduler;
	    } else if (isScheduler(periodOrScheduler)) {
	      scheduler = periodOrScheduler;
	    }
	    if (dueTime instanceof Date && period === undefined) {
	      return observableTimerDate(dueTime.getTime(), scheduler);
	    }
	    if (dueTime instanceof Date && period !== undefined) {
	      period = periodOrScheduler;
	      return observableTimerDateAndPeriod(dueTime.getTime(), period, scheduler);
	    }
	    return period === undefined ? observableTimerTimeSpan(dueTime, scheduler) : observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
	  };

	  function observableDelayTimeSpan(source, dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      var active = false,
	          cancelable = new SerialDisposable(),
	          exception = null,
	          q = [],
	          running = false,
	          subscription;
	      subscription = source.materialize().timestamp(scheduler).subscribe(function (notification) {
	        var d, shouldRun;
	        if (notification.value.kind === 'E') {
	          q = [];
	          q.push(notification);
	          exception = notification.value.exception;
	          shouldRun = !running;
	        } else {
	          q.push({ value: notification.value, timestamp: notification.timestamp + dueTime });
	          shouldRun = !active;
	          active = true;
	        }
	        if (shouldRun) {
	          if (exception !== null) {
	            observer.onError(exception);
	          } else {
	            d = new SingleAssignmentDisposable();
	            cancelable.setDisposable(d);
	            d.setDisposable(scheduler.scheduleRecursiveWithRelative(dueTime, function (self) {
	              var e, recurseDueTime, result, shouldRecurse;
	              if (exception !== null) {
	                return;
	              }
	              running = true;
	              do {
	                result = null;
	                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
	                  result = q.shift().value;
	                }
	                if (result !== null) {
	                  result.accept(observer);
	                }
	              } while (result !== null);
	              shouldRecurse = false;
	              recurseDueTime = 0;
	              if (q.length > 0) {
	                shouldRecurse = true;
	                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
	              } else {
	                active = false;
	              }
	              e = exception;
	              running = false;
	              if (e !== null) {
	                observer.onError(e);
	              } else if (shouldRecurse) {
	                self(recurseDueTime);
	              }
	            }));
	          }
	        }
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    }, source);
	  }

	  function observableDelayDate(source, dueTime, scheduler) {
	    return observableDefer(function () {
	      return observableDelayTimeSpan(source, dueTime - scheduler.now(), scheduler);
	    });
	  }

	  /**
	   *  Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.
	   *
	   * @example
	   *  1 - res = Rx.Observable.delay(new Date());
	   *  2 - res = Rx.Observable.delay(new Date(), Rx.Scheduler.timeout);
	   *
	   *  3 - res = Rx.Observable.delay(5000);
	   *  4 - res = Rx.Observable.delay(5000, 1000, Rx.Scheduler.timeout);
	   * @memberOf Observable#
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
	   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delay = function (dueTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return dueTime instanceof Date ? observableDelayDate(this, dueTime.getTime(), scheduler) : observableDelayTimeSpan(this, dueTime, scheduler);
	  };

	  /**
	   *  Ignores values from an observable sequence which are followed by another value before dueTime.
	   * @param {Number} dueTime Duration of the debounce period for each value (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler]  Scheduler to run the debounce timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The debounced sequence.
	   */
	  observableProto.debounce = observableProto.throttleWithTimeout = function (dueTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var cancelable = new SerialDisposable(),
	          hasvalue = false,
	          value,
	          id = 0;
	      var subscription = source.subscribe(function (x) {
	        hasvalue = true;
	        value = x;
	        id++;
	        var currentId = id,
	            d = new SingleAssignmentDisposable();
	        cancelable.setDisposable(d);
	        d.setDisposable(scheduler.scheduleWithRelative(dueTime, function () {
	          hasvalue && id === currentId && observer.onNext(value);
	          hasvalue = false;
	        }));
	      }, function (e) {
	        cancelable.dispose();
	        observer.onError(e);
	        hasvalue = false;
	        id++;
	      }, function () {
	        cancelable.dispose();
	        hasvalue && observer.onNext(value);
	        observer.onCompleted();
	        hasvalue = false;
	        id++;
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    }, this);
	  };

	  /**
	   * @deprecated use #debounce or #throttleWithTimeout instead.
	   */
	  observableProto.throttle = function (dueTime, scheduler) {
	    //deprecate('throttle', 'debounce or throttleWithTimeout');
	    return this.debounce(dueTime, scheduler);
	  };

	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
	   * @param {Number} timeSpan Length of each window (specified as an integer denoting milliseconds).
	   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	    var source = this,
	        timeShift;
	    timeShiftOrScheduler == null && (timeShift = timeSpan);
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    if (typeof timeShiftOrScheduler === 'number') {
	      timeShift = timeShiftOrScheduler;
	    } else if (isScheduler(timeShiftOrScheduler)) {
	      timeShift = timeSpan;
	      scheduler = timeShiftOrScheduler;
	    }
	    return new AnonymousObservable(function (observer) {
	      var groupDisposable,
	          nextShift = timeShift,
	          nextSpan = timeSpan,
	          q = [],
	          refCountDisposable,
	          timerD = new SerialDisposable(),
	          totalTime = 0;
	      groupDisposable = new CompositeDisposable(timerD), refCountDisposable = new RefCountDisposable(groupDisposable);

	      function createTimer() {
	        var m = new SingleAssignmentDisposable(),
	            isSpan = false,
	            isShift = false;
	        timerD.setDisposable(m);
	        if (nextSpan === nextShift) {
	          isSpan = true;
	          isShift = true;
	        } else if (nextSpan < nextShift) {
	          isSpan = true;
	        } else {
	          isShift = true;
	        }
	        var newTotalTime = isSpan ? nextSpan : nextShift,
	            ts = newTotalTime - totalTime;
	        totalTime = newTotalTime;
	        if (isSpan) {
	          nextSpan += timeShift;
	        }
	        if (isShift) {
	          nextShift += timeShift;
	        }
	        m.setDisposable(scheduler.scheduleWithRelative(ts, function () {
	          if (isShift) {
	            var s = new Subject();
	            q.push(s);
	            observer.onNext(addRef(s, refCountDisposable));
	          }
	          isSpan && q.shift().onCompleted();
	          createTimer();
	        }));
	      };
	      q.push(new Subject());
	      observer.onNext(addRef(q[0], refCountDisposable));
	      createTimer();
	      groupDisposable.add(source.subscribe(function (x) {
	        for (var i = 0, len = q.length; i < len; i++) {
	          q[i].onNext(x);
	        }
	      }, function (e) {
	        for (var i = 0, len = q.length; i < len; i++) {
	          q[i].onError(e);
	        }
	        observer.onError(e);
	      }, function () {
	        for (var i = 0, len = q.length; i < len; i++) {
	          q[i].onCompleted();
	        }
	        observer.onCompleted();
	      }));
	      return refCountDisposable;
	    }, source);
	  };

	  /**
	   *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
	   * @param {Number} timeSpan Maximum time length of a window.
	   * @param {Number} count Maximum element count of a window.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTimeOrCount = function (timeSpan, count, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var timerD = new SerialDisposable(),
	          groupDisposable = new CompositeDisposable(timerD),
	          refCountDisposable = new RefCountDisposable(groupDisposable),
	          n = 0,
	          windowId = 0,
	          s = new Subject();

	      function createTimer(id) {
	        var m = new SingleAssignmentDisposable();
	        timerD.setDisposable(m);
	        m.setDisposable(scheduler.scheduleWithRelative(timeSpan, function () {
	          if (id !== windowId) {
	            return;
	          }
	          n = 0;
	          var newId = ++windowId;
	          s.onCompleted();
	          s = new Subject();
	          observer.onNext(addRef(s, refCountDisposable));
	          createTimer(newId);
	        }));
	      }

	      observer.onNext(addRef(s, refCountDisposable));
	      createTimer(0);

	      groupDisposable.add(source.subscribe(function (x) {
	        var newId = 0,
	            newWindow = false;
	        s.onNext(x);
	        if (++n === count) {
	          newWindow = true;
	          n = 0;
	          newId = ++windowId;
	          s.onCompleted();
	          s = new Subject();
	          observer.onNext(addRef(s, refCountDisposable));
	        }
	        newWindow && createTimer(newId);
	      }, function (e) {
	        s.onError(e);
	        observer.onError(e);
	      }, function () {
	        s.onCompleted();
	        observer.onCompleted();
	      }));
	      return refCountDisposable;
	    }, source);
	  };

	  /**
	   *  Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
	   *
	   * @example
	   *  1 - res = xs.bufferWithTime(1000, scheduler); // non-overlapping segments of 1 second
	   *  2 - res = xs.bufferWithTime(1000, 500, scheduler; // segments of 1 second with time shift 0.5 seconds
	   *
	   * @param {Number} timeSpan Length of each buffer (specified as an integer denoting milliseconds).
	   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive buffers (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.
	   * @param {Scheduler} [scheduler]  Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of buffers.
	   */
	  observableProto.bufferWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	    return this.windowWithTime.apply(this, arguments).selectMany(function (x) {
	      return x.toArray();
	    });
	  };

	  /**
	   *  Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.
	   *
	   * @example
	   *  1 - res = source.bufferWithTimeOrCount(5000, 50); // 5s or 50 items in an array
	   *  2 - res = source.bufferWithTimeOrCount(5000, 50, scheduler); // 5s or 50 items in an array
	   *
	   * @param {Number} timeSpan Maximum time length of a buffer.
	   * @param {Number} count Maximum element count of a buffer.
	   * @param {Scheduler} [scheduler]  Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of buffers.
	   */
	  observableProto.bufferWithTimeOrCount = function (timeSpan, count, scheduler) {
	    return this.windowWithTimeOrCount(timeSpan, count, scheduler).selectMany(function (x) {
	      return x.toArray();
	    });
	  };

	  /**
	   *  Records the time interval between consecutive values in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timeInterval();
	   *  2 - res = source.timeInterval(Rx.Scheduler.timeout);
	   *
	   * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with time interval information on values.
	   */
	  observableProto.timeInterval = function (scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return observableDefer(function () {
	      var last = scheduler.now();
	      return source.map(function (x) {
	        var now = scheduler.now(),
	            span = now - last;
	        last = now;
	        return { value: x, interval: span };
	      });
	    });
	  };

	  /**
	   *  Records the timestamp for each value in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
	   *  2 - res = source.timestamp(Rx.Scheduler.timeout);
	   *
	   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with timestamp information on values.
	   */
	  observableProto.timestamp = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return this.map(function (x) {
	      return { value: x, timestamp: scheduler.now() };
	    });
	  };

	  function sampleObservable(source, sampler) {
	    return new AnonymousObservable(function (observer) {
	      var atEnd, value, hasValue;

	      function sampleSubscribe() {
	        if (hasValue) {
	          hasValue = false;
	          observer.onNext(value);
	        }
	        atEnd && observer.onCompleted();
	      }

	      return new CompositeDisposable(source.subscribe(function (newValue) {
	        hasValue = true;
	        value = newValue;
	      }, observer.onError.bind(observer), function () {
	        atEnd = true;
	      }), sampler.subscribe(sampleSubscribe, observer.onError.bind(observer), sampleSubscribe));
	    }, source);
	  }

	  /**
	   *  Samples the observable sequence at each interval.
	   *
	   * @example
	   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
	   *  2 - res = source.sample(5000); // 5 seconds
	   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
	   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Sampled observable sequence.
	   */
	  observableProto.sample = observableProto.throttleLatest = function (intervalOrSampler, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return typeof intervalOrSampler === 'number' ? sampleObservable(this, observableinterval(intervalOrSampler, scheduler)) : sampleObservable(this, intervalOrSampler);
	  };

	  /**
	   *  Returns the source observable sequence or the other observable sequence if dueTime elapses.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.
	   * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	   */
	  observableProto.timeout = function (dueTime, other, scheduler) {
	    (other == null || typeof other === 'string') && (other = observableThrow(new Error(other || 'Timeout')));
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);

	    var source = this,
	        schedulerMethod = dueTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';

	    return new AnonymousObservable(function (observer) {
	      var id = 0,
	          original = new SingleAssignmentDisposable(),
	          subscription = new SerialDisposable(),
	          switched = false,
	          timer = new SerialDisposable();

	      subscription.setDisposable(original);

	      function createTimer() {
	        var myId = id;
	        timer.setDisposable(scheduler[schedulerMethod](dueTime, function () {
	          if (id === myId) {
	            isPromise(other) && (other = observableFromPromise(other));
	            subscription.setDisposable(other.subscribe(observer));
	          }
	        }));
	      }

	      createTimer();

	      original.setDisposable(source.subscribe(function (x) {
	        if (!switched) {
	          id++;
	          observer.onNext(x);
	          createTimer();
	        }
	      }, function (e) {
	        if (!switched) {
	          id++;
	          observer.onError(e);
	        }
	      }, function () {
	        if (!switched) {
	          id++;
	          observer.onCompleted();
	        }
	      }));
	      return new CompositeDisposable(subscription, timer);
	    }, source);
	  };

	  /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithAbsoluteTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return new Date(); }
	   *  });
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithAbsoluteTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var first = true,
	          hasResult = false,
	          result,
	          state = initialState,
	          time;
	      return scheduler.scheduleRecursiveWithAbsolute(scheduler.now(), function (self) {
	        hasResult && observer.onNext(result);

	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          if (hasResult) {
	            result = resultSelector(state);
	            time = timeSelector(state);
	          }
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        if (hasResult) {
	          self(time);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };

	  /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithRelativeTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return 500; }
	   *  );
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithRelativeTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var first = true,
	          hasResult = false,
	          result,
	          state = initialState,
	          time;
	      return scheduler.scheduleRecursiveWithRelative(0, function (self) {
	        hasResult && observer.onNext(result);

	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          if (hasResult) {
	            result = resultSelector(state);
	            time = timeSelector(state);
	          }
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        if (hasResult) {
	          self(time);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };

	  /**
	   *  Time shifts the observable sequence by delaying the subscription.
	   *
	   * @example
	   *  1 - res = source.delaySubscription(5000); // 5s
	   *  2 - res = source.delaySubscription(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Number} dueTime Absolute or relative time to perform the subscription at.
	   * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delaySubscription = function (dueTime, scheduler) {
	    return this.delayWithSelector(observableTimer(dueTime, isScheduler(scheduler) ? scheduler : timeoutScheduler), observableEmpty);
	  };

	  /**
	   *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
	   *
	   * @example
	   *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(5000); }); // with selector only
	   *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) { return Rx.Observable.timer(x); }); // with delay and selector
	   *
	   * @param {Observable} [subscriptionDelay]  Sequence indicating the delay for the subscription to the source.
	   * @param {Function} delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delayWithSelector = function (subscriptionDelay, delayDurationSelector) {
	    var source = this,
	        subDelay,
	        selector;
	    if (typeof subscriptionDelay === 'function') {
	      selector = subscriptionDelay;
	    } else {
	      subDelay = subscriptionDelay;
	      selector = delayDurationSelector;
	    }
	    return new AnonymousObservable(function (observer) {
	      var delays = new CompositeDisposable(),
	          atEnd = false,
	          done = function done() {
	        if (atEnd && delays.length === 0) {
	          observer.onCompleted();
	        }
	      },
	          subscription = new SerialDisposable(),
	          start = function start() {
	        subscription.setDisposable(source.subscribe(function (x) {
	          var delay;
	          try {
	            delay = selector(x);
	          } catch (error) {
	            observer.onError(error);
	            return;
	          }
	          var d = new SingleAssignmentDisposable();
	          delays.add(d);
	          d.setDisposable(delay.subscribe(function () {
	            observer.onNext(x);
	            delays.remove(d);
	            done();
	          }, observer.onError.bind(observer), function () {
	            observer.onNext(x);
	            delays.remove(d);
	            done();
	          }));
	        }, observer.onError.bind(observer), function () {
	          atEnd = true;
	          subscription.dispose();
	          done();
	        }));
	      };

	      if (!subDelay) {
	        start();
	      } else {
	        subscription.setDisposable(subDelay.subscribe(start, observer.onError.bind(observer), start));
	      }

	      return new CompositeDisposable(subscription, delays);
	    }, this);
	  };

	  /**
	   *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.
	   * @param {Observable} [firstTimeout]  Observable sequence that represents the timeout for the first element. If not provided, this defaults to Observable.never().
	   * @param {Function} timeoutDurationSelector Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.
	   * @param {Observable} [other]  Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException().
	   * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	   */
	  observableProto.timeoutWithSelector = function (firstTimeout, timeoutdurationSelector, other) {
	    if (arguments.length === 1) {
	      timeoutdurationSelector = firstTimeout;
	      firstTimeout = observableNever();
	    }
	    other || (other = observableThrow(new Error('Timeout')));
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var subscription = new SerialDisposable(),
	          timer = new SerialDisposable(),
	          original = new SingleAssignmentDisposable();

	      subscription.setDisposable(original);

	      var id = 0,
	          switched = false;

	      function setTimer(timeout) {
	        var myId = id;

	        function timerWins() {
	          return id === myId;
	        }

	        var d = new SingleAssignmentDisposable();
	        timer.setDisposable(d);
	        d.setDisposable(timeout.subscribe(function () {
	          timerWins() && subscription.setDisposable(other.subscribe(observer));
	          d.dispose();
	        }, function (e) {
	          timerWins() && observer.onError(e);
	        }, function () {
	          timerWins() && subscription.setDisposable(other.subscribe(observer));
	        }));
	      };

	      setTimer(firstTimeout);

	      function observerWins() {
	        var res = !switched;
	        if (res) {
	          id++;
	        }
	        return res;
	      }

	      original.setDisposable(source.subscribe(function (x) {
	        if (observerWins()) {
	          observer.onNext(x);
	          var timeout;
	          try {
	            timeout = timeoutdurationSelector(x);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
	        }
	      }, function (e) {
	        observerWins() && observer.onError(e);
	      }, function () {
	        observerWins() && observer.onCompleted();
	      }));
	      return new CompositeDisposable(subscription, timer);
	    }, source);
	  };

	  /**
	   * Ignores values from an observable sequence which are followed by another value within a computed throttle duration.
	   * @param {Function} durationSelector Selector function to retrieve a sequence indicating the throttle duration for each given element.
	   * @returns {Observable} The debounced sequence.
	   */
	  observableProto.debounceWithSelector = function (durationSelector) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var value,
	          hasValue = false,
	          cancelable = new SerialDisposable(),
	          id = 0;
	      var subscription = source.subscribe(function (x) {
	        var throttle;
	        try {
	          throttle = durationSelector(x);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }

	        isPromise(throttle) && (throttle = observableFromPromise(throttle));

	        hasValue = true;
	        value = x;
	        id++;
	        var currentid = id,
	            d = new SingleAssignmentDisposable();
	        cancelable.setDisposable(d);
	        d.setDisposable(throttle.subscribe(function () {
	          hasValue && id === currentid && observer.onNext(value);
	          hasValue = false;
	          d.dispose();
	        }, observer.onError.bind(observer), function () {
	          hasValue && id === currentid && observer.onNext(value);
	          hasValue = false;
	          d.dispose();
	        }));
	      }, function (e) {
	        cancelable.dispose();
	        observer.onError(e);
	        hasValue = false;
	        id++;
	      }, function () {
	        cancelable.dispose();
	        hasValue && observer.onNext(value);
	        observer.onCompleted();
	        hasValue = false;
	        id++;
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    }, source);
	  };

	  /**
	   * @deprecated use #debounceWithSelector instead.
	   */
	  observableProto.throttleWithSelector = function (durationSelector) {
	    //deprecate('throttleWithSelector', 'debounceWithSelector');
	    return this.debounceWithSelector(durationSelector);
	  };

	  /**
	   *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   *
	   *  1 - res = source.skipLastWithTime(5000);
	   *  2 - res = source.skipLastWithTime(5000, scheduler);
	   *
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for skipping elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.
	   */
	  observableProto.skipLastWithTime = function (duration, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          o.onNext(q.shift().value);
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        var now = scheduler.now();
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          o.onNext(q.shift().value);
	        }
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          q.shift();
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        var now = scheduler.now();
	        while (q.length > 0) {
	          var next = q.shift();
	          if (now - next.interval <= duration) {
	            o.onNext(next.value);
	          }
	        }
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastBufferWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          q.shift();
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        var now = scheduler.now(),
	            res = [];
	        while (q.length > 0) {
	          var next = q.shift();
	          now - next.interval <= duration && res.push(next.value);
	        }
	        o.onNext(res);
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.takeWithTime(5000,  [optional scheduler]);
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.
	   */
	  observableProto.takeWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function () {
	        o.onCompleted();
	      }), source.subscribe(o));
	    }, source);
	  };

	  /**
	   *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.skipWithTime(5000, [optional scheduler]);
	   *
	   * @description
	   *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.
	   *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
	   *  may not execute immediately, despite the zero due time.
	   *
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.
	   * @param {Number} duration Duration for skipping elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.
	   */
	  observableProto.skipWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var open = false;
	      return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function () {
	        open = true;
	      }), source.subscribe(function (x) {
	        open && observer.onNext(x);
	      }, observer.onError.bind(observer), observer.onCompleted.bind(observer)));
	    }, source);
	  };

	  /**
	   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.
	   *
	   * @examples
	   *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);
	   *  2 - res = source.skipUntilWithTime(5000, [scheduler]);
	   * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped until the specified start time.
	   */
	  observableProto.skipUntilWithTime = function (startTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this,
	        schedulerMethod = startTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';
	    return new AnonymousObservable(function (o) {
	      var open = false;

	      return new CompositeDisposable(scheduler[schedulerMethod](startTime, function () {
	        open = true;
	      }), source.subscribe(function (x) {
	        open && o.onNext(x);
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      }));
	    }, source);
	  };

	  /**
	   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
	   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on.
	   * @returns {Observable} An observable sequence with the elements taken until the specified end time.
	   */
	  observableProto.takeUntilWithTime = function (endTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this,
	        schedulerMethod = endTime instanceof Date ? 'scheduleWithAbsolute' : 'scheduleWithRelative';
	    return new AnonymousObservable(function (o) {
	      return new CompositeDisposable(scheduler[schedulerMethod](endTime, function () {
	        o.onCompleted();
	      }), source.subscribe(o));
	    }, source);
	  };

	  /**
	   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
	   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item
	   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
	   * @returns {Observable} An Observable that performs the throttle operation.
	   */
	  observableProto.throttleFirst = function (windowDuration, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var duration = +windowDuration || 0;
	    if (duration <= 0) {
	      throw new RangeError('windowDuration cannot be less or equal zero.');
	    }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var lastOnNext = 0;
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        if (lastOnNext === 0 || now - lastOnNext >= duration) {
	          lastOnNext = now;
	          o.onNext(x);
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        o.onCompleted();
	      });
	    }, source);
	  };

	  /**
	   * Executes a transducer to transform the observable sequence
	   * @param {Transducer} transducer A transducer to execute
	   * @returns {Observable} An Observable sequence containing the results from the transducer.
	   */
	  observableProto.transduce = function (transducer) {
	    var source = this;

	    function transformForObserver(o) {
	      return {
	        '@@transducer/init': function transducerInit() {
	          return o;
	        },
	        '@@transducer/step': function transducerStep(obs, input) {
	          return obs.onNext(input);
	        },
	        '@@transducer/result': function transducerResult(obs) {
	          return obs.onCompleted();
	        }
	      };
	    }

	    return new AnonymousObservable(function (o) {
	      var xform = transducer(transformForObserver(o));
	      return source.subscribe(function (v) {
	        try {
	          xform['@@transducer/step'](o, v);
	        } catch (e) {
	          o.onError(e);
	        }
	      }, function (e) {
	        o.onError(e);
	      }, function () {
	        xform['@@transducer/result'](o);
	      });
	    }, source);
	  };

	  /*
	   * Performs a exclusive waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.
	   */
	  observableProto.exclusive = function () {
	    var sources = this;
	    return new AnonymousObservable(function (observer) {
	      var hasCurrent = false,
	          isStopped = false,
	          m = new SingleAssignmentDisposable(),
	          g = new CompositeDisposable();

	      g.add(m);

	      m.setDisposable(sources.subscribe(function (innerSource) {
	        if (!hasCurrent) {
	          hasCurrent = true;

	          isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	          var innerSubscription = new SingleAssignmentDisposable();
	          g.add(innerSubscription);

	          innerSubscription.setDisposable(innerSource.subscribe(observer.onNext.bind(observer), observer.onError.bind(observer), function () {
	            g.remove(innerSubscription);
	            hasCurrent = false;
	            if (isStopped && g.length === 1) {
	              observer.onCompleted();
	            }
	          }));
	        }
	      }, observer.onError.bind(observer), function () {
	        isStopped = true;
	        if (!hasCurrent && g.length === 1) {
	          observer.onCompleted();
	        }
	      }));

	      return g;
	    }, this);
	  };

	  /*
	   * Performs a exclusive map waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @param {Function} selector Selector to invoke for every item in the current subscription.
	   * @param {Any} [thisArg] An optional context to invoke with the selector parameter.
	   * @returns {Observable} An exclusive observable with only the results that happen when subscribed.
	   */
	  observableProto.exclusiveMap = function (selector, thisArg) {
	    var sources = this,
	        selectorFunc = bindCallback(selector, thisArg, 3);
	    return new AnonymousObservable(function (observer) {
	      var index = 0,
	          hasCurrent = false,
	          isStopped = true,
	          m = new SingleAssignmentDisposable(),
	          g = new CompositeDisposable();

	      g.add(m);

	      m.setDisposable(sources.subscribe(function (innerSource) {

	        if (!hasCurrent) {
	          hasCurrent = true;

	          innerSubscription = new SingleAssignmentDisposable();
	          g.add(innerSubscription);

	          isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));

	          innerSubscription.setDisposable(innerSource.subscribe(function (x) {
	            var result;
	            try {
	              result = selectorFunc(x, index++, innerSource);
	            } catch (e) {
	              observer.onError(e);
	              return;
	            }

	            observer.onNext(result);
	          }, function (e) {
	            observer.onError(e);
	          }, function () {
	            g.remove(innerSubscription);
	            hasCurrent = false;

	            if (isStopped && g.length === 1) {
	              observer.onCompleted();
	            }
	          }));
	        }
	      }, function (e) {
	        observer.onError(e);
	      }, function () {
	        isStopped = true;
	        if (g.length === 1 && !hasCurrent) {
	          observer.onCompleted();
	        }
	      }));
	      return g;
	    }, this);
	  };

	  /** Provides a set of extension methods for virtual time scheduling. */
	  Rx.VirtualTimeScheduler = (function (__super__) {

	    function localNow() {
	      return this.toDateTimeOffset(this.clock);
	    }

	    function scheduleNow(state, action) {
	      return this.scheduleAbsoluteWithState(state, this.clock, action);
	    }

	    function scheduleRelative(state, dueTime, action) {
	      return this.scheduleRelativeWithState(state, this.toRelative(dueTime), action);
	    }

	    function scheduleAbsolute(state, dueTime, action) {
	      return this.scheduleRelativeWithState(state, this.toRelative(dueTime - this.now()), action);
	    }

	    function invokeAction(scheduler, action) {
	      action();
	      return disposableEmpty;
	    }

	    inherits(VirtualTimeScheduler, __super__);

	    /**
	     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
	     *
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function VirtualTimeScheduler(initialClock, comparer) {
	      this.clock = initialClock;
	      this.comparer = comparer;
	      this.isEnabled = false;
	      this.queue = new PriorityQueue(1024);
	      __super__.call(this, localNow, scheduleNow, scheduleRelative, scheduleAbsolute);
	    }

	    var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;

	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    VirtualTimeSchedulerPrototype.add = notImplemented;

	    /**
	     * Converts an absolute time to a number
	     * @param {Any} The absolute time.
	     * @returns {Number} The absolute time in ms
	     */
	    VirtualTimeSchedulerPrototype.toDateTimeOffset = notImplemented;

	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    VirtualTimeSchedulerPrototype.toRelative = notImplemented;

	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.schedulePeriodicWithState = function (state, period, action) {
	      var s = new SchedulePeriodicRecursive(this, state, period, action);
	      return s.start();
	    };

	    /**
	     * Schedules an action to be executed after dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleRelativeWithState = function (state, dueTime, action) {
	      var runAt = this.add(this.clock, dueTime);
	      return this.scheduleAbsoluteWithState(state, runAt, action);
	    };

	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleRelative = function (dueTime, action) {
	      return this.scheduleRelativeWithState(action, dueTime, invokeAction);
	    };

	    /**
	     * Starts the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.start = function () {
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	      }
	    };

	    /**
	     * Stops the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.stop = function () {
	      this.isEnabled = false;
	    };

	    /**
	     * Advances the scheduler's clock to the specified time, running all work till that point.
	     * @param {Number} time Absolute time to advance the scheduler's clock to.
	     */
	    VirtualTimeSchedulerPrototype.advanceTo = function (time) {
	      var dueToClock = this.comparer(this.clock, time);
	      if (this.comparer(this.clock, time) > 0) {
	        throw new ArgumentOutOfRangeError();
	      }
	      if (dueToClock === 0) {
	        return;
	      }
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null && this.comparer(next.dueTime, time) <= 0) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	        this.clock = time;
	      }
	    };

	    /**
	     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.advanceBy = function (time) {
	      var dt = this.add(this.clock, time),
	          dueToClock = this.comparer(this.clock, dt);
	      if (dueToClock > 0) {
	        throw new ArgumentOutOfRangeError();
	      }
	      if (dueToClock === 0) {
	        return;
	      }

	      this.advanceTo(dt);
	    };

	    /**
	     * Advances the scheduler's clock by the specified relative time.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.sleep = function (time) {
	      var dt = this.add(this.clock, time);
	      if (this.comparer(this.clock, dt) >= 0) {
	        throw new ArgumentOutOfRangeError();
	      }

	      this.clock = dt;
	    };

	    /**
	     * Gets the next scheduled item to be executed.
	     * @returns {ScheduledItem} The next scheduled item.
	     */
	    VirtualTimeSchedulerPrototype.getNext = function () {
	      while (this.queue.length > 0) {
	        var next = this.queue.peek();
	        if (next.isCancelled()) {
	          this.queue.dequeue();
	        } else {
	          return next;
	        }
	      }
	      return null;
	    };

	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Scheduler} scheduler Scheduler to execute the action on.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleAbsolute = function (dueTime, action) {
	      return this.scheduleAbsoluteWithState(action, dueTime, invokeAction);
	    };

	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleAbsoluteWithState = function (state, dueTime, action) {
	      var self = this;

	      function run(scheduler, state1) {
	        self.queue.remove(si);
	        return action(scheduler, state1);
	      }

	      var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
	      this.queue.enqueue(si);

	      return si.disposable;
	    };

	    return VirtualTimeScheduler;
	  })(Scheduler);

	  /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */
	  Rx.HistoricalScheduler = (function (__super__) {
	    inherits(HistoricalScheduler, __super__);

	    /**
	     * Creates a new historical scheduler with the specified initial clock value.
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function HistoricalScheduler(initialClock, comparer) {
	      var clock = initialClock == null ? 0 : initialClock;
	      var cmp = comparer || defaultSubComparer;
	      __super__.call(this, clock, cmp);
	    }

	    var HistoricalSchedulerProto = HistoricalScheduler.prototype;

	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    HistoricalSchedulerProto.add = function (absolute, relative) {
	      return absolute + relative;
	    };

	    HistoricalSchedulerProto.toDateTimeOffset = function (absolute) {
	      return new Date(absolute).getTime();
	    };

	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @memberOf HistoricalScheduler
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    HistoricalSchedulerProto.toRelative = function (timeSpan) {
	      return timeSpan;
	    };

	    return HistoricalScheduler;
	  })(Rx.VirtualTimeScheduler);

	  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) {
	    inherits(AnonymousObservable, __super__);

	    // Fix subscriber to check for undefined or function returned to decorate as Disposable
	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber : isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }

	    function setDisposable(s, state) {
	      var ado = state[0],
	          subscribe = state[1];
	      var sub = tryCatch(subscribe)(ado);

	      if (sub === errorObj) {
	        if (!ado.fail(errorObj.e)) {
	          return thrower(errorObj.e);
	        }
	      }
	      ado.setDisposable(fixSubscriber(sub));
	    }

	    function AnonymousObservable(subscribe, parent) {
	      this.source = parent;

	      function s(observer) {
	        var ado = new AutoDetachObserver(observer),
	            state = [ado, subscribe];

	        if (currentThreadScheduler.scheduleRequired()) {
	          currentThreadScheduler.scheduleWithState(state, setDisposable);
	        } else {
	          setDisposable(null, state);
	        }
	        return ado;
	      }

	      __super__.call(this, s);
	    }

	    return AnonymousObservable;
	  })(Observable);

	  var AutoDetachObserver = (function (__super__) {
	    inherits(AutoDetachObserver, __super__);

	    function AutoDetachObserver(observer) {
	      __super__.call(this);
	      this.observer = observer;
	      this.m = new SingleAssignmentDisposable();
	    }

	    var AutoDetachObserverPrototype = AutoDetachObserver.prototype;

	    AutoDetachObserverPrototype.next = function (value) {
	      var result = tryCatch(this.observer.onNext).call(this.observer, value);
	      if (result === errorObj) {
	        this.dispose();
	        thrower(result.e);
	      }
	    };

	    AutoDetachObserverPrototype.error = function (err) {
	      var result = tryCatch(this.observer.onError).call(this.observer, err);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };

	    AutoDetachObserverPrototype.completed = function () {
	      var result = tryCatch(this.observer.onCompleted).call(this.observer);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };

	    AutoDetachObserverPrototype.setDisposable = function (value) {
	      this.m.setDisposable(value);
	    };
	    AutoDetachObserverPrototype.getDisposable = function () {
	      return this.m.getDisposable();
	    };

	    AutoDetachObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.m.dispose();
	    };

	    return AutoDetachObserver;
	  })(AbstractObserver);

	  var GroupedObservable = (function (__super__) {
	    inherits(GroupedObservable, __super__);

	    function subscribe(observer) {
	      return this.underlyingObservable.subscribe(observer);
	    }

	    function GroupedObservable(key, underlyingObservable, mergedDisposable) {
	      __super__.call(this, subscribe);
	      this.key = key;
	      this.underlyingObservable = !mergedDisposable ? underlyingObservable : new AnonymousObservable(function (observer) {
	        return new CompositeDisposable(mergedDisposable.getDisposable(), underlyingObservable.subscribe(observer));
	      });
	    }

	    return GroupedObservable;
	  })(Observable);

	  /**
	   *  Represents an object that is both an observable sequence as well as an observer.
	   *  Each notification is broadcasted to all subscribed observers.
	   */
	  var Subject = Rx.Subject = (function (__super__) {
	    function subscribe(observer) {
	      checkDisposed(this);
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        return new InnerSubscription(this, observer);
	      }
	      if (this.hasError) {
	        observer.onError(this.error);
	        return disposableEmpty;
	      }
	      observer.onCompleted();
	      return disposableEmpty;
	    }

	    inherits(Subject, __super__);

	    /**
	     * Creates a subject.
	     */
	    function Subject() {
	      __super__.call(this, subscribe);
	      this.isDisposed = false, this.isStopped = false, this.observers = [];
	      this.hasError = false;
	    }

	    addProperties(Subject.prototype, Observer.prototype, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function hasObservers() {
	        return this.observers.length > 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function onCompleted() {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onCompleted();
	          }

	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function onError(error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.error = error;
	          this.hasError = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }

	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function onNext(value) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onNext(value);
	          }
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function dispose() {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });

	    /**
	     * Creates a subject from the specified observer and observable.
	     * @param {Observer} observer The observer used to send messages to the subject.
	     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
	     * @returns {Subject} Subject implemented using the given observer and observable.
	     */
	    Subject.create = function (observer, observable) {
	      return new AnonymousSubject(observer, observable);
	    };

	    return Subject;
	  })(Observable);

	  /**
	   *  Represents the result of an asynchronous operation.
	   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
	   */
	  var AsyncSubject = Rx.AsyncSubject = (function (__super__) {

	    function subscribe(observer) {
	      checkDisposed(this);

	      if (!this.isStopped) {
	        this.observers.push(observer);
	        return new InnerSubscription(this, observer);
	      }

	      if (this.hasError) {
	        observer.onError(this.error);
	      } else if (this.hasValue) {
	        observer.onNext(this.value);
	        observer.onCompleted();
	      } else {
	        observer.onCompleted();
	      }

	      return disposableEmpty;
	    }

	    inherits(AsyncSubject, __super__);

	    /**
	     * Creates a subject that can only receive one value and that value is cached for all future observations.
	     * @constructor
	     */
	    function AsyncSubject() {
	      __super__.call(this, subscribe);

	      this.isDisposed = false;
	      this.isStopped = false;
	      this.hasValue = false;
	      this.observers = [];
	      this.hasError = false;
	    }

	    addProperties(AsyncSubject.prototype, Observer, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function hasObservers() {
	        checkDisposed(this);
	        return this.observers.length > 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
	       */
	      onCompleted: function onCompleted() {
	        var i, len;
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          var os = cloneArray(this.observers),
	              len = os.length;

	          if (this.hasValue) {
	            for (i = 0; i < len; i++) {
	              var o = os[i];
	              o.onNext(this.value);
	              o.onCompleted();
	            }
	          } else {
	            for (i = 0; i < len; i++) {
	              os[i].onCompleted();
	            }
	          }

	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the error.
	       * @param {Mixed} error The Error to send to all observers.
	       */
	      onError: function onError(error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.hasError = true;
	          this.error = error;

	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }

	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
	       * @param {Mixed} value The value to store in the subject.
	       */
	      onNext: function onNext(value) {
	        checkDisposed(this);
	        if (this.isStopped) {
	          return;
	        }
	        this.value = value;
	        this.hasValue = true;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function dispose() {
	        this.isDisposed = true;
	        this.observers = null;
	        this.exception = null;
	        this.value = null;
	      }
	    });

	    return AsyncSubject;
	  })(Observable);

	  var AnonymousSubject = Rx.AnonymousSubject = (function (__super__) {
	    inherits(AnonymousSubject, __super__);

	    function subscribe(observer) {
	      return this.observable.subscribe(observer);
	    }

	    function AnonymousSubject(observer, observable) {
	      this.observer = observer;
	      this.observable = observable;
	      __super__.call(this, subscribe);
	    }

	    addProperties(AnonymousSubject.prototype, Observer.prototype, {
	      onCompleted: function onCompleted() {
	        this.observer.onCompleted();
	      },
	      onError: function onError(error) {
	        this.observer.onError(error);
	      },
	      onNext: function onNext(value) {
	        this.observer.onNext(value);
	      }
	    });

	    return AnonymousSubject;
	  })(Observable);

	  /**
	  * Used to pause and resume streams.
	  */
	  Rx.Pauser = (function (__super__) {
	    inherits(Pauser, __super__);

	    function Pauser() {
	      __super__.call(this);
	    }

	    /**
	     * Pauses the underlying sequence.
	     */
	    Pauser.prototype.pause = function () {
	      this.onNext(false);
	    };

	    /**
	    * Resumes the underlying sequence.
	    */
	    Pauser.prototype.resume = function () {
	      this.onNext(true);
	    };

	    return Pauser;
	  })(Subject);

	  if (true) {
	    root.Rx = Rx;

	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return Rx;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (freeExports && freeModule) {
	    // in Node.js or RingoJS
	    if (moduleExports) {
	      (freeModule.exports = Rx).Rx = Rx;
	    } else {
	      freeExports.Rx = Rx;
	    }
	  } else {
	    // in a browser or Rhino
	    root.Rx = Rx;
	  }

	  // All code before this point will be filtered from stack traces.
	  var rEndingLine = captureLine();
	}).call(this);

	// but treat `-0` vs. `+0` as not equal
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(157)(module), (function() { return this; }()), __webpack_require__(91)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var async_1 = __webpack_require__(155);
	var lang_1 = __webpack_require__(118);
	var pipe_1 = __webpack_require__(140);
	/**
	 * Implements async bindings to Promise.
	 *
	 * # Example
	 *
	 * In this example we bind the description promise to the DOM.
	 * The async pipe will convert a promise to the value with which it is resolved. It will also
	 * request a change detection check when the promise is resolved.
	 *
	 *  ```
	 * @Component({
	 *   selector: "task-cmp",
	 *   changeDetection: ON_PUSH
	 * })
	 * @View({
	 *   template: "Task Description {{ description | async }}"
	 * })
	 * class Task {
	 *   description:Promise<string>;
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var PromisePipe = (function (_super) {
	    __extends(PromisePipe, _super);
	    function PromisePipe(ref) {
	        _super.call(this);
	        this._ref = ref;
	        this._latestValue = null;
	        this._latestReturnedValue = null;
	    }
	    PromisePipe.prototype.supports = function (promise) {
	        return async_1.PromiseWrapper.isPromise(promise);
	    };
	    PromisePipe.prototype.onDestroy = function () {
	        if (lang_1.isPresent(this._sourcePromise)) {
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._sourcePromise = null;
	        }
	    };
	    PromisePipe.prototype.transform = function (promise) {
	        var _this = this;
	        if (lang_1.isBlank(this._sourcePromise)) {
	            this._sourcePromise = promise;
	            promise.then(function (val) {
	                if (_this._sourcePromise === promise) {
	                    _this._updateLatestValue(val);
	                }
	            });
	            return null;
	        }
	        if (promise !== this._sourcePromise) {
	            this._sourcePromise = null;
	            return this.transform(promise);
	        }
	        if (this._latestValue === this._latestReturnedValue) {
	            return this._latestReturnedValue;
	        } else {
	            this._latestReturnedValue = this._latestValue;
	            return pipe_1.WrappedValue.wrap(this._latestValue);
	        }
	    };
	    PromisePipe.prototype._updateLatestValue = function (value) {
	        this._latestValue = value;
	        this._ref.requestCheck();
	    };
	    return PromisePipe;
	})(pipe_1.Pipe);
	exports.PromisePipe = PromisePipe;
	/**
	 * Provides a factory for [PromisePipe].
	 *
	 * @exportedAs angular2/pipes
	 */
	var PromisePipeFactory = (function () {
	    function PromisePipeFactory() {}
	    PromisePipeFactory.prototype.supports = function (promise) {
	        return async_1.PromiseWrapper.isPromise(promise);
	    };
	    PromisePipeFactory.prototype.create = function (cdRef) {
	        return new PromisePipe(cdRef);
	    };
	    return PromisePipeFactory;
	})();
	exports.PromisePipeFactory = PromisePipeFactory;
	exports.__esModule = true;
	//# sourceMappingURL=promise_pipe.js.map

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var pipe_1 = __webpack_require__(140);
	/**
	 * Implements uppercase transforms to text.
	 *
	 * # Example
	 *
	 * In this example we transform the user text uppercase.
	 *
	 *  ```
	 * @Component({
	 *   selector: "username-cmp"
	 * })
	 * @View({
	 *   template: "Username: {{ user | uppercase }}"
	 * })
	 * class Username {
	 *   user:string;
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var UpperCasePipe = (function (_super) {
	    __extends(UpperCasePipe, _super);
	    function UpperCasePipe() {
	        _super.call(this);
	        this._latestValue = null;
	    }
	    UpperCasePipe.prototype.supports = function (str) {
	        return lang_1.isString(str);
	    };
	    UpperCasePipe.prototype.onDestroy = function () {
	        this._latestValue = null;
	    };
	    UpperCasePipe.prototype.transform = function (value) {
	        if (this._latestValue !== value) {
	            this._latestValue = value;
	            return lang_1.StringWrapper.toUpperCase(value);
	        } else {
	            return this._latestValue;
	        }
	    };
	    return UpperCasePipe;
	})(pipe_1.Pipe);
	exports.UpperCasePipe = UpperCasePipe;
	/**
	 * @exportedAs angular2/pipes
	 */
	var UpperCaseFactory = (function () {
	    function UpperCaseFactory() {}
	    UpperCaseFactory.prototype.supports = function (str) {
	        return lang_1.isString(str);
	    };
	    UpperCaseFactory.prototype.create = function () {
	        return new UpperCasePipe();
	    };
	    return UpperCaseFactory;
	})();
	exports.UpperCaseFactory = UpperCaseFactory;
	exports.__esModule = true;
	//# sourceMappingURL=uppercase_pipe.js.map

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	var pipe_1 = __webpack_require__(140);
	/**
	 * Implements json transforms to any object.
	 *
	 * # Example
	 *
	 * In this example we transform the user object to json.
	 *
	 *  ```
	 * @Component({
	 *   selector: "user-cmp"
	 * })
	 * @View({
	 *   template: "User: {{ user | json }}"
	 * })
	 * class Username {
	 *  user:Object
	 *  constructor() {
	 *    this.user = { name: "PatrickJS" };
	 *  }
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/pipes
	 */
	var JsonPipe = (function (_super) {
	    __extends(JsonPipe, _super);
	    function JsonPipe() {
	        _super.call(this);
	        this._latestRef = null;
	        this._latestValue = null;
	    }
	    JsonPipe.prototype.onDestroy = function () {
	        if (lang_1.isPresent(this._latestValue)) {
	            this._latestRef = null;
	            this._latestValue = null;
	        }
	    };
	    JsonPipe.prototype.supports = function (obj) {
	        return true;
	    };
	    JsonPipe.prototype.transform = function (value) {
	        if (value === this._latestRef) {
	            return this._latestValue;
	        } else {
	            return this._prettyPrint(value);
	        }
	    };
	    JsonPipe.prototype._prettyPrint = function (value) {
	        this._latestRef = value;
	        this._latestValue = lang_1.Json.stringify(value);
	        return this._latestValue;
	    };
	    return JsonPipe;
	})(pipe_1.Pipe);
	exports.JsonPipe = JsonPipe;
	/**
	 * Provides a factory for [JsonPipeFactory].
	 *
	 * @exportedAs angular2/pipes
	 */
	var JsonPipeFactory = (function (_super) {
	    __extends(JsonPipeFactory, _super);
	    function JsonPipeFactory() {
	        _super.call(this);
	    }
	    JsonPipeFactory.prototype.supports = function (obj) {
	        return true;
	    };
	    JsonPipeFactory.prototype.create = function (cdRef) {
	        return new JsonPipe();
	    };
	    JsonPipeFactory = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [])], JsonPipeFactory);
	    return JsonPipeFactory;
	})(pipe_1.PipeFactory);
	exports.JsonPipeFactory = JsonPipeFactory;
	exports.__esModule = true;
	//# sourceMappingURL=json_pipe.js.map

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	/**
	 * Declares the available HTML templates for an application.
	 *
	 * Each angular component requires a single `@Component` and at least one `@View` annotation. The
	 * @View
	 * annotation specifies the HTML template to use, and lists the directives that are active within
	 * the template.
	 *
	 * When a component is instantiated, the template is loaded into the component's shadow root, and
	 * the
	 * expressions and statements in the template are evaluated against the component.
	 *
	 * For details on the `@Component` annotation, see {@link Component}.
	 *
	 * ## Example
	 *
	 * ```
	 * @Component({
	 *   selector: 'greet'
	 * })
	 * @View({
	 *   template: 'Hello {{name}}!',
	 *   directives: [GreetUser, Bold]
	 * })
	 * class Greet {
	 *   name: string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/annotations
	 */
	var View = (function () {
	    function View(_a) {
	        var _b = _a === void 0 ? {} : _a,
	            templateUrl = _b.templateUrl,
	            template = _b.template,
	            directives = _b.directives,
	            renderer = _b.renderer;
	        this.templateUrl = templateUrl;
	        this.template = template;
	        this.directives = directives;
	        this.renderer = renderer;
	    }
	    View = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [Object])], View);
	    return View;
	})();
	exports.View = View;
	exports.__esModule = true;
	//# sourceMappingURL=view.js.map

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var dom_adapter_1 = __webpack_require__(163);
	var lang_1 = __webpack_require__(118);
	var view_1 = __webpack_require__(164);
	/**
	 * @exportedAs angular2/view
	 */
	var ElementRef = (function () {
	    function ElementRef(parentView, boundElementIndex) {
	        this.parentView = parentView;
	        this.boundElementIndex = boundElementIndex;
	    }
	    Object.defineProperty(ElementRef.prototype, 'domElement', {
	        /**
	         * Exposes the underlying DOM element.
	         * (DEPRECATED way of accessing the DOM, replacement coming)
	         */
	        // TODO(tbosch): Here we expose the real DOM element.
	        // We need a more general way to read/write to the DOM element
	        // via a proper abstraction in the render layer
	        get: function get() {
	            return view_1.resolveInternalDomView(this.parentView.render).boundElements[this.boundElementIndex];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Gets an attribute from the underlying DOM element.
	     * (DEPRECATED way of accessing the DOM, replacement coming)
	     */
	    // TODO(tbosch): Here we expose the real DOM element.
	    // We need a more general way to read/write to the DOM element
	    // via a proper abstraction in the render layer
	    ElementRef.prototype.getAttribute = function (name) {
	        return lang_1.normalizeBlank(dom_adapter_1.DOM.getAttribute(this.domElement, name));
	    };
	    return ElementRef;
	})();
	exports.ElementRef = ElementRef;
	exports.__esModule = true;
	//# sourceMappingURL=element_ref.js.map

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	exports.DOM;
	function setRootDomAdapter(adapter) {
	    if (lang_1.isBlank(exports.DOM)) {
	        exports.DOM = adapter;
	    }
	}
	exports.setRootDomAdapter = setRootDomAdapter;
	function _abstract() {
	    return new lang_1.BaseException('This method is abstract');
	}
	/**
	 * Provides DOM operations in an environment-agnostic way.
	 */
	var DomAdapter = (function () {
	    function DomAdapter() {}
	    DomAdapter.prototype.logError = function (error) {
	        throw _abstract();
	    };
	    Object.defineProperty(DomAdapter.prototype, 'attrToPropMap', {
	        /**
	         * Maps attribute names to their corresponding property names for cases
	         * where attribute name doesn't match property name.
	         */
	        get: function get() {
	            throw _abstract();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DomAdapter.prototype.parse = function (templateHtml) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.query = function (selector) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.querySelector = function (el, selector) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.querySelectorAll = function (el, selector) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.on = function (el, evt, listener) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.dispatchEvent = function (el, evt) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.createMouseEvent = function (eventType) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.createEvent = function (eventType) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getInnerHTML = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getOuterHTML = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.nodeName = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.nodeValue = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.type = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.content = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.firstChild = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.nextSibling = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.parentElement = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.childNodes = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.childNodesAsList = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.clearNodes = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.appendChild = function (el, node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.removeChild = function (el, node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.remove = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.insertBefore = function (el, node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.insertAllBefore = function (el, nodes) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.insertAfter = function (el, node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.setInnerHTML = function (el, value) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getText = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.setText = function (el, value) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getValue = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.setValue = function (el, value) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getChecked = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.setChecked = function (el, value) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.createTemplate = function (html) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) {
	            doc = null;
	        }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) {
	            doc = null;
	        }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) {
	            doc = null;
	        }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) {
	            doc = null;
	        }
	        throw _abstract();
	    };
	    DomAdapter.prototype.createShadowRoot = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getShadowRoot = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getHost = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getDistributedNodes = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.clone = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.hasProperty = function (element, name) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getElementsByClassName = function (element, name) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getElementsByTagName = function (element, name) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.classList = function (element) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.addClass = function (element, classname) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.removeClass = function (element, classname) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.hasClass = function (element, classname) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.setStyle = function (element, stylename, stylevalue) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.removeStyle = function (element, stylename) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getStyle = function (element, stylename) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.tagName = function (element) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.attributeMap = function (element) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.hasAttribute = function (element, attribute) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getAttribute = function (element, attribute) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.setAttribute = function (element, name, value) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.removeAttribute = function (element, attribute) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.templateAwareRoot = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.createHtmlDocument = function () {
	        throw _abstract();
	    };
	    DomAdapter.prototype.defaultDoc = function () {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getBoundingClientRect = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getTitle = function () {
	        throw _abstract();
	    };
	    DomAdapter.prototype.setTitle = function (newTitle) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.elementMatches = function (n, selector) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.isTemplateElement = function (el) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.isTextNode = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.isCommentNode = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.isElementNode = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.hasShadowRoot = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.isShadowRoot = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.importIntoDoc = function (node) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.isPageRule = function (rule) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.isStyleRule = function (rule) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.isMediaRule = function (rule) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.isKeyframesRule = function (rule) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getHref = function (element) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getEventKey = function (event) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.cssToRules = function (css) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.supportsDOMEvents = function () {
	        throw _abstract();
	    };
	    DomAdapter.prototype.supportsNativeShadowDOM = function () {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getGlobalEventTarget = function (target) {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getHistory = function () {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getLocation = function () {
	        throw _abstract();
	    };
	    DomAdapter.prototype.getBaseHref = function () {
	        throw _abstract();
	    };
	    return DomAdapter;
	})();
	exports.DomAdapter = DomAdapter;
	exports.__esModule = true;
	//# sourceMappingURL=dom_adapter.js.map

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(163);
	var collection_1 = __webpack_require__(121);
	var change_detection_1 = __webpack_require__(122);
	var lang_1 = __webpack_require__(118);
	var api_1 = __webpack_require__(165);
	function resolveInternalDomView(viewRef) {
	    return viewRef._view;
	}
	exports.resolveInternalDomView = resolveInternalDomView;
	var DomViewRef = (function (_super) {
	    __extends(DomViewRef, _super);
	    function DomViewRef(view) {
	        _super.call(this);
	        this._view = view;
	    }
	    return DomViewRef;
	})(api_1.RenderViewRef);
	exports.DomViewRef = DomViewRef;
	var NG_BINDING_CLASS = 'ng-binding';
	/**
	 * Const of making objects: http://jsperf.com/instantiate-size-of-object
	 */
	var DomView = (function () {
	    function DomView(proto, rootNodes, boundTextNodes, boundElements, contentTags) {
	        this.proto = proto;
	        this.rootNodes = rootNodes;
	        this.boundTextNodes = boundTextNodes;
	        this.boundElements = boundElements;
	        this.contentTags = contentTags;
	        this.viewContainers = collection_1.ListWrapper.createFixedSize(boundElements.length);
	        this.lightDoms = collection_1.ListWrapper.createFixedSize(boundElements.length);
	        this.hostLightDom = null;
	        this.hydrated = false;
	        this.eventHandlerRemovers = [];
	        this.eventDispatcher = null;
	        this.shadowRoot = null;
	    }
	    DomView.prototype.getDirectParentLightDom = function (boundElementIndex) {
	        var binder = this.proto.elementBinders[boundElementIndex];
	        var destLightDom = null;
	        if (binder.parentIndex !== -1 && binder.distanceToParent === 1) {
	            destLightDom = this.lightDoms[binder.parentIndex];
	        }
	        return destLightDom;
	    };
	    DomView.prototype.setElementProperty = function (elementIndex, propertyName, value) {
	        var setter = collection_1.MapWrapper.get(this.proto.elementBinders[elementIndex].propertySetters, propertyName);
	        setter(this.boundElements[elementIndex], value);
	    };
	    DomView.prototype.callAction = function (elementIndex, actionExpression, actionArgs) {
	        var binder = this.proto.elementBinders[elementIndex];
	        var hostAction = collection_1.MapWrapper.get(binder.hostActions, actionExpression);
	        hostAction.eval(this.boundElements[elementIndex], this._localsWithAction(actionArgs));
	    };
	    DomView.prototype._localsWithAction = function (action) {
	        var map = collection_1.MapWrapper.create();
	        collection_1.MapWrapper.set(map, '$action', action);
	        return new change_detection_1.Locals(null, map);
	    };
	    DomView.prototype.setText = function (textIndex, value) {
	        dom_adapter_1.DOM.setText(this.boundTextNodes[textIndex], value);
	    };
	    DomView.prototype.dispatchEvent = function (elementIndex, eventName, event) {
	        var allowDefaultBehavior = true;
	        if (lang_1.isPresent(this.eventDispatcher)) {
	            var evalLocals = collection_1.MapWrapper.create();
	            collection_1.MapWrapper.set(evalLocals, '$event', event);
	            // TODO(tbosch): reenable this when we are parsing element properties
	            // out of action expressions
	            // var localValues = this.proto.elementBinders[elementIndex].eventLocals.eval(null, new
	            // Locals(null, evalLocals));
	            // this.eventDispatcher.dispatchEvent(elementIndex, eventName, localValues);
	            allowDefaultBehavior = this.eventDispatcher.dispatchEvent(elementIndex, eventName, evalLocals);
	            if (!allowDefaultBehavior) {
	                event.preventDefault();
	            }
	        }
	        return allowDefaultBehavior;
	    };
	    return DomView;
	})();
	exports.DomView = DomView;
	exports.__esModule = true;
	//# sourceMappingURL=view.js.map

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	/**
	 * General notes:
	 *
	 * The methods for creating / destroying views in this API are used in the AppViewHydrator
	 * and RenderViewHydrator as well.
	 *
	 * We are already parsing expressions on the render side:
	 * - this makes the ElementBinders more compact
	 *   (e.g. no need to distinguish interpolations from regular expressions from literals)
	 * - allows to retrieve which properties should be accessed from the event
	 *   by looking at the expression
	 * - we need the parse at least for the `template` attribute to match
	 *   directives in it
	 * - render compiler is not on the critical path as
	 *   its output will be stored in precompiled templates.
	 */
	var EventBinding = (function () {
	    function EventBinding(fullName, source) {
	        this.fullName = fullName;
	        this.source = source;
	    }
	    return EventBinding;
	})();
	exports.EventBinding = EventBinding;
	var ElementBinder = (function () {
	    function ElementBinder(_a) {
	        var _b = _a === void 0 ? {} : _a,
	            index = _b.index,
	            parentIndex = _b.parentIndex,
	            distanceToParent = _b.distanceToParent,
	            directives = _b.directives,
	            nestedProtoView = _b.nestedProtoView,
	            propertyBindings = _b.propertyBindings,
	            variableBindings = _b.variableBindings,
	            eventBindings = _b.eventBindings,
	            textBindings = _b.textBindings,
	            readAttributes = _b.readAttributes;
	        this.index = index;
	        this.parentIndex = parentIndex;
	        this.distanceToParent = distanceToParent;
	        this.directives = directives;
	        this.nestedProtoView = nestedProtoView;
	        this.propertyBindings = propertyBindings;
	        this.variableBindings = variableBindings;
	        this.eventBindings = eventBindings;
	        this.textBindings = textBindings;
	        this.readAttributes = readAttributes;
	    }
	    return ElementBinder;
	})();
	exports.ElementBinder = ElementBinder;
	var DirectiveBinder = (function () {
	    function DirectiveBinder(_a) {
	        var directiveIndex = _a.directiveIndex,
	            propertyBindings = _a.propertyBindings,
	            eventBindings = _a.eventBindings,
	            hostPropertyBindings = _a.hostPropertyBindings;
	        this.directiveIndex = directiveIndex;
	        this.propertyBindings = propertyBindings;
	        this.eventBindings = eventBindings;
	        this.hostPropertyBindings = hostPropertyBindings;
	    }
	    return DirectiveBinder;
	})();
	exports.DirectiveBinder = DirectiveBinder;
	var ProtoViewDto = (function () {
	    function ProtoViewDto(_a) {
	        var render = _a.render,
	            elementBinders = _a.elementBinders,
	            variableBindings = _a.variableBindings,
	            type = _a.type;
	        this.render = render;
	        this.elementBinders = elementBinders;
	        this.variableBindings = variableBindings;
	        this.type = type;
	    }
	    Object.defineProperty(ProtoViewDto, "HOST_VIEW_TYPE", {
	        // A view that contains the host element with bound
	        // component directive.
	        // Contains a view of type #COMPONENT_VIEW_TYPE.
	        get: function get() {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProtoViewDto, "COMPONENT_VIEW_TYPE", {
	        // The view of the component
	        // Can contain 0 to n views of type #EMBEDDED_VIEW_TYPE
	        get: function get() {
	            return 1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ProtoViewDto, "EMBEDDED_VIEW_TYPE", {
	        // A view that is embedded into another View via a <template> element
	        // inside of a component view
	        get: function get() {
	            return 2;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ProtoViewDto;
	})();
	exports.ProtoViewDto = ProtoViewDto;
	var DirectiveMetadata = (function () {
	    function DirectiveMetadata(_a) {
	        var id = _a.id,
	            selector = _a.selector,
	            compileChildren = _a.compileChildren,
	            events = _a.events,
	            hostListeners = _a.hostListeners,
	            hostProperties = _a.hostProperties,
	            hostAttributes = _a.hostAttributes,
	            hostActions = _a.hostActions,
	            properties = _a.properties,
	            readAttributes = _a.readAttributes,
	            type = _a.type,
	            callOnDestroy = _a.callOnDestroy,
	            callOnChange = _a.callOnChange,
	            callOnAllChangesDone = _a.callOnAllChangesDone,
	            changeDetection = _a.changeDetection;
	        this.id = id;
	        this.selector = selector;
	        this.compileChildren = lang_1.isPresent(compileChildren) ? compileChildren : true;
	        this.events = events;
	        this.hostListeners = hostListeners;
	        this.hostProperties = hostProperties;
	        this.hostAttributes = hostAttributes;
	        this.hostActions = hostActions;
	        this.properties = properties;
	        this.readAttributes = readAttributes;
	        this.type = type;
	        this.callOnDestroy = callOnDestroy;
	        this.callOnChange = callOnChange;
	        this.callOnAllChangesDone = callOnAllChangesDone;
	        this.changeDetection = changeDetection;
	    }
	    Object.defineProperty(DirectiveMetadata, "DIRECTIVE_TYPE", {
	        get: function get() {
	            return 0;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveMetadata, "COMPONENT_TYPE", {
	        get: function get() {
	            return 1;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return DirectiveMetadata;
	})();
	exports.DirectiveMetadata = DirectiveMetadata;
	// An opaque reference to a DomProtoView
	var RenderProtoViewRef = (function () {
	    function RenderProtoViewRef() {}
	    return RenderProtoViewRef;
	})();
	exports.RenderProtoViewRef = RenderProtoViewRef;
	// An opaque reference to a DomView
	var RenderViewRef = (function () {
	    function RenderViewRef() {}
	    return RenderViewRef;
	})();
	exports.RenderViewRef = RenderViewRef;
	var ViewDefinition = (function () {
	    function ViewDefinition(_a) {
	        var componentId = _a.componentId,
	            absUrl = _a.absUrl,
	            template = _a.template,
	            directives = _a.directives;
	        this.componentId = componentId;
	        this.absUrl = absUrl;
	        this.template = template;
	        this.directives = directives;
	    }
	    return ViewDefinition;
	})();
	exports.ViewDefinition = ViewDefinition;
	var RenderCompiler = (function () {
	    function RenderCompiler() {}
	    /**
	     * Creats a ProtoViewDto that contains a single nested component with the given componentId.
	     */
	    RenderCompiler.prototype.compileHost = function (directiveMetadata) {
	        return null;
	    };
	    /**
	     * Compiles a single DomProtoView. Non recursive so that
	     * we don't need to serialize all possible components over the wire,
	     * but only the needed ones based on previous calls.
	     */
	    RenderCompiler.prototype.compile = function (template) {
	        return null;
	    };
	    return RenderCompiler;
	})();
	exports.RenderCompiler = RenderCompiler;
	var Renderer = (function () {
	    function Renderer() {}
	    /**
	     * Creates a root host view that includes the given element.
	     * @param {RenderProtoViewRef} hostProtoViewRef a RenderProtoViewRef of type
	     * ProtoViewDto.HOST_VIEW_TYPE
	     * @param {any} hostElementSelector css selector for the host element (will be queried against the
	     * main document)
	     * @return {RenderViewRef} the created view
	     */
	    Renderer.prototype.createRootHostView = function (hostProtoViewRef, hostElementSelector) {
	        return null;
	    };
	    /**
	     * Detaches a free host view's element from the DOM.
	     */
	    Renderer.prototype.detachFreeHostView = function (parentHostViewRef, hostViewRef) {};
	    /**
	     * Creates a regular view out of the given ProtoView
	     */
	    Renderer.prototype.createView = function (protoViewRef) {
	        return null;
	    };
	    /**
	     * Destroys the given view after it has been dehydrated and detached
	     */
	    Renderer.prototype.destroyView = function (viewRef) {};
	    /**
	     * Attaches a componentView into the given hostView at the given element
	     */
	    Renderer.prototype.attachComponentView = function (hostViewRef, elementIndex, componentViewRef) {};
	    /**
	     * Detaches a componentView into the given hostView at the given element
	     */
	    Renderer.prototype.detachComponentView = function (hostViewRef, boundElementIndex, componentViewRef) {};
	    /**
	     * Attaches a view into a ViewContainer (in the given parentView at the given element) at the
	     * given index.
	     */
	    Renderer.prototype.attachViewInContainer = function (parentViewRef, boundElementIndex, atIndex, viewRef) {};
	    /**
	     * Detaches a view into a ViewContainer (in the given parentView at the given element) at the
	     * given index.
	     */
	    // TODO(tbosch): this should return a promise as it can be animated!
	    Renderer.prototype.detachViewInContainer = function (parentViewRef, boundElementIndex, atIndex, viewRef) {};
	    /**
	     * Hydrates a view after it has been attached. Hydration/dehydration is used for reusing views
	     * inside of the view pool.
	     */
	    Renderer.prototype.hydrateView = function (viewRef) {};
	    /**
	     * Dehydrates a view after it has been attached. Hydration/dehydration is used for reusing views
	     * inside of the view pool.
	     */
	    Renderer.prototype.dehydrateView = function (viewRef) {};
	    /**
	     * Sets a property on an element.
	     * Note: This will fail if the property was not mentioned previously as a host property
	     * in the ProtoView
	     */
	    Renderer.prototype.setElementProperty = function (viewRef, elementIndex, propertyName, propertyValue) {};
	    /**
	     * Calls an action.
	     * Note: This will fail if the action was not mentioned previously as a host action
	     * in the ProtoView
	     */
	    Renderer.prototype.callAction = function (viewRef, elementIndex, actionExpression, actionArgs) {};
	    /**
	     * Sets the value of a text node.
	     */
	    Renderer.prototype.setText = function (viewRef, textNodeIndex, text) {};
	    /**
	     * Sets the dispatcher for all events of the given view
	     */
	    Renderer.prototype.setEventDispatcher = function (viewRef, dispatcher) {};
	    return Renderer;
	})();
	exports.Renderer = Renderer;
	exports.__esModule = true;
	//# sourceMappingURL=api.js.map

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var compiler_1 = __webpack_require__(175);
	var lang_1 = __webpack_require__(118);
	var view_manager_1 = __webpack_require__(178);
	var element_ref_1 = __webpack_require__(162);
	/**
	 * @exportedAs angular2/view
	 */
	var ComponentRef = (function () {
	    function ComponentRef(location, instance, dispose) {
	        this.location = location;
	        this.instance = instance;
	        this.dispose = dispose;
	    }
	    Object.defineProperty(ComponentRef.prototype, "hostView", {
	        get: function get() {
	            return this.location.parentView;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ComponentRef;
	})();
	exports.ComponentRef = ComponentRef;
	/**
	 * Service for dynamically loading a Component into an arbitrary position in the internal Angular
	 * application tree.
	 *
	 * @exportedAs angular2/view
	 */
	var DynamicComponentLoader = (function () {
	    function DynamicComponentLoader(compiler, viewManager) {
	        this._compiler = compiler;
	        this._viewManager = viewManager;
	    }
	    /**
	     * Loads a component into the location given by the provided ElementRef. The loaded component
	     * receives injection as if it in the place of the provided ElementRef.
	     */
	    DynamicComponentLoader.prototype.loadIntoExistingLocation = function (typeOrBinding, location, injector) {
	        var _this = this;
	        if (injector === void 0) {
	            injector = null;
	        }
	        var binding = this._getBinding(typeOrBinding);
	        return this._compiler.compile(binding.token).then(function (componentProtoViewRef) {
	            _this._viewManager.createDynamicComponentView(location, componentProtoViewRef, binding, injector);
	            var component = _this._viewManager.getComponent(location);
	            var dispose = function dispose() {
	                throw new lang_1.BaseException("Not implemented");
	            };
	            return new ComponentRef(location, component, dispose);
	        });
	    };
	    /**
	     * Loads a root component that is placed at the first element that matches the
	     * component's selector.
	     * The loaded component receives injection normally as a hosted view.
	     */
	    DynamicComponentLoader.prototype.loadAsRoot = function (typeOrBinding, overrideSelector, injector) {
	        var _this = this;
	        if (overrideSelector === void 0) {
	            overrideSelector = null;
	        }
	        if (injector === void 0) {
	            injector = null;
	        }
	        return this._compiler.compileInHost(this._getBinding(typeOrBinding)).then(function (hostProtoViewRef) {
	            var hostViewRef = _this._viewManager.createRootHostView(hostProtoViewRef, overrideSelector, injector);
	            var newLocation = new element_ref_1.ElementRef(hostViewRef, 0);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function dispose() {
	                _this._viewManager.destroyRootHostView(hostViewRef);
	            };
	            return new ComponentRef(newLocation, component, dispose);
	        });
	    };
	    /**
	     * Loads a component into a free host view that is not yet attached to
	     * a parent on the render side, although it is attached to a parent in the injector hierarchy.
	     * The loaded component receives injection normally as a hosted view.
	     */
	    DynamicComponentLoader.prototype.loadIntoNewLocation = function (typeOrBinding, parentComponentLocation, injector) {
	        var _this = this;
	        if (injector === void 0) {
	            injector = null;
	        }
	        return this._compiler.compileInHost(this._getBinding(typeOrBinding)).then(function (hostProtoViewRef) {
	            var hostViewRef = _this._viewManager.createFreeHostView(parentComponentLocation, hostProtoViewRef, injector);
	            var newLocation = new element_ref_1.ElementRef(hostViewRef, 0);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function dispose() {
	                _this._viewManager.destroyFreeHostView(parentComponentLocation, hostViewRef);
	            };
	            return new ComponentRef(newLocation, component, dispose);
	        });
	    };
	    /**
	     * Loads a component next to the provided ElementRef. The loaded component receives
	     * injection normally as a hosted view.
	     */
	    DynamicComponentLoader.prototype.loadNextToExistingLocation = function (typeOrBinding, location, injector) {
	        var _this = this;
	        if (injector === void 0) {
	            injector = null;
	        }
	        var binding = this._getBinding(typeOrBinding);
	        return this._compiler.compileInHost(binding).then(function (hostProtoViewRef) {
	            var viewContainer = _this._viewManager.getViewContainer(location);
	            var hostViewRef = viewContainer.create(hostProtoViewRef, viewContainer.length, null, injector);
	            var newLocation = new element_ref_1.ElementRef(hostViewRef, 0);
	            var component = _this._viewManager.getComponent(newLocation);
	            var dispose = function dispose() {
	                var index = viewContainer.indexOf(hostViewRef);
	                viewContainer.remove(index);
	            };
	            return new ComponentRef(newLocation, component, dispose);
	        });
	    };
	    DynamicComponentLoader.prototype._getBinding = function (typeOrBinding) {
	        var binding;
	        if (typeOrBinding instanceof di_1.Binding) {
	            binding = typeOrBinding;
	        } else {
	            binding = di_1.bind(typeOrBinding).toClass(typeOrBinding);
	        }
	        return binding;
	    };
	    DynamicComponentLoader = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [compiler_1.Compiler, view_manager_1.AppViewManager])], DynamicComponentLoader);
	    return DynamicComponentLoader;
	})();
	exports.DynamicComponentLoader = DynamicComponentLoader;
	exports.__esModule = true;
	//# sourceMappingURL=dynamic_component_loader.js.map

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module
	 * @public
	 * @description
	 * The `di` module provides dependency injection container services.
	 */
	function __export(m) {
	  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(126));
	__export(__webpack_require__(125));
	__export(__webpack_require__(171));
	var injector_1 = __webpack_require__(173);
	exports.resolveBindings = injector_1.resolveBindings;
	exports.Injector = injector_1.Injector;
	var binding_1 = __webpack_require__(168);
	exports.Binding = binding_1.Binding;
	exports.ResolvedBinding = binding_1.ResolvedBinding;
	exports.Dependency = binding_1.Dependency;
	exports.bind = binding_1.bind;
	var key_1 = __webpack_require__(169);
	exports.Key = key_1.Key;
	exports.KeyRegistry = key_1.KeyRegistry;
	exports.TypeLiteral = key_1.TypeLiteral;
	var exceptions_1 = __webpack_require__(172);
	exports.NoBindingError = exceptions_1.NoBindingError;
	exports.AbstractBindingError = exceptions_1.AbstractBindingError;
	exports.AsyncBindingError = exceptions_1.AsyncBindingError;
	exports.CyclicDependencyError = exceptions_1.CyclicDependencyError;
	exports.InstantiationError = exceptions_1.InstantiationError;
	exports.InvalidBindingError = exceptions_1.InvalidBindingError;
	exports.NoAnnotationError = exceptions_1.NoAnnotationError;
	var opaque_token_1 = __webpack_require__(174);
	exports.OpaqueToken = opaque_token_1.OpaqueToken;
	exports.__esModule = true;
	//# sourceMappingURL=di.js.map

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var reflection_1 = __webpack_require__(129);
	var key_1 = __webpack_require__(169);
	var annotations_impl_1 = __webpack_require__(119);
	var exceptions_1 = __webpack_require__(172);
	var forward_ref_1 = __webpack_require__(171);
	/**
	 * @private
	 */
	var Dependency = (function () {
	    function Dependency(key, asPromise, lazy, optional, properties) {
	        this.key = key;
	        this.asPromise = asPromise;
	        this.lazy = lazy;
	        this.optional = optional;
	        this.properties = properties;
	    }
	    Dependency.fromKey = function (key) {
	        return new Dependency(key, false, false, false, []);
	    };
	    return Dependency;
	})();
	exports.Dependency = Dependency;
	var _EMPTY_LIST = []; // TODO: make const when supported
	/**
	 * Describes how the {@link Injector} should instantiate a given token.
	 *
	 * See {@link bind}.
	 *
	 * ## Example
	 *
	 * ```javascript
	 * var injector = Injector.resolveAndCreate([
	 *   new Binding(String, { toValue: 'Hello' })
	 * ]);
	 *
	 * expect(injector.get(String)).toEqual('Hello');
	 * ```
	 *
	 * @exportedAs angular2/di
	 */
	var Binding = (function () {
	    function Binding(token, _a) {
	        var toClass = _a.toClass,
	            toValue = _a.toValue,
	            toAlias = _a.toAlias,
	            toFactory = _a.toFactory,
	            toAsyncFactory = _a.toAsyncFactory,
	            deps = _a.deps;
	        this.token = token;
	        this.toClass = toClass;
	        this.toValue = toValue;
	        this.toAlias = toAlias;
	        this.toFactory = toFactory;
	        this.toAsyncFactory = toAsyncFactory;
	        this.dependencies = deps;
	    }
	    /**
	     * Converts the {@link Binding} into {@link ResolvedBinding}.
	     *
	     * {@link Injector} internally only uses {@link ResolvedBinding}, {@link Binding} contains
	     * convenience binding syntax.
	     */
	    Binding.prototype.resolve = function () {
	        var _this = this;
	        var factoryFn;
	        var resolvedDeps;
	        var isAsync = false;
	        if (lang_1.isPresent(this.toClass)) {
	            var toClass = forward_ref_1.resolveForwardRef(this.toClass);
	            factoryFn = reflection_1.reflector.factory(toClass);
	            resolvedDeps = _dependenciesFor(toClass);
	        } else if (lang_1.isPresent(this.toAlias)) {
	            factoryFn = function (aliasInstance) {
	                return aliasInstance;
	            };
	            resolvedDeps = [Dependency.fromKey(key_1.Key.get(this.toAlias))];
	        } else if (lang_1.isPresent(this.toFactory)) {
	            factoryFn = this.toFactory;
	            resolvedDeps = _constructDependencies(this.toFactory, this.dependencies);
	        } else if (lang_1.isPresent(this.toAsyncFactory)) {
	            factoryFn = this.toAsyncFactory;
	            resolvedDeps = _constructDependencies(this.toAsyncFactory, this.dependencies);
	            isAsync = true;
	        } else {
	            factoryFn = function () {
	                return _this.toValue;
	            };
	            resolvedDeps = _EMPTY_LIST;
	        }
	        return new ResolvedBinding(key_1.Key.get(this.token), factoryFn, resolvedDeps, isAsync);
	    };
	    Binding = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [Object, Object])], Binding);
	    return Binding;
	})();
	exports.Binding = Binding;
	/**
	 * An internal resolved representation of a {@link Binding} used by the {@link Injector}.
	 *
	 * A {@link Binding} is resolved when it has a factory function. Binding to a class, alias, or
	 * value, are just convenience methods, as {@link Injector} only operates on calling factory
	 * functions.
	 *
	 * @exportedAs angular2/di
	 */
	var ResolvedBinding = (function () {
	    function ResolvedBinding(
	    /**
	     * A key, usually a `Type`.
	     */
	    key,
	    /**
	     * Factory function which can return an instance of an object represented by a key.
	     */
	    factory,
	    /**
	     * Arguments (dependencies) to the `factory` function.
	     */
	    dependencies,
	    /**
	     * Specifies whether the `factory` function returns a `Promise`.
	     */
	    providedAsPromise) {
	        this.key = key;
	        this.factory = factory;
	        this.dependencies = dependencies;
	        this.providedAsPromise = providedAsPromise;
	    }
	    return ResolvedBinding;
	})();
	exports.ResolvedBinding = ResolvedBinding;
	/**
	 * Provides an API for imperatively constructing {@link Binding}s.
	 *
	 * This is only relevant for JavaScript. See {@link BindingBuilder}.
	 *
	 * ## Example
	 *
	 * ```javascript
	 * bind(MyInterface).toClass(MyClass)
	 *
	 * ```
	 *
	 * @exportedAs angular2/di
	 */
	function bind(token) {
	    return new BindingBuilder(token);
	}
	exports.bind = bind;
	/**
	 * Helper class for the {@link bind} function.
	 *
	 * @exportedAs angular2/di
	 */
	var BindingBuilder = (function () {
	    function BindingBuilder(token) {
	        this.token = token;
	    }
	    /**
	     * Binds an interface to an implementation / subclass.
	     *
	     * ## Example
	     *
	     * Because `toAlias` and `toClass` are often confused, the example contains both use cases for
	     * easy comparison.
	     *
	     * ```javascript
	     *
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toClass(Car)
	     * ]);
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toAlias(Car)
	     * ]);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    BindingBuilder.prototype.toClass = function (type) {
	        return new Binding(this.token, { toClass: type });
	    };
	    /**
	     * Binds a key to a value.
	     *
	     * ## Example
	     *
	     * ```javascript
	     * var injector = Injector.resolveAndCreate([
	     *   bind(String).toValue('Hello')
	     * ]);
	     *
	     * expect(injector.get(String)).toEqual('Hello');
	     * ```
	     */
	    BindingBuilder.prototype.toValue = function (value) {
	        return new Binding(this.token, { toValue: value });
	    };
	    /**
	     * Binds a key to the alias for an existing key.
	     *
	     * An alias means that we will return the same instance as if the alias token was used. (This is
	     * in contrast to `toClass` where a separet instance of `toClass` will be returned.)
	     *
	     * ## Example
	     *
	     * Becuse `toAlias` and `toClass` are often confused, the example contains both use cases for easy
	     * comparison.
	     *
	     * ```javascript
	     *
	     * class Vehicle {}
	     *
	     * class Car extends Vehicle {}
	     *
	     * var injectorAlias = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toAlias(Car)
	     * ]);
	     * var injectorClass = Injector.resolveAndCreate([
	     *   Car,
	     *   bind(Vehicle).toClass(Car)
	     * ]);
	     *
	     * expect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));
	     * expect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);
	     *
	     * expect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));
	     * expect(injectorClass.get(Vehicle) instanceof Car).toBe(true);
	     * ```
	     */
	    BindingBuilder.prototype.toAlias = function (aliasToken) {
	        return new Binding(this.token, { toAlias: aliasToken });
	    };
	    /**
	     * Binds a key to a function which computes the value.
	     *
	     * ## Example
	     *
	     * ```javascript
	     * var injector = Injector.resolveAndCreate([
	     *   bind(Number).toFactory(() => { return 1+2; }}),
	     *   bind(String).toFactory((v) => { return "Value: " + v; }, [Number] })
	     * ]);
	     *
	     * expect(injector.get(Number)).toEqual(3);
	     * expect(injector.get(String)).toEqual('Value: 3');
	     * ```
	     */
	    BindingBuilder.prototype.toFactory = function (factoryFunction, dependencies) {
	        return new Binding(this.token, { toFactory: factoryFunction, deps: dependencies });
	    };
	    /**
	     * Binds a key to a function which computes the value asynchronously.
	     *
	     * ## Example
	     *
	     * ```javascript
	     * var injector = Injector.resolveAndCreate([
	     *   bind(Number).toAsyncFactory(() => {
	     *     return new Promise((resolve) => resolve(1 + 2));
	     *   }),
	     *   bind(String).toFactory((v) => { return "Value: " + v; }, [Number])
	     * ]);
	     *
	     * injector.asyncGet(Number).then((v) => expect(v).toBe(3));
	     * injector.asyncGet(String).then((v) => expect(v).toBe('Value: 3'));
	     * ```
	     *
	     * The interesting thing to note is that event though `Number` has an async factory, the `String`
	     * factory function takes the resolved value. This shows that the {@link Injector} delays
	     * executing of the `String` factory
	     * until after the `Number` is resolved. This can only be done if the `token` is retrieved using
	     * the `asyncGet` API in the {@link Injector}.
	     */
	    BindingBuilder.prototype.toAsyncFactory = function (factoryFunction, dependencies) {
	        return new Binding(this.token, { toAsyncFactory: factoryFunction, deps: dependencies });
	    };
	    return BindingBuilder;
	})();
	exports.BindingBuilder = BindingBuilder;
	function _constructDependencies(factoryFunction, dependencies) {
	    return lang_1.isBlank(dependencies) ? _dependenciesFor(factoryFunction) : collection_1.ListWrapper.map(dependencies, function (t) {
	        return _extractToken(factoryFunction, t);
	    });
	}
	function _dependenciesFor(typeOrFunc) {
	    var params = reflection_1.reflector.parameters(typeOrFunc);
	    if (lang_1.isBlank(params)) return [];
	    if (collection_1.ListWrapper.any(params, function (p) {
	        return lang_1.isBlank(p);
	    })) {
	        throw new exceptions_1.NoAnnotationError(typeOrFunc);
	    }
	    return collection_1.ListWrapper.map(params, function (p) {
	        return _extractToken(typeOrFunc, p);
	    });
	}
	function _extractToken(typeOrFunc, annotations) {
	    var depProps = [];
	    var token = null;
	    var optional = false;
	    var lazy = false;
	    var asPromise = false;
	    if (!collection_1.ListWrapper.isList(annotations)) {
	        return _createDependency(annotations, asPromise, lazy, optional, depProps);
	    }
	    for (var i = 0; i < annotations.length; ++i) {
	        var paramAnnotation = annotations[i];
	        if (paramAnnotation instanceof lang_1.Type) {
	            token = paramAnnotation;
	        } else if (paramAnnotation instanceof annotations_impl_1.Inject) {
	            token = paramAnnotation.token;
	        } else if (paramAnnotation instanceof annotations_impl_1.InjectPromise) {
	            token = paramAnnotation.token;
	            asPromise = true;
	        } else if (paramAnnotation instanceof annotations_impl_1.InjectLazy) {
	            token = paramAnnotation.token;
	            lazy = true;
	        } else if (paramAnnotation instanceof annotations_impl_1.Optional) {
	            optional = true;
	        } else if (paramAnnotation instanceof annotations_impl_1.DependencyAnnotation) {
	            if (lang_1.isPresent(paramAnnotation.token)) {
	                token = paramAnnotation.token;
	            }
	            collection_1.ListWrapper.push(depProps, paramAnnotation);
	        }
	    }
	    token = forward_ref_1.resolveForwardRef(token);
	    if (lang_1.isPresent(token)) {
	        return _createDependency(token, asPromise, lazy, optional, depProps);
	    } else {
	        throw new exceptions_1.NoAnnotationError(typeOrFunc);
	    }
	}
	function _createDependency(token, asPromise, lazy, optional, depProps) {
	    return new Dependency(key_1.Key.get(token), asPromise, lazy, optional, depProps);
	}
	exports.__esModule = true;
	//# sourceMappingURL=binding.js.map

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var type_literal_1 = __webpack_require__(170);
	var forward_ref_1 = __webpack_require__(171);
	var type_literal_2 = __webpack_require__(170);
	exports.TypeLiteral = type_literal_2.TypeLiteral;
	// TODO: uncoment `int` once https://github.com/angular/angular/issues/1414 is fixed
	/**
	 * A unique object used for retrieving items from the {@link Injector}.
	 *
	 * Keys have:
	 * - a system-wide unique `id`.
	 * - a `token`, usually the `Type` of the instance.
	 *
	 * Keys are used internally by the {@link Injector} because their system-wide unique `id`s allow the
	 * injector to index in arrays rather than looking up items in maps.
	 *
	 * @exportedAs angular2/di
	 */
	var Key = (function () {
	    /**
	     * @private
	     */
	    function Key(token, id) {
	        if (lang_1.isBlank(token)) {
	            throw new lang_1.BaseException('Token must be defined!');
	        }
	        this.token = token;
	        this.id = id;
	    }
	    Object.defineProperty(Key.prototype, 'displayName', {
	        get: function get() {
	            return lang_1.stringify(this.token);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves a `Key` for a token.
	     */
	    Key.get = function (token) {
	        return _globalKeyRegistry.get(forward_ref_1.resolveForwardRef(token));
	    };
	    Object.defineProperty(Key, 'numberOfKeys', {
	        /**
	         * @returns the number of keys registered in the system.
	         */
	        get: function get() {
	            return _globalKeyRegistry.numberOfKeys;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Key;
	})();
	exports.Key = Key;
	/**
	 * @private
	 */
	var KeyRegistry = (function () {
	    function KeyRegistry() {
	        this._allKeys = collection_1.MapWrapper.create();
	    }
	    KeyRegistry.prototype.get = function (token) {
	        if (token instanceof Key) return token;
	        // TODO: workaround for https://github.com/Microsoft/TypeScript/issues/3123
	        var theToken = token;
	        if (token instanceof type_literal_1.TypeLiteral) {
	            theToken = token.type;
	        }
	        token = theToken;
	        if (collection_1.MapWrapper.contains(this._allKeys, token)) {
	            return collection_1.MapWrapper.get(this._allKeys, token);
	        }
	        var newKey = new Key(token, Key.numberOfKeys);
	        collection_1.MapWrapper.set(this._allKeys, token, newKey);
	        return newKey;
	    };
	    Object.defineProperty(KeyRegistry.prototype, 'numberOfKeys', {
	        get: function get() {
	            return collection_1.MapWrapper.size(this._allKeys);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return KeyRegistry;
	})();
	exports.KeyRegistry = KeyRegistry;
	var _globalKeyRegistry = new KeyRegistry();
	exports.__esModule = true;
	//# sourceMappingURL=key.js.map

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Type literals is a Dart-only feature. This is here only so we can x-compile
	 * to multiple languages.
	 */
	var TypeLiteral = (function () {
	    function TypeLiteral() {}
	    Object.defineProperty(TypeLiteral.prototype, "type", {
	        get: function get() {
	            throw new Error("Type literals are only supported in Dart");
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TypeLiteral;
	})();
	exports.TypeLiteral = TypeLiteral;
	exports.__esModule = true;
	//# sourceMappingURL=type_literal.js.map

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Allows to refer to references which are not yet defined.
	 *
	 * This situation arises when the key which we need te refer to for the purposes of DI is declared,
	 * but not yet defined.
	 *
	 * ## Example:
	 *
	 * ```
	 * class Door {
	 *   // Incorrect way to refer to a reference which is defined later.
	 *   // This fails because `Lock` is undefined at this point.
	 *   constructor(lock:Lock) { }
	 *
	 *   // Correct way to refer to a reference which is defined later.
	 *   // The reference needs to be captured in a closure.
	 *   constructor(@Inject(forwardRef(() => Lock)) lock:Lock) { }
	 * }
	 *
	 * // Only at this point the lock is defined.
	 * class Lock {
	 * }
	 * ```
	 *
	 * @exportedAs angular2/di
	 */
	function forwardRef(forwardRefFn) {
	    forwardRefFn.__forward_ref__ = forwardRef;
	    return forwardRefFn;
	}
	exports.forwardRef = forwardRef;
	/**
	 * Lazily retrieve the reference value.
	 *
	 * See: {@link forwardRef}
	 *
	 * @exportedAs angular2/di
	 */
	function resolveForwardRef(type) {
	    if (typeof type == 'function' && type.hasOwnProperty('__forward_ref__') && type.__forward_ref__ === forwardRef) {
	        return type();
	    } else {
	        return type;
	    }
	}
	exports.resolveForwardRef = resolveForwardRef;
	exports.__esModule = true;
	//# sourceMappingURL=forward_ref.js.map

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	function findFirstClosedCycle(keys) {
	    var res = [];
	    for (var i = 0; i < keys.length; ++i) {
	        if (collection_1.ListWrapper.contains(res, keys[i])) {
	            collection_1.ListWrapper.push(res, keys[i]);
	            return res;
	        } else {
	            collection_1.ListWrapper.push(res, keys[i]);
	        }
	    }
	    return res;
	}
	function constructResolvingPath(keys) {
	    if (keys.length > 1) {
	        var reversed = findFirstClosedCycle(collection_1.ListWrapper.reversed(keys));
	        var tokenStrs = collection_1.ListWrapper.map(reversed, function (k) {
	            return lang_1.stringify(k.token);
	        });
	        return ' (' + tokenStrs.join(' -> ') + ')';
	    } else {
	        return '';
	    }
	}
	/**
	 * Base class for all errors arising from misconfigured bindings.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var AbstractBindingError = (function (_super) {
	    __extends(AbstractBindingError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function AbstractBindingError(key, constructResolvingMessage) {
	        _super.call(this);
	        this.keys = [key];
	        this.constructResolvingMessage = constructResolvingMessage;
	        this.message = this.constructResolvingMessage(this.keys);
	    }
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    AbstractBindingError.prototype.addKey = function (key) {
	        collection_1.ListWrapper.push(this.keys, key);
	        this.message = this.constructResolvingMessage(this.keys);
	    };
	    AbstractBindingError.prototype.toString = function () {
	        return this.message;
	    };
	    return AbstractBindingError;
	})(lang_1.BaseException);
	exports.AbstractBindingError = AbstractBindingError;
	/**
	 * Thrown when trying to retrieve a dependency by `Key` from {@link Injector}, but the
	 * {@link Injector} does not have a {@link Binding} for {@link Key}.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var NoBindingError = (function (_super) {
	    __extends(NoBindingError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function NoBindingError(key) {
	        _super.call(this, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return 'No provider for ' + first + '!' + constructResolvingPath(keys);
	        });
	    }
	    return NoBindingError;
	})(AbstractBindingError);
	exports.NoBindingError = NoBindingError;
	/**
	 * Thrown when trying to retrieve an async {@link Binding} using the sync API.
	 *
	 * ## Example
	 *
	 * ```javascript
	 * var injector = Injector.resolveAndCreate([
	 *   bind(Number).toAsyncFactory(() => {
	 *     return new Promise((resolve) => resolve(1 + 2));
	 *   }),
	 *   bind(String).toFactory((v) => { return "Value: " + v; }, [String])
	 * ]);
	 *
	 * injector.asyncGet(String).then((v) => expect(v).toBe('Value: 3'));
	 * expect(() => {
	 *   injector.get(String);
	 * }).toThrowError(AsycBindingError);
	 * ```
	 *
	 * The above example throws because `String` depends on `Number` which is async. If any binding in
	 * the dependency graph is async then the graph can only be retrieved using the `asyncGet` API.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var AsyncBindingError = (function (_super) {
	    __extends(AsyncBindingError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function AsyncBindingError(key) {
	        _super.call(this, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return 'Cannot instantiate ' + first + ' synchronously. It is provided as a promise!' + constructResolvingPath(keys);
	        });
	    }
	    return AsyncBindingError;
	})(AbstractBindingError);
	exports.AsyncBindingError = AsyncBindingError;
	/**
	 * Thrown when dependencies form a cycle.
	 *
	 * ## Example:
	 *
	 * ```javascript
	 * class A {
	 *   constructor(b:B) {}
	 * }
	 * class B {
	 *   constructor(a:A) {}
	 * }
	 * ```
	 *
	 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var CyclicDependencyError = (function (_super) {
	    __extends(CyclicDependencyError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function CyclicDependencyError(key) {
	        _super.call(this, key, function (keys) {
	            return 'Cannot instantiate cyclic dependency!' + constructResolvingPath(keys);
	        });
	    }
	    return CyclicDependencyError;
	})(AbstractBindingError);
	exports.CyclicDependencyError = CyclicDependencyError;
	/**
	 * Thrown when a constructing type returns with an Error.
	 *
	 * The `InstantiationError` class contains the original error plus the dependency graph which caused
	 * this object to be instantiated.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var InstantiationError = (function (_super) {
	    __extends(InstantiationError, _super);
	    // TODO(tbosch): Can't do key:Key as this results in a circular dependency!
	    function InstantiationError(cause, key) {
	        _super.call(this, key, function (keys) {
	            var first = lang_1.stringify(collection_1.ListWrapper.first(keys).token);
	            return 'Error during instantiation of ' + first + '!' + constructResolvingPath(keys) + '. ORIGINAL ERROR: ' + cause;
	        });
	        this.cause = cause;
	        this.causeKey = key;
	    }
	    return InstantiationError;
	})(AbstractBindingError);
	exports.InstantiationError = InstantiationError;
	/**
	 * Thrown when an object other then {@link Binding} (or `Type`) is passed to {@link Injector}
	 * creation.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var InvalidBindingError = (function (_super) {
	    __extends(InvalidBindingError, _super);
	    function InvalidBindingError(binding) {
	        _super.call(this);
	        this.message = 'Invalid binding - only instances of Binding and Type are allowed, got: ' + binding.toString();
	    }
	    InvalidBindingError.prototype.toString = function () {
	        return this.message;
	    };
	    return InvalidBindingError;
	})(lang_1.BaseException);
	exports.InvalidBindingError = InvalidBindingError;
	/**
	 * Thrown when the class has no annotation information.
	 *
	 * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	 * need to be injected into the constructor.
	 *
	 * @exportedAs angular2/di_errors
	 */
	var NoAnnotationError = (function (_super) {
	    __extends(NoAnnotationError, _super);
	    function NoAnnotationError(typeOrFunc) {
	        _super.call(this);
	        this.message = 'Cannot resolve all parameters for ' + lang_1.stringify(typeOrFunc) + '. ' + 'Make sure they all have valid type or annotations.';
	    }
	    NoAnnotationError.prototype.toString = function () {
	        return this.message;
	    };
	    return NoAnnotationError;
	})(lang_1.BaseException);
	exports.NoAnnotationError = NoAnnotationError;
	exports.__esModule = true;
	//# sourceMappingURL=exceptions.js.map

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../typings/es6-promise/es6-promise.d.ts" />
	var collection_1 = __webpack_require__(121);
	var binding_1 = __webpack_require__(168);
	var exceptions_1 = __webpack_require__(172);
	var lang_1 = __webpack_require__(118);
	var async_1 = __webpack_require__(155);
	var key_1 = __webpack_require__(169);
	var forward_ref_1 = __webpack_require__(171);
	var _constructing = new Object();
	var _notFound = new Object();
	var _Waiting = (function () {
	    function _Waiting(promise) {
	        this.promise = promise;
	    }
	    return _Waiting;
	})();
	function _isWaiting(obj) {
	    return obj instanceof _Waiting;
	}
	/**
	 * A dependency injection container used for resolving dependencies.
	 *
	 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	 * constructor dependencies.
	 * In typical use, application code asks for the dependencies in the constructor and they are
	 * resolved by the `Injector`.
	 *
	 * ## Example:
	 *
	 * Suppose that we want to inject an `Engine` into class `Car`, we would define it like this:
	 *
	 * ```javascript
	 * class Engine {
	 * }
	 *
	 * class Car {
	 *   constructor(@Inject(Engine) engine) {
	 *   }
	 * }
	 *
	 * ```
	 *
	 * Next we need to write the code that creates and instantiates the `Injector`. We then ask for the
	 * `root` object, `Car`, so that the `Injector` can recursively build all of that object's
	 *dependencies.
	 *
	 * ```javascript
	 * main() {
	 *   var injector = Injector.resolveAndCreate([Car, Engine]);
	 *
	 *   // Get a reference to the `root` object, which will recursively instantiate the tree.
	 *   var car = injector.get(Car);
	 * }
	 * ```
	 * Notice that we don't use the `new` operator because we explicitly want to have the `Injector`
	 * resolve all of the object's dependencies automatically.
	 *
	 * @exportedAs angular2/di
	 */
	var Injector = (function () {
	    /**
	     * @param `bindings` A sparse list of {@link ResolvedBinding}s. See `resolve` for the {@link
	     * Injector}.
	     * @param `parent` Parent Injector or `null` if root Injector.
	     * @param `defaultBindings` Setting to true will auto-create bindings. (Only use with root
	     * injector.)
	     */
	    function Injector(bindings, parent, defaultBindings) {
	        this._bindings = bindings;
	        this._instances = this._createInstances();
	        this._parent = parent;
	        this._defaultBindings = defaultBindings;
	        this._asyncStrategy = new _AsyncInjectorStrategy(this);
	        this._syncStrategy = new _SyncInjectorStrategy(this);
	    }
	    /**
	     * Turns a list of binding definitions into an internal resolved list of resolved bindings.
	     *
	     * A resolution is a process of flattening multiple nested lists and converting individual
	     * bindings into a list of {@link ResolvedBinding}s. The resolution can be cached by `resolve`
	     * for the {@link Injector} for performance-sensitive code.
	     *
	     * @param `bindings` can be a list of `Type`, {@link Binding}, {@link ResolvedBinding}, or a
	     * recursive list of more bindings.
	     *
	     * The returned list is sparse, indexed by `id` for the {@link Key}. It is generally not useful to
	     *application code
	     * other than for passing it to {@link Injector} functions that require resolved binding lists,
	     *such as
	     * `fromResolvedBindings` and `createChildFromResolved`.
	     */
	    Injector.resolve = function (bindings) {
	        var resolvedBindings = resolveBindings(bindings);
	        var flatten = _flattenBindings(resolvedBindings, collection_1.MapWrapper.create());
	        return _createListOfBindings(flatten);
	    };
	    /**
	     * Resolves bindings and creates an injector based on those bindings. This function is slower than
	     * the corresponding `fromResolvedBindings` because it needs to resolve bindings first. See
	     *`resolve`
	     * for the {@link Injector}.
	     *
	     * Prefer `fromResolvedBindings` in performance-critical code that creates lots of injectors.
	     *
	     * @param `bindings` can be a list of `Type`, {@link Binding}, {@link ResolvedBinding}, or a
	     *recursive list of more
	     * bindings.
	     * @param `defaultBindings` Setting to true will auto-create bindings.
	     */
	    Injector.resolveAndCreate = function (bindings, _a) {
	        var _b = (_a === void 0 ? {} : _a).defaultBindings,
	            defaultBindings = _b === void 0 ? false : _b;
	        return new Injector(Injector.resolve(bindings), null, defaultBindings);
	    };
	    /**
	     * Creates an injector from previously resolved bindings. This bypasses resolution and flattening.
	     * This API is the recommended way to construct injectors in performance-sensitive parts.
	     *
	     * @param `bindings` A sparse list of {@link ResolvedBinding}s. See `resolve` for the {@link
	     *Injector}.
	     * @param `defaultBindings` Setting to true will auto-create bindings.
	     */
	    Injector.fromResolvedBindings = function (bindings, _a) {
	        var _b = (_a === void 0 ? {} : _a).defaultBindings,
	            defaultBindings = _b === void 0 ? false : _b;
	        return new Injector(bindings, null, defaultBindings);
	    };
	    Object.defineProperty(Injector.prototype, 'parent', {
	        /**
	         * Direct parent of this injector.
	         */
	        get: function get() {
	            return this._parent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Retrieves an instance from the injector.
	     *
	     * @param `token`: usually the `Type` of an object. (Same as the token used while setting up a
	     *binding).
	     * @returns an instance represented by the token. Throws if not found.
	     */
	    Injector.prototype.get = function (token) {
	        return this._getByKey(key_1.Key.get(token), false, false, false);
	    };
	    /**
	     * Retrieves an instance from the injector.
	     *
	     * @param `token`: usually a `Type`. (Same as the token used while setting up a binding).
	     * @returns an instance represented by the token. Returns `null` if not found.
	     */
	    Injector.prototype.getOptional = function (token) {
	        return this._getByKey(key_1.Key.get(token), false, false, true);
	    };
	    /**
	     * Retrieves an instance from the injector asynchronously. Used with asynchronous bindings.
	     *
	     * @param `token`: usually a `Type`. (Same as token used while setting up a binding).
	     * @returns a `Promise` which resolves to the instance represented by the token.
	     */
	    Injector.prototype.asyncGet = function (token) {
	        return this._getByKey(key_1.Key.get(token), true, false, false);
	    };
	    /**
	     * Creates a child injector and loads a new set of bindings into it.
	     *
	     * A resolution is a process of flattening multiple nested lists and converting individual
	     * bindings into a list of {@link ResolvedBinding}s. The resolution can be cached by `resolve`
	     * for the {@link Injector} for performance-sensitive code.
	     *
	     * @param `bindings` can be a list of `Type`, {@link Binding}, {@link ResolvedBinding}, or a
	     * recursive list of more bindings.
	     *
	     */
	    Injector.prototype.resolveAndCreateChild = function (bindings) {
	        return new Injector(Injector.resolve(bindings), this, false);
	    };
	    /**
	     * Creates a child injector and loads a new set of {@link ResolvedBinding}s into it.
	     *
	     * @param `bindings`: A sparse list of {@link ResolvedBinding}s.
	     * See `resolve` for the {@link Injector}.
	     * @returns a new child {@link Injector}.
	     */
	    Injector.prototype.createChildFromResolved = function (bindings) {
	        return new Injector(bindings, this, false);
	    };
	    Injector.prototype._createInstances = function () {
	        return collection_1.ListWrapper.createFixedSize(key_1.Key.numberOfKeys + 1);
	    };
	    Injector.prototype._getByKey = function (key, returnPromise, returnLazy, optional) {
	        var _this = this;
	        if (returnLazy) {
	            return function () {
	                return _this._getByKey(key, returnPromise, false, optional);
	            };
	        }
	        var strategy = returnPromise ? this._asyncStrategy : this._syncStrategy;
	        var instance = strategy.readFromCache(key);
	        if (instance !== _notFound) return instance;
	        instance = strategy.instantiate(key);
	        if (instance !== _notFound) return instance;
	        if (lang_1.isPresent(this._parent)) {
	            return this._parent._getByKey(key, returnPromise, returnLazy, optional);
	        }
	        if (optional) {
	            return null;
	        } else {
	            throw new exceptions_1.NoBindingError(key);
	        }
	    };
	    Injector.prototype._resolveDependencies = function (key, binding, forceAsync) {
	        var _this = this;
	        try {
	            var getDependency = function getDependency(d) {
	                return _this._getByKey(d.key, forceAsync || d.asPromise, d.lazy, d.optional);
	            };
	            return collection_1.ListWrapper.map(binding.dependencies, getDependency);
	        } catch (e) {
	            this._clear(key);
	            if (e instanceof exceptions_1.AbstractBindingError) e.addKey(key);
	            throw e;
	        }
	    };
	    Injector.prototype._getInstance = function (key) {
	        if (this._instances.length <= key.id) return null;
	        return collection_1.ListWrapper.get(this._instances, key.id);
	    };
	    Injector.prototype._setInstance = function (key, obj) {
	        collection_1.ListWrapper.set(this._instances, key.id, obj);
	    };
	    Injector.prototype._getBinding = function (key) {
	        var binding = this._bindings.length <= key.id ? null : collection_1.ListWrapper.get(this._bindings, key.id);
	        if (lang_1.isBlank(binding) && this._defaultBindings) {
	            var token = key.token;
	            return binding_1.bind(key.token).toClass(token).resolve();
	        } else {
	            return binding;
	        }
	    };
	    Injector.prototype._markAsConstructing = function (key) {
	        this._setInstance(key, _constructing);
	    };
	    Injector.prototype._clear = function (key) {
	        this._setInstance(key, null);
	    };
	    return Injector;
	})();
	exports.Injector = Injector;
	var _SyncInjectorStrategy = (function () {
	    function _SyncInjectorStrategy(injector) {
	        this.injector = injector;
	    }
	    _SyncInjectorStrategy.prototype.readFromCache = function (key) {
	        if (key.token === Injector) {
	            return this.injector;
	        }
	        var instance = this.injector._getInstance(key);
	        if (instance === _constructing) {
	            throw new exceptions_1.CyclicDependencyError(key);
	        } else if (lang_1.isPresent(instance) && !_isWaiting(instance)) {
	            return instance;
	        } else {
	            return _notFound;
	        }
	    };
	    _SyncInjectorStrategy.prototype.instantiate = function (key) {
	        var binding = this.injector._getBinding(key);
	        if (lang_1.isBlank(binding)) return _notFound;
	        if (binding.providedAsPromise) throw new exceptions_1.AsyncBindingError(key);
	        // add a marker so we can detect cyclic dependencies
	        this.injector._markAsConstructing(key);
	        var deps = this.injector._resolveDependencies(key, binding, false);
	        return this._createInstance(key, binding, deps);
	    };
	    _SyncInjectorStrategy.prototype._createInstance = function (key, binding, deps) {
	        try {
	            var instance = lang_1.FunctionWrapper.apply(binding.factory, deps);
	            this.injector._setInstance(key, instance);
	            return instance;
	        } catch (e) {
	            this.injector._clear(key);
	            throw new exceptions_1.InstantiationError(e, key);
	        }
	    };
	    return _SyncInjectorStrategy;
	})();
	var _AsyncInjectorStrategy = (function () {
	    function _AsyncInjectorStrategy(injector) {
	        this.injector = injector;
	    }
	    _AsyncInjectorStrategy.prototype.readFromCache = function (key) {
	        if (key.token === Injector) {
	            return async_1.PromiseWrapper.resolve(this.injector);
	        }
	        var instance = this.injector._getInstance(key);
	        if (instance === _constructing) {
	            throw new exceptions_1.CyclicDependencyError(key);
	        } else if (_isWaiting(instance)) {
	            return instance.promise;
	        } else if (lang_1.isPresent(instance)) {
	            return async_1.PromiseWrapper.resolve(instance);
	        } else {
	            return _notFound;
	        }
	    };
	    _AsyncInjectorStrategy.prototype.instantiate = function (key) {
	        var _this = this;
	        var binding = this.injector._getBinding(key);
	        if (lang_1.isBlank(binding)) return _notFound;
	        // add a marker so we can detect cyclic dependencies
	        this.injector._markAsConstructing(key);
	        var deps = this.injector._resolveDependencies(key, binding, true);
	        var depsPromise = async_1.PromiseWrapper.all(deps);
	        var promise = async_1.PromiseWrapper.then(depsPromise, null, function (e, s) {
	            return _this._errorHandler(key, e, s);
	        }).then(function (deps) {
	            return _this._findOrCreate(key, binding, deps);
	        }).then(function (instance) {
	            return _this._cacheInstance(key, instance);
	        });
	        this.injector._setInstance(key, new _Waiting(promise));
	        return promise;
	    };
	    _AsyncInjectorStrategy.prototype._errorHandler = function (key, e, stack) {
	        if (e instanceof exceptions_1.AbstractBindingError) e.addKey(key);
	        return async_1.PromiseWrapper.reject(e, stack);
	    };
	    _AsyncInjectorStrategy.prototype._findOrCreate = function (key, binding, deps) {
	        try {
	            var instance = this.injector._getInstance(key);
	            if (!_isWaiting(instance)) return instance;
	            return lang_1.FunctionWrapper.apply(binding.factory, deps);
	        } catch (e) {
	            this.injector._clear(key);
	            throw new exceptions_1.InstantiationError(e, key);
	        }
	    };
	    _AsyncInjectorStrategy.prototype._cacheInstance = function (key, instance) {
	        this.injector._setInstance(key, instance);
	        return instance;
	    };
	    return _AsyncInjectorStrategy;
	})();
	function resolveBindings(bindings) {
	    var resolvedList = collection_1.ListWrapper.createFixedSize(bindings.length);
	    for (var i = 0; i < bindings.length; i++) {
	        var unresolved = forward_ref_1.resolveForwardRef(bindings[i]);
	        var resolved;
	        if (unresolved instanceof binding_1.ResolvedBinding) {
	            resolved = unresolved; // ha-ha! I'm easily amused
	        } else if (unresolved instanceof lang_1.Type) {
	            resolved = binding_1.bind(unresolved).toClass(unresolved).resolve();
	        } else if (unresolved instanceof binding_1.Binding) {
	            resolved = unresolved.resolve();
	        } else if (unresolved instanceof collection_1.List) {
	            resolved = resolveBindings(unresolved);
	        } else if (unresolved instanceof binding_1.BindingBuilder) {
	            throw new exceptions_1.InvalidBindingError(unresolved.token);
	        } else {
	            throw new exceptions_1.InvalidBindingError(unresolved);
	        }
	        resolvedList[i] = resolved;
	    }
	    return resolvedList;
	}
	exports.resolveBindings = resolveBindings;
	function flattenBindings(bindings) {
	    var map = _flattenBindings(bindings, collection_1.MapWrapper.create());
	    var res = collection_1.ListWrapper.create();
	    collection_1.MapWrapper.forEach(map, function (binding, keyId) {
	        return collection_1.ListWrapper.push(res, binding);
	    });
	    return res;
	}
	function _createListOfBindings(flattenedBindings) {
	    var bindings = collection_1.ListWrapper.createFixedSize(key_1.Key.numberOfKeys + 1);
	    collection_1.MapWrapper.forEach(flattenedBindings, function (v, keyId) {
	        return bindings[keyId] = v;
	    });
	    return bindings;
	}
	function _flattenBindings(bindings, res) {
	    collection_1.ListWrapper.forEach(bindings, function (b) {
	        if (b instanceof binding_1.ResolvedBinding) {
	            collection_1.MapWrapper.set(res, b.key.id, b);
	        } else if (b instanceof collection_1.List) {
	            _flattenBindings(b, res);
	        }
	    });
	    return res;
	}
	exports.__esModule = true;
	//# sourceMappingURL=injector.js.map

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 *
	 *
	 * @exportedAs angular2/di
	 */
	var OpaqueToken = (function () {
	    function OpaqueToken(desc) {
	        this._desc = "Token(" + desc + ")";
	    }
	    OpaqueToken.prototype.toString = function () {
	        return this._desc;
	    };
	    return OpaqueToken;
	})();
	exports.OpaqueToken = OpaqueToken;
	exports.__esModule = true;
	//# sourceMappingURL=opaque_token.js.map

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var async_1 = __webpack_require__(155);
	var collection_1 = __webpack_require__(121);
	var directive_resolver_1 = __webpack_require__(183);
	var view_ref_1 = __webpack_require__(179);
	var element_injector_1 = __webpack_require__(176);
	var template_resolver_1 = __webpack_require__(188);
	var component_url_mapper_1 = __webpack_require__(189);
	var proto_view_factory_1 = __webpack_require__(190);
	var url_resolver_1 = __webpack_require__(191);
	var renderApi = __webpack_require__(165);
	/**
	 * Cache that stores the AppProtoView of the template of a component.
	 * Used to prevent duplicate work and resolve cyclic dependencies.
	 */
	var CompilerCache = (function () {
	    function CompilerCache() {
	        this._cache = collection_1.MapWrapper.create();
	    }
	    CompilerCache.prototype.set = function (component, protoView) {
	        collection_1.MapWrapper.set(this._cache, component, protoView);
	    };
	    CompilerCache.prototype.get = function (component) {
	        var result = collection_1.MapWrapper.get(this._cache, component);
	        return lang_1.normalizeBlank(result);
	    };
	    CompilerCache.prototype.clear = function () {
	        collection_1.MapWrapper.clear(this._cache);
	    };
	    CompilerCache = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [])], CompilerCache);
	    return CompilerCache;
	})();
	exports.CompilerCache = CompilerCache;
	/**
	 * @exportedAs angular2/view
	 */
	var Compiler = (function () {
	    function Compiler(reader, cache, templateResolver, componentUrlMapper, urlResolver, render, protoViewFactory) {
	        this._reader = reader;
	        this._compilerCache = cache;
	        this._compiling = collection_1.MapWrapper.create();
	        this._templateResolver = templateResolver;
	        this._componentUrlMapper = componentUrlMapper;
	        this._urlResolver = urlResolver;
	        this._appUrl = urlResolver.resolve(null, "./");
	        this._render = render;
	        this._protoViewFactory = protoViewFactory;
	    }
	    Compiler.prototype._bindDirective = function (directiveTypeOrBinding) {
	        if (directiveTypeOrBinding instanceof element_injector_1.DirectiveBinding) {
	            return directiveTypeOrBinding;
	        } else if (directiveTypeOrBinding instanceof di_1.Binding) {
	            var annotation = this._reader.resolve(directiveTypeOrBinding.token);
	            return element_injector_1.DirectiveBinding.createFromBinding(directiveTypeOrBinding, annotation);
	        } else {
	            var annotation = this._reader.resolve(directiveTypeOrBinding);
	            return element_injector_1.DirectiveBinding.createFromType(directiveTypeOrBinding, annotation);
	        }
	    };
	    // Create a hostView as if the compiler encountered <hostcmp></hostcmp>.
	    // Used for bootstrapping.
	    Compiler.prototype.compileInHost = function (componentTypeOrBinding) {
	        var _this = this;
	        var componentBinding = this._bindDirective(componentTypeOrBinding);
	        Compiler._assertTypeIsComponent(componentBinding);
	        var directiveMetadata = componentBinding.metadata;
	        return this._render.compileHost(directiveMetadata).then(function (hostRenderPv) {
	            return _this._compileNestedProtoViews(componentBinding, hostRenderPv, [componentBinding]);
	        }).then(function (appProtoView) {
	            return new view_ref_1.ProtoViewRef(appProtoView);
	        });
	    };
	    Compiler.prototype.compile = function (component) {
	        var componentBinding = this._bindDirective(component);
	        Compiler._assertTypeIsComponent(componentBinding);
	        var pvOrPromise = this._compile(componentBinding);
	        var pvPromise = async_1.PromiseWrapper.isPromise(pvOrPromise) ? pvOrPromise : async_1.PromiseWrapper.resolve(pvOrPromise);
	        return pvPromise.then(function (appProtoView) {
	            return new view_ref_1.ProtoViewRef(appProtoView);
	        });
	    };
	    Compiler.prototype._compile = function (componentBinding) {
	        var _this = this;
	        var component = componentBinding.key.token;
	        var protoView = this._compilerCache.get(component);
	        if (lang_1.isPresent(protoView)) {
	            // The component has already been compiled into an AppProtoView,
	            // returns a plain AppProtoView, not wrapped inside of a Promise.
	            // Needed for recursive components.
	            return protoView;
	        }
	        var pvPromise = collection_1.MapWrapper.get(this._compiling, component);
	        if (lang_1.isPresent(pvPromise)) {
	            // The component is already being compiled, attach to the existing Promise
	            // instead of re-compiling the component.
	            // It happens when a template references a component multiple times.
	            return pvPromise;
	        }
	        var template = this._templateResolver.resolve(component);
	        if (lang_1.isBlank(template)) {
	            return null;
	        }
	        var directives = this._flattenDirectives(template);
	        for (var i = 0; i < directives.length; i++) {
	            if (!Compiler._isValidDirective(directives[i])) {
	                throw new lang_1.BaseException("Unexpected directive value '" + lang_1.stringify(directives[i]) + "' on the View of component '" + lang_1.stringify(component) + "'");
	            }
	        }
	        var boundDirectives = collection_1.ListWrapper.map(directives, function (directive) {
	            return _this._bindDirective(directive);
	        });
	        var renderTemplate = this._buildRenderTemplate(component, template, boundDirectives);
	        pvPromise = this._render.compile(renderTemplate).then(function (renderPv) {
	            return _this._compileNestedProtoViews(componentBinding, renderPv, boundDirectives);
	        });
	        collection_1.MapWrapper.set(this._compiling, component, pvPromise);
	        return pvPromise;
	    };
	    Compiler.prototype._compileNestedProtoViews = function (componentBinding, renderPv, directives) {
	        var _this = this;
	        var protoViews = this._protoViewFactory.createAppProtoViews(componentBinding, renderPv, directives);
	        var protoView = protoViews[0];
	        // TODO(tbosch): we should be caching host protoViews as well!
	        // -> need a separate cache for this...
	        if (renderPv.type === renderApi.ProtoViewDto.COMPONENT_VIEW_TYPE && lang_1.isPresent(componentBinding)) {
	            // Populate the cache before compiling the nested components,
	            // so that components can reference themselves in their template.
	            var component = componentBinding.key.token;
	            this._compilerCache.set(component, protoView);
	            collection_1.MapWrapper["delete"](this._compiling, component);
	        }
	        var nestedPVPromises = [];
	        collection_1.ListWrapper.forEach(this._collectComponentElementBinders(protoViews), function (elementBinder) {
	            var nestedComponent = elementBinder.componentDirective;
	            var elementBinderDone = function elementBinderDone(nestedPv) {
	                elementBinder.nestedProtoView = nestedPv;
	            };
	            var nestedCall = _this._compile(nestedComponent);
	            if (async_1.PromiseWrapper.isPromise(nestedCall)) {
	                collection_1.ListWrapper.push(nestedPVPromises, nestedCall.then(elementBinderDone));
	            } else if (lang_1.isPresent(nestedCall)) {
	                elementBinderDone(nestedCall);
	            }
	        });
	        if (nestedPVPromises.length > 0) {
	            return async_1.PromiseWrapper.all(nestedPVPromises).then(function (_) {
	                return protoView;
	            });
	        } else {
	            return protoView;
	        }
	    };
	    Compiler.prototype._collectComponentElementBinders = function (protoViews) {
	        var componentElementBinders = [];
	        collection_1.ListWrapper.forEach(protoViews, function (protoView) {
	            collection_1.ListWrapper.forEach(protoView.elementBinders, function (elementBinder) {
	                if (lang_1.isPresent(elementBinder.componentDirective)) {
	                    collection_1.ListWrapper.push(componentElementBinders, elementBinder);
	                }
	            });
	        });
	        return componentElementBinders;
	    };
	    Compiler.prototype._buildRenderTemplate = function (component, view, directives) {
	        var componentUrl = this._urlResolver.resolve(this._appUrl, this._componentUrlMapper.getUrl(component));
	        var templateAbsUrl = null;
	        if (lang_1.isPresent(view.templateUrl)) {
	            templateAbsUrl = this._urlResolver.resolve(componentUrl, view.templateUrl);
	        } else if (lang_1.isPresent(view.template)) {
	            // Note: If we have an inline template, we also need to send
	            // the url for the component to the render so that it
	            // is able to resolve urls in stylesheets.
	            templateAbsUrl = componentUrl;
	        }
	        return new renderApi.ViewDefinition({
	            componentId: lang_1.stringify(component),
	            absUrl: templateAbsUrl, template: view.template,
	            directives: collection_1.ListWrapper.map(directives, function (directiveBinding) {
	                return directiveBinding.metadata;
	            })
	        });
	    };
	    Compiler.prototype._flattenDirectives = function (template) {
	        if (lang_1.isBlank(template.directives)) return [];
	        var directives = [];
	        this._flattenList(template.directives, directives);
	        return directives;
	    };
	    Compiler.prototype._flattenList = function (tree, out) {
	        for (var i = 0; i < tree.length; i++) {
	            var item = di_1.resolveForwardRef(tree[i]);
	            if (collection_1.ListWrapper.isList(item)) {
	                this._flattenList(item, out);
	            } else {
	                collection_1.ListWrapper.push(out, item);
	            }
	        }
	    };
	    Compiler._isValidDirective = function (value) {
	        return lang_1.isPresent(value) && (value instanceof lang_1.Type || value instanceof di_1.Binding);
	    };
	    Compiler._assertTypeIsComponent = function (directiveBinding) {
	        if (directiveBinding.metadata.type !== renderApi.DirectiveMetadata.COMPONENT_TYPE) {
	            throw new lang_1.BaseException("Could not load '" + lang_1.stringify(directiveBinding.key.token) + "' because it is not a component.");
	        }
	    };
	    Compiler = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [directive_resolver_1.DirectiveResolver, CompilerCache, template_resolver_1.TemplateResolver, component_url_mapper_1.ComponentUrlMapper, url_resolver_1.UrlResolver, renderApi.RenderCompiler, proto_view_factory_1.ProtoViewFactory])], Compiler);
	    return Compiler;
	})();
	exports.Compiler = Compiler;
	exports.__esModule = true;
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var async_1 = __webpack_require__(155);
	var collection_1 = __webpack_require__(121);
	var di_1 = __webpack_require__(167);
	var visibility_1 = __webpack_require__(117);
	var di_2 = __webpack_require__(177);
	var avmModule = __webpack_require__(178);
	var view_container_ref_1 = __webpack_require__(185);
	var element_ref_1 = __webpack_require__(162);
	var view_ref_1 = __webpack_require__(179);
	var annotations_1 = __webpack_require__(120);
	var change_detection_1 = __webpack_require__(122);
	var query_list_1 = __webpack_require__(186);
	var reflection_1 = __webpack_require__(129);
	var api_1 = __webpack_require__(165);
	var _MAX_DIRECTIVE_CONSTRUCTION_COUNTER = 10;
	var _undefined = new Object();
	var _staticKeys;
	var StaticKeys = (function () {
	    function StaticKeys() {
	        // TODO: vsavkin Key.annotate(Key.get(AppView), 'static')
	        this.viewManagerId = di_1.Key.get(avmModule.AppViewManager).id;
	        this.protoViewId = di_1.Key.get(view_ref_1.ProtoViewRef).id;
	        this.viewContainerId = di_1.Key.get(view_container_ref_1.ViewContainerRef).id;
	        this.changeDetectorRefId = di_1.Key.get(change_detection_1.ChangeDetectorRef).id;
	        this.elementRefId = di_1.Key.get(element_ref_1.ElementRef).id;
	    }
	    StaticKeys.instance = function () {
	        if (lang_1.isBlank(_staticKeys)) _staticKeys = new StaticKeys();
	        return _staticKeys;
	    };
	    return StaticKeys;
	})();
	var TreeNode = (function () {
	    function TreeNode(parent) {
	        this._head = null;
	        this._tail = null;
	        this._next = null;
	        if (lang_1.isPresent(parent)) parent.addChild(this);
	    }
	    TreeNode.prototype._assertConsistency = function () {
	        this._assertHeadBeforeTail();
	        this._assertTailReachable();
	        this._assertPresentInParentList();
	    };
	    TreeNode.prototype._assertHeadBeforeTail = function () {
	        if (lang_1.isBlank(this._tail) && lang_1.isPresent(this._head)) throw new lang_1.BaseException('null tail but non-null head');
	    };
	    TreeNode.prototype._assertTailReachable = function () {
	        if (lang_1.isBlank(this._tail)) return;
	        if (lang_1.isPresent(this._tail._next)) throw new lang_1.BaseException('node after tail');
	        var p = this._head;
	        while (lang_1.isPresent(p) && p != this._tail) p = p._next;
	        if (lang_1.isBlank(p) && lang_1.isPresent(this._tail)) throw new lang_1.BaseException('tail not reachable.');
	    };
	    TreeNode.prototype._assertPresentInParentList = function () {
	        var p = this._parent;
	        if (lang_1.isBlank(p)) {
	            return;
	        }
	        var cur = p._head;
	        while (lang_1.isPresent(cur) && cur != this) cur = cur._next;
	        if (lang_1.isBlank(cur)) throw new lang_1.BaseException('node not reachable through parent.');
	    };
	    /**
	     * Adds a child to the parent node. The child MUST NOT be a part of a tree.
	     */
	    TreeNode.prototype.addChild = function (child) {
	        if (lang_1.isPresent(this._tail)) {
	            this._tail._next = child;
	            this._tail = child;
	        } else {
	            this._tail = this._head = child;
	        }
	        child._next = null;
	        child._parent = this;
	        this._assertConsistency();
	    };
	    /**
	     * Adds a child to the parent node after a given sibling.
	     * The child MUST NOT be a part of a tree and the sibling must be present.
	     */
	    TreeNode.prototype.addChildAfter = function (child, prevSibling) {
	        this._assertConsistency();
	        if (lang_1.isBlank(prevSibling)) {
	            var prevHead = this._head;
	            this._head = child;
	            child._next = prevHead;
	            if (lang_1.isBlank(this._tail)) this._tail = child;
	        } else if (lang_1.isBlank(prevSibling._next)) {
	            this.addChild(child);
	            return;
	        } else {
	            prevSibling._assertPresentInParentList();
	            child._next = prevSibling._next;
	            prevSibling._next = child;
	        }
	        child._parent = this;
	        this._assertConsistency();
	    };
	    /**
	     * Detaches a node from the parent's tree.
	     */
	    TreeNode.prototype.remove = function () {
	        this._assertConsistency();
	        if (lang_1.isBlank(this.parent)) return;
	        var nextSibling = this._next;
	        var prevSibling = this._findPrev();
	        if (lang_1.isBlank(prevSibling)) {
	            this.parent._head = this._next;
	        } else {
	            prevSibling._next = this._next;
	        }
	        if (lang_1.isBlank(nextSibling)) {
	            this._parent._tail = prevSibling;
	        }
	        this._parent._assertConsistency();
	        this._parent = null;
	        this._next = null;
	        this._assertConsistency();
	    };
	    /**
	     * Finds a previous sibling or returns null if first child.
	     * Assumes the node has a parent.
	     * TODO(rado): replace with DoublyLinkedList to avoid O(n) here.
	     */
	    TreeNode.prototype._findPrev = function () {
	        var node = this.parent._head;
	        if (node == this) return null;
	        while (node._next !== this) node = node._next;
	        return node;
	    };
	    Object.defineProperty(TreeNode.prototype, 'parent', {
	        get: function get() {
	            return this._parent;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TreeNode.prototype, 'children', {
	        // TODO(rado): replace with a function call, does too much work for a getter.
	        get: function get() {
	            var res = [];
	            var child = this._head;
	            while (child != null) {
	                collection_1.ListWrapper.push(res, child);
	                child = child._next;
	            }
	            return res;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return TreeNode;
	})();
	exports.TreeNode = TreeNode;
	var DependencyWithVisibility = (function (_super) {
	    __extends(DependencyWithVisibility, _super);
	    function DependencyWithVisibility(key, asPromise, lazy, optional, properties, visibility) {
	        _super.call(this, key, asPromise, lazy, optional, properties);
	        this.visibility = visibility;
	    }
	    DependencyWithVisibility.createFrom = function (d) {
	        return new DependencyWithVisibility(d.key, d.asPromise, d.lazy, d.optional, d.properties, DependencyWithVisibility._visibility(d.properties));
	    };
	    DependencyWithVisibility._visibility = function (properties) {
	        if (properties.length == 0) return visibility_1.self;
	        var p = collection_1.ListWrapper.find(properties, function (p) {
	            return p instanceof visibility_1.Visibility;
	        });
	        return lang_1.isPresent(p) ? p : visibility_1.self;
	    };
	    return DependencyWithVisibility;
	})(di_1.Dependency);
	exports.DependencyWithVisibility = DependencyWithVisibility;
	var DirectiveDependency = (function (_super) {
	    __extends(DirectiveDependency, _super);
	    function DirectiveDependency(key, asPromise, lazy, optional, properties, visibility, attributeName, queryDirective) {
	        _super.call(this, key, asPromise, lazy, optional, properties, visibility);
	        this.attributeName = attributeName;
	        this.queryDirective = queryDirective;
	        this._verify();
	    }
	    DirectiveDependency.prototype._verify = function () {
	        var count = 0;
	        if (lang_1.isPresent(this.queryDirective)) count++;
	        if (lang_1.isPresent(this.attributeName)) count++;
	        if (count > 1) throw new lang_1.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
	    };
	    DirectiveDependency.createFrom = function (d) {
	        return new DirectiveDependency(d.key, d.asPromise, d.lazy, d.optional, d.properties, DependencyWithVisibility._visibility(d.properties), DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties));
	    };
	    DirectiveDependency._attributeName = function (properties) {
	        var p = collection_1.ListWrapper.find(properties, function (p) {
	            return p instanceof di_2.Attribute;
	        });
	        return lang_1.isPresent(p) ? p.attributeName : null;
	    };
	    DirectiveDependency._query = function (properties) {
	        var p = collection_1.ListWrapper.find(properties, function (p) {
	            return p instanceof di_2.Query;
	        });
	        return lang_1.isPresent(p) ? di_1.resolveForwardRef(p.directive) : null;
	    };
	    return DirectiveDependency;
	})(DependencyWithVisibility);
	exports.DirectiveDependency = DirectiveDependency;
	var DirectiveBinding = (function (_super) {
	    __extends(DirectiveBinding, _super);
	    function DirectiveBinding(key, factory, dependencies, providedAsPromise, resolvedAppInjectables, resolvedHostInjectables, resolvedViewInjectables, metadata) {
	        _super.call(this, key, factory, dependencies, providedAsPromise);
	        this.resolvedAppInjectables = resolvedAppInjectables;
	        this.resolvedHostInjectables = resolvedHostInjectables;
	        this.resolvedViewInjectables = resolvedViewInjectables;
	        this.metadata = metadata;
	    }
	    Object.defineProperty(DirectiveBinding.prototype, 'callOnDestroy', {
	        get: function get() {
	            return this.metadata.callOnDestroy;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, 'callOnChange', {
	        get: function get() {
	            return this.metadata.callOnChange;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, 'callOnAllChangesDone', {
	        get: function get() {
	            return this.metadata.callOnAllChangesDone;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, 'displayName', {
	        get: function get() {
	            return this.key.displayName;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, 'eventEmitters', {
	        get: function get() {
	            return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.events) ? this.metadata.events : [];
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, 'hostActions', {
	        get: function get() {
	            return lang_1.isPresent(this.metadata) && lang_1.isPresent(this.metadata.hostActions) ? this.metadata.hostActions : collection_1.MapWrapper.create();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(DirectiveBinding.prototype, 'changeDetection', {
	        get: function get() {
	            return this.metadata.changeDetection;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DirectiveBinding.createFromBinding = function (binding, ann) {
	        if (lang_1.isBlank(ann)) {
	            ann = new annotations_1.Directive();
	        }
	        var rb = binding.resolve();
	        var deps = collection_1.ListWrapper.map(rb.dependencies, DirectiveDependency.createFrom);
	        var resolvedAppInjectables = ann instanceof annotations_1.Component && lang_1.isPresent(ann.appInjector) ? di_1.Injector.resolve(ann.appInjector) : [];
	        var resolvedHostInjectables = lang_1.isPresent(ann.hostInjector) ? di_1.resolveBindings(ann.hostInjector) : [];
	        var resolvedViewInjectables = ann instanceof annotations_1.Component && lang_1.isPresent(ann.viewInjector) ? di_1.resolveBindings(ann.viewInjector) : [];
	        var metadata = new api_1.DirectiveMetadata({
	            id: lang_1.stringify(rb.key.token),
	            type: ann instanceof annotations_1.Component ? api_1.DirectiveMetadata.COMPONENT_TYPE : api_1.DirectiveMetadata.DIRECTIVE_TYPE,
	            selector: ann.selector,
	            compileChildren: ann.compileChildren,
	            events: ann.events,
	            hostListeners: lang_1.isPresent(ann.hostListeners) ? collection_1.MapWrapper.createFromStringMap(ann.hostListeners) : null,
	            hostProperties: lang_1.isPresent(ann.hostProperties) ? collection_1.MapWrapper.createFromStringMap(ann.hostProperties) : null,
	            hostAttributes: lang_1.isPresent(ann.hostAttributes) ? collection_1.MapWrapper.createFromStringMap(ann.hostAttributes) : null,
	            hostActions: lang_1.isPresent(ann.hostActions) ? collection_1.MapWrapper.createFromStringMap(ann.hostActions) : null,
	            properties: lang_1.isPresent(ann.properties) ? collection_1.MapWrapper.createFromStringMap(ann.properties) : null,
	            readAttributes: DirectiveBinding._readAttributes(deps),
	            callOnDestroy: ann.hasLifecycleHook(annotations_1.onDestroy),
	            callOnChange: ann.hasLifecycleHook(annotations_1.onChange),
	            callOnAllChangesDone: ann.hasLifecycleHook(annotations_1.onAllChangesDone),
	            changeDetection: ann instanceof annotations_1.Component ? ann.changeDetection : null
	        });
	        return new DirectiveBinding(rb.key, rb.factory, deps, rb.providedAsPromise, resolvedAppInjectables, resolvedHostInjectables, resolvedViewInjectables, metadata);
	    };
	    DirectiveBinding._readAttributes = function (deps) {
	        var readAttributes = [];
	        collection_1.ListWrapper.forEach(deps, function (dep) {
	            if (lang_1.isPresent(dep.attributeName)) {
	                collection_1.ListWrapper.push(readAttributes, dep.attributeName);
	            }
	        });
	        return readAttributes;
	    };
	    DirectiveBinding.createFromType = function (type, annotation) {
	        var binding = new di_1.Binding(type, { toClass: type });
	        return DirectiveBinding.createFromBinding(binding, annotation);
	    };
	    return DirectiveBinding;
	})(di_1.ResolvedBinding);
	exports.DirectiveBinding = DirectiveBinding;
	// TODO(rado): benchmark and consider rolling in as ElementInjector fields.
	var PreBuiltObjects = (function () {
	    function PreBuiltObjects(viewManager, view, protoView) {
	        this.viewManager = viewManager;
	        this.view = view;
	        this.protoView = protoView;
	    }
	    return PreBuiltObjects;
	})();
	exports.PreBuiltObjects = PreBuiltObjects;
	var EventEmitterAccessor = (function () {
	    function EventEmitterAccessor(eventName, getter) {
	        this.eventName = eventName;
	        this.getter = getter;
	    }
	    EventEmitterAccessor.prototype.subscribe = function (view, boundElementIndex, directive) {
	        var _this = this;
	        var eventEmitter = this.getter(directive);
	        return async_1.ObservableWrapper.subscribe(eventEmitter, function (eventObj) {
	            return view.triggerEventHandlers(_this.eventName, eventObj, boundElementIndex);
	        });
	    };
	    return EventEmitterAccessor;
	})();
	exports.EventEmitterAccessor = EventEmitterAccessor;
	var HostActionAccessor = (function () {
	    function HostActionAccessor(actionExpression, getter) {
	        this.actionExpression = actionExpression;
	        this.getter = getter;
	    }
	    HostActionAccessor.prototype.subscribe = function (view, boundElementIndex, directive) {
	        var _this = this;
	        var eventEmitter = this.getter(directive);
	        return async_1.ObservableWrapper.subscribe(eventEmitter, function (actionObj) {
	            return view.callAction(boundElementIndex, _this.actionExpression, actionObj);
	        });
	    };
	    return HostActionAccessor;
	})();
	exports.HostActionAccessor = HostActionAccessor;
	var LIGHT_DOM = 1;
	var SHADOW_DOM = 2;
	var LIGHT_DOM_AND_SHADOW_DOM = 3;
	var BindingData = (function () {
	    function BindingData(binding, visibility) {
	        this.binding = binding;
	        this.visibility = visibility;
	    }
	    BindingData.prototype.getKeyId = function () {
	        return this.binding.key.id;
	    };
	    BindingData.prototype.createEventEmitterAccessors = function () {
	        if (!(this.binding instanceof DirectiveBinding)) return [];
	        var db = this.binding;
	        return collection_1.ListWrapper.map(db.eventEmitters, function (eventName) {
	            return new EventEmitterAccessor(eventName, reflection_1.reflector.getter(eventName));
	        });
	    };
	    BindingData.prototype.createHostActionAccessors = function () {
	        if (!(this.binding instanceof DirectiveBinding)) return [];
	        var res = [];
	        var db = this.binding;
	        collection_1.MapWrapper.forEach(db.hostActions, function (actionExpression, actionName) {
	            collection_1.ListWrapper.push(res, new HostActionAccessor(actionExpression, reflection_1.reflector.getter(actionName)));
	        });
	        return res;
	    };
	    return BindingData;
	})();
	exports.BindingData = BindingData;
	/**

	Difference between di.Injector and ElementInjector

	di.Injector:
	 - imperative based (can create child injectors imperativly)
	 - Lazy loading of code
	 - Component/App Level services which are usually not DOM Related.


	ElementInjector:
	  - ProtoBased (Injector structure fixed at compile time)
	  - understands @Ancestor, @Parent, @Child, @Descendent
	  - Fast
	  - Query mechanism for children
	  - 1:1 to DOM structure.

	 PERF BENCHMARK:
	http://www.williambrownstreet.net/blog/2014/04/faster-angularjs-rendering-angularjs-and-reactjs/
	 */
	var ProtoElementInjector = (function () {
	    function ProtoElementInjector(parent, index, bd, distanceToParent, firstBindingIsComponent) {
	        this.parent = parent;
	        this.index = index;
	        this.distanceToParent = distanceToParent;
	        this.exportComponent = false;
	        this.exportElement = false;
	        this._firstBindingIsComponent = firstBindingIsComponent;
	        this._binding0 = null;
	        this._keyId0 = null;
	        this._visibility0 = null;
	        this._binding1 = null;
	        this._keyId1 = null;
	        this._visibility1 = null;
	        this._binding2 = null;
	        this._keyId2 = null;
	        this._visibility2 = null;
	        this._binding3 = null;
	        this._keyId3 = null;
	        this._visibility3 = null;
	        this._binding4 = null;
	        this._keyId4 = null;
	        this._visibility4 = null;
	        this._binding5 = null;
	        this._keyId5 = null;
	        this._visibility5 = null;
	        this._binding6 = null;
	        this._keyId6 = null;
	        this._visibility6 = null;
	        this._binding7 = null;
	        this._keyId7 = null;
	        this._visibility7 = null;
	        this._binding8 = null;
	        this._keyId8 = null;
	        this._visibility8 = null;
	        this._binding9 = null;
	        this._keyId9 = null;
	        this._visibility9 = null;
	        var length = bd.length;
	        this.eventEmitterAccessors = collection_1.ListWrapper.createFixedSize(length);
	        this.hostActionAccessors = collection_1.ListWrapper.createFixedSize(length);
	        if (length > 0) {
	            this._binding0 = bd[0].binding;
	            this._keyId0 = bd[0].getKeyId();
	            this._visibility0 = bd[0].visibility;
	            this.eventEmitterAccessors[0] = bd[0].createEventEmitterAccessors();
	            this.hostActionAccessors[0] = bd[0].createHostActionAccessors();
	        }
	        if (length > 1) {
	            this._binding1 = bd[1].binding;
	            this._keyId1 = bd[1].getKeyId();
	            this._visibility1 = bd[1].visibility;
	            this.eventEmitterAccessors[1] = bd[1].createEventEmitterAccessors();
	            this.hostActionAccessors[1] = bd[1].createHostActionAccessors();
	        }
	        if (length > 2) {
	            this._binding2 = bd[2].binding;
	            this._keyId2 = bd[2].getKeyId();
	            this._visibility2 = bd[2].visibility;
	            this.eventEmitterAccessors[2] = bd[2].createEventEmitterAccessors();
	            this.hostActionAccessors[2] = bd[2].createHostActionAccessors();
	        }
	        if (length > 3) {
	            this._binding3 = bd[3].binding;
	            this._keyId3 = bd[3].getKeyId();
	            this._visibility3 = bd[3].visibility;
	            this.eventEmitterAccessors[3] = bd[3].createEventEmitterAccessors();
	            this.hostActionAccessors[3] = bd[3].createHostActionAccessors();
	        }
	        if (length > 4) {
	            this._binding4 = bd[4].binding;
	            this._keyId4 = bd[4].getKeyId();
	            this._visibility4 = bd[4].visibility;
	            this.eventEmitterAccessors[4] = bd[4].createEventEmitterAccessors();
	            this.hostActionAccessors[4] = bd[4].createHostActionAccessors();
	        }
	        if (length > 5) {
	            this._binding5 = bd[5].binding;
	            this._keyId5 = bd[5].getKeyId();
	            this._visibility5 = bd[5].visibility;
	            this.eventEmitterAccessors[5] = bd[5].createEventEmitterAccessors();
	            this.hostActionAccessors[5] = bd[5].createHostActionAccessors();
	        }
	        if (length > 6) {
	            this._binding6 = bd[6].binding;
	            this._keyId6 = bd[6].getKeyId();
	            this._visibility6 = bd[6].visibility;
	            this.eventEmitterAccessors[6] = bd[6].createEventEmitterAccessors();
	            this.hostActionAccessors[6] = bd[6].createHostActionAccessors();
	        }
	        if (length > 7) {
	            this._binding7 = bd[7].binding;
	            this._keyId7 = bd[7].getKeyId();
	            this._visibility7 = bd[7].visibility;
	            this.eventEmitterAccessors[7] = bd[7].createEventEmitterAccessors();
	            this.hostActionAccessors[7] = bd[7].createHostActionAccessors();
	        }
	        if (length > 8) {
	            this._binding8 = bd[8].binding;
	            this._keyId8 = bd[8].getKeyId();
	            this._visibility8 = bd[8].visibility;
	            this.eventEmitterAccessors[8] = bd[8].createEventEmitterAccessors();
	            this.hostActionAccessors[8] = bd[8].createHostActionAccessors();
	        }
	        if (length > 9) {
	            this._binding9 = bd[9].binding;
	            this._keyId9 = bd[9].getKeyId();
	            this._visibility9 = bd[9].visibility;
	            this.eventEmitterAccessors[9] = bd[9].createEventEmitterAccessors();
	            this.hostActionAccessors[9] = bd[9].createHostActionAccessors();
	        }
	        if (length > 10) {
	            throw 'Maximum number of directives per element has been reached.';
	        }
	    }
	    ProtoElementInjector.create = function (parent, index, bindings, firstBindingIsComponent, distanceToParent) {
	        var bd = [];
	        ProtoElementInjector._createDirectiveBindingData(bindings, bd, firstBindingIsComponent);
	        ProtoElementInjector._createHostInjectorBindingData(bindings, bd);
	        if (firstBindingIsComponent) {
	            ProtoElementInjector._createViewInjectorBindingData(bindings, bd);
	        }
	        return new ProtoElementInjector(parent, index, bd, distanceToParent, firstBindingIsComponent);
	    };
	    ProtoElementInjector._createDirectiveBindingData = function (bindings, bd, firstBindingIsComponent) {
	        if (firstBindingIsComponent) {
	            collection_1.ListWrapper.push(bd, new BindingData(bindings[0], LIGHT_DOM_AND_SHADOW_DOM));
	            for (var i = 1; i < bindings.length; ++i) {
	                collection_1.ListWrapper.push(bd, new BindingData(bindings[i], LIGHT_DOM));
	            }
	        } else {
	            collection_1.ListWrapper.forEach(bindings, function (b) {
	                collection_1.ListWrapper.push(bd, new BindingData(b, LIGHT_DOM));
	            });
	        }
	    };
	    ProtoElementInjector._createHostInjectorBindingData = function (bindings, bd) {
	        collection_1.ListWrapper.forEach(bindings, function (b) {
	            collection_1.ListWrapper.forEach(b.resolvedHostInjectables, function (b) {
	                collection_1.ListWrapper.push(bd, new BindingData(ProtoElementInjector._createBinding(b), LIGHT_DOM));
	            });
	        });
	    };
	    ProtoElementInjector._createViewInjectorBindingData = function (bindings, bd) {
	        var db = bindings[0];
	        collection_1.ListWrapper.forEach(db.resolvedViewInjectables, function (b) {
	            return collection_1.ListWrapper.push(bd, new BindingData(ProtoElementInjector._createBinding(b), SHADOW_DOM));
	        });
	    };
	    ProtoElementInjector._createBinding = function (b) {
	        var deps = collection_1.ListWrapper.map(b.dependencies, function (d) {
	            return DependencyWithVisibility.createFrom(d);
	        });
	        return new di_1.ResolvedBinding(b.key, b.factory, deps, b.providedAsPromise);
	    };
	    ProtoElementInjector.prototype.instantiate = function (parent) {
	        return new ElementInjector(this, parent);
	    };
	    ProtoElementInjector.prototype.directParent = function () {
	        return this.distanceToParent < 2 ? this.parent : null;
	    };
	    Object.defineProperty(ProtoElementInjector.prototype, 'hasBindings', {
	        get: function get() {
	            return lang_1.isPresent(this._binding0);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ProtoElementInjector.prototype.getBindingAtIndex = function (index) {
	        if (index == 0) return this._binding0;
	        if (index == 1) return this._binding1;
	        if (index == 2) return this._binding2;
	        if (index == 3) return this._binding3;
	        if (index == 4) return this._binding4;
	        if (index == 5) return this._binding5;
	        if (index == 6) return this._binding6;
	        if (index == 7) return this._binding7;
	        if (index == 8) return this._binding8;
	        if (index == 9) return this._binding9;
	        throw new OutOfBoundsAccess(index);
	    };
	    return ProtoElementInjector;
	})();
	exports.ProtoElementInjector = ProtoElementInjector;
	var ElementInjector = (function (_super) {
	    __extends(ElementInjector, _super);
	    function ElementInjector(proto, parent) {
	        _super.call(this, parent);
	        this._proto = proto;
	        // we cannot call dehydrate because fields won't be detected
	        this._preBuiltObjects = null;
	        this._lightDomAppInjector = null;
	        this._shadowDomAppInjector = null;
	        this._obj0 = null;
	        this._obj1 = null;
	        this._obj2 = null;
	        this._obj3 = null;
	        this._obj4 = null;
	        this._obj5 = null;
	        this._obj6 = null;
	        this._obj7 = null;
	        this._obj8 = null;
	        this._obj9 = null;
	        this._constructionCounter = 0;
	        this._inheritQueries(parent);
	        this._buildQueries();
	    }
	    ElementInjector.prototype.dehydrate = function () {
	        this._host = null;
	        this._preBuiltObjects = null;
	        this._lightDomAppInjector = null;
	        this._shadowDomAppInjector = null;
	        var p = this._proto;
	        if (p._binding0 instanceof DirectiveBinding && p._binding0.callOnDestroy) {
	            this._obj0.onDestroy();
	        }
	        if (p._binding1 instanceof DirectiveBinding && p._binding1.callOnDestroy) {
	            this._obj1.onDestroy();
	        }
	        if (p._binding2 instanceof DirectiveBinding && p._binding2.callOnDestroy) {
	            this._obj2.onDestroy();
	        }
	        if (p._binding3 instanceof DirectiveBinding && p._binding3.callOnDestroy) {
	            this._obj3.onDestroy();
	        }
	        if (p._binding4 instanceof DirectiveBinding && p._binding4.callOnDestroy) {
	            this._obj4.onDestroy();
	        }
	        if (p._binding5 instanceof DirectiveBinding && p._binding5.callOnDestroy) {
	            this._obj5.onDestroy();
	        }
	        if (p._binding6 instanceof DirectiveBinding && p._binding6.callOnDestroy) {
	            this._obj6.onDestroy();
	        }
	        if (p._binding7 instanceof DirectiveBinding && p._binding7.callOnDestroy) {
	            this._obj7.onDestroy();
	        }
	        if (p._binding8 instanceof DirectiveBinding && p._binding8.callOnDestroy) {
	            this._obj8.onDestroy();
	        }
	        if (p._binding9 instanceof DirectiveBinding && p._binding9.callOnDestroy) {
	            this._obj9.onDestroy();
	        }
	        if (lang_1.isPresent(this._dynamicallyCreatedComponentBinding) && this._dynamicallyCreatedComponentBinding.callOnDestroy) {
	            this._dynamicallyCreatedComponent.onDestroy();
	        }
	        this._obj0 = null;
	        this._obj1 = null;
	        this._obj2 = null;
	        this._obj3 = null;
	        this._obj4 = null;
	        this._obj5 = null;
	        this._obj6 = null;
	        this._obj7 = null;
	        this._obj8 = null;
	        this._obj9 = null;
	        this._dynamicallyCreatedComponent = null;
	        this._dynamicallyCreatedComponentBinding = null;
	        this._constructionCounter = 0;
	    };
	    ElementInjector.prototype.hydrate = function (injector, host, preBuiltObjects) {
	        var p = this._proto;
	        this._host = host;
	        this._lightDomAppInjector = injector;
	        this._preBuiltObjects = preBuiltObjects;
	        if (p._firstBindingIsComponent) {
	            this._shadowDomAppInjector = this._createShadowDomAppInjector(p._binding0, injector);
	        }
	        this._checkShadowDomAppInjector(this._shadowDomAppInjector);
	        if (lang_1.isPresent(p._keyId0)) this._getObjByKeyId(p._keyId0, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId1)) this._getObjByKeyId(p._keyId1, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId2)) this._getObjByKeyId(p._keyId2, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId3)) this._getObjByKeyId(p._keyId3, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId4)) this._getObjByKeyId(p._keyId4, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId5)) this._getObjByKeyId(p._keyId5, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId6)) this._getObjByKeyId(p._keyId6, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId7)) this._getObjByKeyId(p._keyId7, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId8)) this._getObjByKeyId(p._keyId8, LIGHT_DOM_AND_SHADOW_DOM);
	        if (lang_1.isPresent(p._keyId9)) this._getObjByKeyId(p._keyId9, LIGHT_DOM_AND_SHADOW_DOM);
	    };
	    ElementInjector.prototype._createShadowDomAppInjector = function (componentDirective, appInjector) {
	        if (!collection_1.ListWrapper.isEmpty(componentDirective.resolvedAppInjectables)) {
	            return appInjector.createChildFromResolved(componentDirective.resolvedAppInjectables);
	        } else {
	            return appInjector;
	        }
	    };
	    ElementInjector.prototype.dynamicallyCreateComponent = function (componentDirective, parentInjector) {
	        this._shadowDomAppInjector = this._createShadowDomAppInjector(componentDirective, parentInjector);
	        this._dynamicallyCreatedComponentBinding = componentDirective;
	        this._dynamicallyCreatedComponent = this._new(this._dynamicallyCreatedComponentBinding);
	        return this._dynamicallyCreatedComponent;
	    };
	    ElementInjector.prototype._checkShadowDomAppInjector = function (shadowDomAppInjector) {
	        if (this._proto._firstBindingIsComponent && lang_1.isBlank(shadowDomAppInjector)) {
	            throw new lang_1.BaseException('A shadowDomAppInjector is required as this ElementInjector contains a component');
	        } else if (!this._proto._firstBindingIsComponent && lang_1.isPresent(shadowDomAppInjector)) {
	            throw new lang_1.BaseException('No shadowDomAppInjector allowed as there is not component stored in this ElementInjector');
	        }
	    };
	    ElementInjector.prototype.get = function (token) {
	        if (this._isDynamicallyLoadedComponent(token)) {
	            return this._dynamicallyCreatedComponent;
	        }
	        return this._getByKey(di_1.Key.get(token), visibility_1.self, false, null);
	    };
	    ElementInjector.prototype._isDynamicallyLoadedComponent = function (token) {
	        return lang_1.isPresent(this._dynamicallyCreatedComponentBinding) && di_1.Key.get(token) === this._dynamicallyCreatedComponentBinding.key;
	    };
	    ElementInjector.prototype.hasDirective = function (type) {
	        return this._getObjByKeyId(di_1.Key.get(type).id, LIGHT_DOM_AND_SHADOW_DOM) !== _undefined;
	    };
	    ElementInjector.prototype.getEventEmitterAccessors = function () {
	        return this._proto.eventEmitterAccessors;
	    };
	    ElementInjector.prototype.getHostActionAccessors = function () {
	        return this._proto.hostActionAccessors;
	    };
	    ElementInjector.prototype.getComponent = function () {
	        return this._obj0;
	    };
	    ElementInjector.prototype.getElementRef = function () {
	        return new element_ref_1.ElementRef(new view_ref_1.ViewRef(this._preBuiltObjects.view), this._proto.index);
	    };
	    ElementInjector.prototype.getViewContainerRef = function () {
	        return new view_container_ref_1.ViewContainerRef(this._preBuiltObjects.viewManager, this.getElementRef());
	    };
	    ElementInjector.prototype.getDynamicallyLoadedComponent = function () {
	        return this._dynamicallyCreatedComponent;
	    };
	    ElementInjector.prototype.directParent = function () {
	        return this._proto.distanceToParent < 2 ? this.parent : null;
	    };
	    ElementInjector.prototype._isComponentKey = function (key) {
	        return this._proto._firstBindingIsComponent && lang_1.isPresent(key) && key.id === this._proto._keyId0;
	    };
	    ElementInjector.prototype._isDynamicallyLoadedComponentKey = function (key) {
	        return lang_1.isPresent(this._dynamicallyCreatedComponentBinding) && key.id === this._dynamicallyCreatedComponentBinding.key.id;
	    };
	    ElementInjector.prototype._new = function (binding) {
	        if (this._constructionCounter++ > _MAX_DIRECTIVE_CONSTRUCTION_COUNTER) {
	            throw new di_1.CyclicDependencyError(binding.key);
	        }
	        var factory = binding.factory;
	        var deps = binding.dependencies;
	        var length = deps.length;
	        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
	        try {
	            d0 = length > 0 ? this._getByDependency(deps[0], binding.key) : null;
	            d1 = length > 1 ? this._getByDependency(deps[1], binding.key) : null;
	            d2 = length > 2 ? this._getByDependency(deps[2], binding.key) : null;
	            d3 = length > 3 ? this._getByDependency(deps[3], binding.key) : null;
	            d4 = length > 4 ? this._getByDependency(deps[4], binding.key) : null;
	            d5 = length > 5 ? this._getByDependency(deps[5], binding.key) : null;
	            d6 = length > 6 ? this._getByDependency(deps[6], binding.key) : null;
	            d7 = length > 7 ? this._getByDependency(deps[7], binding.key) : null;
	            d8 = length > 8 ? this._getByDependency(deps[8], binding.key) : null;
	            d9 = length > 9 ? this._getByDependency(deps[9], binding.key) : null;
	        } catch (e) {
	            if (e instanceof di_1.AbstractBindingError) e.addKey(binding.key);
	            throw e;
	        }
	        var obj;
	        switch (length) {
	            case 0:
	                obj = factory();
	                break;
	            case 1:
	                obj = factory(d0);
	                break;
	            case 2:
	                obj = factory(d0, d1);
	                break;
	            case 3:
	                obj = factory(d0, d1, d2);
	                break;
	            case 4:
	                obj = factory(d0, d1, d2, d3);
	                break;
	            case 5:
	                obj = factory(d0, d1, d2, d3, d4);
	                break;
	            case 6:
	                obj = factory(d0, d1, d2, d3, d4, d5);
	                break;
	            case 7:
	                obj = factory(d0, d1, d2, d3, d4, d5, d6);
	                break;
	            case 8:
	                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	                break;
	            case 9:
	                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	                break;
	            case 10:
	                obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	                break;
	            default:
	                throw 'Directive ' + binding.key.token + ' can only have up to 10 dependencies.';
	        }
	        this._addToQueries(obj, binding.key.token);
	        return obj;
	    };
	    ElementInjector.prototype._getByDependency = function (dep, requestor) {
	        if (!(dep instanceof DirectiveDependency)) {
	            return this._getByKey(dep.key, dep.visibility, dep.optional, requestor);
	        }
	        var dirDep = dep;
	        if (lang_1.isPresent(dirDep.attributeName)) return this._buildAttribute(dirDep);
	        if (lang_1.isPresent(dirDep.queryDirective)) return this._findQuery(dirDep.queryDirective).list;
	        if (dirDep.key.id === StaticKeys.instance().changeDetectorRefId) {
	            var componentView = this._preBuiltObjects.view.componentChildViews[this._proto.index];
	            return componentView.changeDetector.ref;
	        }
	        if (dirDep.key.id === StaticKeys.instance().elementRefId) {
	            return this.getElementRef();
	        }
	        if (dirDep.key.id === StaticKeys.instance().viewContainerId) {
	            return this.getViewContainerRef();
	        }
	        if (dirDep.key.id === StaticKeys.instance().protoViewId) {
	            if (lang_1.isBlank(this._preBuiltObjects.protoView)) {
	                if (dirDep.optional) {
	                    return null;
	                }
	                throw new di_1.NoBindingError(dirDep.key);
	            }
	            return new view_ref_1.ProtoViewRef(this._preBuiltObjects.protoView);
	        }
	        return this._getByKey(dirDep.key, dirDep.visibility, dirDep.optional, requestor);
	    };
	    ElementInjector.prototype._buildAttribute = function (dep) {
	        var attributes = this._proto.attributes;
	        if (lang_1.isPresent(attributes) && collection_1.MapWrapper.contains(attributes, dep.attributeName)) {
	            return collection_1.MapWrapper.get(attributes, dep.attributeName);
	        } else {
	            return null;
	        }
	    };
	    ElementInjector.prototype._buildQueriesForDeps = function (deps) {
	        for (var i = 0; i < deps.length; i++) {
	            var dep = deps[i];
	            if (lang_1.isPresent(dep.queryDirective)) {
	                this._createQueryRef(dep.queryDirective);
	            }
	        }
	    };
	    ElementInjector.prototype._createQueryRef = function (directive) {
	        var queryList = new query_list_1.QueryList();
	        if (lang_1.isBlank(this._query0)) {
	            this._query0 = new QueryRef(directive, queryList, this);
	        } else if (lang_1.isBlank(this._query1)) {
	            this._query1 = new QueryRef(directive, queryList, this);
	        } else if (lang_1.isBlank(this._query2)) {
	            this._query2 = new QueryRef(directive, queryList, this);
	        } else throw new QueryError();
	    };
	    ElementInjector.prototype._addToQueries = function (obj, token) {
	        if (lang_1.isPresent(this._query0) && this._query0.directive === token) {
	            this._query0.list.add(obj);
	        }
	        if (lang_1.isPresent(this._query1) && this._query1.directive === token) {
	            this._query1.list.add(obj);
	        }
	        if (lang_1.isPresent(this._query2) && this._query2.directive === token) {
	            this._query2.list.add(obj);
	        }
	    };
	    // TODO(rado): unify with _addParentQueries.
	    ElementInjector.prototype._inheritQueries = function (parent) {
	        if (lang_1.isBlank(parent)) return;
	        if (lang_1.isPresent(parent._query0)) {
	            this._query0 = parent._query0;
	        }
	        if (lang_1.isPresent(parent._query1)) {
	            this._query1 = parent._query1;
	        }
	        if (lang_1.isPresent(parent._query2)) {
	            this._query2 = parent._query2;
	        }
	    };
	    ElementInjector.prototype._buildQueries = function () {
	        if (lang_1.isBlank(this._proto)) return;
	        var p = this._proto;
	        if (p._binding0 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding0.dependencies);
	        }
	        if (p._binding1 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding1.dependencies);
	        }
	        if (p._binding2 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding2.dependencies);
	        }
	        if (p._binding3 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding3.dependencies);
	        }
	        if (p._binding4 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding4.dependencies);
	        }
	        if (p._binding5 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding5.dependencies);
	        }
	        if (p._binding6 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding6.dependencies);
	        }
	        if (p._binding7 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding7.dependencies);
	        }
	        if (p._binding8 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding8.dependencies);
	        }
	        if (p._binding9 instanceof DirectiveBinding) {
	            this._buildQueriesForDeps(p._binding9.dependencies);
	        }
	    };
	    ElementInjector.prototype._findQuery = function (token) {
	        if (lang_1.isPresent(this._query0) && this._query0.directive === token) {
	            return this._query0;
	        }
	        if (lang_1.isPresent(this._query1) && this._query1.directive === token) {
	            return this._query1;
	        }
	        if (lang_1.isPresent(this._query2) && this._query2.directive === token) {
	            return this._query2;
	        }
	        throw new lang_1.BaseException('Cannot find query for directive ' + token + '.');
	    };
	    ElementInjector.prototype.link = function (parent) {
	        parent.addChild(this);
	        this._addParentQueries();
	    };
	    ElementInjector.prototype.linkAfter = function (parent, prevSibling) {
	        parent.addChildAfter(this, prevSibling);
	        this._addParentQueries();
	    };
	    ElementInjector.prototype._addParentQueries = function () {
	        if (lang_1.isPresent(this.parent._query0)) {
	            this._addQueryToTree(this.parent._query0);
	            this.parent._query0.update();
	        }
	        if (lang_1.isPresent(this.parent._query1)) {
	            this._addQueryToTree(this.parent._query1);
	            this.parent._query1.update();
	        }
	        if (lang_1.isPresent(this.parent._query2)) {
	            this._addQueryToTree(this.parent._query2);
	            this.parent._query2.update();
	        }
	    };
	    ElementInjector.prototype.unlink = function () {
	        var queriesToUpDate = [];
	        if (lang_1.isPresent(this.parent._query0)) {
	            this._pruneQueryFromTree(this.parent._query0);
	            collection_1.ListWrapper.push(queriesToUpDate, this.parent._query0);
	        }
	        if (lang_1.isPresent(this.parent._query1)) {
	            this._pruneQueryFromTree(this.parent._query1);
	            collection_1.ListWrapper.push(queriesToUpDate, this.parent._query1);
	        }
	        if (lang_1.isPresent(this.parent._query2)) {
	            this._pruneQueryFromTree(this.parent._query2);
	            collection_1.ListWrapper.push(queriesToUpDate, this.parent._query2);
	        }
	        this.remove();
	        collection_1.ListWrapper.forEach(queriesToUpDate, function (q) {
	            return q.update();
	        });
	    };
	    ElementInjector.prototype._pruneQueryFromTree = function (query) {
	        this._removeQueryRef(query);
	        var child = this._head;
	        while (lang_1.isPresent(child)) {
	            child._pruneQueryFromTree(query);
	            child = child._next;
	        }
	    };
	    ElementInjector.prototype._addQueryToTree = function (query) {
	        this._assignQueryRef(query);
	        var child = this._head;
	        while (lang_1.isPresent(child)) {
	            child._addQueryToTree(query);
	            child = child._next;
	        }
	    };
	    ElementInjector.prototype._assignQueryRef = function (query) {
	        if (lang_1.isBlank(this._query0)) {
	            this._query0 = query;
	            return;
	        } else if (lang_1.isBlank(this._query1)) {
	            this._query1 = query;
	            return;
	        } else if (lang_1.isBlank(this._query2)) {
	            this._query2 = query;
	            return;
	        }
	        throw new QueryError();
	    };
	    ElementInjector.prototype._removeQueryRef = function (query) {
	        if (this._query0 == query) this._query0 = null;
	        if (this._query1 == query) this._query1 = null;
	        if (this._query2 == query) this._query2 = null;
	    };
	    ElementInjector.prototype._getByKey = function (key, visibility, optional, requestor) {
	        var ei = this;
	        var currentVisibility = this._isComponentKey(requestor) ? LIGHT_DOM_AND_SHADOW_DOM :
	        // and light dom dependencies
	        LIGHT_DOM;
	        var depth = visibility.depth;
	        if (!visibility.shouldIncludeSelf()) {
	            depth -= ei._proto.distanceToParent;
	            if (lang_1.isPresent(ei._parent)) {
	                ei = ei._parent;
	            } else {
	                ei = ei._host;
	                currentVisibility = visibility.crossComponentBoundaries ? LIGHT_DOM : SHADOW_DOM;
	            }
	        }
	        while (ei != null && depth >= 0) {
	            var preBuiltObj = ei._getPreBuiltObjectByKeyId(key.id);
	            if (preBuiltObj !== _undefined) return preBuiltObj;
	            var dir = ei._getObjByKeyId(key.id, currentVisibility);
	            if (dir !== _undefined) return dir;
	            depth -= ei._proto.distanceToParent;
	            // we check only one mode with the SHADOW_DOM visibility
	            if (currentVisibility === SHADOW_DOM) break;
	            if (lang_1.isPresent(ei._parent)) {
	                ei = ei._parent;
	            } else {
	                ei = ei._host;
	                currentVisibility = visibility.crossComponentBoundaries ? LIGHT_DOM : SHADOW_DOM;
	            }
	        }
	        if (lang_1.isPresent(this._host) && this._host._isComponentKey(key)) {
	            return this._host.getComponent();
	        } else if (lang_1.isPresent(this._host) && this._host._isDynamicallyLoadedComponentKey(key)) {
	            return this._host.getDynamicallyLoadedComponent();
	        } else if (optional) {
	            return this._appInjector(requestor).getOptional(key);
	        } else {
	            return this._appInjector(requestor).get(key);
	        }
	    };
	    ElementInjector.prototype._appInjector = function (requestor) {
	        if (lang_1.isPresent(requestor) && (this._isComponentKey(requestor) || this._isDynamicallyLoadedComponentKey(requestor))) {
	            return this._shadowDomAppInjector;
	        } else {
	            return this._lightDomAppInjector;
	        }
	    };
	    ElementInjector.prototype._getPreBuiltObjectByKeyId = function (keyId) {
	        var staticKeys = StaticKeys.instance();
	        if (keyId === staticKeys.viewManagerId) return this._preBuiltObjects.viewManager;
	        // TODO add other objects as needed
	        return _undefined;
	    };
	    ElementInjector.prototype._getObjByKeyId = function (keyId, visibility) {
	        var p = this._proto;
	        if (p._keyId0 === keyId && (p._visibility0 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj0)) {
	                this._obj0 = this._new(p._binding0);
	            }
	            return this._obj0;
	        }
	        if (p._keyId1 === keyId && (p._visibility1 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj1)) {
	                this._obj1 = this._new(p._binding1);
	            }
	            return this._obj1;
	        }
	        if (p._keyId2 === keyId && (p._visibility2 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj2)) {
	                this._obj2 = this._new(p._binding2);
	            }
	            return this._obj2;
	        }
	        if (p._keyId3 === keyId && (p._visibility3 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj3)) {
	                this._obj3 = this._new(p._binding3);
	            }
	            return this._obj3;
	        }
	        if (p._keyId4 === keyId && (p._visibility4 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj4)) {
	                this._obj4 = this._new(p._binding4);
	            }
	            return this._obj4;
	        }
	        if (p._keyId5 === keyId && (p._visibility5 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj5)) {
	                this._obj5 = this._new(p._binding5);
	            }
	            return this._obj5;
	        }
	        if (p._keyId6 === keyId && (p._visibility6 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj6)) {
	                this._obj6 = this._new(p._binding6);
	            }
	            return this._obj6;
	        }
	        if (p._keyId7 === keyId && (p._visibility7 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj7)) {
	                this._obj7 = this._new(p._binding7);
	            }
	            return this._obj7;
	        }
	        if (p._keyId8 === keyId && (p._visibility8 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj8)) {
	                this._obj8 = this._new(p._binding8);
	            }
	            return this._obj8;
	        }
	        if (p._keyId9 === keyId && (p._visibility9 & visibility) > 0) {
	            if (lang_1.isBlank(this._obj9)) {
	                this._obj9 = this._new(p._binding9);
	            }
	            return this._obj9;
	        }
	        return _undefined;
	    };
	    ElementInjector.prototype.getDirectiveAtIndex = function (index) {
	        if (index == 0) return this._obj0;
	        if (index == 1) return this._obj1;
	        if (index == 2) return this._obj2;
	        if (index == 3) return this._obj3;
	        if (index == 4) return this._obj4;
	        if (index == 5) return this._obj5;
	        if (index == 6) return this._obj6;
	        if (index == 7) return this._obj7;
	        if (index == 8) return this._obj8;
	        if (index == 9) return this._obj9;
	        throw new OutOfBoundsAccess(index);
	    };
	    ElementInjector.prototype.hasInstances = function () {
	        return this._constructionCounter > 0;
	    };
	    /** Gets whether this element is exporting a component instance as $implicit. */
	    ElementInjector.prototype.isExportingComponent = function () {
	        return this._proto.exportComponent;
	    };
	    /** Gets whether this element is exporting its element as $implicit. */
	    ElementInjector.prototype.isExportingElement = function () {
	        return this._proto.exportElement;
	    };
	    /** Get the name to which this element's $implicit is to be assigned. */
	    ElementInjector.prototype.getExportImplicitName = function () {
	        return this._proto.exportImplicitName;
	    };
	    ElementInjector.prototype.getLightDomAppInjector = function () {
	        return this._lightDomAppInjector;
	    };
	    ElementInjector.prototype.getShadowDomAppInjector = function () {
	        return this._shadowDomAppInjector;
	    };
	    ElementInjector.prototype.getHost = function () {
	        return this._host;
	    };
	    ElementInjector.prototype.getBoundElementIndex = function () {
	        return this._proto.index;
	    };
	    return ElementInjector;
	})(TreeNode);
	exports.ElementInjector = ElementInjector;
	var OutOfBoundsAccess = (function (_super) {
	    __extends(OutOfBoundsAccess, _super);
	    function OutOfBoundsAccess(index) {
	        _super.call(this);
	        this.message = 'Index ' + index + ' is out-of-bounds.';
	    }
	    OutOfBoundsAccess.prototype.toString = function () {
	        return this.message;
	    };
	    return OutOfBoundsAccess;
	})(lang_1.BaseException);
	var QueryError = (function (_super) {
	    __extends(QueryError, _super);
	    // TODO(rado): pass the names of the active directives.
	    function QueryError() {
	        _super.call(this);
	        this.message = 'Only 3 queries can be concurrently active in a template.';
	    }
	    QueryError.prototype.toString = function () {
	        return this.message;
	    };
	    return QueryError;
	})(lang_1.BaseException);
	var QueryRef = (function () {
	    function QueryRef(directive, list, originator) {
	        this.directive = directive;
	        this.list = list;
	        this.originator = originator;
	    }
	    QueryRef.prototype.update = function () {
	        var aggregator = [];
	        this.visit(this.originator, aggregator);
	        this.list.reset(aggregator);
	    };
	    QueryRef.prototype.visit = function (inj, aggregator) {
	        if (lang_1.isBlank(inj)) return;
	        if (inj.hasDirective(this.directive)) {
	            collection_1.ListWrapper.push(aggregator, inj.get(this.directive));
	        }
	        var child = inj._head;
	        while (lang_1.isPresent(child)) {
	            this.visit(child, aggregator);
	            child = child._next;
	        }
	    };
	    return QueryRef;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=element_injector.js.map

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var lang_1 = __webpack_require__(118);
	var annotations_impl_1 = __webpack_require__(119);
	/**
	 * Specifies that a constant attribute value should be injected.
	 *
	 * The directive can inject constant string literals of host element attributes.
	 *
	 * ## Example
	 *
	 * Suppose we have an `<input>` element and want to know its `type`.
	 *
	 * ```html
	 * <input type="text">
	 * ```
	 *
	 * A decorator can inject string literal `text` like so:
	 *
	 * ```javascript
	 * @Directive({
	 *   selector: `input'
	 * })
	 * class InputDirective {
	 *   constructor(@Attribute('type') type) {
	 *     // type would be `text` in this example
	 *   }
	 * }
	 * ```
	 *
	 * @exportedAs angular2/annotations
	 */
	var Attribute = (function (_super) {
	    __extends(Attribute, _super);
	    function Attribute(attributeName) {
	        _super.call(this);
	        this.attributeName = attributeName;
	    }
	    Object.defineProperty(Attribute.prototype, "token", {
	        get: function get() {
	            // Normally one would default a token to a type of an injected value but here
	            // the type of a variable is "string" and we can't use primitive type as a return value
	            // so we use instance of Attribute instead. This doesn't matter much in practice as arguments
	            // with @Attribute annotation are injected by ElementInjector that doesn't take tokens into
	            // account.
	            return this;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Attribute = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [String])], Attribute);
	    return Attribute;
	})(annotations_impl_1.DependencyAnnotation);
	exports.Attribute = Attribute;
	/**
	 * Specifies that a {@link QueryList} should be injected.
	 *
	 * See {@link QueryList} for usage and example.
	 *
	 * @exportedAs angular2/annotations
	 */
	var Query = (function (_super) {
	    __extends(Query, _super);
	    function Query(directive) {
	        _super.call(this);
	        this.directive = directive;
	    }
	    Query = __decorate([lang_1.CONST(), __metadata("design:paramtypes", [Object])], Query);
	    return Query;
	})(annotations_impl_1.DependencyAnnotation);
	exports.Query = Query;
	exports.__esModule = true;
	//# sourceMappingURL=di.js.map

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var view_ref_1 = __webpack_require__(179);
	var api_1 = __webpack_require__(165);
	var view_manager_utils_1 = __webpack_require__(180);
	var view_pool_1 = __webpack_require__(184);
	/**
	 * Entry point for creating, moving views in the view hierarchy and destroying views.
	 * This manager contains all recursion and delegates to helper methods
	 * in AppViewManagerUtils and the Renderer, so unit tests get simpler.
	 */
	var AppViewManager = (function () {
	    function AppViewManager(viewPool, utils, renderer) {
	        this._renderer = renderer;
	        this._viewPool = viewPool;
	        this._utils = utils;
	    }
	    AppViewManager.prototype.getComponentView = function (hostLocation) {
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        return new view_ref_1.ViewRef(hostView.componentChildViews[boundElementIndex]);
	    };
	    AppViewManager.prototype.getViewContainer = function (location) {
	        var hostView = view_ref_1.internalView(location.parentView);
	        return hostView.elementInjectors[location.boundElementIndex].getViewContainerRef();
	    };
	    AppViewManager.prototype.getComponent = function (hostLocation) {
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        return this._utils.getComponentInstance(hostView, boundElementIndex);
	    };
	    AppViewManager.prototype.createDynamicComponentView = function (hostLocation, componentProtoViewRef, componentBinding, injector) {
	        var componentProtoView = view_ref_1.internalProtoView(componentProtoViewRef);
	        var hostView = view_ref_1.internalView(hostLocation.parentView);
	        var boundElementIndex = hostLocation.boundElementIndex;
	        var binder = hostView.proto.elementBinders[boundElementIndex];
	        if (!binder.hasDynamicComponent()) {
	            throw new lang_1.BaseException("There is no dynamic component directive at element " + boundElementIndex);
	        }
	        var componentView = this._createPooledView(componentProtoView);
	        this._renderer.attachComponentView(hostView.render, boundElementIndex, componentView.render);
	        this._utils.attachComponentView(hostView, boundElementIndex, componentView);
	        this._utils.hydrateDynamicComponentInElementInjector(hostView, boundElementIndex, componentBinding, injector);
	        this._utils.hydrateComponentView(hostView, boundElementIndex);
	        this._viewHydrateRecurse(componentView);
	        return new view_ref_1.ViewRef(componentView);
	    };
	    AppViewManager.prototype.createRootHostView = function (hostProtoViewRef, overrideSelector, injector) {
	        var hostProtoView = view_ref_1.internalProtoView(hostProtoViewRef);
	        var hostElementSelector = overrideSelector;
	        if (lang_1.isBlank(hostElementSelector)) {
	            hostElementSelector = hostProtoView.elementBinders[0].componentDirective.metadata.selector;
	        }
	        var renderView = this._renderer.createRootHostView(hostProtoView.render, hostElementSelector);
	        var hostView = this._utils.createView(hostProtoView, renderView, this, this._renderer);
	        this._renderer.setEventDispatcher(hostView.render, hostView);
	        this._createViewRecurse(hostView);
	        this._utils.hydrateRootHostView(hostView, injector);
	        this._viewHydrateRecurse(hostView);
	        return new view_ref_1.ViewRef(hostView);
	    };
	    AppViewManager.prototype.destroyRootHostView = function (hostViewRef) {
	        // Note: Don't detach the hostView as we want to leave the
	        // root element in place. Also don't put the hostView into the view pool
	        // as it is depending on the element for which it was created.
	        var hostView = view_ref_1.internalView(hostViewRef);
	        // We do want to destroy the component view though.
	        this._viewDehydrateRecurse(hostView, true);
	        this._renderer.destroyView(hostView.render);
	    };
	    AppViewManager.prototype.createFreeHostView = function (parentComponentLocation, hostProtoViewRef, injector) {
	        var hostProtoView = view_ref_1.internalProtoView(hostProtoViewRef);
	        var hostView = this._createPooledView(hostProtoView);
	        var parentComponentHostView = view_ref_1.internalView(parentComponentLocation.parentView);
	        var parentComponentBoundElementIndex = parentComponentLocation.boundElementIndex;
	        this._utils.attachAndHydrateFreeHostView(parentComponentHostView, parentComponentBoundElementIndex, hostView, injector);
	        this._viewHydrateRecurse(hostView);
	        return new view_ref_1.ViewRef(hostView);
	    };
	    AppViewManager.prototype.destroyFreeHostView = function (parentComponentLocation, hostViewRef) {
	        var hostView = view_ref_1.internalView(hostViewRef);
	        var parentView = view_ref_1.internalView(parentComponentLocation.parentView).componentChildViews[parentComponentLocation.boundElementIndex];
	        this._destroyFreeHostView(parentView, hostView);
	    };
	    AppViewManager.prototype.createViewInContainer = function (viewContainerLocation, atIndex, protoViewRef, context, injector) {
	        if (context === void 0) {
	            context = null;
	        }
	        if (injector === void 0) {
	            injector = null;
	        }
	        var protoView = view_ref_1.internalProtoView(protoViewRef);
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        var contextView = null;
	        var contextBoundElementIndex = null;
	        if (lang_1.isPresent(context)) {
	            contextView = view_ref_1.internalView(context.parentView);
	            contextBoundElementIndex = context.boundElementIndex;
	        }
	        var view = this._createPooledView(protoView);
	        this._renderer.attachViewInContainer(parentView.render, boundElementIndex, atIndex, view.render);
	        this._utils.attachViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view);
	        this._utils.hydrateViewInContainer(parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, injector);
	        this._viewHydrateRecurse(view);
	        return new view_ref_1.ViewRef(view);
	    };
	    AppViewManager.prototype.destroyViewInContainer = function (viewContainerLocation, atIndex) {
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        this._destroyViewInContainer(parentView, boundElementIndex, atIndex);
	    };
	    AppViewManager.prototype.attachViewInContainer = function (viewContainerLocation, atIndex, viewRef) {
	        var view = view_ref_1.internalView(viewRef);
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        // TODO(tbosch): the public methods attachViewInContainer/detachViewInContainer
	        // are used for moving elements without the same container.
	        // We will change this into an atomic `move` operation, which should preserve the
	        // previous parent injector (see https://github.com/angular/angular/issues/1377).
	        // Right now we are destroying any special
	        // context view that might have been used.
	        this._utils.attachViewInContainer(parentView, boundElementIndex, null, null, atIndex, view);
	        this._renderer.attachViewInContainer(parentView.render, boundElementIndex, atIndex, view.render);
	        return viewRef;
	    };
	    AppViewManager.prototype.detachViewInContainer = function (viewContainerLocation, atIndex) {
	        var parentView = view_ref_1.internalView(viewContainerLocation.parentView);
	        var boundElementIndex = viewContainerLocation.boundElementIndex;
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
	        this._renderer.detachViewInContainer(parentView.render, boundElementIndex, atIndex, view.render);
	        return new view_ref_1.ViewRef(view);
	    };
	    AppViewManager.prototype._createPooledView = function (protoView) {
	        var view = this._viewPool.getView(protoView);
	        if (lang_1.isBlank(view)) {
	            view = this._utils.createView(protoView, this._renderer.createView(protoView.render), this, this._renderer);
	            this._renderer.setEventDispatcher(view.render, view);
	            this._createViewRecurse(view);
	        }
	        return view;
	    };
	    AppViewManager.prototype._createViewRecurse = function (view) {
	        var binders = view.proto.elementBinders;
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            if (binder.hasStaticComponent()) {
	                var childView = this._createPooledView(binder.nestedProtoView);
	                this._renderer.attachComponentView(view.render, binderIdx, childView.render);
	                this._utils.attachComponentView(view, binderIdx, childView);
	            }
	        }
	    };
	    AppViewManager.prototype._destroyPooledView = function (view) {
	        // TODO: if the pool is full, call renderer.destroyView as well!
	        this._viewPool.returnView(view);
	    };
	    AppViewManager.prototype._destroyViewInContainer = function (parentView, boundElementIndex, atIndex) {
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        this._viewDehydrateRecurse(view, false);
	        this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
	        this._renderer.detachViewInContainer(parentView.render, boundElementIndex, atIndex, view.render);
	        this._destroyPooledView(view);
	    };
	    AppViewManager.prototype._destroyComponentView = function (hostView, boundElementIndex, componentView) {
	        this._viewDehydrateRecurse(componentView, false);
	        this._renderer.detachComponentView(hostView.render, boundElementIndex, componentView.render);
	        this._utils.detachComponentView(hostView, boundElementIndex);
	        this._destroyPooledView(componentView);
	    };
	    AppViewManager.prototype._destroyFreeHostView = function (parentView, hostView) {
	        this._viewDehydrateRecurse(hostView, true);
	        this._renderer.detachFreeHostView(parentView.render, hostView.render);
	        this._utils.detachFreeHostView(parentView, hostView);
	        this._destroyPooledView(hostView);
	    };
	    AppViewManager.prototype._viewHydrateRecurse = function (view) {
	        this._renderer.hydrateView(view.render);
	        var binders = view.proto.elementBinders;
	        for (var i = 0; i < binders.length; ++i) {
	            if (binders[i].hasStaticComponent()) {
	                this._utils.hydrateComponentView(view, i);
	                this._viewHydrateRecurse(view.componentChildViews[i]);
	            }
	        }
	    };
	    AppViewManager.prototype._viewDehydrateRecurse = function (view, forceDestroyComponents) {
	        this._utils.dehydrateView(view);
	        this._renderer.dehydrateView(view.render);
	        var binders = view.proto.elementBinders;
	        for (var i = 0; i < binders.length; i++) {
	            var componentView = view.componentChildViews[i];
	            if (lang_1.isPresent(componentView)) {
	                if (binders[i].hasDynamicComponent() || forceDestroyComponents) {
	                    this._destroyComponentView(view, i, componentView);
	                } else {
	                    this._viewDehydrateRecurse(componentView, false);
	                }
	            }
	            var vc = view.viewContainers[i];
	            if (lang_1.isPresent(vc)) {
	                for (var j = vc.views.length - 1; j >= 0; j--) {
	                    this._destroyViewInContainer(view, i, j);
	                }
	            }
	        }
	        // freeHostViews
	        for (var i = view.freeHostViews.length - 1; i >= 0; i--) {
	            var hostView = view.freeHostViews[i];
	            this._destroyFreeHostView(view, hostView);
	        }
	    };
	    AppViewManager = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [view_pool_1.AppViewPool, view_manager_utils_1.AppViewManagerUtils, api_1.Renderer])], AppViewManager);
	    return AppViewManager;
	})();
	exports.AppViewManager = AppViewManager;
	exports.__esModule = true;
	//# sourceMappingURL=view_manager.js.map

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	// This is a workaround for privacy in Dart as we don't have library parts
	function internalView(viewRef) {
	    return viewRef._view;
	}
	exports.internalView = internalView;
	// This is a workaround for privacy in Dart as we don't have library parts
	function internalProtoView(protoViewRef) {
	    return lang_1.isPresent(protoViewRef) ? protoViewRef._protoView : null;
	}
	exports.internalProtoView = internalProtoView;
	/**
	 * @exportedAs angular2/view
	 */
	var ViewRef = (function () {
	    function ViewRef(view) {
	        this._view = view;
	    }
	    Object.defineProperty(ViewRef.prototype, "render", {
	        get: function get() {
	            return this._view.render;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ViewRef.prototype.setLocal = function (contextName, value) {
	        this._view.setLocal(contextName, value);
	    };
	    return ViewRef;
	})();
	exports.ViewRef = ViewRef;
	/**
	 * @exportedAs angular2/view
	 */
	var ProtoViewRef = (function () {
	    function ProtoViewRef(protoView) {
	        this._protoView = protoView;
	    }
	    return ProtoViewRef;
	})();
	exports.ProtoViewRef = ProtoViewRef;
	exports.__esModule = true;
	//# sourceMappingURL=view_ref.js.map

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var collection_1 = __webpack_require__(121);
	var eli = __webpack_require__(176);
	var lang_1 = __webpack_require__(118);
	var viewModule = __webpack_require__(181);
	var directive_resolver_1 = __webpack_require__(183);
	var AppViewManagerUtils = (function () {
	    function AppViewManagerUtils(metadataReader) {
	        this._directiveResolver = metadataReader;
	    }
	    AppViewManagerUtils.prototype.getComponentInstance = function (parentView, boundElementIndex) {
	        var binder = parentView.proto.elementBinders[boundElementIndex];
	        var eli = parentView.elementInjectors[boundElementIndex];
	        if (binder.hasDynamicComponent()) {
	            return eli.getDynamicallyLoadedComponent();
	        } else {
	            return eli.getComponent();
	        }
	    };
	    AppViewManagerUtils.prototype.createView = function (protoView, renderView, viewManager, renderer) {
	        var view = new viewModule.AppView(renderer, protoView, protoView.protoLocals);
	        // TODO(tbosch): pass RenderViewRef as argument to AppView!
	        view.render = renderView;
	        var changeDetector = protoView.protoChangeDetector.instantiate(view);
	        var binders = protoView.elementBinders;
	        var elementInjectors = collection_1.ListWrapper.createFixedSize(binders.length);
	        var rootElementInjectors = [];
	        var preBuiltObjects = collection_1.ListWrapper.createFixedSize(binders.length);
	        var componentChildViews = collection_1.ListWrapper.createFixedSize(binders.length);
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            var elementInjector = null;
	            // elementInjectors and rootElementInjectors
	            var protoElementInjector = binder.protoElementInjector;
	            if (lang_1.isPresent(protoElementInjector)) {
	                if (lang_1.isPresent(protoElementInjector.parent)) {
	                    var parentElementInjector = elementInjectors[protoElementInjector.parent.index];
	                    elementInjector = protoElementInjector.instantiate(parentElementInjector);
	                } else {
	                    elementInjector = protoElementInjector.instantiate(null);
	                    collection_1.ListWrapper.push(rootElementInjectors, elementInjector);
	                }
	            }
	            elementInjectors[binderIdx] = elementInjector;
	            // preBuiltObjects
	            if (lang_1.isPresent(elementInjector)) {
	                var embeddedProtoView = binder.hasEmbeddedProtoView() ? binder.nestedProtoView : null;
	                preBuiltObjects[binderIdx] = new eli.PreBuiltObjects(viewManager, view, embeddedProtoView);
	            }
	        }
	        view.init(changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, componentChildViews);
	        return view;
	    };
	    AppViewManagerUtils.prototype.attachComponentView = function (hostView, boundElementIndex, componentView) {
	        var childChangeDetector = componentView.changeDetector;
	        hostView.changeDetector.addShadowDomChild(childChangeDetector);
	        hostView.componentChildViews[boundElementIndex] = componentView;
	    };
	    AppViewManagerUtils.prototype.detachComponentView = function (hostView, boundElementIndex) {
	        var componentView = hostView.componentChildViews[boundElementIndex];
	        hostView.changeDetector.removeShadowDomChild(componentView.changeDetector);
	        hostView.componentChildViews[boundElementIndex] = null;
	    };
	    AppViewManagerUtils.prototype.hydrateComponentView = function (hostView, boundElementIndex, injector) {
	        if (injector === void 0) {
	            injector = null;
	        }
	        var elementInjector = hostView.elementInjectors[boundElementIndex];
	        var componentView = hostView.componentChildViews[boundElementIndex];
	        var component = this.getComponentInstance(hostView, boundElementIndex);
	        this._hydrateView(componentView, injector, elementInjector, component, null);
	    };
	    AppViewManagerUtils.prototype.hydrateRootHostView = function (hostView, injector) {
	        if (injector === void 0) {
	            injector = null;
	        }
	        this._hydrateView(hostView, injector, null, new Object(), null);
	    };
	    AppViewManagerUtils.prototype.attachAndHydrateFreeHostView = function (parentComponentHostView, parentComponentBoundElementIndex, hostView, injector) {
	        if (injector === void 0) {
	            injector = null;
	        }
	        var hostElementInjector = parentComponentHostView.elementInjectors[parentComponentBoundElementIndex];
	        var parentView = parentComponentHostView.componentChildViews[parentComponentBoundElementIndex];
	        parentView.changeDetector.addChild(hostView.changeDetector);
	        collection_1.ListWrapper.push(parentView.freeHostViews, hostView);
	        this._hydrateView(hostView, injector, hostElementInjector, new Object(), null);
	    };
	    AppViewManagerUtils.prototype.detachFreeHostView = function (parentView, hostView) {
	        parentView.changeDetector.removeChild(hostView.changeDetector);
	        collection_1.ListWrapper.remove(parentView.freeHostViews, hostView);
	    };
	    AppViewManagerUtils.prototype.attachViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, view) {
	        if (lang_1.isBlank(contextView)) {
	            contextView = parentView;
	            contextBoundElementIndex = boundElementIndex;
	        }
	        parentView.changeDetector.addChild(view.changeDetector);
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        if (lang_1.isBlank(viewContainer)) {
	            viewContainer = new viewModule.AppViewContainer();
	            parentView.viewContainers[boundElementIndex] = viewContainer;
	        }
	        collection_1.ListWrapper.insert(viewContainer.views, atIndex, view);
	        var sibling;
	        if (atIndex == 0) {
	            sibling = null;
	        } else {
	            sibling = collection_1.ListWrapper.last(viewContainer.views[atIndex - 1].rootElementInjectors);
	        }
	        var elementInjector = contextView.elementInjectors[contextBoundElementIndex];
	        for (var i = view.rootElementInjectors.length - 1; i >= 0; i--) {
	            view.rootElementInjectors[i].linkAfter(elementInjector, sibling);
	        }
	    };
	    AppViewManagerUtils.prototype.detachViewInContainer = function (parentView, boundElementIndex, atIndex) {
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        view.changeDetector.remove();
	        collection_1.ListWrapper.removeAt(viewContainer.views, atIndex);
	        for (var i = 0; i < view.rootElementInjectors.length; ++i) {
	            view.rootElementInjectors[i].unlink();
	        }
	    };
	    AppViewManagerUtils.prototype.hydrateViewInContainer = function (parentView, boundElementIndex, contextView, contextBoundElementIndex, atIndex, injector) {
	        if (lang_1.isBlank(contextView)) {
	            contextView = parentView;
	            contextBoundElementIndex = boundElementIndex;
	        }
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var view = viewContainer.views[atIndex];
	        var elementInjector = contextView.elementInjectors[contextBoundElementIndex].getHost();
	        this._hydrateView(view, injector, elementInjector, contextView.context, contextView.locals);
	    };
	    AppViewManagerUtils.prototype.hydrateDynamicComponentInElementInjector = function (hostView, boundElementIndex, componentBinding, injector) {
	        if (injector === void 0) {
	            injector = null;
	        }
	        var elementInjector = hostView.elementInjectors[boundElementIndex];
	        if (lang_1.isPresent(elementInjector.getDynamicallyLoadedComponent())) {
	            throw new lang_1.BaseException("There already is a dynamic component loaded at element " + boundElementIndex);
	        }
	        if (lang_1.isBlank(injector)) {
	            injector = elementInjector.getLightDomAppInjector();
	        }
	        var annotation = this._directiveResolver.resolve(componentBinding.token);
	        var componentDirective = eli.DirectiveBinding.createFromBinding(componentBinding, annotation);
	        elementInjector.dynamicallyCreateComponent(componentDirective, injector);
	    };
	    AppViewManagerUtils.prototype._hydrateView = function (view, appInjector, hostElementInjector, context, parentLocals) {
	        if (lang_1.isBlank(appInjector)) {
	            appInjector = hostElementInjector.getShadowDomAppInjector();
	        }
	        if (lang_1.isBlank(appInjector)) {
	            appInjector = hostElementInjector.getLightDomAppInjector();
	        }
	        view.context = context;
	        view.locals.parent = parentLocals;
	        var binders = view.proto.elementBinders;
	        for (var i = 0; i < binders.length; ++i) {
	            var elementInjector = view.elementInjectors[i];
	            if (lang_1.isPresent(elementInjector)) {
	                elementInjector.hydrate(appInjector, hostElementInjector, view.preBuiltObjects[i]);
	                this._setUpEventEmitters(view, elementInjector, i);
	                this._setUpHostActions(view, elementInjector, i);
	                // The exporting of $implicit is a special case. Since multiple elements will all export
	                // the different values as $implicit, directly assign $implicit bindings to the variable
	                // name.
	                var exportImplicitName = elementInjector.getExportImplicitName();
	                if (elementInjector.isExportingComponent()) {
	                    view.locals.set(exportImplicitName, elementInjector.getComponent());
	                } else if (elementInjector.isExportingElement()) {
	                    view.locals.set(exportImplicitName, elementInjector.getElementRef().domElement);
	                }
	            }
	        }
	        view.changeDetector.hydrate(view.context, view.locals, view);
	    };
	    AppViewManagerUtils.prototype._setUpEventEmitters = function (view, elementInjector, boundElementIndex) {
	        var emitters = elementInjector.getEventEmitterAccessors();
	        for (var directiveIndex = 0; directiveIndex < emitters.length; ++directiveIndex) {
	            var directiveEmitters = emitters[directiveIndex];
	            var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
	            for (var eventIndex = 0; eventIndex < directiveEmitters.length; ++eventIndex) {
	                var eventEmitterAccessor = directiveEmitters[eventIndex];
	                eventEmitterAccessor.subscribe(view, boundElementIndex, directive);
	            }
	        }
	    };
	    AppViewManagerUtils.prototype._setUpHostActions = function (view, elementInjector, boundElementIndex) {
	        var hostActions = elementInjector.getHostActionAccessors();
	        for (var directiveIndex = 0; directiveIndex < hostActions.length; ++directiveIndex) {
	            var directiveHostActions = hostActions[directiveIndex];
	            var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
	            for (var index = 0; index < directiveHostActions.length; ++index) {
	                var hostActionAccessor = directiveHostActions[index];
	                hostActionAccessor.subscribe(view, boundElementIndex, directive);
	            }
	        }
	    };
	    AppViewManagerUtils.prototype.dehydrateView = function (view) {
	        var binders = view.proto.elementBinders;
	        for (var i = 0; i < binders.length; ++i) {
	            var elementInjector = view.elementInjectors[i];
	            if (lang_1.isPresent(elementInjector)) {
	                elementInjector.dehydrate();
	            }
	        }
	        if (lang_1.isPresent(view.locals)) {
	            view.locals.clearValues();
	        }
	        view.context = null;
	        view.changeDetector.dehydrate();
	    };
	    AppViewManagerUtils = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [directive_resolver_1.DirectiveResolver])], AppViewManagerUtils);
	    return AppViewManagerUtils;
	})();
	exports.AppViewManagerUtils = AppViewManagerUtils;
	exports.__esModule = true;
	//# sourceMappingURL=view_manager_utils.js.map

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	var change_detection_1 = __webpack_require__(122);
	var element_binder_1 = __webpack_require__(182);
	var lang_1 = __webpack_require__(118);
	var AppViewContainer = (function () {
	    function AppViewContainer() {
	        // The order in this list matches the DOM order.
	        this.views = [];
	    }
	    return AppViewContainer;
	})();
	exports.AppViewContainer = AppViewContainer;
	/**
	 * Const of making objects: http://jsperf.com/instantiate-size-of-object
	 *
	 */
	var AppView = (function () {
	    function AppView(renderer, proto, protoLocals) {
	        this.renderer = renderer;
	        this.proto = proto;
	        this.render = null;
	        this.changeDetector = null;
	        this.elementInjectors = null;
	        this.rootElementInjectors = null;
	        this.componentChildViews = null;
	        this.viewContainers = collection_1.ListWrapper.createFixedSize(this.proto.elementBinders.length);
	        this.preBuiltObjects = null;
	        this.context = null;
	        this.locals = new change_detection_1.Locals(null, collection_1.MapWrapper.clone(protoLocals)); // TODO optimize this
	        this.freeHostViews = [];
	    }
	    AppView.prototype.init = function (changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, componentChildViews) {
	        this.changeDetector = changeDetector;
	        this.elementInjectors = elementInjectors;
	        this.rootElementInjectors = rootElementInjectors;
	        this.preBuiltObjects = preBuiltObjects;
	        this.componentChildViews = componentChildViews;
	    };
	    AppView.prototype.setLocal = function (contextName, value) {
	        if (!this.hydrated()) throw new lang_1.BaseException('Cannot set locals on dehydrated view.');
	        if (!collection_1.MapWrapper.contains(this.proto.variableBindings, contextName)) {
	            return;
	        }
	        var templateName = collection_1.MapWrapper.get(this.proto.variableBindings, contextName);
	        this.locals.set(templateName, value);
	    };
	    AppView.prototype.hydrated = function () {
	        return lang_1.isPresent(this.context);
	    };
	    /**
	     * Triggers the event handlers for the element and the directives.
	     *
	     * This method is intended to be called from directive EventEmitters.
	     *
	     * @param {string} eventName
	     * @param {*} eventObj
	     * @param {int} binderIndex
	     */
	    AppView.prototype.triggerEventHandlers = function (eventName, eventObj, binderIndex) {
	        var locals = collection_1.MapWrapper.create();
	        collection_1.MapWrapper.set(locals, '$event', eventObj);
	        this.dispatchEvent(binderIndex, eventName, locals);
	    };
	    // dispatch to element injector or text nodes based on context
	    AppView.prototype.notifyOnBinding = function (b, currentValue) {
	        if (b.isElement()) {
	            this.renderer.setElementProperty(this.render, b.elementIndex, b.propertyName, currentValue);
	        } else {
	            // we know it refers to _textNodes.
	            this.renderer.setText(this.render, b.elementIndex, currentValue);
	        }
	    };
	    AppView.prototype.getDirectiveFor = function (directive) {
	        var elementInjector = this.elementInjectors[directive.elementIndex];
	        return elementInjector.getDirectiveAtIndex(directive.directiveIndex);
	    };
	    AppView.prototype.getDetectorFor = function (directive) {
	        var childView = this.componentChildViews[directive.elementIndex];
	        return lang_1.isPresent(childView) ? childView.changeDetector : null;
	    };
	    AppView.prototype.callAction = function (elementIndex, actionExpression, action) {
	        this.renderer.callAction(this.render, elementIndex, actionExpression, action);
	    };
	    // implementation of EventDispatcher#dispatchEvent
	    // returns false if preventDefault must be applied to the DOM event
	    AppView.prototype.dispatchEvent = function (elementIndex, eventName, locals) {
	        var _this = this;
	        // Most of the time the event will be fired only when the view is in the live document.
	        // However, in a rare circumstance the view might get dehydrated, in between the event
	        // queuing up and firing.
	        var allowDefaultBehavior = true;
	        if (this.hydrated()) {
	            var elBinder = this.proto.elementBinders[elementIndex];
	            if (lang_1.isBlank(elBinder.hostListeners)) return allowDefaultBehavior;
	            var eventMap = elBinder.hostListeners[eventName];
	            if (lang_1.isBlank(eventMap)) return allowDefaultBehavior;
	            collection_1.MapWrapper.forEach(eventMap, function (expr, directiveIndex) {
	                var context;
	                if (directiveIndex === -1) {
	                    context = _this.context;
	                } else {
	                    context = _this.elementInjectors[elementIndex].getDirectiveAtIndex(directiveIndex);
	                }
	                var result = expr.eval(context, new change_detection_1.Locals(_this.locals, locals));
	                if (lang_1.isPresent(result)) {
	                    allowDefaultBehavior = allowDefaultBehavior && result == true;
	                }
	            });
	        }
	        return allowDefaultBehavior;
	    };
	    return AppView;
	})();
	exports.AppView = AppView;
	/**
	 *
	 */
	var AppProtoView = (function () {
	    function AppProtoView(render, protoChangeDetector, variableBindings) {
	        var _this = this;
	        this.render = render;
	        this.protoChangeDetector = protoChangeDetector;
	        this.variableBindings = variableBindings;
	        this.elementBinders = [];
	        this.protoLocals = collection_1.MapWrapper.create();
	        if (lang_1.isPresent(variableBindings)) {
	            collection_1.MapWrapper.forEach(variableBindings, function (templateName, _) {
	                collection_1.MapWrapper.set(_this.protoLocals, templateName, null);
	            });
	        }
	    }
	    AppProtoView.prototype.bindElement = function (parent, distanceToParent, protoElementInjector, componentDirective) {
	        if (componentDirective === void 0) {
	            componentDirective = null;
	        }
	        var elBinder = new element_binder_1.ElementBinder(this.elementBinders.length, parent, distanceToParent, protoElementInjector, componentDirective);
	        collection_1.ListWrapper.push(this.elementBinders, elBinder);
	        return elBinder;
	    };
	    /**
	     * Adds an event binding for the last created ElementBinder via bindElement.
	     *
	     * If the directive index is a positive integer, the event is evaluated in the context of
	     * the given directive.
	     *
	     * If the directive index is -1, the event is evaluated in the context of the enclosing view.
	     *
	     * @param {string} eventName
	     * @param {AST} expression
	     * @param {int} directiveIndex The directive index in the binder or -1 when the event is not bound
	     *                             to a directive
	     */
	    AppProtoView.prototype.bindEvent = function (eventBindings, boundElementIndex, directiveIndex) {
	        if (directiveIndex === void 0) {
	            directiveIndex = -1;
	        }
	        var elBinder = this.elementBinders[boundElementIndex];
	        var events = elBinder.hostListeners;
	        if (lang_1.isBlank(events)) {
	            events = collection_1.StringMapWrapper.create();
	            elBinder.hostListeners = events;
	        }
	        for (var i = 0; i < eventBindings.length; i++) {
	            var eventBinding = eventBindings[i];
	            var eventName = eventBinding.fullName;
	            var event = collection_1.StringMapWrapper.get(events, eventName);
	            if (lang_1.isBlank(event)) {
	                event = collection_1.MapWrapper.create();
	                collection_1.StringMapWrapper.set(events, eventName, event);
	            }
	            collection_1.MapWrapper.set(event, directiveIndex, eventBinding.source);
	        }
	    };
	    return AppProtoView;
	})();
	exports.AppProtoView = AppProtoView;
	exports.__esModule = true;
	//# sourceMappingURL=view.js.map

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var ElementBinder = (function () {
	    function ElementBinder(index, parent, distanceToParent, protoElementInjector, componentDirective) {
	        this.index = index;
	        this.parent = parent;
	        this.distanceToParent = distanceToParent;
	        this.protoElementInjector = protoElementInjector;
	        this.componentDirective = componentDirective;
	        if (lang_1.isBlank(index)) {
	            throw new lang_1.BaseException('null index not allowed.');
	        }
	        // updated later when events are bound
	        this.hostListeners = null;
	        // updated later, so we are able to resolve cycles
	        this.nestedProtoView = null;
	    }
	    ElementBinder.prototype.hasStaticComponent = function () {
	        return lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
	    };
	    ElementBinder.prototype.hasDynamicComponent = function () {
	        return lang_1.isPresent(this.componentDirective) && lang_1.isBlank(this.nestedProtoView);
	    };
	    ElementBinder.prototype.hasEmbeddedProtoView = function () {
	        return !lang_1.isPresent(this.componentDirective) && lang_1.isPresent(this.nestedProtoView);
	    };
	    return ElementBinder;
	})();
	exports.ElementBinder = ElementBinder;
	exports.__esModule = true;
	//# sourceMappingURL=element_binder.js.map

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var annotations_1 = __webpack_require__(120);
	var reflection_1 = __webpack_require__(129);
	var DirectiveResolver = (function () {
	    function DirectiveResolver() {}
	    DirectiveResolver.prototype.resolve = function (type) {
	        var annotations = reflection_1.reflector.annotations(di_1.resolveForwardRef(type));
	        if (lang_1.isPresent(annotations)) {
	            for (var i = 0; i < annotations.length; i++) {
	                var annotation = annotations[i];
	                if (annotation instanceof annotations_1.Directive) {
	                    return annotation;
	                }
	            }
	        }
	        throw new lang_1.BaseException("No Directive annotation found on " + lang_1.stringify(type));
	    };
	    DirectiveResolver = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [])], DirectiveResolver);
	    return DirectiveResolver;
	})();
	exports.DirectiveResolver = DirectiveResolver;
	exports.__esModule = true;
	//# sourceMappingURL=directive_resolver.js.map

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = this && this.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var di_1 = __webpack_require__(167);
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	// TODO(tbosch): Make this an OpaqueToken as soon as our transpiler supports this!
	exports.APP_VIEW_POOL_CAPACITY = "AppViewPool.viewPoolCapacity";
	var AppViewPool = (function () {
	    function AppViewPool(poolCapacityPerProtoView) {
	        this._poolCapacityPerProtoView = poolCapacityPerProtoView;
	        this._pooledViewsPerProtoView = collection_1.MapWrapper.create();
	    }
	    AppViewPool.prototype.getView = function (protoView) {
	        var pooledViews = collection_1.MapWrapper.get(this._pooledViewsPerProtoView, protoView);
	        if (lang_1.isPresent(pooledViews) && pooledViews.length > 0) {
	            return collection_1.ListWrapper.removeLast(pooledViews);
	        }
	        return null;
	    };
	    AppViewPool.prototype.returnView = function (view) {
	        var protoView = view.proto;
	        var pooledViews = collection_1.MapWrapper.get(this._pooledViewsPerProtoView, protoView);
	        if (lang_1.isBlank(pooledViews)) {
	            pooledViews = [];
	            collection_1.MapWrapper.set(this._pooledViewsPerProtoView, protoView, pooledViews);
	        }
	        if (pooledViews.length < this._poolCapacityPerProtoView) {
	            collection_1.ListWrapper.push(pooledViews, view);
	        }
	    };
	    AppViewPool = __decorate([__param(0, di_1.Inject(exports.APP_VIEW_POOL_CAPACITY)), __metadata("design:paramtypes", [Object])], AppViewPool);
	    return AppViewPool;
	})();
	exports.AppViewPool = AppViewPool;
	exports.__esModule = true;
	//# sourceMappingURL=view_pool.js.map

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var view_ref_1 = __webpack_require__(179);
	/**
	 * @exportedAs angular2/core
	 */
	var ViewContainerRef = (function () {
	    function ViewContainerRef(viewManager, element) {
	        this.viewManager = viewManager;
	        this.element = element;
	    }
	    ViewContainerRef.prototype._getViews = function () {
	        var vc = view_ref_1.internalView(this.element.parentView).viewContainers[this.element.boundElementIndex];
	        return lang_1.isPresent(vc) ? vc.views : [];
	    };
	    ViewContainerRef.prototype.clear = function () {
	        for (var i = this.length - 1; i >= 0; i--) {
	            this.remove(i);
	        }
	    };
	    ViewContainerRef.prototype.get = function (index) {
	        return new view_ref_1.ViewRef(this._getViews()[index]);
	    };
	    Object.defineProperty(ViewContainerRef.prototype, 'length', {
	        get: function get() {
	            return this._getViews().length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    // TODO(rado): profile and decide whether bounds checks should be added
	    // to the methods below.
	    ViewContainerRef.prototype.create = function (protoViewRef, atIndex, context, injector) {
	        if (protoViewRef === void 0) {
	            protoViewRef = null;
	        }
	        if (atIndex === void 0) {
	            atIndex = -1;
	        }
	        if (context === void 0) {
	            context = null;
	        }
	        if (injector === void 0) {
	            injector = null;
	        }
	        if (atIndex == -1) atIndex = this.length;
	        return this.viewManager.createViewInContainer(this.element, atIndex, protoViewRef, context, injector);
	    };
	    ViewContainerRef.prototype.insert = function (viewRef, atIndex) {
	        if (atIndex === void 0) {
	            atIndex = -1;
	        }
	        if (atIndex == -1) atIndex = this.length;
	        return this.viewManager.attachViewInContainer(this.element, atIndex, viewRef);
	    };
	    ViewContainerRef.prototype.indexOf = function (viewRef) {
	        return collection_1.ListWrapper.indexOf(this._getViews(), view_ref_1.internalView(viewRef));
	    };
	    ViewContainerRef.prototype.remove = function (atIndex) {
	        if (atIndex === void 0) {
	            atIndex = -1;
	        }
	        if (atIndex == -1) atIndex = this.length - 1;
	        this.viewManager.destroyViewInContainer(this.element, atIndex);
	        // view is intentionally not returned to the client.
	    };
	    /**
	     * The method can be used together with insert to implement a view move, i.e.
	     * moving the dom nodes while the directives in the view stay intact.
	     */
	    ViewContainerRef.prototype.detach = function (atIndex) {
	        if (atIndex === void 0) {
	            atIndex = -1;
	        }
	        if (atIndex == -1) atIndex = this.length - 1;
	        return this.viewManager.detachViewInContainer(this.element, atIndex);
	    };
	    return ViewContainerRef;
	})();
	exports.ViewContainerRef = ViewContainerRef;
	exports.__esModule = true;
	//# sourceMappingURL=view_container_ref.js.map

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	  function __() {
	    this.constructor = d;
	  }
	  __.prototype = b.prototype;
	  d.prototype = new __();
	};
	var base_query_list_1 = __webpack_require__(187);
	/**
	 * An iterable live list of components in the Light DOM.
	 *
	 * Injectable Objects that contains a live list of child directives in the light DOM of a directive.
	 * The directives are kept in depth-first pre-order traversal of the DOM.
	 *
	 * The `QueryList` is iterable, therefore it can be used in both javascript code with `for..of` loop
	 * as well as in
	 * template with `*ng-for="of"` directive.
	 *
	 * NOTE: In the future this class will implement an `Observable` interface. For now it uses a plain
	 * list of observable
	 * callbacks.
	 *
	 * # Example:
	 *
	 * Assume that `<tabs>` component would like to get a list its children which are `<pane>`
	 * components as shown in this
	 * example:
	 *
	 * ```html
	 * <tabs>
	 *   <pane title="Overview">...</pane>
	 *   <pane *ng-for="#o of objects" [title]="o.title">{{o.text}}</pane>
	 * </tabs>
	 * ```
	 *
	 * In the above example the list of `<tabs>` elements needs to get a list of `<pane>` elements so
	 * that it could render
	 * tabs with the correct titles and in the correct order.
	 *
	 * A possible solution would be for a `<pane>` to inject `<tabs>` component and then register itself
	 * with `<tabs>`
	 * component's on `hydrate` and deregister on `dehydrate` event. While a reasonable approach, this
	 * would only work
	 * partialy since `*ng-for` could rearange the list of `<pane>` components which would not be
	 * reported to `<tabs>`
	 * component and thus the list of `<pane>` componets would be out of sync with respect to the list
	 * of `<pane>` elements.
	 *
	 * A preferred solution is to inject a `QueryList` which is a live list of directives in the
	 * component`s light DOM.
	 *
	 * ```javascript
	 * @Component({
	 *   selector: 'tabs'
	 * })
	 * @View({
	 *  template: `
	 *    <ul>
	 *      <li *ng-for="#pane of panes">{{pane.title}}</li>
	 *    </ul>
	 *    <content></content>
	 *  `
	 * })
	 * class Tabs {
	 *   panes: QueryList<Pane>
	 *
	 *   constructor(@Query(Pane) panes:QueryList<Pane>) {
	 *     this.panes = panes;
	 *   }
	 * }
	 *
	 * @Component({
	 *   selector: 'pane',
	 *   properties: ['title']
	 * })
	 * @View(...)
	 * class Pane {
	 *   title:string;
	 * }
	 * ```
	 *
	 * @exportedAs angular2/view
	 */
	var QueryList = (function (_super) {
	  __extends(QueryList, _super);
	  function QueryList() {
	    _super.apply(this, arguments);
	  }
	  /**
	   */
	  QueryList.prototype.onChange = function (callback) {
	    return _super.prototype.onChange.call(this, callback);
	  };
	  /**
	   */
	  QueryList.prototype.removeCallback = function (callback) {
	    return _super.prototype.removeCallback.call(this, callback);
	  };
	  return QueryList;
	})(base_query_list_1.BaseQueryList);
	exports.QueryList = QueryList;
	exports.__esModule = true;
	//# sourceMappingURL=query_list.js.map

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	/**
	 * Injectable Objects that contains a live list of child directives in the light Dom of a directive.
	 * The directives are kept in depth-first pre-order traversal of the DOM.
	 *
	 * In the future this class will implement an Observable interface.
	 * For now it uses a plain list of observable callbacks.
	 *
	 * @exportedAs angular2/view
	 */
	var BaseQueryList = (function () {
	    function BaseQueryList() {
	        this._results = [];
	        this._callbacks = [];
	        this._dirty = false;
	    }
	    BaseQueryList.prototype[Symbol.iterator] = function () {
	        return this._results[Symbol.iterator]();
	    };
	    BaseQueryList.prototype.reset = function (newList) {
	        this._results = newList;
	        this._dirty = true;
	    };
	    BaseQueryList.prototype.add = function (obj) {
	        collection_1.ListWrapper.push(this._results, obj);
	        this._dirty = true;
	    };
	    // TODO(rado): hook up with change detection after #995.
	    BaseQueryList.prototype.fireCallbacks = function () {
	        if (this._dirty) {
	            collection_1.ListWrapper.forEach(this._callbacks, function (c) {
	                return c();
	            });
	            this._dirty = false;
	        }
	    };
	    BaseQueryList.prototype.onChange = function (callback) {
	        collection_1.ListWrapper.push(this._callbacks, callback);
	    };
	    BaseQueryList.prototype.removeCallback = function (callback) {
	        collection_1.ListWrapper.remove(this._callbacks, callback);
	    };
	    return BaseQueryList;
	})();
	exports.BaseQueryList = BaseQueryList;
	exports.__esModule = true;
	//# sourceMappingURL=base_query_list.js.map

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var view_1 = __webpack_require__(161);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var reflection_1 = __webpack_require__(129);
	var TemplateResolver = (function () {
	    function TemplateResolver() {
	        this._cache = collection_1.MapWrapper.create();
	    }
	    TemplateResolver.prototype.resolve = function (component) {
	        var view = collection_1.MapWrapper.get(this._cache, component);
	        if (lang_1.isBlank(view)) {
	            view = this._resolve(component);
	            collection_1.MapWrapper.set(this._cache, component, view);
	        }
	        return view;
	    };
	    TemplateResolver.prototype._resolve = function (component) {
	        var annotations = reflection_1.reflector.annotations(component);
	        for (var i = 0; i < annotations.length; i++) {
	            var annotation = annotations[i];
	            if (annotation instanceof view_1.View) {
	                return annotation;
	            }
	        }
	        // No annotation = dynamic component!
	        return null;
	    };
	    TemplateResolver = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [])], TemplateResolver);
	    return TemplateResolver;
	})();
	exports.TemplateResolver = TemplateResolver;
	exports.__esModule = true;
	//# sourceMappingURL=template_resolver.js.map

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var ComponentUrlMapper = (function () {
	    function ComponentUrlMapper() {}
	    // Returns the base URL to the component source file.
	    // The returned URL could be:
	    // - an absolute URL,
	    // - a path relative to the application
	    ComponentUrlMapper.prototype.getUrl = function (component) {
	        return "./";
	    };
	    ComponentUrlMapper = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [])], ComponentUrlMapper);
	    return ComponentUrlMapper;
	})();
	exports.ComponentUrlMapper = ComponentUrlMapper;
	var RuntimeComponentUrlMapper = (function (_super) {
	    __extends(RuntimeComponentUrlMapper, _super);
	    function RuntimeComponentUrlMapper() {
	        _super.call(this);
	        this._componentUrls = collection_1.MapWrapper.create();
	    }
	    RuntimeComponentUrlMapper.prototype.setComponentUrl = function (component, url) {
	        collection_1.MapWrapper.set(this._componentUrls, component, url);
	    };
	    RuntimeComponentUrlMapper.prototype.getUrl = function (component) {
	        var url = collection_1.MapWrapper.get(this._componentUrls, component);
	        if (lang_1.isPresent(url)) return url;
	        return _super.prototype.getUrl.call(this, component);
	    };
	    return RuntimeComponentUrlMapper;
	})(ComponentUrlMapper);
	exports.RuntimeComponentUrlMapper = RuntimeComponentUrlMapper;
	exports.__esModule = true;
	//# sourceMappingURL=component_url_mapper.js.map

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var reflection_1 = __webpack_require__(129);
	var change_detection_1 = __webpack_require__(122);
	var renderApi = __webpack_require__(165);
	var view_1 = __webpack_require__(181);
	var element_injector_1 = __webpack_require__(176);
	var BindingRecordsCreator = (function () {
	    function BindingRecordsCreator() {
	        this._directiveRecordsMap = collection_1.MapWrapper.create();
	        this._textNodeIndex = 0;
	    }
	    BindingRecordsCreator.prototype.getBindingRecords = function (elementBinders, allDirectiveMetadatas) {
	        var bindings = [];
	        for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; boundElementIndex++) {
	            var renderElementBinder = elementBinders[boundElementIndex];
	            this._createTextNodeRecords(bindings, renderElementBinder);
	            this._createElementPropertyRecords(bindings, boundElementIndex, renderElementBinder);
	            this._createDirectiveRecords(bindings, boundElementIndex, renderElementBinder.directives, allDirectiveMetadatas);
	        }
	        return bindings;
	    };
	    BindingRecordsCreator.prototype.getDirectiveRecords = function (elementBinders, allDirectiveMetadatas) {
	        var directiveRecords = [];
	        for (var elementIndex = 0; elementIndex < elementBinders.length; ++elementIndex) {
	            var dirs = elementBinders[elementIndex].directives;
	            for (var dirIndex = 0; dirIndex < dirs.length; ++dirIndex) {
	                collection_1.ListWrapper.push(directiveRecords, this._getDirectiveRecord(elementIndex, dirIndex, allDirectiveMetadatas[dirs[dirIndex].directiveIndex]));
	            }
	        }
	        return directiveRecords;
	    };
	    BindingRecordsCreator.prototype._createTextNodeRecords = function (bindings, renderElementBinder) {
	        var _this = this;
	        if (lang_1.isBlank(renderElementBinder.textBindings)) return;
	        collection_1.ListWrapper.forEach(renderElementBinder.textBindings, function (b) {
	            collection_1.ListWrapper.push(bindings, change_detection_1.BindingRecord.createForTextNode(b, _this._textNodeIndex++));
	        });
	    };
	    BindingRecordsCreator.prototype._createElementPropertyRecords = function (bindings, boundElementIndex, renderElementBinder) {
	        collection_1.MapWrapper.forEach(renderElementBinder.propertyBindings, function (astWithSource, propertyName) {
	            collection_1.ListWrapper.push(bindings, change_detection_1.BindingRecord.createForElement(astWithSource, boundElementIndex, propertyName));
	        });
	    };
	    BindingRecordsCreator.prototype._createDirectiveRecords = function (bindings, boundElementIndex, directiveBinders, allDirectiveMetadatas) {
	        var _this = this;
	        for (var i = 0; i < directiveBinders.length; i++) {
	            var directiveBinder = directiveBinders[i];
	            var directiveMetadata = allDirectiveMetadatas[directiveBinder.directiveIndex];
	            // directive properties
	            collection_1.MapWrapper.forEach(directiveBinder.propertyBindings, function (astWithSource, propertyName) {
	                // TODO: these setters should eventually be created by change detection, to make
	                // it monomorphic!
	                var setter = reflection_1.reflector.setter(propertyName);
	                var directiveRecord = _this._getDirectiveRecord(boundElementIndex, i, directiveMetadata);
	                collection_1.ListWrapper.push(bindings, change_detection_1.BindingRecord.createForDirective(astWithSource, propertyName, setter, directiveRecord));
	            });
	            // host properties
	            collection_1.MapWrapper.forEach(directiveBinder.hostPropertyBindings, function (astWithSource, propertyName) {
	                var dirIndex = new change_detection_1.DirectiveIndex(boundElementIndex, i);
	                collection_1.ListWrapper.push(bindings, change_detection_1.BindingRecord.createForHostProperty(dirIndex, astWithSource, propertyName));
	            });
	        }
	    };
	    BindingRecordsCreator.prototype._getDirectiveRecord = function (boundElementIndex, directiveIndex, directiveMetadata) {
	        var id = boundElementIndex * 100 + directiveIndex;
	        if (!collection_1.MapWrapper.contains(this._directiveRecordsMap, id)) {
	            var changeDetection = directiveMetadata.changeDetection;
	            collection_1.MapWrapper.set(this._directiveRecordsMap, id, new change_detection_1.DirectiveRecord(new change_detection_1.DirectiveIndex(boundElementIndex, directiveIndex), directiveMetadata.callOnAllChangesDone, directiveMetadata.callOnChange, changeDetection));
	        }
	        return collection_1.MapWrapper.get(this._directiveRecordsMap, id);
	    };
	    return BindingRecordsCreator;
	})();
	var ProtoViewFactory = (function () {
	    function ProtoViewFactory(changeDetection) {
	        this._changeDetection = changeDetection;
	    }
	    ProtoViewFactory.prototype.createAppProtoViews = function (hostComponentBinding, rootRenderProtoView, allDirectives) {
	        var _this = this;
	        var allRenderDirectiveMetadata = collection_1.ListWrapper.map(allDirectives, function (directiveBinding) {
	            return directiveBinding.metadata;
	        });
	        var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
	        var nestedPvVariableBindings = _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex);
	        var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex, nestedPvVariableBindings);
	        var changeDetectorDefs = _getChangeDetectorDefinitions(hostComponentBinding.metadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
	        var protoChangeDetectors = collection_1.ListWrapper.map(changeDetectorDefs, function (changeDetectorDef) {
	            return _this._changeDetection.createProtoChangeDetector(changeDetectorDef);
	        });
	        var appProtoViews = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
	        collection_1.ListWrapper.forEach(nestedPvsWithIndex, function (pvWithIndex) {
	            var appProtoView = _createAppProtoView(pvWithIndex.renderProtoView, protoChangeDetectors[pvWithIndex.index], nestedPvVariableBindings[pvWithIndex.index], allDirectives);
	            if (lang_1.isPresent(pvWithIndex.parentIndex)) {
	                var parentView = appProtoViews[pvWithIndex.parentIndex];
	                parentView.elementBinders[pvWithIndex.boundElementIndex].nestedProtoView = appProtoView;
	            }
	            appProtoViews[pvWithIndex.index] = appProtoView;
	        });
	        return appProtoViews;
	    };
	    ProtoViewFactory = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [change_detection_1.ChangeDetection])], ProtoViewFactory);
	    return ProtoViewFactory;
	})();
	exports.ProtoViewFactory = ProtoViewFactory;
	/**
	 * Returns the data needed to create ChangeDetectors
	 * for the given ProtoView and all nested ProtoViews.
	 */
	function getChangeDetectorDefinitions(hostComponentMetadata, rootRenderProtoView, allRenderDirectiveMetadata) {
	    var nestedPvsWithIndex = _collectNestedProtoViews(rootRenderProtoView);
	    var nestedPvVariableBindings = _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex);
	    var nestedPvVariableNames = _collectNestedProtoViewsVariableNames(nestedPvsWithIndex, nestedPvVariableBindings);
	    return _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata);
	}
	exports.getChangeDetectorDefinitions = getChangeDetectorDefinitions;
	function _collectNestedProtoViews(renderProtoView, parentIndex, boundElementIndex, result) {
	    if (parentIndex === void 0) {
	        parentIndex = null;
	    }
	    if (boundElementIndex === void 0) {
	        boundElementIndex = null;
	    }
	    if (result === void 0) {
	        result = null;
	    }
	    if (lang_1.isBlank(result)) {
	        result = [];
	    }
	    collection_1.ListWrapper.push(result, new RenderProtoViewWithIndex(renderProtoView, result.length, parentIndex, boundElementIndex));
	    var currentIndex = result.length - 1;
	    var childBoundElementIndex = 0;
	    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function (elementBinder) {
	        if (lang_1.isPresent(elementBinder.nestedProtoView)) {
	            _collectNestedProtoViews(elementBinder.nestedProtoView, currentIndex, childBoundElementIndex, result);
	        }
	        childBoundElementIndex++;
	    });
	    return result;
	}
	function _getChangeDetectorDefinitions(hostComponentMetadata, nestedPvsWithIndex, nestedPvVariableNames, allRenderDirectiveMetadata) {
	    return collection_1.ListWrapper.map(nestedPvsWithIndex, function (pvWithIndex) {
	        var elementBinders = pvWithIndex.renderProtoView.elementBinders;
	        var bindingRecordsCreator = new BindingRecordsCreator();
	        var bindingRecords = bindingRecordsCreator.getBindingRecords(elementBinders, allRenderDirectiveMetadata);
	        var directiveRecords = bindingRecordsCreator.getDirectiveRecords(elementBinders, allRenderDirectiveMetadata);
	        var strategyName = change_detection_1.DEFAULT;
	        var typeString;
	        if (pvWithIndex.renderProtoView.type === renderApi.ProtoViewDto.COMPONENT_VIEW_TYPE) {
	            strategyName = hostComponentMetadata.changeDetection;
	            typeString = "comp";
	        } else if (pvWithIndex.renderProtoView.type === renderApi.ProtoViewDto.HOST_VIEW_TYPE) {
	            typeString = "host";
	        } else {
	            typeString = "embedded";
	        }
	        var id = hostComponentMetadata.id + "_" + typeString + "_" + pvWithIndex.index;
	        var variableNames = nestedPvVariableNames[pvWithIndex.index];
	        return new change_detection_1.ChangeDetectorDefinition(id, strategyName, variableNames, bindingRecords, directiveRecords);
	    });
	}
	function _createAppProtoView(renderProtoView, protoChangeDetector, variableBindings, allDirectives) {
	    var elementBinders = renderProtoView.elementBinders;
	    var protoView = new view_1.AppProtoView(renderProtoView.render, protoChangeDetector, variableBindings);
	    // TODO: vsavkin refactor to pass element binders into proto view
	    _createElementBinders(protoView, elementBinders, allDirectives);
	    _bindDirectiveEvents(protoView, elementBinders);
	    return protoView;
	}
	function _collectNestedProtoViewsVariableBindings(nestedPvsWithIndex) {
	    return collection_1.ListWrapper.map(nestedPvsWithIndex, function (pvWithIndex) {
	        return _createVariableBindings(pvWithIndex.renderProtoView);
	    });
	}
	function _createVariableBindings(renderProtoView) {
	    var variableBindings = collection_1.MapWrapper.create();
	    collection_1.MapWrapper.forEach(renderProtoView.variableBindings, function (mappedName, varName) {
	        collection_1.MapWrapper.set(variableBindings, varName, mappedName);
	    });
	    collection_1.ListWrapper.forEach(renderProtoView.elementBinders, function (binder) {
	        collection_1.MapWrapper.forEach(binder.variableBindings, function (mappedName, varName) {
	            collection_1.MapWrapper.set(variableBindings, varName, mappedName);
	        });
	    });
	    return variableBindings;
	}
	function _collectNestedProtoViewsVariableNames(nestedPvsWithIndex, nestedPvVariableBindings) {
	    var nestedPvVariableNames = collection_1.ListWrapper.createFixedSize(nestedPvsWithIndex.length);
	    collection_1.ListWrapper.forEach(nestedPvsWithIndex, function (pvWithIndex) {
	        var parentVariableNames = lang_1.isPresent(pvWithIndex.parentIndex) ? nestedPvVariableNames[pvWithIndex.parentIndex] : null;
	        nestedPvVariableNames[pvWithIndex.index] = _createVariableNames(parentVariableNames, nestedPvVariableBindings[pvWithIndex.index]);
	    });
	    return nestedPvVariableNames;
	}
	function _createVariableNames(parentVariableNames, variableBindings) {
	    var variableNames = lang_1.isPresent(parentVariableNames) ? collection_1.ListWrapper.clone(parentVariableNames) : [];
	    collection_1.MapWrapper.forEach(variableBindings, function (local, v) {
	        collection_1.ListWrapper.push(variableNames, local);
	    });
	    return variableNames;
	}
	function _createElementBinders(protoView, elementBinders, allDirectiveBindings) {
	    for (var i = 0; i < elementBinders.length; i++) {
	        var renderElementBinder = elementBinders[i];
	        var dirs = elementBinders[i].directives;
	        var parentPeiWithDistance = _findParentProtoElementInjectorWithDistance(i, protoView.elementBinders, elementBinders);
	        var directiveBindings = collection_1.ListWrapper.map(dirs, function (dir) {
	            return allDirectiveBindings[dir.directiveIndex];
	        });
	        var componentDirectiveBinding = null;
	        if (directiveBindings.length > 0) {
	            if (directiveBindings[0].metadata.type === renderApi.DirectiveMetadata.COMPONENT_TYPE) {
	                componentDirectiveBinding = directiveBindings[0];
	            }
	        }
	        var protoElementInjector = _createProtoElementInjector(i, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings);
	        _createElementBinder(protoView, i, renderElementBinder, protoElementInjector, componentDirectiveBinding);
	    }
	}
	function _findParentProtoElementInjectorWithDistance(binderIndex, elementBinders, renderElementBinders) {
	    var distance = 0;
	    do {
	        var renderElementBinder = renderElementBinders[binderIndex];
	        binderIndex = renderElementBinder.parentIndex;
	        if (binderIndex !== -1) {
	            distance += renderElementBinder.distanceToParent;
	            var elementBinder = elementBinders[binderIndex];
	            if (lang_1.isPresent(elementBinder.protoElementInjector)) {
	                return new ParentProtoElementInjectorWithDistance(elementBinder.protoElementInjector, distance);
	            }
	        }
	    } while (binderIndex !== -1);
	    return new ParentProtoElementInjectorWithDistance(null, -1);
	}
	function _createProtoElementInjector(binderIndex, parentPeiWithDistance, renderElementBinder, componentDirectiveBinding, directiveBindings) {
	    var protoElementInjector = null;
	    // Create a protoElementInjector for any element that either has bindings *or* has one
	    // or more var- defined. Elements with a var- defined need a their own element injector
	    // so that, when hydrating, $implicit can be set to the element.
	    var hasVariables = collection_1.MapWrapper.size(renderElementBinder.variableBindings) > 0;
	    if (directiveBindings.length > 0 || hasVariables) {
	        protoElementInjector = element_injector_1.ProtoElementInjector.create(parentPeiWithDistance.protoElementInjector, binderIndex, directiveBindings, lang_1.isPresent(componentDirectiveBinding), parentPeiWithDistance.distance);
	        protoElementInjector.attributes = renderElementBinder.readAttributes;
	        if (hasVariables) {
	            protoElementInjector.exportComponent = lang_1.isPresent(componentDirectiveBinding);
	            protoElementInjector.exportElement = lang_1.isBlank(componentDirectiveBinding);
	            // experiment
	            var exportImplicitName = collection_1.MapWrapper.get(renderElementBinder.variableBindings, "$implicit");
	            if (lang_1.isPresent(exportImplicitName)) {
	                protoElementInjector.exportImplicitName = exportImplicitName;
	            }
	        }
	    }
	    return protoElementInjector;
	}
	function _createElementBinder(protoView, boundElementIndex, renderElementBinder, protoElementInjector, componentDirectiveBinding) {
	    var parent = null;
	    if (renderElementBinder.parentIndex !== -1) {
	        parent = protoView.elementBinders[renderElementBinder.parentIndex];
	    }
	    var elBinder = protoView.bindElement(parent, renderElementBinder.distanceToParent, protoElementInjector, componentDirectiveBinding);
	    protoView.bindEvent(renderElementBinder.eventBindings, boundElementIndex, -1);
	    // variables
	    // The view's locals needs to have a full set of variable names at construction time
	    // in order to prevent new variables from being set later in the lifecycle. Since we don't want
	    // to actually create variable bindings for the $implicit bindings, add to the
	    // protoLocals manually.
	    collection_1.MapWrapper.forEach(renderElementBinder.variableBindings, function (mappedName, varName) {
	        collection_1.MapWrapper.set(protoView.protoLocals, mappedName, null);
	    });
	    return elBinder;
	}
	function _bindDirectiveEvents(protoView, elementBinders) {
	    for (var boundElementIndex = 0; boundElementIndex < elementBinders.length; ++boundElementIndex) {
	        var dirs = elementBinders[boundElementIndex].directives;
	        for (var i = 0; i < dirs.length; i++) {
	            var directiveBinder = dirs[i];
	            // directive events
	            protoView.bindEvent(directiveBinder.eventBindings, boundElementIndex, i);
	        }
	    }
	}
	var RenderProtoViewWithIndex = (function () {
	    function RenderProtoViewWithIndex(renderProtoView, index, parentIndex, boundElementIndex) {
	        this.renderProtoView = renderProtoView;
	        this.index = index;
	        this.parentIndex = parentIndex;
	        this.boundElementIndex = boundElementIndex;
	    }
	    return RenderProtoViewWithIndex;
	})();
	var ParentProtoElementInjectorWithDistance = (function () {
	    function ParentProtoElementInjectorWithDistance(protoElementInjector, distance) {
	        this.protoElementInjector = protoElementInjector;
	        this.distance = distance;
	    }
	    return ParentProtoElementInjectorWithDistance;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=proto_view_factory.js.map

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var dom_adapter_1 = __webpack_require__(163);
	var UrlResolver = (function () {
	    function UrlResolver() {
	        if (lang_1.isBlank(UrlResolver.a)) {
	            UrlResolver.a = dom_adapter_1.DOM.createElement("a");
	        }
	    }
	    /**
	     * Resolves the `url` given the `baseUrl`.
	     *
	     * ## When the `baseUrl` is null
	     *
	     * `url` is resolved in the context of the current document.
	     * If the document location is 'http://www.foo.com/base' and the `url` is 'path/to/here', the
	     * resolved url will be
	     * 'http://www.foo.com/base/path/to/here'
	     *
	     * ## When the `baseUrl` is not null
	     *
	     * - when the `url` is null, the `baseUrl` is returned,
	     * - due to a limitation in the process used to resolve urls (a HTMLLinkElement), `url` must not
	     * start with a `/`,
	     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	     * `baseUrl` and `url`,
	     * - if `url` is absolute (it has a scheme: 'http://', 'https://'), the `url` is returned
	     * (ignoring the `baseUrl`)
	     *
	     * @param {string} baseUrl
	     * @param {string} url
	     * @returns {string} the resolved URL
	     */
	    UrlResolver.prototype.resolve = function (baseUrl, url) {
	        if (lang_1.isBlank(baseUrl)) {
	            dom_adapter_1.DOM.resolveAndSetHref(UrlResolver.a, url, null);
	            return dom_adapter_1.DOM.getHref(UrlResolver.a);
	        }
	        if (lang_1.isBlank(url) || url == "") return baseUrl;
	        if (url[0] == "/") {
	            // The `HTMLLinkElement` does not allow resolving this case (the `url` would be interpreted as
	            // relative):
	            // - `baseUrl` = 'http://www.foo.com/base'
	            // - `url` = '/absolute/path/to/here'
	            // - the result would be 'http://www.foo.com/base/absolute/path/to/here' while
	            // 'http://www.foo.com/absolute/path/to/here'
	            // is expected (without the 'base' segment).
	            throw new lang_1.BaseException("Could not resolve the url " + url + " from " + baseUrl);
	        }
	        var m = lang_1.RegExpWrapper.firstMatch(_schemeRe, url);
	        if (lang_1.isPresent(m[1])) {
	            return url;
	        }
	        dom_adapter_1.DOM.resolveAndSetHref(UrlResolver.a, baseUrl, url);
	        return dom_adapter_1.DOM.getHref(UrlResolver.a);
	    };
	    UrlResolver = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [])], UrlResolver);
	    return UrlResolver;
	})();
	exports.UrlResolver = UrlResolver;
	var _schemeRe = lang_1.RegExpWrapper.create("^([^:/?#]+:)?");
	exports.__esModule = true;
	//# sourceMappingURL=url_resolver.js.map

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	var _ionicTransitionsTransition = __webpack_require__(196);

	var _navItem = __webpack_require__(197);

	var _navController = __webpack_require__(198);

	var STAGED_STATE = 'staged';
	var STAGED_ENTERING_STATE = 'staged-enter';
	var STAGED_LEAVING_STATE = 'staged-leave';
	var ACTIVELY_ENTERING_STATE = 'entering';
	var ACTIVELY_LEAVING_STATE = 'leaving';
	var ACTIVE_STATE = 'active';
	var CACHED_STATE = 'cached';

	var NavBase = (function () {
	  function NavBase(loader, injector) {
	    _classCallCheck(this, NavBase);

	    this.loader = loader;
	    this.injector = injector;
	    this.items = [];
	    this.navCtrl = new _navController.NavController(this);
	    this.sbTransition = null;
	    this.sbActive = false;
	  }

	  _createClass(NavBase, [{
	    key: 'initial',
	    set: function (Class) {
	      if (!this._init) {
	        this._init = true;
	        this.push(Class);
	      }
	    }
	  }, {
	    key: 'push',
	    value: function push(Component) {
	      var params = arguments[1] === undefined ? {} : arguments[1];
	      var opts = arguments[2] === undefined ? {} : arguments[2];

	      if (this.isTransitioning()) {
	        return Promise.reject();
	      }

	      var resolve = undefined;
	      var promise = new Promise(function (res) {
	        resolve = res;
	      });

	      // default the direction to "forward"
	      opts.direction = opts.direction || 'forward';

	      // do not animate if this is the first in the stack
	      if (!this.items.length) {
	        opts.animation = 'none';
	      }

	      // the active item is going to be the leaving one (if one exists)
	      var leavingItem = this.getActive() || {};
	      leavingItem.shouldDestroy = false;

	      // create a new NavStackItem
	      var enteringItem = new _navItem.NavItem(this, Component, params);

	      // set that this item is staged (it's not ready to be animated in yet)
	      enteringItem.state = STAGED_STATE;
	      enteringItem.shouldDestroy = false;

	      // add the item to the stack
	      this.items.push(enteringItem);

	      // start the transition
	      this.transition(enteringItem, leavingItem, opts).then(function () {
	        resolve();
	      });

	      return promise;
	    }
	  }, {
	    key: 'pop',
	    value: function pop() {
	      var opts = arguments[0] === undefined ? {} : arguments[0];

	      if (this.isTransitioning() || this.items.length < 2) {
	        return Promise.reject();
	      }

	      var resolve = undefined;
	      var promise = new Promise(function (res) {
	        resolve = res;
	      });

	      // default the direction to "back"
	      opts.direction = opts.direction || 'back';

	      // get the active item and set that it is staged to be leaving
	      // was probably the one popped from the stack
	      var leavingItem = this.getActive();
	      leavingItem.shouldDestroy = true;

	      // the entering item is now the new last item
	      var enteringItem = this.getPrevious(leavingItem);
	      enteringItem.shouldDestroy = false;

	      // start the transition
	      this.transition(enteringItem, leavingItem, opts).then(function () {
	        // transition completed, destroy the leaving item
	        resolve();
	      });

	      return promise;
	    }
	  }, {
	    key: 'transition',
	    value: function transition(enteringItem, leavingItem, opts) {
	      var _this = this;

	      var resolve = undefined;
	      var promise = new Promise(function (res) {
	        resolve = res;
	      });

	      // block possible clicks during transition
	      (0, _ionicUtil.ClickBlock)(opts.animation !== 'none', 520);

	      // wait for the new item to complete setup
	      enteringItem.stage().then(function () {

	        // set that the leaving item is stage to be leaving
	        leavingItem.state = STAGED_LEAVING_STATE;

	        // set that the new item pushed on the stack is staged to be entering
	        // setting staged state is important for the transition logic to find the correct item
	        enteringItem.state = STAGED_ENTERING_STATE;

	        // init the transition animation
	        var transAnimation = _ionicTransitionsTransition.Transition.create(_this, opts);

	        // wait for the items to be fully staged
	        transAnimation.stage().then(function () {

	          // update the state that the items are actively entering/leaving
	          enteringItem.state = ACTIVELY_ENTERING_STATE;
	          leavingItem.state = ACTIVELY_LEAVING_STATE;

	          // start the transition
	          transAnimation.play().then(function () {

	            // transition has completed, update each item's state
	            enteringItem.state = ACTIVE_STATE;
	            leavingItem.state = CACHED_STATE;

	            // destroy any items that shouldn't stay around
	            _this.cleanup();

	            // dispose all references
	            transAnimation.dispose();

	            // allow clicks again
	            (0, _ionicUtil.ClickBlock)(false);

	            // resolve that this push has completed
	            resolve();
	          });
	        });
	      });

	      return promise;
	    }
	  }, {
	    key: 'swipeBackStart',
	    value: function swipeBackStart() {
	      var _this2 = this;

	      if (this.isTransitioning() || this.items.length < 2) {
	        return;
	      }

	      this.sbActive = true;
	      this.sbResolve = null;

	      // default the direction to "back"
	      var opts = {
	        direction: 'back'
	      };

	      // get the active item and set that it is staged to be leaving
	      // was probably the one popped from the stack
	      var leavingItem = this.getActive();
	      leavingItem.shouldDestroy = true;

	      // the entering item is now the new last item
	      var enteringItem = this.getPrevious(leavingItem);
	      enteringItem.shouldDestroy = false;

	      // start the transition
	      // block possible clicks during transition
	      (0, _ionicUtil.ClickBlock)(true);

	      // wait for the new item to complete setup
	      enteringItem.stage().then(function () {

	        // set that the leaving item is stage to be leaving
	        leavingItem.state = STAGED_LEAVING_STATE;

	        // set that the new item pushed on the stack is staged to be entering
	        // setting staged state is important for the transition logic to find the correct item
	        enteringItem.state = STAGED_ENTERING_STATE;

	        // init the transition animation
	        _this2.sbTransition = _ionicTransitionsTransition.Transition.create(_this2, opts);
	        _this2.sbTransition.easing('linear');

	        // wait for the items to be fully staged
	        _this2.sbTransition.stage().then(function () {

	          // update the state that the items are actively entering/leaving
	          enteringItem.state = ACTIVELY_ENTERING_STATE;
	          leavingItem.state = ACTIVELY_LEAVING_STATE;

	          var swipeBackPromise = new Promise(function (res) {
	            _this2.sbResolve = res;
	          });

	          swipeBackPromise.then(function (completeSwipeBack) {

	            if (completeSwipeBack) {
	              // swipe back has completed, update each item's state
	              enteringItem.state = ACTIVE_STATE;
	              leavingItem.state = CACHED_STATE;

	              // destroy any items that shouldn't stay around
	              _this2.cleanup();
	            } else {
	              // cancelled the swipe back, return items to original state
	              leavingItem.state = ACTIVE_STATE;
	              enteringItem.state = CACHED_STATE;

	              leavingItem.shouldDestroy = false;
	              enteringItem.shouldDestroy = false;
	            }

	            // allow clicks again
	            (0, _ionicUtil.ClickBlock)(false);
	          });
	        });
	      });
	    }
	  }, {
	    key: 'swipeBackEnd',
	    value: function swipeBackEnd(completeSwipeBack, progress, playbackRate) {
	      var _this3 = this;

	      // to reverse the animation use a negative playbackRate
	      if (this.sbTransition && this.sbActive) {
	        this.sbActive = false;

	        if (progress <= 0) {
	          this.swipeBackProgress(0.0001);
	        } else if (progress >= 1) {
	          this.swipeBackProgress(0.9999);
	        }

	        if (!completeSwipeBack) {
	          playbackRate = playbackRate * -1;
	        }

	        this.sbTransition.playbackRate(playbackRate);

	        this.sbTransition.play().then(function () {
	          _this3.sbResolve && _this3.sbResolve(completeSwipeBack);
	          _this3.sbTransition && _this3.sbTransition.dispose();
	          _this3.sbResolve = _this3.sbTransition = null;
	        });
	      }
	    }
	  }, {
	    key: 'swipeBackProgress',
	    value: function swipeBackProgress(progress) {
	      if (this.sbTransition) {
	        (0, _ionicUtil.ClickBlock)(true, 4000);
	        this.sbTransition.progress(Math.min(1, Math.max(0, progress)));
	      }
	    }
	  }, {
	    key: 'cleanup',
	    value: function cleanup() {
	      var _this4 = this;

	      this.items.forEach(function (item) {

	        if (item && item.shouldDestroy) {
	          _this4.remove(item);

	          util.dom.raf(function () {
	            item.destroy();
	          });
	        }
	      });
	    }
	  }, {
	    key: 'isTransitioning',
	    value: function isTransitioning() {
	      var state;
	      for (var i = 0, ii = this.items.length; i < ii; i++) {
	        state = this.items[i].state;
	        if (state === ACTIVELY_ENTERING_STATE || state === ACTIVELY_LEAVING_STATE || state === STAGED_ENTERING_STATE || state === STAGED_LEAVING_STATE) {
	          return true;
	        }
	      }
	      return false;
	    }
	  }, {
	    key: 'getActive',
	    value: function getActive() {
	      for (var i = 0, ii = this.items.length; i < ii; i++) {
	        if (this.items[i].state === ACTIVE_STATE) {
	          return this.items[i];
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'getPrevious',
	    value: function getPrevious(item) {
	      if (item) {
	        return this.items[this.items.indexOf(item) - 1];
	      }
	      return null;
	    }
	  }, {
	    key: 'getStagedEnteringItem',
	    value: function getStagedEnteringItem() {
	      for (var i = 0, ii = this.items.length; i < ii; i++) {
	        if (this.items[i].state === STAGED_ENTERING_STATE) {
	          return this.items[i];
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'getStagedLeavingItem',
	    value: function getStagedLeavingItem() {
	      for (var i = 0, ii = this.items.length; i < ii; i++) {
	        if (this.items[i].state === STAGED_LEAVING_STATE) {
	          return this.items[i];
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'remove',
	    value: function remove(itemOrIndex) {
	      util.array.remove(this.items, itemOrIndex);
	    }
	  }]);

	  return NavBase;
	})();

	exports.NavBase = NavBase;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	var _ionicUtilDom = __webpack_require__(194);

	var domUtil = _interopRequireWildcard(_ionicUtilDom);

	var dom = domUtil;

	exports.dom = dom;

	var _ionicUtilUtil = __webpack_require__(195);

	_defaults(exports, _interopRequireWildcard(_ionicUtilUtil));

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.rafPromise = rafPromise;
	exports.transitionEnd = transitionEnd;
	exports.animationStart = animationStart;
	exports.animationEnd = animationEnd;
	exports.ready = ready;
	exports.windowLoad = windowLoad;
	exports.hasAttribute = hasAttribute;
	exports.addClass = addClass;
	exports.getChildIndex = getChildIndex;

	var nativeRaf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;

	var nativeCancelRaf = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame;

	var raf = nativeRaf || function (callback) {
	  var timeCurrent = new Date().getTime(),
	      timeDelta = undefined;

	  /* Dynamically set delay on a per-tick basis to match 60fps. */
	  /* Technique by Erik Moller. MIT license: https://gist.github.com/paulirish/1579671 */
	  timeDelta = Math.max(0, 16 - (timeCurrent - timeLast));
	  timeLast = timeCurrent + timeDelta;

	  return setTimeout(function () {
	    callback(timeCurrent + timeDelta);
	  }, timeDelta);
	};

	exports.raf = raf;
	var rafCancel = nativeRaf ? nativeCancelRaf : function (id) {
	  return window.cancelTimeout(id);
	};

	exports.rafCancel = rafCancel;

	function rafPromise() {
	  return new Promise(function (resolve) {
	    return raf(resolve);
	  });
	}

	var isSVG = function isSVG(val) {
	  return window.SVGElement && val instanceof window.SVGElement;
	};

	exports.isSVG = isSVG;
	// We only need to test for webkit in our supported browsers. Webkit is the
	// only  browser still using prefixes. Code adapted from angular-animate.js
	var CSS = {};
	exports.CSS = CSS;
	if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
	  CSS.prefix = '-webkit-';
	  CSS.transition = 'webkitTransition';
	  CSS.transform = 'webkitTransform';
	  CSS.transitionEnd = 'webkitTransitionEnd transitionend';
	} else {
	  CSS.prefix = '';
	  CSS.transform = 'transform';
	  CSS.transition = 'transition';
	  CSS.transitionEnd = 'transitionend';
	}

	if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
	  CSS.animation = 'WebkitAnimation';
	  CSS.animationStart = 'webkitAnimationStart animationstart';
	  CSS.animationEnd = 'webkitAnimationEnd animationend';
	} else {
	  CSS.animation = 'animation';
	  CSS.animationStart = 'animationstart';
	  CSS.animationEnd = 'animationend';
	}

	function transitionEnd(el) {
	  return cssPromise(el, CSS.transitionEnd);
	}

	function animationStart(el, animationName) {
	  return cssPromise(el, CSS.animationStart, animationName);
	}

	function animationEnd(el, animationName) {
	  return cssPromise(el, CSS.animationEnd, animationName);
	}

	function cssPromise(el, eventNames, animationName) {
	  return new Promise(function (resolve) {
	    eventNames.split(' ').forEach(function (eventName) {
	      el.addEventListener(eventName, onEvent);
	    });
	    function onEvent(ev) {
	      if (ev.animationName && animationName) {
	        // do not resolve if a bubbled up ev.animationName
	        // is not the same as the passed in animationName arg
	        if (ev.animationName !== animationName) {
	          return;
	        }
	      } else if (ev.target !== el) {
	        // do not resolve if the event's target element is not
	        // the same as the element the listener was added to
	        return;
	      }
	      ev.stopPropagation();
	      eventNames.split(' ').forEach(function (eventName) {
	        el.removeEventListener(eventName, onEvent);
	      });
	      resolve(ev);
	    }
	  });
	}

	function ready() {
	  return new Promise(function (resolve) {
	    if (document.readyState === 'complete' || document.readyState === 'interactive') {
	      setTimeout(resolve);
	    } else {
	      (function () {
	        var completed = function () {
	          document.removeEventListener('DOMContentLoaded', completed, false);
	          window.removeEventListener('load', completed, false);
	          resolve();
	        };

	        document.addEventListener('DOMContentLoaded', completed, false);
	        window.addEventListener('load', completed, false);
	      })();
	    }
	  });
	}

	function windowLoad() {
	  return new Promise(function (resolve) {
	    if (document.readyState === 'complete') {
	      setTimeout(resolve);
	    } else {
	      (function () {
	        var completed = function () {
	          window.removeEventListener('load', completed, false);
	          resolve();
	        };

	        window.addEventListener('load', completed, false);
	      })();
	    }
	  });
	}

	function hasAttribute(el, attributeName) {
	  return el.hasAttribute(attributeName);
	}

	function addClass(el) {
	  for (var _len = arguments.length, classNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    classNames[_key - 1] = arguments[_key];
	  }

	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = classNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var c = _step.value;

	      el.classList.add(c);
	    }
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator['return']) {
	        _iterator['return']();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }
	}

	function getChildIndex(el) {
	  var child = undefined;
	  var parent = el.parentNode;
	  for (var i = 0, j = parent.children.length; i < j; i++) {
	    child = parent.children[i];
	    if (child === el) {
	      return i;
	    }
	  }
	  return -1;
	}

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	exports.noop = noop;
	exports.clamp = clamp;
	exports.extend = extend;
	exports.merge = merge;
	exports.defaults = defaults;
	exports.pascalCaseToDashCase = pascalCaseToDashCase;
	exports.nextUid = nextUid;
	exports.getQuerystring = getQuerystring;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	// Simple noop function

	function noop() {}

	;

	/**
	 * Given a min and max, restrict the given number
	 * to the range.
	 * @param min the minimum
	 * @param n the value
	 * @param max the maximum
	 */

	function clamp(min, n, max) {
	  return Math.max(min, Math.min(n, max));
	}

	/**
	 * Extend the destination with an arbitrary number of other objects.
	 * @param dst the destination
	 * @param ... the param objects
	 */

	function extend(dst) {
	  return _baseExtend(dst, [].slice.call(arguments, 1), false);
	}

	/**
	 * Do a deep extend (merge).
	 * @param dst the destination
	 * @param ... the param objects
	 */

	function merge(dst) {
	  return _baseExtend(dst, [].slice.call(arguments, 1), true);
	}

	function _baseExtend(dst, objs, deep) {
	  for (var i = 0, ii = objs.length; i < ii; ++i) {
	    var obj = objs[i];
	    if (!obj || !isObject(obj) && !isFunction(obj)) continue;
	    var keys = Object.keys(obj);
	    for (var j = 0, jj = keys.length; j < jj; j++) {
	      var key = keys[j];
	      var src = obj[key];

	      if (deep && isObject(src)) {
	        if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	        _baseExtend(dst[key], [src], true);
	      } else {
	        dst[key] = src;
	      }
	    }
	  }

	  return dst;
	}

	/**
	 * Apply default arguments if they don't exist in
	 * the first object.
	 * @param the destination to apply defaults to.
	 */

	function defaults(dest) {
	  for (var i = arguments.length - 1; i >= 1; i--) {
	    var source = arguments[i] || {};
	    for (var key in source) {
	      if (source.hasOwnProperty(key) && !dest.hasOwnProperty(key)) {
	        dest[key] = source[key];
	      }
	    }
	  }
	  return dest;
	}

	var isString = function isString(val) {
	  return typeof val === 'string';
	};
	exports.isString = isString;
	var isNumber = function isNumber(val) {
	  return typeof val === 'number';
	};
	exports.isNumber = isNumber;
	var isFunction = function isFunction(val) {
	  return typeof val === 'function';
	};
	exports.isFunction = isFunction;
	var isDefined = function isDefined(val) {
	  return typeof val !== 'undefined';
	};
	exports.isDefined = isDefined;
	var isUndefined = function isUndefined(val) {
	  return typeof val === 'undefined';
	};
	exports.isUndefined = isUndefined;
	var isBlank = function isBlank(val) {
	  return val === undefined || val === null;
	};
	exports.isBlank = isBlank;
	var isObject = function isObject(val) {
	  return typeof val === 'object';
	};
	exports.isObject = isObject;
	var isArray = Array.isArray;

	exports.isArray = isArray;
	/**
	 * Convert a string in the format thisIsAString to a slug format this-is-a-string
	 */

	function pascalCaseToDashCase() {
	  var str = arguments[0] === undefined ? '' : arguments[0];

	  return str.charAt(0).toLowerCase() + str.substring(1).replace(/[A-Z]/g, function (match) {
	    return '-' + match.toLowerCase();
	  });
	}

	var uid = 0;

	function nextUid() {
	  return ++uid;
	}

	/**
	 * A simple logger class.
	 */

	var Log = (function () {
	  function Log() {
	    _classCallCheck(this, Log);
	  }

	  _createClass(Log, null, [{
	    key: 'log',
	    value: function log() {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      console.log.apply(console, args);
	    }
	  }, {
	    key: 'info',
	    value: function info() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      console.info.apply(console, args);
	    }
	  }, {
	    key: 'warn',
	    value: function warn() {
	      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        args[_key3] = arguments[_key3];
	      }

	      console.warn.apply(console, args);
	    }
	  }, {
	    key: 'error',
	    value: function error() {
	      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	        args[_key4] = arguments[_key4];
	      }

	      console.error.apply(console, args);
	    }
	  }]);

	  return Log;
	})();

	exports.Log = Log;
	var array = {
	  find: function find(arr, cb) {
	    for (var i = 0, ii = arr.length; i < ii; i++) {
	      if (cb(arr[i], i)) return arr[i];
	    }
	  },
	  remove: function remove(arr, itemOrIndex) {
	    var index = -1;
	    if (isNumber(itemOrIndex)) {
	      index = itemOrIndex;
	    } else {
	      index = arr.indexOf(itemOrIndex);
	    }
	    if (index < 0) {
	      return false;
	    }
	    arr.splice(index, 1);
	    return true;
	  }
	};

	exports.array = array;
	/**
	 * Grab the query string param value for the given key.
	 * @param key the key to look for
	 */

	function getQuerystring(key) {
	  var queryParams = {};
	  var startIndex = window.location.href.indexOf('?');
	  if (startIndex !== -1) {
	    var queries = window.location.href.slice(startIndex + 1).split('&');
	    if (queries.length) {
	      queries.forEach(function (param) {
	        var split = param.split('=');
	        queryParams[split[0]] = split[1];
	      });
	    }
	  }
	  if (key) {
	    return queryParams[key] || '';
	  }
	  return queryParams;
	}

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var registry = {};

	var TransitionController = (function () {
	  function TransitionController() {
	    _classCallCheck(this, TransitionController);
	  }

	  _createClass(TransitionController, [{
	    key: 'create',
	    value: function create(navCtrl) {
	      var opts = arguments[1] === undefined ? {} : arguments[1];

	      var name = opts.animation || 'ios';

	      var TransitionClass = registry[name];
	      if (!TransitionClass) {
	        TransitionClass = registry['none'];
	      }

	      return new TransitionClass(navCtrl, opts);
	    }
	  }, {
	    key: 'register',
	    value: function register(name, transitionClass) {
	      registry[name] = transitionClass;
	    }
	  }]);

	  return TransitionController;
	})();

	var Transition = new TransitionController();
	exports.Transition = Transition;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2SrcCoreCompilerView_container_ref = __webpack_require__(185);

	var _angular2Di = __webpack_require__(167);

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	var _navController = __webpack_require__(198);

	var NavItem = (function () {
	  function NavItem(nav, Component) {
	    var params = arguments[2] === undefined ? {} : arguments[2];

	    _classCallCheck(this, NavItem);

	    this.nav = nav;
	    this.Component = Component;
	    this.params = params;
	    this.id = util.nextUid();
	    this.headerProtos = [];
	    this.toolbarViews = [];
	    this._titleEle = undefined;
	    this.disposals = [];

	    // if it's possible to go back from this nav item
	    this.enableBack = false;
	  }

	  _createClass(NavItem, [{
	    key: 'stage',
	    value: function stage() {
	      // update if it's possible to go back from this nav item
	      this.enableBack = !!this.nav.getPrevious(this);

	      if (!this.created) {
	        return this.create();
	      }
	      return Promise.resolve();
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      var _this = this;

	      this.created = true;

	      var resolve = undefined;
	      var promise = new Promise(function (res) {
	        resolve = res;
	      });

	      var injector = this.nav.injector.resolveAndCreateChild([(0, _angular2Di.bind)(_navController.NavController).toValue(this.nav.navCtrl), (0, _angular2Di.bind)(NavParams).toValue(new NavParams(this.params)), (0, _angular2Di.bind)(NavItem).toValue(this)]);

	      this.nav.loader.loadNextToExistingLocation(this.Component, this.nav.contentElementRef, injector).then(function (componentRef) {

	        // content
	        _this.component = componentRef;

	        _this.contentEle = componentRef.location.domElement;
	        _this.contentEle.classList.add('nav-item');
	        _this.contentEle.setAttribute('id', 'nav-item-' + _this.id);

	        if (componentRef && componentRef._dispose) {
	          _this.disposals.push(componentRef._dispose);
	        }

	        // TODO: talk to misko about correct way to set context
	        var context = {
	          boundElementIndex: 0,
	          parentView: {
	            _view: componentRef.location.parentView._view.componentChildViews[0]
	          }
	        };

	        for (var i = 0; i < _this.headerProtos.length; i++) {
	          _this.createHeader(_this.headerProtos[i], context, injector);
	        }

	        resolve();
	      });

	      return promise;
	    }
	  }, {
	    key: 'createHeader',
	    value: function createHeader(toolbarProtoView, context, injector) {
	      var headerContainer = this.nav.headerContainerRef;

	      if (!headerContainer) return;

	      var atIndex = -1;

	      var headerView = headerContainer.create(toolbarProtoView, atIndex, context, injector);

	      if (headerView) {
	        this.toolbarViews.push(headerView);

	        this.disposals.push(function () {
	          headerContainer.remove(headerContainer.indexOf(headerView));
	        });
	      }
	    }
	  }, {
	    key: 'addHeader',
	    value: function addHeader(toolbarProtoView) {
	      this.headerProtos.push(toolbarProtoView);
	    }
	  }, {
	    key: 'getContent',
	    value: function getContent() {
	      return this.contentEle;
	    }
	  }, {
	    key: 'getToolbars',
	    value: function getToolbars() {
	      var elements = [];
	      for (var i = 0; i < this.toolbarViews.length; i++) {
	        var toolbarView = this.toolbarViews[i];
	        elements.push(toolbarView._view.render._view.rootNodes[0]);
	      }
	      return elements;
	    }
	  }, {
	    key: 'getTitle',
	    value: function getTitle() {
	      if (this._titleEle === undefined) {
	        var toolbarElements = this.getToolbars();
	        for (var i = 0; i < toolbarElements.length; i++) {
	          var titleEle = toolbarElements[i].querySelector('ion-title');
	          if (titleEle) {
	            this._titleEle = titleEle;
	            return this._titleEle;
	          }
	        }
	        this._titleEle = null;
	      }
	      return this._titleEle;
	    }
	  }, {
	    key: 'getBackButton',
	    value: function getBackButton() {
	      if (this._backBtn === undefined) {
	        var toolbarElements = this.getToolbars();
	        for (var i = 0; i < toolbarElements.length; i++) {
	          var backBtn = toolbarElements[i].querySelector('back-button');
	          if (backBtn) {
	            this._backBtn = backBtn;
	            return this._backBtn;
	          }
	        }
	        this._backBtn = null;
	      }
	      return this._backBtn;
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      for (var i = 0; i < this.disposals.length; i++) {
	        this.disposals[i]();
	      }

	      // just to help prevent any possible memory leaks
	      for (var _name in this) {
	        if (this.hasOwnProperty(_name)) {
	          this[_name] = null;
	        }
	      }
	    }
	  }]);

	  return NavItem;
	})();

	exports.NavItem = NavItem;

	var NavParams = function NavParams(params) {
	  _classCallCheck(this, NavParams);

	  util.extend(this, params);
	};

	exports.NavParams = NavParams;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var NavController = (function () {
	  function NavController(nav) {
	    _classCallCheck(this, NavController);

	    this._nav = nav;
	  }

	  _createClass(NavController, [{
	    key: "push",
	    value: function push() {
	      return this._nav.push.apply(this._nav, arguments);
	    }
	  }, {
	    key: "pop",
	    value: function pop() {
	      return this._nav.pop.apply(this._nav, arguments);
	    }
	  }]);

	  return NavController;
	})();

	exports.NavController = NavController;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _ionicConfigComponent = __webpack_require__(264);

	var ToolbarContainer = (function () {
	  function ToolbarContainer(elementRef) {
	    _classCallCheck(this, _ToolbarContainer);

	    this.domElement = elementRef.domElement;
	    this.config = ToolbarContainer.config.invoke(this);
	  }

	  var _ToolbarContainer = ToolbarContainer;
	  ToolbarContainer = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: '.toolbar-container'
	  })(ToolbarContainer) || ToolbarContainer;
	  return ToolbarContainer;
	})();

	exports.ToolbarContainer = ToolbarContainer;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef], ToolbarContainer);

	new _ionicConfigComponent.IonicComponent(ToolbarContainer, {});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(122));
	__export(__webpack_require__(201));
	__export(__webpack_require__(249));
	__export(__webpack_require__(252));
	__export(__webpack_require__(258));
	__export(__webpack_require__(167));
	var async_1 = __webpack_require__(155);
	exports.Observable = async_1.Observable;
	exports.EventEmitter = async_1.EventEmitter;
	__export(__webpack_require__(165));
	var dom_renderer_1 = __webpack_require__(226);
	exports.DomRenderer = dom_renderer_1.DomRenderer;
	exports.DOCUMENT_TOKEN = dom_renderer_1.DOCUMENT_TOKEN;
	exports.__esModule = true;
	//# sourceMappingURL=angular2.js.map

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @public
	 * @description
	 * Define angular core API here.
	 */
	__export(__webpack_require__(203));
	__export(__webpack_require__(204));
	__export(__webpack_require__(205));
	__export(__webpack_require__(245));
	__export(__webpack_require__(246));
	__export(__webpack_require__(186));
	__export(__webpack_require__(175));
	// TODO(tbosch): remove this once render migration is complete
	__export(__webpack_require__(210));
	__export(__webpack_require__(202));
	__export(__webpack_require__(247));
	__export(__webpack_require__(248));
	__export(__webpack_require__(214));
	__export(__webpack_require__(166));
	var view_ref_1 = __webpack_require__(179);
	exports.ViewRef = view_ref_1.ViewRef;
	exports.ProtoViewRef = view_ref_1.ProtoViewRef;
	var view_container_ref_1 = __webpack_require__(185);
	exports.ViewContainerRef = view_container_ref_1.ViewContainerRef;
	var element_ref_1 = __webpack_require__(162);
	exports.ElementRef = element_ref_1.ElementRef;
	exports.__esModule = true;
	//# sourceMappingURL=core.js.map

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var ShadowDomStrategy = (function () {
	  function ShadowDomStrategy() {}
	  ShadowDomStrategy.prototype.hasNativeContentElement = function () {
	    return true;
	  };
	  /**
	   * Prepares and returns the shadow root for the given element.
	   */
	  ShadowDomStrategy.prototype.prepareShadowRoot = function (el) {
	    return null;
	  };
	  ShadowDomStrategy.prototype.constructLightDom = function (lightDomView, el) {
	    return null;
	  };
	  /**
	   * An optional step that can modify the template style elements.
	   */
	  ShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleElement) {
	    return null;
	  };
	  ;
	  /**
	   * An optional step that can modify the template elements (style elements exlcuded).
	   */
	  ShadowDomStrategy.prototype.processElement = function (hostComponentId, elementComponentId, element) {};
	  return ShadowDomStrategy;
	})();
	exports.ShadowDomStrategy = ShadowDomStrategy;
	exports.__esModule = true;
	//# sourceMappingURL=shadow_dom_strategy.js.map

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var visibility_1 = __webpack_require__(117);
	exports.SelfAnnotation = visibility_1.Self;
	exports.AncestorAnnotation = visibility_1.Ancestor;
	exports.ParentAnnotation = visibility_1.Parent;
	exports.UnboundedAnnotation = visibility_1.Unbounded;
	exports.__esModule = true;
	//# sourceMappingURL=visibility.js.map

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var view_1 = __webpack_require__(161);
	exports.ViewAnnotation = view_1.View;
	exports.__esModule = true;
	//# sourceMappingURL=view.js.map

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var browser_adapter_1 = __webpack_require__(207);
	var dom_adapter_1 = __webpack_require__(163);
	var compiler_1 = __webpack_require__(175);
	var reflection_1 = __webpack_require__(129);
	var change_detection_1 = __webpack_require__(122);
	var exception_handler_1 = __webpack_require__(209);
	var template_loader_1 = __webpack_require__(210);
	var template_resolver_1 = __webpack_require__(188);
	var directive_resolver_1 = __webpack_require__(183);
	var collection_1 = __webpack_require__(121);
	var async_1 = __webpack_require__(155);
	var ng_zone_1 = __webpack_require__(212);
	var life_cycle_1 = __webpack_require__(213);
	var shadow_dom_strategy_1 = __webpack_require__(202);
	var emulated_unscoped_shadow_dom_strategy_1 = __webpack_require__(214);
	var xhr_1 = __webpack_require__(211);
	var xhr_impl_1 = __webpack_require__(218);
	var event_manager_1 = __webpack_require__(206);
	var key_events_1 = __webpack_require__(219);
	var hammer_gestures_1 = __webpack_require__(220);
	var component_url_mapper_1 = __webpack_require__(189);
	var url_resolver_1 = __webpack_require__(191);
	var style_url_resolver_1 = __webpack_require__(222);
	var style_inliner_1 = __webpack_require__(223);
	var dynamic_component_loader_1 = __webpack_require__(166);
	var testability_1 = __webpack_require__(224);
	var view_pool_1 = __webpack_require__(184);
	var view_manager_1 = __webpack_require__(178);
	var view_manager_utils_1 = __webpack_require__(180);
	var proto_view_factory_1 = __webpack_require__(190);
	var api_1 = __webpack_require__(165);
	var dom_renderer_1 = __webpack_require__(226);
	var view_1 = __webpack_require__(164);
	var compiler_2 = __webpack_require__(231);
	var view_ref_1 = __webpack_require__(179);
	var application_tokens_1 = __webpack_require__(245);
	var _rootInjector;
	// Contains everything that is safe to share between applications.
	var _rootBindings = [di_1.bind(reflection_1.Reflector).toValue(reflection_1.reflector), testability_1.TestabilityRegistry];
	function _injectorBindings(appComponentType) {
	    return [di_1.bind(dom_renderer_1.DOCUMENT_TOKEN).toValue(dom_adapter_1.DOM.defaultDoc()), di_1.bind(application_tokens_1.appComponentTypeToken).toValue(appComponentType), di_1.bind(application_tokens_1.appComponentRefToken).toAsyncFactory(function (dynamicComponentLoader, injector, testability, registry) {
	        // TODO(rado): investigate whether to support bindings on root component.
	        return dynamicComponentLoader.loadAsRoot(appComponentType, null, injector).then(function (componentRef) {
	            var domView = view_1.resolveInternalDomView(componentRef.hostView.render);
	            // We need to do this here to ensure that we create Testability and
	            // it's ready on the window for users.
	            registry.registerApplication(domView.boundElements[0], testability);
	            return componentRef;
	        });
	    }, [dynamic_component_loader_1.DynamicComponentLoader, di_1.Injector, testability_1.Testability, testability_1.TestabilityRegistry]), di_1.bind(appComponentType).toFactory(function (ref) {
	        return ref.instance;
	    }, [application_tokens_1.appComponentRefToken]), di_1.bind(life_cycle_1.LifeCycle).toFactory(function (exceptionHandler) {
	        return new life_cycle_1.LifeCycle(exceptionHandler, null, lang_1.assertionsEnabled());
	    }, [exception_handler_1.ExceptionHandler]), di_1.bind(event_manager_1.EventManager).toFactory(function (ngZone) {
	        var plugins = [new hammer_gestures_1.HammerGesturesPlugin(), new key_events_1.KeyEventsPlugin(), new event_manager_1.DomEventsPlugin()];
	        return new event_manager_1.EventManager(plugins, ngZone);
	    }, [ng_zone_1.NgZone]), di_1.bind(shadow_dom_strategy_1.ShadowDomStrategy).toFactory(function (styleUrlResolver, doc) {
	        return new emulated_unscoped_shadow_dom_strategy_1.EmulatedUnscopedShadowDomStrategy(styleUrlResolver, doc.head);
	    }, [style_url_resolver_1.StyleUrlResolver, dom_renderer_1.DOCUMENT_TOKEN]),
	    // TODO(tbosch): We need an explicit factory here, as
	    // we are getting errors in dart2js with mirrors...
	    di_1.bind(dom_renderer_1.DomRenderer).toFactory(function (eventManager, shadowDomStrategy, doc) {
	        return new dom_renderer_1.DomRenderer(eventManager, shadowDomStrategy, doc);
	    }, [event_manager_1.EventManager, shadow_dom_strategy_1.ShadowDomStrategy, dom_renderer_1.DOCUMENT_TOKEN]), compiler_2.DefaultDomCompiler, di_1.bind(api_1.Renderer).toAlias(dom_renderer_1.DomRenderer), di_1.bind(api_1.RenderCompiler).toAlias(compiler_2.DefaultDomCompiler), proto_view_factory_1.ProtoViewFactory,
	    // TODO(tbosch): We need an explicit factory here, as
	    // we are getting errors in dart2js with mirrors...
	    di_1.bind(view_pool_1.AppViewPool).toFactory(function (capacity) {
	        return new view_pool_1.AppViewPool(capacity);
	    }, [view_pool_1.APP_VIEW_POOL_CAPACITY]), di_1.bind(view_pool_1.APP_VIEW_POOL_CAPACITY).toValue(10000), view_manager_1.AppViewManager, view_manager_utils_1.AppViewManagerUtils, compiler_1.Compiler, compiler_1.CompilerCache, template_resolver_1.TemplateResolver, di_1.bind(change_detection_1.PipeRegistry).toValue(change_detection_1.defaultPipeRegistry), di_1.bind(change_detection_1.ChangeDetection).toClass(change_detection_1.DynamicChangeDetection), template_loader_1.TemplateLoader, directive_resolver_1.DirectiveResolver, change_detection_1.Parser, change_detection_1.Lexer, exception_handler_1.ExceptionHandler, di_1.bind(xhr_1.XHR).toValue(new xhr_impl_1.XHRImpl()), component_url_mapper_1.ComponentUrlMapper, url_resolver_1.UrlResolver, style_url_resolver_1.StyleUrlResolver, style_inliner_1.StyleInliner, dynamic_component_loader_1.DynamicComponentLoader, testability_1.Testability];
	}
	function _createNgZone(givenReporter) {
	    var defaultErrorReporter = function defaultErrorReporter(exception, stackTrace) {
	        var longStackTrace = collection_1.ListWrapper.join(stackTrace, '\n\n-----async gap-----\n');
	        dom_adapter_1.DOM.logError(exception + '\n\n' + longStackTrace);
	        throw exception;
	    };
	    var reporter = lang_1.isPresent(givenReporter) ? givenReporter : defaultErrorReporter;
	    var zone = new ng_zone_1.NgZone({ enableLongStackTrace: lang_1.assertionsEnabled() });
	    zone.initCallbacks({ onErrorHandler: reporter });
	    return zone;
	}
	/**
	 * Bootstrapping for Angular applications.
	 *
	 * You instantiate an Angular application by explicitly specifying a component to use as the root
	 * component for your
	 * application via the `bootstrap()` method.
	 *
	 * ## Simple Example
	 *
	 * Assuming this `index.html`:
	 *
	 * ```html
	 * <html>
	 *   <!-- load Angular script tags here. -->
	 *   <body>
	 *     <my-app>loading...</my-app>
	 *   </body>
	 * </html>
	 * ```
	 *
	 * An application is bootstrapped inside an existing browser DOM, typically `index.html`. Unlike
	 * Angular 1, Angular 2
	 * does not compile/process bindings in `index.html`. This is mainly for security reasons, as well
	 * as architectural
	 * changes in Angular 2. This means that `index.html` can safely be processed using server-side
	 * technologies such as
	 * bindings. Bindings can thus use double-curly `{{ syntax }}` without collision from Angular 2
	 * component double-curly
	 * `{{ syntax }}`.
	 *
	 * We can use this script code:
	 *
	 * ```
	 * @Component({
	 *    selector: 'my-app'
	 * })
	 * @View({
	 *    template: 'Hello {{ name }}!'
	 * })
	 * class MyApp {
	 *   name:string;
	 *
	 *   constructor() {
	 *     this.name = 'World';
	 *   }
	 * }
	 *
	 * main() {
	 *   return bootstrap(MyApp);
	 * }
	 * ```
	 *
	 * When the app developer invokes `bootstrap()` with the root component `MyApp` as its argument,
	 * Angular performs the
	 * following tasks:
	 *
	 *  1. It uses the component's `selector` property to locate the DOM element which needs to be
	 * upgraded into
	 *     the angular component.
	 *  2. It creates a new child injector (from the platform injector) and configures the injector with
	 * the component's
	 *     `appInjector`. Optionally, you can also override the injector configuration for an app by
	 * invoking
	 *     `bootstrap` with the `componentInjectableBindings` argument.
	 *  3. It creates a new `Zone` and connects it to the angular application's change detection domain
	 * instance.
	 *  4. It creates a shadow DOM on the selected component's host element and loads the template into
	 * it.
	 *  5. It instantiates the specified component.
	 *  6. Finally, Angular performs change detection to apply the initial data bindings for the
	 * application.
	 *
	 *
	 * ## Instantiating Multiple Applications on a Single Page
	 *
	 * There are two ways to do this.
	 *
	 *
	 * ### Isolated Applications
	 *
	 * Angular creates a new application each time that the `bootstrap()` method is invoked. When
	 * multiple applications
	 * are created for a page, Angular treats each application as independent within an isolated change
	 * detection and
	 * `Zone` domain. If you need to share data between applications, use the strategy described in the
	 * next
	 * section, "Applications That Share Change Detection."
	 *
	 *
	 * ### Applications That Share Change Detection
	 *
	 * If you need to bootstrap multiple applications that share common data, the applications must
	 * share a common
	 * change detection and zone. To do that, create a meta-component that lists the application
	 * components in its template.
	 * By only invoking the `bootstrap()` method once, with the meta-component as its argument, you
	 * ensure that only a
	 * single change detection zone is created and therefore data can be shared across the applications.
	 *
	 *
	 * ## Platform Injector
	 *
	 * When working within a browser window, there are many singleton resources: cookies, title,
	 * location, and others.
	 * Angular services that represent these resources must likewise be shared across all Angular
	 * applications that
	 * occupy the same browser window.  For this reason, Angular creates exactly one global platform
	 * injector which stores
	 * all shared services, and each angular application injector has the platform injector as its
	 * parent.
	 *
	 * Each application has its own private injector as well. When there are multiple applications on a
	 * page, Angular treats
	 * each application injector's services as private to that application.
	 *
	 *
	 * # API
	 * - `appComponentType`: The root component which should act as the application. This is a reference
	 * to a `Type`
	 *   which is annotated with `@Component(...)`.
	 * - `componentInjectableBindings`: An additional set of bindings that can be added to `appInjector`
	 * for the
	 * {@link Component} to override default injection behavior.
	 * - `errorReporter`: `function(exception:any, stackTrace:string)` a default error reporter for
	 * unhandled exceptions.
	 *
	 * Returns a `Promise` with the application`s private {@link Injector}.
	 *
	 * @exportedAs angular2/core
	 */
	function bootstrap(appComponentType, componentInjectableBindings, errorReporter) {
	    if (componentInjectableBindings === void 0) {
	        componentInjectableBindings = null;
	    }
	    if (errorReporter === void 0) {
	        errorReporter = null;
	    }
	    browser_adapter_1.BrowserDomAdapter.makeCurrent();
	    var bootstrapProcess = async_1.PromiseWrapper.completer();
	    var zone = _createNgZone(errorReporter);
	    zone.run(function () {
	        // TODO(rado): prepopulate template cache, so applications with only
	        // index.html and main.js are possible.
	        var appInjector = _createAppInjector(appComponentType, componentInjectableBindings, zone);
	        async_1.PromiseWrapper.then(appInjector.asyncGet(application_tokens_1.appComponentRefToken), function (componentRef) {
	            var appChangeDetector = view_ref_1.internalView(componentRef.hostView).changeDetector;
	            // retrieve life cycle: may have already been created if injected in root component
	            var lc = appInjector.get(life_cycle_1.LifeCycle);
	            lc.registerWith(zone, appChangeDetector);
	            lc.tick(); // the first tick that will bootstrap the app
	            bootstrapProcess.resolve(new ApplicationRef(componentRef, appComponentType, appInjector));
	        }, function (err, stackTrace) {
	            bootstrapProcess.reject(err, stackTrace);
	        });
	    });
	    return bootstrapProcess.promise;
	}
	exports.bootstrap = bootstrap;
	var ApplicationRef = (function () {
	    function ApplicationRef(hostComponent, hostComponentType, injector) {
	        this._hostComponent = hostComponent;
	        this._injector = injector;
	        this._hostComponentType = hostComponentType;
	    }
	    Object.defineProperty(ApplicationRef.prototype, 'hostComponentType', {
	        get: function get() {
	            return this._hostComponentType;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(ApplicationRef.prototype, 'hostComponent', {
	        get: function get() {
	            return this._hostComponent.instance;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ApplicationRef.prototype.dispose = function () {
	        // TODO: We also need to clean up the Zone, ... here!
	        return this._hostComponent.dispose();
	    };
	    Object.defineProperty(ApplicationRef.prototype, 'injector', {
	        get: function get() {
	            return this._injector;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return ApplicationRef;
	})();
	exports.ApplicationRef = ApplicationRef;
	function _createAppInjector(appComponentType, bindings, zone) {
	    if (lang_1.isBlank(_rootInjector)) _rootInjector = di_1.Injector.resolveAndCreate(_rootBindings);
	    var mergedBindings = lang_1.isPresent(bindings) ? collection_1.ListWrapper.concat(_injectorBindings(appComponentType), bindings) : _injectorBindings(appComponentType);
	    collection_1.ListWrapper.push(mergedBindings, di_1.bind(ng_zone_1.NgZone).toValue(zone));
	    return _rootInjector.resolveAndCreateChild(mergedBindings);
	}
	exports.__esModule = true;
	//# sourceMappingURL=application.js.map

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var dom_adapter_1 = __webpack_require__(163);
	var BUBBLE_SYMBOL = '^';
	var EventManager = (function () {
	    function EventManager(plugins, zone) {
	        this._zone = zone;
	        this._plugins = plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            plugins[i].manager = this;
	        }
	    }
	    EventManager.prototype.addEventListener = function (element, eventName, handler) {
	        var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
	        var plugin = this._findPluginFor(withoutBubbleSymbol);
	        plugin.addEventListener(element, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
	    };
	    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	        var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
	        var plugin = this._findPluginFor(withoutBubbleSymbol);
	        return plugin.addGlobalEventListener(target, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
	    };
	    EventManager.prototype.getZone = function () {
	        return this._zone;
	    };
	    EventManager.prototype._findPluginFor = function (eventName) {
	        var plugins = this._plugins;
	        for (var i = 0; i < plugins.length; i++) {
	            var plugin = plugins[i];
	            if (plugin.supports(eventName)) {
	                return plugin;
	            }
	        }
	        throw new lang_1.BaseException('No event manager plugin found for event ' + eventName);
	    };
	    EventManager.prototype._removeBubbleSymbol = function (eventName) {
	        return eventName[0] == BUBBLE_SYMBOL ? lang_1.StringWrapper.substring(eventName, 1) : eventName;
	    };
	    return EventManager;
	})();
	exports.EventManager = EventManager;
	var EventManagerPlugin = (function () {
	    function EventManagerPlugin() {}
	    // We are assuming here that all plugins support bubbled and non-bubbled events.
	    // That is equivalent to having supporting $event.target
	    // The bubbling flag (currently ^) is stripped before calling the supports and
	    // addEventListener methods.
	    EventManagerPlugin.prototype.supports = function (eventName) {
	        return false;
	    };
	    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        throw 'not implemented';
	    };
	    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        throw 'not implemented';
	    };
	    return EventManagerPlugin;
	})();
	exports.EventManagerPlugin = EventManagerPlugin;
	var DomEventsPlugin = (function (_super) {
	    __extends(DomEventsPlugin, _super);
	    function DomEventsPlugin() {
	        _super.apply(this, arguments);
	    }
	    // This plugin should come last in the list of plugins, because it accepts all
	    // events.
	    DomEventsPlugin.prototype.supports = function (eventName) {
	        return true;
	    };
	    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
	        this.manager._zone.runOutsideAngular(function () {
	            dom_adapter_1.DOM.on(element, eventName, outsideHandler);
	        });
	    };
	    DomEventsPlugin.prototype.addGlobalEventListener = function (target, eventName, handler, shouldSupportBubble) {
	        var element = dom_adapter_1.DOM.getGlobalEventTarget(target);
	        var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
	        return this.manager._zone.runOutsideAngular(function () {
	            return dom_adapter_1.DOM.onAndCancel(element, eventName, outsideHandler);
	        });
	    };
	    DomEventsPlugin.prototype._getOutsideHandler = function (shouldSupportBubble, element, handler, zone) {
	        return shouldSupportBubble ? DomEventsPlugin.bubbleCallback(element, handler, zone) : DomEventsPlugin.sameElementCallback(element, handler, zone);
	    };
	    DomEventsPlugin.sameElementCallback = function (element, handler, zone) {
	        return function (event) {
	            if (event.target === element) {
	                zone.run(function () {
	                    return handler(event);
	                });
	            }
	        };
	    };
	    DomEventsPlugin.bubbleCallback = function (element, handler, zone) {
	        return function (event) {
	            return zone.run(function () {
	                return handler(event);
	            });
	        };
	    };
	    return DomEventsPlugin;
	})(EventManagerPlugin);
	exports.DomEventsPlugin = DomEventsPlugin;
	exports.__esModule = true;
	//# sourceMappingURL=event_manager.js.map

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var dom_adapter_1 = __webpack_require__(163);
	var generic_browser_adapter_1 = __webpack_require__(208);
	var _attrToPropMap = { 'innerHtml': 'innerHTML', 'readonly': 'readOnly', 'tabindex': 'tabIndex' };
	var DOM_KEY_LOCATION_NUMPAD = 3;
	// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	var _keyMap = {
	    // The following values are here for cross-browser compatibility and to match the W3C standard
	    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	    '\b': 'Backspace',
	    '\t': 'Tab',
	    '': 'Delete',
	    '\u001b': 'Escape',
	    'Del': 'Delete',
	    'Esc': 'Escape',
	    'Left': 'ArrowLeft',
	    'Right': 'ArrowRight',
	    'Up': 'ArrowUp',
	    'Down': 'ArrowDown',
	    'Menu': 'ContextMenu',
	    'Scroll': 'ScrollLock',
	    'Win': 'OS'
	};
	// There is a bug in Chrome for numeric keypad keys:
	// https://code.google.com/p/chromium/issues/detail?id=155654
	// 1, 2, 3 ... are reported as A, B, C ...
	var _chromeNumKeyPadMap = {
	    'A': '1',
	    'B': '2',
	    'C': '3',
	    'D': '4',
	    'E': '5',
	    'F': '6',
	    'G': '7',
	    'H': '8',
	    'I': '9',
	    'J': '*',
	    'K': '+',
	    'M': '-',
	    'N': '.',
	    'O': '/',
	    '`': '0',
	    '': 'NumLock'
	};
	var BrowserDomAdapter = (function (_super) {
	    __extends(BrowserDomAdapter, _super);
	    function BrowserDomAdapter() {
	        _super.apply(this, arguments);
	    }
	    BrowserDomAdapter.makeCurrent = function () {
	        dom_adapter_1.setRootDomAdapter(new BrowserDomAdapter());
	    };
	    BrowserDomAdapter.prototype.logError = function (error) {
	        window.console.error(error);
	    };
	    Object.defineProperty(BrowserDomAdapter.prototype, 'attrToPropMap', {
	        get: function get() {
	            return _attrToPropMap;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BrowserDomAdapter.prototype.query = function (selector) {
	        return document.querySelector(selector);
	    };
	    BrowserDomAdapter.prototype.querySelector = function (el, selector) {
	        return el.querySelector(selector);
	    };
	    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) {
	        return el.querySelectorAll(selector);
	    };
	    BrowserDomAdapter.prototype.on = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	    };
	    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	        el.addEventListener(evt, listener, false);
	        // Needed to follow Dart's subscription semantic, until fix of
	        // https://code.google.com/p/dart/issues/detail?id=17406
	        return function () {
	            el.removeEventListener(evt, listener, false);
	        };
	    };
	    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) {
	        el.dispatchEvent(evt);
	    };
	    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	        var evt = new MouseEvent(eventType);
	        evt.initEvent(eventType, true, true);
	        return evt;
	    };
	    BrowserDomAdapter.prototype.createEvent = function (eventType) {
	        return new Event(eventType, true);
	    };
	    BrowserDomAdapter.prototype.getInnerHTML = function (el) {
	        return el.innerHTML;
	    };
	    BrowserDomAdapter.prototype.getOuterHTML = function (el) {
	        return el.outerHTML;
	    };
	    BrowserDomAdapter.prototype.nodeName = function (node) {
	        return node.nodeName;
	    };
	    BrowserDomAdapter.prototype.nodeValue = function (node) {
	        return node.nodeValue;
	    };
	    BrowserDomAdapter.prototype.type = function (node) {
	        return node.type;
	    };
	    BrowserDomAdapter.prototype.content = function (node) {
	        if (this.hasProperty(node, 'content')) {
	            return node.content;
	        } else {
	            return node;
	        }
	    };
	    BrowserDomAdapter.prototype.firstChild = function (el) {
	        return el.firstChild;
	    };
	    BrowserDomAdapter.prototype.nextSibling = function (el) {
	        return el.nextSibling;
	    };
	    BrowserDomAdapter.prototype.parentElement = function (el) {
	        return el.parentElement;
	    };
	    BrowserDomAdapter.prototype.childNodes = function (el) {
	        return el.childNodes;
	    };
	    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	        var childNodes = el.childNodes;
	        var res = collection_1.ListWrapper.createFixedSize(childNodes.length);
	        for (var i = 0; i < childNodes.length; i++) {
	            res[i] = childNodes[i];
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.clearNodes = function (el) {
	        for (var i = 0; i < el.childNodes.length; i++) {
	            this.remove(el.childNodes[i]);
	        }
	    };
	    BrowserDomAdapter.prototype.appendChild = function (el, node) {
	        el.appendChild(node);
	    };
	    BrowserDomAdapter.prototype.removeChild = function (el, node) {
	        el.removeChild(node);
	    };
	    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) {
	        el.replaceChild(newChild, oldChild);
	    };
	    BrowserDomAdapter.prototype.remove = function (el) {
	        var parent = el.parentNode;
	        parent.removeChild(el);
	        return el;
	    };
	    BrowserDomAdapter.prototype.insertBefore = function (el, node) {
	        el.parentNode.insertBefore(node, el);
	    };
	    BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
	        collection_1.ListWrapper.forEach(nodes, function (n) {
	            el.parentNode.insertBefore(n, el);
	        });
	    };
	    BrowserDomAdapter.prototype.insertAfter = function (el, node) {
	        el.parentNode.insertBefore(node, el.nextSibling);
	    };
	    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) {
	        el.innerHTML = value;
	    };
	    BrowserDomAdapter.prototype.getText = function (el) {
	        return el.textContent;
	    };
	    // TODO(vicb): removed Element type because it does not support StyleElement
	    BrowserDomAdapter.prototype.setText = function (el, value) {
	        el.textContent = value;
	    };
	    BrowserDomAdapter.prototype.getValue = function (el) {
	        return el.value;
	    };
	    BrowserDomAdapter.prototype.setValue = function (el, value) {
	        el.value = value;
	    };
	    BrowserDomAdapter.prototype.getChecked = function (el) {
	        return el.checked;
	    };
	    BrowserDomAdapter.prototype.setChecked = function (el, value) {
	        el.checked = value;
	    };
	    BrowserDomAdapter.prototype.createTemplate = function (html) {
	        var t = document.createElement('template');
	        t.innerHTML = html;
	        return t;
	    };
	    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	        if (doc === void 0) {
	            doc = document;
	        }
	        return doc.createElement(tagName);
	    };
	    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	        if (doc === void 0) {
	            doc = document;
	        }
	        return doc.createTextNode(text);
	    };
	    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	        if (doc === void 0) {
	            doc = document;
	        }
	        var el = doc.createElement('SCRIPT');
	        el.setAttribute(attrName, attrValue);
	        return el;
	    };
	    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	        if (doc === void 0) {
	            doc = document;
	        }
	        var style = doc.createElement('STYLE');
	        style.innerText = css;
	        return style;
	    };
	    BrowserDomAdapter.prototype.createShadowRoot = function (el) {
	        return el.createShadowRoot();
	    };
	    BrowserDomAdapter.prototype.getShadowRoot = function (el) {
	        return el.shadowRoot;
	    };
	    BrowserDomAdapter.prototype.getHost = function (el) {
	        return el.host;
	    };
	    BrowserDomAdapter.prototype.clone = function (node) {
	        return node.cloneNode(true);
	    };
	    BrowserDomAdapter.prototype.hasProperty = function (element, name) {
	        return name in element;
	    };
	    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	        return element.getElementsByClassName(name);
	    };
	    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	        return element.getElementsByTagName(name);
	    };
	    BrowserDomAdapter.prototype.classList = function (element) {
	        return Array.prototype.slice.call(element.classList, 0);
	    };
	    BrowserDomAdapter.prototype.addClass = function (element, classname) {
	        element.classList.add(classname);
	    };
	    BrowserDomAdapter.prototype.removeClass = function (element, classname) {
	        element.classList.remove(classname);
	    };
	    BrowserDomAdapter.prototype.hasClass = function (element, classname) {
	        return element.classList.contains(classname);
	    };
	    BrowserDomAdapter.prototype.setStyle = function (element, stylename, stylevalue) {
	        element.style[stylename] = stylevalue;
	    };
	    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
	        element.style[stylename] = null;
	    };
	    BrowserDomAdapter.prototype.getStyle = function (element, stylename) {
	        return element.style[stylename];
	    };
	    BrowserDomAdapter.prototype.tagName = function (element) {
	        return element.tagName;
	    };
	    BrowserDomAdapter.prototype.attributeMap = function (element) {
	        var res = collection_1.MapWrapper.create();
	        var elAttrs = element.attributes;
	        for (var i = 0; i < elAttrs.length; i++) {
	            var attrib = elAttrs[i];
	            collection_1.MapWrapper.set(res, attrib.name, attrib.value);
	        }
	        return res;
	    };
	    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
	        return element.hasAttribute(attribute);
	    };
	    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
	        return element.getAttribute(attribute);
	    };
	    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) {
	        element.setAttribute(name, value);
	    };
	    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) {
	        return element.removeAttribute(attribute);
	    };
	    BrowserDomAdapter.prototype.templateAwareRoot = function (el) {
	        return this.isTemplateElement(el) ? this.content(el) : el;
	    };
	    BrowserDomAdapter.prototype.createHtmlDocument = function () {
	        return document.implementation.createHTMLDocument('fakeTitle');
	    };
	    BrowserDomAdapter.prototype.defaultDoc = function () {
	        return document;
	    };
	    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	        return el.getBoundingClientRect();
	    };
	    BrowserDomAdapter.prototype.getTitle = function () {
	        return document.title;
	    };
	    BrowserDomAdapter.prototype.setTitle = function (newTitle) {
	        document.title = newTitle;
	    };
	    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	        return n instanceof HTMLElement && n.matches(selector);
	    };
	    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	        return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
	    };
	    BrowserDomAdapter.prototype.isTextNode = function (node) {
	        return node.nodeType === Node.TEXT_NODE;
	    };
	    BrowserDomAdapter.prototype.isCommentNode = function (node) {
	        return node.nodeType === Node.COMMENT_NODE;
	    };
	    BrowserDomAdapter.prototype.isElementNode = function (node) {
	        return node.nodeType === Node.ELEMENT_NODE;
	    };
	    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
	        return node instanceof HTMLElement && lang_1.isPresent(node.shadowRoot);
	    };
	    BrowserDomAdapter.prototype.isShadowRoot = function (node) {
	        return node instanceof DocumentFragment;
	    };
	    BrowserDomAdapter.prototype.importIntoDoc = function (node) {
	        var toImport = node;
	        if (this.isTemplateElement(node)) {
	            toImport = this.content(node);
	        }
	        return document.importNode(toImport, true);
	    };
	    BrowserDomAdapter.prototype.isPageRule = function (rule) {
	        return rule.type === CSSRule.PAGE_RULE;
	    };
	    BrowserDomAdapter.prototype.isStyleRule = function (rule) {
	        return rule.type === CSSRule.STYLE_RULE;
	    };
	    BrowserDomAdapter.prototype.isMediaRule = function (rule) {
	        return rule.type === CSSRule.MEDIA_RULE;
	    };
	    BrowserDomAdapter.prototype.isKeyframesRule = function (rule) {
	        return rule.type === CSSRule.KEYFRAMES_RULE;
	    };
	    BrowserDomAdapter.prototype.getHref = function (el) {
	        return el.href;
	    };
	    BrowserDomAdapter.prototype.getEventKey = function (event) {
	        var key = event.key;
	        if (lang_1.isBlank(key)) {
	            key = event.keyIdentifier;
	            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	            // Safari
	            // cf
	            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	            if (lang_1.isBlank(key)) {
	                return 'Unidentified';
	            }
	            if (key.startsWith('U+')) {
	                key = String.fromCharCode(parseInt(key.substring(2), 16));
	                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                    // There is a bug in Chrome for numeric keypad keys:
	                    // https://code.google.com/p/chromium/issues/detail?id=155654
	                    // 1, 2, 3 ... are reported as A, B, C ...
	                    key = _chromeNumKeyPadMap[key];
	                }
	            }
	        }
	        if (_keyMap.hasOwnProperty(key)) {
	            key = _keyMap[key];
	        }
	        return key;
	    };
	    BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	        if (target == 'window') {
	            return window;
	        } else if (target == 'document') {
	            return document;
	        } else if (target == 'body') {
	            return document.body;
	        }
	    };
	    BrowserDomAdapter.prototype.getHistory = function () {
	        return window.history;
	    };
	    BrowserDomAdapter.prototype.getLocation = function () {
	        return window.location;
	    };
	    BrowserDomAdapter.prototype.getBaseHref = function () {
	        return relativePath(document.baseURI);
	    };
	    return BrowserDomAdapter;
	})(generic_browser_adapter_1.GenericBrowserDomAdapter);
	exports.BrowserDomAdapter = BrowserDomAdapter;
	// based on urlUtils.js in AngularJS 1
	var urlParsingNode = null;
	function relativePath(url) {
	    if (lang_1.isBlank(urlParsingNode)) {
	        urlParsingNode = document.createElement('a');
	    }
	    urlParsingNode.setAttribute('href', url);
	    return urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname;
	}
	exports.__esModule = true;
	//# sourceMappingURL=browser_adapter.js.map

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var dom_adapter_1 = __webpack_require__(163);
	/**
	 * Provides DOM operations in any browser environment.
	 */
	var GenericBrowserDomAdapter = (function (_super) {
	    __extends(GenericBrowserDomAdapter, _super);
	    function GenericBrowserDomAdapter() {
	        _super.apply(this, arguments);
	    }
	    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) {
	        return el.getDistributedNodes();
	    };
	    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	    };
	    GenericBrowserDomAdapter.prototype.cssToRules = function (css) {
	        var style = this.createStyleElement(css);
	        this.appendChild(this.defaultDoc().head, style);
	        var rules = collection_1.ListWrapper.create();
	        if (lang_1.isPresent(style.sheet)) {
	            // TODO(sorvell): Firefox throws when accessing the rules of a stylesheet
	            // with an @import
	            // https://bugzilla.mozilla.org/show_bug.cgi?id=625013
	            try {
	                var rawRules = style.sheet.cssRules;
	                rules = collection_1.ListWrapper.createFixedSize(rawRules.length);
	                for (var i = 0; i < rawRules.length; i++) {
	                    rules[i] = rawRules[i];
	                }
	            } catch (e) {}
	        } else {}
	        this.remove(style);
	        return rules;
	    };
	    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () {
	        return true;
	    };
	    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	        return lang_1.isFunction(this.defaultDoc().body.createShadowRoot);
	    };
	    return GenericBrowserDomAdapter;
	})(dom_adapter_1.DomAdapter);
	exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;
	exports.__esModule = true;
	//# sourceMappingURL=generic_browser_adapter.js.map

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var dom_adapter_1 = __webpack_require__(163);
	/**
	 * Provides a hook for centralized exception handling.
	 *
	 * The default implementation of `ExceptionHandler` prints error messages to the `Console`. To
	 * intercept error handling,
	 * write a custom exception handler that replaces this default as appropriate for your app.
	 *
	 * # Example
	 *
	 * ```javascript
	 * @Component({
	 *   selector: 'my-app',
	 *   appInjector: [
	 *     bind(ExceptionHandler).toClass(MyExceptionHandler)
	 *   ]
	 * })
	 * @View(...)
	 * class MyApp { ... }
	 *
	 *
	 * class MyExceptionHandler implements ExceptionHandler {
	 *   call(error, stackTrace = null, reason = null) {
	 *     // do something with the exception
	 *   }
	 * }
	 *
	 * ```
	 *
	 * @exportedAs angular2/core
	 */
	var ExceptionHandler = (function () {
	    function ExceptionHandler() {}
	    ExceptionHandler.prototype.call = function (error, stackTrace, reason) {
	        if (stackTrace === void 0) {
	            stackTrace = null;
	        }
	        if (reason === void 0) {
	            reason = null;
	        }
	        var longStackTrace = collection_1.isListLikeIterable(stackTrace) ? collection_1.ListWrapper.join(stackTrace, "\n\n") : stackTrace;
	        var reasonStr = lang_1.isPresent(reason) ? "\n" + reason : "";
	        dom_adapter_1.DOM.logError("" + error + reasonStr + "\nSTACKTRACE:\n" + longStackTrace);
	    };
	    ExceptionHandler = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [])], ExceptionHandler);
	    return ExceptionHandler;
	})();
	exports.ExceptionHandler = ExceptionHandler;
	exports.__esModule = true;
	//# sourceMappingURL=exception_handler.js.map

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var async_1 = __webpack_require__(155);
	var dom_adapter_1 = __webpack_require__(163);
	var xhr_1 = __webpack_require__(211);
	var url_resolver_1 = __webpack_require__(191);
	/**
	 * Strategy to load component templates.
	 * TODO: Make public API once we are more confident in this approach.
	 */
	var TemplateLoader = (function () {
	    function TemplateLoader(xhr, urlResolver) {
	        this._xhr = xhr;
	        this._htmlCache = collection_1.StringMapWrapper.create();
	    }
	    TemplateLoader.prototype.load = function (template) {
	        if (lang_1.isPresent(template.template)) {
	            return async_1.PromiseWrapper.resolve(dom_adapter_1.DOM.createTemplate(template.template));
	        }
	        var url = template.absUrl;
	        if (lang_1.isPresent(url)) {
	            var promise = collection_1.StringMapWrapper.get(this._htmlCache, url);
	            if (lang_1.isBlank(promise)) {
	                promise = this._xhr.get(url).then(function (html) {
	                    var template = dom_adapter_1.DOM.createTemplate(html);
	                    return template;
	                });
	                collection_1.StringMapWrapper.set(this._htmlCache, url, promise);
	            }
	            // We need to clone the result as others might change it
	            // (e.g. the compiler).
	            return promise.then(function (tplElement) {
	                return dom_adapter_1.DOM.clone(tplElement);
	            });
	        }
	        throw new lang_1.BaseException("View should have either the url or template property set");
	    };
	    TemplateLoader = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [xhr_1.XHR, url_resolver_1.UrlResolver])], TemplateLoader);
	    return TemplateLoader;
	})();
	exports.TemplateLoader = TemplateLoader;
	exports.__esModule = true;
	//# sourceMappingURL=template_loader.js.map

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var XHR = (function () {
	    function XHR() {}
	    XHR.prototype.get = function (url) {
	        return null;
	    };
	    return XHR;
	})();
	exports.XHR = XHR;
	exports.__esModule = true;
	//# sourceMappingURL=xhr.js.map

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	/**
	 * A wrapper around zones that lets you schedule tasks after it has executed a task.
	 *
	 * The wrapper maintains an "inner" and an "mount" `Zone`. The application code will executes
	 * in the "inner" zone unless `runOutsideAngular` is explicitely called.
	 *
	 * A typical application will create a singleton `NgZone`. The outer `Zone` is a fork of the root
	 * `Zone`. The default `onTurnDone` runs the Angular change detection.
	 *
	 * @exportedAs angular2/core
	 */
	var NgZone = (function () {
	    /**
	     * Associates with this
	     *
	     * - a "root" zone, which the one that instantiated this.
	     * - an "inner" zone, which is a child of the root zone.
	     *
	     * @param {bool} enableLongStackTrace whether to enable long stack trace. They should only be
	     *               enabled in development mode as they significantly impact perf.
	     */
	    function NgZone(_a) {
	        var enableLongStackTrace = _a.enableLongStackTrace;
	        this._onTurnStart = null;
	        this._onTurnDone = null;
	        this._onErrorHandler = null;
	        this._pendingMicrotasks = 0;
	        this._hasExecutedCodeInInnerZone = false;
	        this._nestedRun = 0;
	        if (lang_1.global.zone) {
	            this._disabled = false;
	            this._mountZone = lang_1.global.zone;
	            this._innerZone = this._createInnerZone(this._mountZone, enableLongStackTrace);
	        } else {
	            this._disabled = true;
	            this._mountZone = null;
	        }
	    }
	    /**
	     * Initializes the zone hooks.
	     *
	     * @param {() => void} onTurnStart called before code executes in the inner zone for each VM turn
	     * @param {() => void} onTurnDone called at the end of a VM turn if code has executed in the inner
	     * zone
	     * @param {(error, stack) => void} onErrorHandler called when an exception is thrown by a macro or
	     * micro task
	     */
	    NgZone.prototype.initCallbacks = function (_a) {
	        var _b = _a === void 0 ? {} : _a,
	            onTurnStart = _b.onTurnStart,
	            onTurnDone = _b.onTurnDone,
	            onErrorHandler = _b.onErrorHandler;
	        this._onTurnStart = lang_1.normalizeBlank(onTurnStart);
	        this._onTurnDone = lang_1.normalizeBlank(onTurnDone);
	        this._onErrorHandler = lang_1.normalizeBlank(onErrorHandler);
	    };
	    /**
	     * Runs `fn` in the inner zone and returns whatever it returns.
	     *
	     * In a typical app where the inner zone is the Angular zone, this allows one to make use of the
	     * Angular's auto digest mechanism.
	     *
	     * ```
	     * var zone: NgZone = [ref to the application zone];
	     *
	     * zone.run(() => {
	     *   // the change detection will run after this function and the microtasks it enqueues have
	     * executed.
	     * });
	     * ```
	     */
	    NgZone.prototype.run = function (fn) {
	        if (this._disabled) {
	            return fn();
	        } else {
	            return this._innerZone.run(fn);
	        }
	    };
	    /**
	     * Runs `fn` in the outer zone and returns whatever it returns.
	     *
	     * In a typical app where the inner zone is the Angular zone, this allows one to escape Angular's
	     * auto-digest mechanism.
	     *
	     * ```
	     * var zone: NgZone = [ref to the application zone];
	     *
	     * zone.runOusideAngular(() => {
	     *   element.onClick(() => {
	     *     // Clicking on the element would not trigger the change detection
	     *   });
	     * });
	     * ```
	     */
	    NgZone.prototype.runOutsideAngular = function (fn) {
	        if (this._disabled) {
	            return fn();
	        } else {
	            return this._mountZone.run(fn);
	        }
	    };
	    NgZone.prototype._createInnerZone = function (zone, enableLongStackTrace) {
	        var ngZone = this;
	        var errorHandling;
	        if (enableLongStackTrace) {
	            errorHandling = collection_1.StringMapWrapper.merge(Zone.longStackTraceZone, { onError: function onError(e) {
	                    ngZone._onError(this, e);
	                } });
	        } else {
	            errorHandling = {
	                onError: function onError(e) {
	                    ngZone._onError(this, e);
	                }
	            };
	        }
	        return zone.fork(errorHandling).fork({
	            '$run': function $run(parentRun) {
	                return function () {
	                    try {
	                        ngZone._nestedRun++;
	                        if (!ngZone._hasExecutedCodeInInnerZone) {
	                            ngZone._hasExecutedCodeInInnerZone = true;
	                            if (ngZone._onTurnStart) {
	                                parentRun.call(ngZone._innerZone, ngZone._onTurnStart);
	                            }
	                        }
	                        return parentRun.apply(this, arguments);
	                    } finally {
	                        ngZone._nestedRun--;
	                        // If there are no more pending microtasks, we are at the end of a VM turn (or in
	                        // onTurnStart)
	                        // _nestedRun will be 0 at the end of a macrotasks (it could be > 0 when there are
	                        // nested calls
	                        // to run()).
	                        if (ngZone._pendingMicrotasks == 0 && ngZone._nestedRun == 0) {
	                            if (ngZone._onTurnDone && ngZone._hasExecutedCodeInInnerZone) {
	                                try {
	                                    parentRun.call(ngZone._innerZone, ngZone._onTurnDone);
	                                } finally {
	                                    ngZone._hasExecutedCodeInInnerZone = false;
	                                }
	                            }
	                        }
	                    }
	                };
	            },
	            '$scheduleMicrotask': function $scheduleMicrotask(parentScheduleMicrotask) {
	                return function (fn) {
	                    ngZone._pendingMicrotasks++;
	                    var microtask = function microtask() {
	                        try {
	                            fn();
	                        } finally {
	                            ngZone._pendingMicrotasks--;
	                        }
	                    };
	                    parentScheduleMicrotask.call(this, microtask);
	                };
	            },
	            _innerZone: true
	        });
	    };
	    NgZone.prototype._onError = function (zone, e) {
	        if (lang_1.isPresent(this._onErrorHandler)) {
	            var trace = [lang_1.normalizeBlank(e.stack)];
	            while (zone && zone.constructedAtException) {
	                trace.push(zone.constructedAtException.get());
	                zone = zone.parent;
	            }
	            this._onErrorHandler(e, trace);
	        } else {
	            console.log('## _onError ##');
	            console.log(e.stack);
	            throw e;
	        }
	    };
	    return NgZone;
	})();
	exports.NgZone = NgZone;
	exports.__esModule = true;
	//# sourceMappingURL=ng_zone.js.map

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var change_detection_1 = __webpack_require__(122);
	var exception_handler_1 = __webpack_require__(209);
	var lang_1 = __webpack_require__(118);
	/**
	 * Provides access to explicitly trigger change detection in an application.
	 *
	 * By default, `Zone` triggers change detection in Angular on each virtual machine (VM) turn. When
	 * testing, or in some
	 * limited application use cases, a developer can also trigger change detection with the
	 * `lifecycle.tick()` method.
	 *
	 * Each Angular application has a single `LifeCycle` instance.
	 *
	 * # Example
	 *
	 * This is a contrived example, since the bootstrap automatically runs inside of the `Zone`, which
	 * invokes
	 * `lifecycle.tick()` on your behalf.
	 *
	 * ```javascript
	 * bootstrap(MyApp).then((ref:ComponentRef) => {
	 *   var lifeCycle = ref.injector.get(LifeCycle);
	 *   var myApp = ref.instance;
	 *
	 *   ref.doSomething();
	 *   lifecycle.tick();
	 * });
	 * ```
	 * @exportedAs angular2/change_detection
	 */
	var LifeCycle = (function () {
	    function LifeCycle(exceptionHandler, changeDetector, enforceNoNewChanges) {
	        if (changeDetector === void 0) {
	            changeDetector = null;
	        }
	        if (enforceNoNewChanges === void 0) {
	            enforceNoNewChanges = false;
	        }
	        this._errorHandler = function (exception, stackTrace) {
	            exceptionHandler.call(exception, stackTrace);
	            throw exception;
	        };
	        this._changeDetector = changeDetector; // may be null when instantiated from application bootstrap
	        this._enforceNoNewChanges = enforceNoNewChanges;
	    }
	    /**
	     * @private
	     */
	    LifeCycle.prototype.registerWith = function (zone, changeDetector) {
	        var _this = this;
	        if (changeDetector === void 0) {
	            changeDetector = null;
	        }
	        if (lang_1.isPresent(changeDetector)) {
	            this._changeDetector = changeDetector;
	        }
	        zone.initCallbacks({ onErrorHandler: this._errorHandler, onTurnDone: function onTurnDone() {
	                return _this.tick();
	            } });
	    };
	    /**
	     *  Invoke this method to explicitly process change detection and its side-effects.
	     *
	     *  In development mode, `tick()` also performs a second change detection cycle to ensure that no
	     * further
	     *  changes are detected. If additional changes are picked up during this second cycle, bindings in
	     * the app have
	     *  side-effects that cannot be resolved in a single change detection pass. In this case, Angular
	     * throws an error,
	     *  since an Angular application can only have one change detection pass during which all change
	     * detection must
	     *  complete.
	     *
	     */
	    LifeCycle.prototype.tick = function () {
	        this._changeDetector.detectChanges();
	        if (this._enforceNoNewChanges) {
	            this._changeDetector.checkNoChanges();
	        }
	    };
	    LifeCycle = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [exception_handler_1.ExceptionHandler, change_detection_1.ChangeDetector, Boolean])], LifeCycle);
	    return LifeCycle;
	})();
	exports.LifeCycle = LifeCycle;
	exports.__esModule = true;
	//# sourceMappingURL=life_cycle.js.map

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(163);
	var light_dom_1 = __webpack_require__(215);
	var shadow_dom_strategy_1 = __webpack_require__(202);
	var util_1 = __webpack_require__(216);
	/**
	 * This strategy emulates the Shadow DOM for the templates, styles **excluded**:
	 * - components templates are added as children of their component element,
	 * - styles are moved from the templates to the styleHost (i.e. the document head).
	 *
	 * Notes:
	 * - styles are **not** scoped to their component and will apply to the whole document,
	 * - you can **not** use shadow DOM specific selectors in the styles
	 */
	var EmulatedUnscopedShadowDomStrategy = (function (_super) {
	    __extends(EmulatedUnscopedShadowDomStrategy, _super);
	    function EmulatedUnscopedShadowDomStrategy(styleUrlResolver, styleHost) {
	        _super.call(this);
	        this.styleUrlResolver = styleUrlResolver;
	        this.styleHost = styleHost;
	    }
	    EmulatedUnscopedShadowDomStrategy.prototype.hasNativeContentElement = function () {
	        return false;
	    };
	    EmulatedUnscopedShadowDomStrategy.prototype.prepareShadowRoot = function (el) {
	        return el;
	    };
	    EmulatedUnscopedShadowDomStrategy.prototype.constructLightDom = function (lightDomView, el) {
	        return new light_dom_1.LightDom(lightDomView, el);
	    };
	    EmulatedUnscopedShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleEl) {
	        var cssText = dom_adapter_1.DOM.getText(styleEl);
	        cssText = this.styleUrlResolver.resolveUrls(cssText, templateUrl);
	        dom_adapter_1.DOM.setText(styleEl, cssText);
	        dom_adapter_1.DOM.remove(styleEl);
	        util_1.insertSharedStyleText(cssText, this.styleHost, styleEl);
	        return null;
	    };
	    return EmulatedUnscopedShadowDomStrategy;
	})(shadow_dom_strategy_1.ShadowDomStrategy);
	exports.EmulatedUnscopedShadowDomStrategy = EmulatedUnscopedShadowDomStrategy;
	exports.__esModule = true;
	//# sourceMappingURL=emulated_unscoped_shadow_dom_strategy.js.map

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	var dom_adapter_1 = __webpack_require__(163);
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var DestinationLightDom = (function () {
	    function DestinationLightDom() {}
	    return DestinationLightDom;
	})();
	exports.DestinationLightDom = DestinationLightDom;
	var _Root = (function () {
	    function _Root(node, boundElementIndex) {
	        this.node = node;
	        this.boundElementIndex = boundElementIndex;
	    }
	    return _Root;
	})();
	// TODO: LightDom should implement DestinationLightDom
	// once interfaces are supported
	var LightDom = (function () {
	    function LightDom(lightDomView, element) {
	        this.lightDomView = lightDomView;
	        this.nodes = dom_adapter_1.DOM.childNodesAsList(element);
	        this._roots = null;
	        this.shadowDomView = null;
	    }
	    LightDom.prototype.attachShadowDomView = function (shadowDomView) {
	        this.shadowDomView = shadowDomView;
	    };
	    LightDom.prototype.detachShadowDomView = function () {
	        this.shadowDomView = null;
	    };
	    LightDom.prototype.redistribute = function () {
	        redistributeNodes(this.contentTags(), this.expandedDomNodes());
	    };
	    LightDom.prototype.contentTags = function () {
	        if (lang_1.isPresent(this.shadowDomView)) {
	            return this._collectAllContentTags(this.shadowDomView, []);
	        } else {
	            return [];
	        }
	    };
	    // Collects the Content directives from the view and all its child views
	    LightDom.prototype._collectAllContentTags = function (view, acc) {
	        var _this = this;
	        var contentTags = view.contentTags;
	        var vcs = view.viewContainers;
	        for (var i = 0; i < vcs.length; i++) {
	            var vc = vcs[i];
	            var contentTag = contentTags[i];
	            if (lang_1.isPresent(contentTag)) {
	                collection_1.ListWrapper.push(acc, contentTag);
	            }
	            if (lang_1.isPresent(vc)) {
	                collection_1.ListWrapper.forEach(vc.contentTagContainers(), function (view) {
	                    _this._collectAllContentTags(view, acc);
	                });
	            }
	        }
	        return acc;
	    };
	    // Collects the nodes of the light DOM by merging:
	    // - nodes from enclosed ViewContainers,
	    // - nodes from enclosed content tags,
	    // - plain DOM nodes
	    LightDom.prototype.expandedDomNodes = function () {
	        var res = [];
	        var roots = this._findRoots();
	        for (var i = 0; i < roots.length; ++i) {
	            var root = roots[i];
	            if (lang_1.isPresent(root.boundElementIndex)) {
	                var vc = this.lightDomView.viewContainers[root.boundElementIndex];
	                var content = this.lightDomView.contentTags[root.boundElementIndex];
	                if (lang_1.isPresent(vc)) {
	                    res = collection_1.ListWrapper.concat(res, vc.nodes());
	                } else if (lang_1.isPresent(content)) {
	                    res = collection_1.ListWrapper.concat(res, content.nodes());
	                } else {
	                    collection_1.ListWrapper.push(res, root.node);
	                }
	            } else {
	                collection_1.ListWrapper.push(res, root.node);
	            }
	        }
	        return res;
	    };
	    // Returns a list of Roots for all the nodes of the light DOM.
	    // The Root object contains the DOM node and its corresponding boundElementIndex
	    LightDom.prototype._findRoots = function () {
	        if (lang_1.isPresent(this._roots)) return this._roots;
	        var boundElements = this.lightDomView.boundElements;
	        this._roots = collection_1.ListWrapper.map(this.nodes, function (n) {
	            var boundElementIndex = null;
	            for (var i = 0; i < boundElements.length; i++) {
	                var boundEl = boundElements[i];
	                if (lang_1.isPresent(boundEl) && boundEl === n) {
	                    boundElementIndex = i;
	                    break;
	                }
	            }
	            return new _Root(n, boundElementIndex);
	        });
	        return this._roots;
	    };
	    return LightDom;
	})();
	exports.LightDom = LightDom;
	// Projects the light DOM into the shadow DOM
	function redistributeNodes(contents, nodes) {
	    for (var i = 0; i < contents.length; ++i) {
	        var content = contents[i];
	        var select = content.select;
	        // Empty selector is identical to <content/>
	        if (select.length === 0) {
	            content.insert(collection_1.ListWrapper.clone(nodes));
	            collection_1.ListWrapper.clear(nodes);
	        } else {
	            var matchSelector = function matchSelector(n) {
	                return dom_adapter_1.DOM.elementMatches(n, select);
	            };
	            var matchingNodes = collection_1.ListWrapper.filter(nodes, matchSelector);
	            content.insert(matchingNodes);
	            collection_1.ListWrapper.removeAll(nodes, matchingNodes);
	        }
	    }
	    for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        if (lang_1.isPresent(node.parentNode)) {
	            dom_adapter_1.DOM.remove(nodes[i]);
	        }
	    }
	}
	exports.__esModule = true;
	//# sourceMappingURL=light_dom.js.map

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var dom_adapter_1 = __webpack_require__(163);
	var shadow_css_1 = __webpack_require__(217);
	var _componentUIDs = collection_1.MapWrapper.create();
	var _nextComponentUID = 0;
	var _sharedStyleTexts = collection_1.MapWrapper.create();
	var _lastInsertedStyleEl;
	function getComponentId(componentStringId) {
	    var id = collection_1.MapWrapper.get(_componentUIDs, componentStringId);
	    if (lang_1.isBlank(id)) {
	        id = _nextComponentUID++;
	        collection_1.MapWrapper.set(_componentUIDs, componentStringId, id);
	    }
	    return id;
	}
	exports.getComponentId = getComponentId;
	function insertSharedStyleText(cssText, styleHost, styleEl) {
	    if (!collection_1.MapWrapper.contains(_sharedStyleTexts, cssText)) {
	        // Styles are unscoped and shared across components, only append them to the head
	        // when there are not present yet
	        collection_1.MapWrapper.set(_sharedStyleTexts, cssText, true);
	        insertStyleElement(styleHost, styleEl);
	    }
	}
	exports.insertSharedStyleText = insertSharedStyleText;
	function insertStyleElement(host, styleEl) {
	    if (lang_1.isBlank(_lastInsertedStyleEl)) {
	        var firstChild = dom_adapter_1.DOM.firstChild(host);
	        if (lang_1.isPresent(firstChild)) {
	            dom_adapter_1.DOM.insertBefore(firstChild, styleEl);
	        } else {
	            dom_adapter_1.DOM.appendChild(host, styleEl);
	        }
	    } else {
	        dom_adapter_1.DOM.insertAfter(_lastInsertedStyleEl, styleEl);
	    }
	    _lastInsertedStyleEl = styleEl;
	}
	exports.insertStyleElement = insertStyleElement;
	// Return the attribute to be added to the component
	function getHostAttribute(id) {
	    return '_nghost-' + id;
	}
	exports.getHostAttribute = getHostAttribute;
	// Returns the attribute to be added on every single element nodes in the component
	function getContentAttribute(id) {
	    return '_ngcontent-' + id;
	}
	exports.getContentAttribute = getContentAttribute;
	function shimCssForComponent(cssText, componentId) {
	    var id = getComponentId(componentId);
	    var shadowCss = new shadow_css_1.ShadowCss();
	    return shadowCss.shimCssText(cssText, getContentAttribute(id), getHostAttribute(id));
	}
	exports.shimCssForComponent = shimCssForComponent;
	// Reset the caches - used for tests only
	function resetShadowDomCache() {
	    collection_1.MapWrapper.clear(_componentUIDs);
	    _nextComponentUID = 0;
	    collection_1.MapWrapper.clear(_sharedStyleTexts);
	    _lastInsertedStyleEl = null;
	}
	exports.resetShadowDomCache = resetShadowDomCache;
	exports.__esModule = true;
	//# sourceMappingURL=util.js.map

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var dom_adapter_1 = __webpack_require__(163);
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	/**
	 * This file is a port of shadowCSS from webcomponents.js to AtScript.
	 *
	 * Please make sure to keep to edits in sync with the source file.
	 *
	 * Source:
	 * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	 *
	 * The original file level comment is reproduced below
	 */
	/*
	  This is a limited shim for ShadowDOM css styling.
	  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

	  The intention here is to support only the styling features which can be
	  relatively simply implemented. The goal is to allow users to avoid the
	  most obvious pitfalls and do so without compromising performance significantly.
	  For ShadowDOM styling that's not covered here, a set of best practices
	  can be provided that should allow users to accomplish more complex styling.

	  The following is a list of specific ShadowDOM styling features and a brief
	  discussion of the approach used to shim.

	  Shimmed features:

	  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	  element using the :host rule. To shim this feature, the :host styles are
	  reformatted and prefixed with a given scope name and promoted to a
	  document level stylesheet.
	  For example, given a scope name of .foo, a rule like this:

	    :host {
	        background: red;
	      }
	    }

	  becomes:

	    .foo {
	      background: red;
	    }

	  * encapsultion: Styles defined within ShadowDOM, apply only to
	  dom inside the ShadowDOM. Polymer uses one of two techniques to imlement
	  this feature.

	  By default, rules are prefixed with the host element tag name
	  as a descendant selector. This ensures styling does not leak out of the 'top'
	  of the element's ShadowDOM. For example,

	  div {
	      font-weight: bold;
	    }

	  becomes:

	  x-foo div {
	      font-weight: bold;
	    }

	  becomes:


	  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	  selectors are scoped by adding an attribute selector suffix to each
	  simple selector that contains the host element tag name. Each element
	  in the element's ShadowDOM template is also given the scope attribute.
	  Thus, these rules match only elements that have the scope attribute.
	  For example, given a scope name of x-foo, a rule like this:

	    div {
	      font-weight: bold;
	    }

	  becomes:

	    div[x-foo] {
	      font-weight: bold;
	    }

	  Note that elements that are dynamically added to a scope must have the scope
	  selector added to them manually.

	  * upper/lower bound encapsulation: Styles which are defined outside a
	  shadowRoot should not cross the ShadowDOM boundary and should not apply
	  inside a shadowRoot.

	  This styling behavior is not emulated. Some possible ways to do this that
	  were rejected due to complexity and/or performance concerns include: (1) reset
	  every possible property for every possible selector for a given scope name;
	  (2) re-implement css in javascript.

	  As an alternative, users should make sure to use selectors
	  specific to the scope in which they are working.

	  * ::distributed: This behavior is not emulated. It's often not necessary
	  to style the contents of a specific insertion point and instead, descendants
	  of the host element can be styled selectively. Users can also create an
	  extra node around an insertion point and style that node's contents
	  via descendent selectors. For example, with a shadowRoot like this:

	    <style>
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <content></content>

	  could become:

	    <style>
	      / *@polyfill .content-container div * /
	      ::content(div) {
	        background: red;
	      }
	    </style>
	    <div class="content-container">
	      <content></content>
	    </div>

	  Note the use of @polyfill in the comment above a ShadowDOM specific style
	  declaration. This is a directive to the styling shim to use the selector
	  in comments in lieu of the next selector when running under polyfill.
	*/
	var ShadowCss = (function () {
	    function ShadowCss() {
	        this.strictStyling = true;
	    }
	    /*
	    * Shim a style element with the given selector. Returns cssText that can
	    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	    */
	    ShadowCss.prototype.shimStyle = function (style, selector, hostSelector) {
	        if (hostSelector === void 0) {
	            hostSelector = '';
	        }
	        var cssText = dom_adapter_1.DOM.getText(style);
	        return this.shimCssText(cssText, selector, hostSelector);
	    };
	    /*
	    * Shim some cssText with the given selector. Returns cssText that can
	    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	    *
	    * When strictStyling is true:
	    * - selector is the attribute added to all elements inside the host,
	    * - hostSelector is the attribute added to the host itself.
	    */
	    ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	        if (hostSelector === void 0) {
	            hostSelector = '';
	        }
	        cssText = this._insertDirectives(cssText);
	        return this._scopeCssText(cssText, selector, hostSelector);
	    };
	    ShadowCss.prototype._insertDirectives = function (cssText) {
	        cssText = this._insertPolyfillDirectivesInCssText(cssText);
	        return this._insertPolyfillRulesInCssText(cssText);
	    };
	    /*
	     * Process styles to convert native ShadowDOM rules that will trip
	     * up the css parser; we rely on decorating the stylesheet with inert rules.
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-next-selector { content: ':host menu-item'; }
	     * ::content menu-item {
	     *
	     * to this:
	     *
	     * scopeName menu-item {
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m) {
	            return m[1] + '{';
	        });
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     *
	     * For example, we convert this rule:
	     *
	     * polyfill-rule {
	     *   content: ':host menu-item';
	     * ...
	     * }
	     *
	     * to this:
	     *
	     * scopeName menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        return lang_1.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[1], '');
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            return m[3] + rule;
	        });
	    };
	    /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
	     *
	     *  .foo {... }
	     *
	     *  and converts this to
	     *
	     *  scopeName .foo { ... }
	    */
	    ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	        var _this = this;
	        var unscoped = this._extractUnscopedRulesFromCssText(cssText);
	        cssText = this._insertPolyfillHostInCssText(cssText);
	        cssText = this._convertColonHost(cssText);
	        cssText = this._convertColonHostContext(cssText);
	        cssText = this._convertShadowDOMSelectors(cssText);
	        if (lang_1.isPresent(scopeSelector)) {
	            _withCssRules(cssText, function (rules) {
	                cssText = _this._scopeRules(rules, scopeSelector, hostSelector);
	            });
	        }
	        cssText = cssText + '\n' + unscoped;
	        return cssText.trim();
	    };
	    /*
	     * Process styles to add rules which will only apply under the polyfill
	     * and do not process via CSSOM. (CSSOM is destructive to rules on rare
	     * occasions, e.g. -webkit-calc on Safari.)
	     * For example, we convert this rule:
	     *
	     * @polyfill-unscoped-rule {
	     *   content: 'menu-item';
	     * ... }
	     *
	     * to this:
	     *
	     * menu-item {...}
	     *
	    **/
	    ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	        // Difference with webcomponents.js: does not handle comments
	        var r = '',
	            m;
	        var matcher = lang_1.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
	        while (lang_1.isPresent(m = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            var rule = m[0];
	            rule = lang_1.StringWrapper.replace(rule, m[2], '');
	            rule = lang_1.StringWrapper.replace(rule, m[1], m[3]);
	            r = rule + '\n\n';
	        }
	        return r;
	    };
	    /*
	     * convert a rule like :host(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar
	    */
	    ShadowCss.prototype._convertColonHost = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	    };
	    /*
	     * convert a rule like :host-context(.foo) > .bar { }
	     *
	     * to
	     *
	     * scopeName.foo > .bar, .foo scopeName > .bar { }
	     *
	     * and
	     *
	     * :host-context(.foo:host) .bar { ... }
	     *
	     * to
	     *
	     * scopeName.foo .bar { ... }
	    */
	    ShadowCss.prototype._convertColonHostContext = function (cssText) {
	        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	    };
	    ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	        // p1 = :host, p2 = contents of (), p3 rest of rule
	        return lang_1.StringWrapper.replaceAllMapped(cssText, regExp, function (m) {
	            if (lang_1.isPresent(m[2])) {
	                var parts = m[2].split(','),
	                    r = [];
	                for (var i = 0; i < parts.length; i++) {
	                    var p = parts[i];
	                    if (lang_1.isBlank(p)) break;
	                    p = p.trim();
	                    collection_1.ListWrapper.push(r, partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                }
	                return r.join(',');
	            } else {
	                return _polyfillHostNoCombinator + m[3];
	            }
	        });
	    };
	    ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	        if (lang_1.StringWrapper.contains(part, _polyfillHost)) {
	            return this._colonHostPartReplacer(host, part, suffix);
	        } else {
	            return host + part + suffix + ', ' + part + ' ' + host + suffix;
	        }
	    };
	    ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	        return host + lang_1.StringWrapper.replace(part, _polyfillHost, '') + suffix;
	    };
	    /*
	     * Convert combinators like ::shadow and pseudo-elements like ::content
	     * by replacing with space.
	    */
	    ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	        for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
	            cssText = lang_1.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
	        }
	        return cssText;
	    };
	    // change a selector like 'div' to 'name div'
	    ShadowCss.prototype._scopeRules = function (cssRules, scopeSelector, hostSelector) {
	        var cssText = '';
	        if (lang_1.isPresent(cssRules)) {
	            for (var i = 0; i < cssRules.length; i++) {
	                var rule = cssRules[i];
	                if (dom_adapter_1.DOM.isStyleRule(rule) || dom_adapter_1.DOM.isPageRule(rule)) {
	                    cssText += this._scopeSelector(rule.selectorText, scopeSelector, hostSelector, this.strictStyling) + ' {\n';
	                    cssText += this._propertiesFromRule(rule) + '\n}\n\n';
	                } else if (dom_adapter_1.DOM.isMediaRule(rule)) {
	                    cssText += '@media ' + rule.media.mediaText + ' {\n';
	                    cssText += this._scopeRules(rule.cssRules, scopeSelector, hostSelector);
	                    cssText += '\n}\n\n';
	                } else {
	                    // KEYFRAMES_RULE in IE throws when we query cssText
	                    // when it contains a -webkit- property.
	                    // if this happens, we fallback to constructing the rule
	                    // from the CSSRuleSet
	                    // https://connect.microsoft.com/IE/feedbackdetail/view/955703/accessing-csstext-of-a-keyframe-rule-that-contains-a-webkit-property-via-cssom-generates-exception
	                    try {
	                        if (lang_1.isPresent(rule.cssText)) {
	                            cssText += rule.cssText + '\n\n';
	                        }
	                    } catch (x) {
	                        if (dom_adapter_1.DOM.isKeyframesRule(rule) && lang_1.isPresent(rule.cssRules)) {
	                            cssText += this._ieSafeCssTextFromKeyFrameRule(rule);
	                        }
	                    }
	                }
	            }
	        }
	        return cssText;
	    };
	    ShadowCss.prototype._ieSafeCssTextFromKeyFrameRule = function (rule) {
	        var cssText = '@keyframes ' + rule.name + ' {';
	        for (var i = 0; i < rule.cssRules.length; i++) {
	            var r = rule.cssRules[i];
	            cssText += ' ' + r.keyText + ' {' + r.style.cssText + '}';
	        }
	        cssText += ' }';
	        return cssText;
	    };
	    ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	        var r = [],
	            parts = selector.split(',');
	        for (var i = 0; i < parts.length; i++) {
	            var p = parts[i];
	            p = p.trim();
	            if (this._selectorNeedsScoping(p, scopeSelector)) {
	                p = strict && !lang_1.StringWrapper.contains(p, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(p, scopeSelector) : this._applySelectorScope(p, scopeSelector, hostSelector);
	            }
	            collection_1.ListWrapper.push(r, p);
	        }
	        return r.join(', ');
	    };
	    ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	        var re = this._makeScopeMatcher(scopeSelector);
	        return !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(re, selector));
	    };
	    ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	        var lre = lang_1.RegExpWrapper.create('\\[');
	        var rre = lang_1.RegExpWrapper.create('\\]');
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
	        scopeSelector = lang_1.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
	        return lang_1.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	    };
	    ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	        // Difference from webcomponentsjs: scopeSelector could not be an array
	        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	    };
	    // scope via name and [is=name]
	    ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	        if (lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
	            var replaceBy = this.strictStyling ? '[' + hostSelector + ']' : scopeSelector;
	            selector = lang_1.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
	            return lang_1.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' ');
	        } else {
	            return scopeSelector + ' ' + selector;
	        }
	    };
	    // return a selector with [name] suffix on each simple selector
	    // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]
	    ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector) {
	        var isRe = lang_1.RegExpWrapper.create('\\[is=([^\\]]*)\\]');
	        scopeSelector = lang_1.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m) {
	            return m[1];
	        });
	        var splits = [' ', '>', '+', '~'],
	            scoped = selector,
	            attrName = '[' + scopeSelector + ']';
	        for (var i = 0; i < splits.length; i++) {
	            var sep = splits[i];
	            var parts = scoped.split(sep);
	            scoped = collection_1.ListWrapper.map(parts, function (p) {
	                // remove :host since it should be unnecessary
	                var t = lang_1.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
	                if (t.length > 0 && !collection_1.ListWrapper.contains(splits, t) && !lang_1.StringWrapper.contains(t, attrName)) {
	                    var re = lang_1.RegExpWrapper.create('([^:]*)(:*)(.*)');
	                    var m = lang_1.RegExpWrapper.firstMatch(re, t);
	                    if (lang_1.isPresent(m)) {
	                        p = m[1] + attrName + m[2] + m[3];
	                    }
	                }
	                return p;
	            }).join(sep);
	        }
	        return scoped;
	    };
	    ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
	        selector = lang_1.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
	        return selector;
	    };
	    ShadowCss.prototype._propertiesFromRule = function (rule) {
	        var cssText = rule.style.cssText;
	        // TODO(sorvell): Safari cssom incorrectly removes quotes from the content
	        // property. (https://bugs.webkit.org/show_bug.cgi?id=118045)
	        // don't replace attr rules
	        var attrRe = lang_1.RegExpWrapper.create('[\'"]+|attr');
	        if (rule.style.content.length > 0 && !lang_1.isPresent(lang_1.RegExpWrapper.firstMatch(attrRe, rule.style.content))) {
	            var contentRe = lang_1.RegExpWrapper.create('content:[^;]*;');
	            cssText = lang_1.StringWrapper.replaceAll(cssText, contentRe, 'content: \'' + rule.style.content + '\';');
	        }
	        // TODO(sorvell): we can workaround this issue here, but we need a list
	        // of troublesome properties to fix https://github.com/Polymer/platform/issues/53
	        //
	        // inherit rules can be omitted from cssText
	        // TODO(sorvell): remove when Blink bug is fixed:
	        // https://code.google.com/p/chromium/issues/detail?id=358273
	        // var style = rule.style;
	        // for (var i = 0; i < style.length; i++) {
	        //  var name = style.item(i);
	        //  var value = style.getPropertyValue(name);
	        //  if (value == 'initial') {
	        //    cssText += name + ': initial; ';
	        //  }
	        //}
	        return cssText;
	    };
	    return ShadowCss;
	})();
	exports.ShadowCss = ShadowCss;
	var _cssContentNextSelectorRe = lang_1.RegExpWrapper.create('polyfill-next-selector[^}]*content:[\\s]*?[\'"](.*?)[\'"][;\\s]*}([^{]*?){', 'im');
	var _cssContentRuleRe = lang_1.RegExpWrapper.create('(polyfill-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
	var _cssContentUnscopedRuleRe = lang_1.RegExpWrapper.create('(polyfill-unscoped-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
	var _polyfillHost = '-shadowcsshost';
	// note: :host-context pre-processed to -shadowcsshostcontext.
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
	var _cssColonHostRe = lang_1.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
	var _cssColonHostContextRe = lang_1.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _shadowDOMSelectorsRe = [lang_1.RegExpWrapper.create('>>>'), lang_1.RegExpWrapper.create('::shadow'), lang_1.RegExpWrapper.create('::content'),
	// Deprecated selectors
	lang_1.RegExpWrapper.create('/deep/'), lang_1.RegExpWrapper.create('/shadow-deep/'), lang_1.RegExpWrapper.create('/shadow/')];
	var _selectorReSuffix = '([>\\s~+[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = lang_1.RegExpWrapper.create(_polyfillHost, 'im');
	var _colonHostRe = lang_1.RegExpWrapper.create(':host', 'im');
	var _colonHostContextRe = lang_1.RegExpWrapper.create(':host-context', 'im');
	function _cssToRules(cssText) {
	    return dom_adapter_1.DOM.cssToRules(cssText);
	}
	function _withCssRules(cssText, callback) {
	    // Difference from webcomponentjs: remove the workaround for an old bug in Chrome
	    if (lang_1.isBlank(callback)) return;
	    var rules = _cssToRules(cssText);
	    callback(rules);
	}
	exports.__esModule = true;
	//# sourceMappingURL=shadow_css.js.map

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var async_1 = __webpack_require__(155);
	var xhr_1 = __webpack_require__(211);
	var XHRImpl = (function (_super) {
	    __extends(XHRImpl, _super);
	    function XHRImpl() {
	        _super.apply(this, arguments);
	    }
	    XHRImpl.prototype.get = function (url) {
	        var completer = async_1.PromiseWrapper.completer();
	        var xhr = new XMLHttpRequest();
	        xhr.open("GET", url, true);
	        xhr.responseType = "text";
	        xhr.onload = function () {
	            var status = xhr.status;
	            if (200 <= status && status <= 300) {
	                completer.resolve(xhr.responseText);
	            } else {
	                completer.reject("Failed to load " + url, null);
	            }
	        };
	        xhr.onerror = function () {
	            completer.reject("Failed to load " + url, null);
	        };
	        xhr.send();
	        return completer.promise;
	    };
	    XHRImpl = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [])], XHRImpl);
	    return XHRImpl;
	})(xhr_1.XHR);
	exports.XHRImpl = XHRImpl;
	exports.__esModule = true;
	//# sourceMappingURL=xhr_impl.js.map

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(163);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var event_manager_1 = __webpack_require__(206);
	var modifierKeys = ['alt', 'control', 'meta', 'shift'];
	var modifierKeyGetters = {
	    'alt': function alt(event) {
	        return event.altKey;
	    },
	    'control': function control(event) {
	        return event.ctrlKey;
	    },
	    'meta': function meta(event) {
	        return event.metaKey;
	    },
	    'shift': function shift(event) {
	        return event.shiftKey;
	    }
	};
	var KeyEventsPlugin = (function (_super) {
	    __extends(KeyEventsPlugin, _super);
	    function KeyEventsPlugin() {
	        _super.call(this);
	    }
	    KeyEventsPlugin.prototype.supports = function (eventName) {
	        return lang_1.isPresent(KeyEventsPlugin.parseEventName(eventName));
	    };
	    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	        var outsideHandler = KeyEventsPlugin.eventCallback(element, shouldSupportBubble, collection_1.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
	        this.manager.getZone().runOutsideAngular(function () {
	            dom_adapter_1.DOM.on(element, collection_1.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
	        });
	    };
	    KeyEventsPlugin.parseEventName = function (eventName) {
	        eventName = eventName.toLowerCase();
	        var parts = eventName.split('.');
	        var domEventName = collection_1.ListWrapper.removeAt(parts, 0);
	        if (parts.length === 0 || !(lang_1.StringWrapper.equals(domEventName, 'keydown') || lang_1.StringWrapper.equals(domEventName, 'keyup'))) {
	            return null;
	        }
	        var key = collection_1.ListWrapper.removeLast(parts);
	        var fullKey = '';
	        collection_1.ListWrapper.forEach(modifierKeys, function (modifierName) {
	            if (collection_1.ListWrapper.contains(parts, modifierName)) {
	                collection_1.ListWrapper.remove(parts, modifierName);
	                fullKey += modifierName + '.';
	            }
	        });
	        fullKey += key;
	        if (parts.length != 0 || key.length === 0) {
	            // returning null instead of throwing to let another plugin process the event
	            return null;
	        }
	        return { 'domEventName': domEventName, 'fullKey': fullKey };
	    };
	    KeyEventsPlugin.getEventFullKey = function (event) {
	        var fullKey = '';
	        var key = dom_adapter_1.DOM.getEventKey(event);
	        key = key.toLowerCase();
	        if (lang_1.StringWrapper.equals(key, ' ')) {
	            key = 'space'; // for readability
	        } else if (lang_1.StringWrapper.equals(key, '.')) {
	            key = 'dot'; // because '.' is used as a separator in event names
	        }
	        collection_1.ListWrapper.forEach(modifierKeys, function (modifierName) {
	            if (modifierName != key) {
	                var modifierGetter = collection_1.StringMapWrapper.get(modifierKeyGetters, modifierName);
	                if (modifierGetter(event)) {
	                    fullKey += modifierName + '.';
	                }
	            }
	        });
	        fullKey += key;
	        return fullKey;
	    };
	    KeyEventsPlugin.eventCallback = function (element, shouldSupportBubble, fullKey, handler, zone) {
	        return function (event) {
	            var correctElement = shouldSupportBubble || event.target === element;
	            if (correctElement && KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                zone.run(function () {
	                    return handler(event);
	                });
	            }
	        };
	    };
	    return KeyEventsPlugin;
	})(event_manager_1.EventManagerPlugin);
	exports.KeyEventsPlugin = KeyEventsPlugin;
	exports.__esModule = true;
	//# sourceMappingURL=key_events.js.map

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/// <reference path="../../../../typings/hammerjs/hammerjs"/>
	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var hammer_common_1 = __webpack_require__(221);
	var lang_1 = __webpack_require__(118);
	var HammerGesturesPlugin = (function (_super) {
	    __extends(HammerGesturesPlugin, _super);
	    function HammerGesturesPlugin() {
	        _super.call(this);
	    }
	    HammerGesturesPlugin.prototype.supports = function (eventName) {
	        if (!_super.prototype.supports.call(this, eventName)) return false;
	        if (!lang_1.isPresent(window['Hammer'])) {
	            throw new lang_1.BaseException('Hammer.js is not loaded, can not bind ' + eventName + ' event');
	        }
	        return true;
	    };
	    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler, shouldSupportBubble) {
	        if (shouldSupportBubble) throw new lang_1.BaseException('Hammer.js plugin does not support bubbling gestures.');
	        var zone = this.manager.getZone();
	        eventName = eventName.toLowerCase();
	        zone.runOutsideAngular(function () {
	            // Creating the manager bind events, must be done outside of angular
	            var mc = new Hammer(element);
	            mc.get('pinch').set({ enable: true });
	            mc.get('rotate').set({ enable: true });
	            mc.on(eventName, function (eventObj) {
	                zone.run(function () {
	                    handler(eventObj);
	                });
	            });
	        });
	    };
	    return HammerGesturesPlugin;
	})(hammer_common_1.HammerGesturesPluginCommon);
	exports.HammerGesturesPlugin = HammerGesturesPlugin;
	exports.__esModule = true;
	//# sourceMappingURL=hammer_gestures.js.map

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var event_manager_1 = __webpack_require__(206);
	var collection_1 = __webpack_require__(121);
	var _eventNames = {
	    // pan
	    'pan': true,
	    'panstart': true,
	    'panmove': true,
	    'panend': true,
	    'pancancel': true,
	    'panleft': true,
	    'panright': true,
	    'panup': true,
	    'pandown': true,
	    // pinch
	    'pinch': true,
	    'pinchstart': true,
	    'pinchmove': true,
	    'pinchend': true,
	    'pinchcancel': true,
	    'pinchin': true,
	    'pinchout': true,
	    // press
	    'press': true,
	    'pressup': true,
	    // rotate
	    'rotate': true,
	    'rotatestart': true,
	    'rotatemove': true,
	    'rotateend': true,
	    'rotatecancel': true,
	    // swipe
	    'swipe': true,
	    'swipeleft': true,
	    'swiperight': true,
	    'swipeup': true,
	    'swipedown': true,
	    // tap
	    'tap': true };
	var HammerGesturesPluginCommon = (function (_super) {
	    __extends(HammerGesturesPluginCommon, _super);
	    function HammerGesturesPluginCommon() {
	        _super.call(this);
	    }
	    HammerGesturesPluginCommon.prototype.supports = function (eventName) {
	        eventName = eventName.toLowerCase();
	        return collection_1.StringMapWrapper.contains(_eventNames, eventName);
	    };
	    return HammerGesturesPluginCommon;
	})(event_manager_1.EventManagerPlugin);
	exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;
	exports.__esModule = true;
	//# sourceMappingURL=hammer_common.js.map

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	// Some of the code comes from WebComponents.JS
	// https://github.com/webcomponents/webcomponentsjs/blob/master/src/HTMLImports/path.js
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var url_resolver_1 = __webpack_require__(191);
	/**
	 * Rewrites URLs by resolving '@import' and 'url()' URLs from the given base URL.
	 */
	var StyleUrlResolver = (function () {
	    function StyleUrlResolver(resolver) {
	        this._resolver = resolver;
	    }
	    StyleUrlResolver.prototype.resolveUrls = function (cssText, baseUrl) {
	        cssText = this._replaceUrls(cssText, _cssUrlRe, baseUrl);
	        cssText = this._replaceUrls(cssText, _cssImportRe, baseUrl);
	        return cssText;
	    };
	    StyleUrlResolver.prototype._replaceUrls = function (cssText, re, baseUrl) {
	        var _this = this;
	        return lang_1.StringWrapper.replaceAllMapped(cssText, re, function (m) {
	            var pre = m[1];
	            var url = lang_1.StringWrapper.replaceAll(m[2], _quoteRe, "");
	            var post = m[3];
	            var resolvedUrl = _this._resolver.resolve(baseUrl, url);
	            return pre + "'" + resolvedUrl + "'" + post;
	        });
	    };
	    StyleUrlResolver = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [url_resolver_1.UrlResolver])], StyleUrlResolver);
	    return StyleUrlResolver;
	})();
	exports.StyleUrlResolver = StyleUrlResolver;
	var _cssUrlRe = lang_1.RegExpWrapper.create("(url\\()([^)]*)(\\))");
	var _cssImportRe = lang_1.RegExpWrapper.create("(@import[\\s]+(?!url\\())['\"]([^'\"]*)['\"](.*;)");
	var _quoteRe = lang_1.RegExpWrapper.create("['\"]");
	exports.__esModule = true;
	//# sourceMappingURL=style_url_resolver.js.map

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var xhr_1 = __webpack_require__(211);
	var collection_1 = __webpack_require__(121);
	var url_resolver_1 = __webpack_require__(191);
	var style_url_resolver_1 = __webpack_require__(222);
	var lang_1 = __webpack_require__(118);
	var async_1 = __webpack_require__(155);
	/**
	 * Inline @import rules in the given CSS.
	 *
	 * When an @import rules is inlined, it's url are rewritten.
	 */
	var StyleInliner = (function () {
	    function StyleInliner(xhr, styleUrlResolver, urlResolver) {
	        this._xhr = xhr;
	        this._urlResolver = urlResolver;
	        this._styleUrlResolver = styleUrlResolver;
	    }
	    /**
	     * Inline the @imports rules in the given CSS text.
	     *
	     * The baseUrl is required to rewrite URLs in the inlined content.
	     *
	     * @param {string} cssText
	     * @param {string} baseUrl
	     * @returns {*} a Promise<string> when @import rules are present, a string otherwise
	     */
	    StyleInliner.prototype.inlineImports = function (cssText, baseUrl) {
	        return this._inlineImports(cssText, baseUrl, []);
	    };
	    StyleInliner.prototype._inlineImports = function (cssText, baseUrl, inlinedUrls) {
	        var _this = this;
	        var partIndex = 0;
	        var parts = lang_1.StringWrapper.split(cssText, _importRe);
	        if (parts.length === 1) {
	            // no @import rule found, return the original css
	            return cssText;
	        }
	        var promises = [];
	        while (partIndex < parts.length - 1) {
	            // prefix is the content before the @import rule
	            var prefix = parts[partIndex];
	            // rule is the parameter of the @import rule
	            var rule = parts[partIndex + 1];
	            var url = _extractUrl(rule);
	            if (lang_1.isPresent(url)) {
	                url = this._urlResolver.resolve(baseUrl, url);
	            }
	            var mediaQuery = _extractMediaQuery(rule);
	            var promise;
	            if (lang_1.isBlank(url)) {
	                promise = async_1.PromiseWrapper.resolve("/* Invalid import rule: \"@import " + rule + ";\" */");
	            } else if (collection_1.ListWrapper.contains(inlinedUrls, url)) {
	                // The current import rule has already been inlined, return the prefix only
	                // Importing again might cause a circular dependency
	                promise = async_1.PromiseWrapper.resolve(prefix);
	            } else {
	                collection_1.ListWrapper.push(inlinedUrls, url);
	                promise = async_1.PromiseWrapper.then(this._xhr.get(url), function (rawCss) {
	                    // resolve nested @import rules
	                    var inlinedCss = _this._inlineImports(rawCss, url, inlinedUrls);
	                    if (async_1.PromiseWrapper.isPromise(inlinedCss)) {
	                        // wait until nested @import are inlined
	                        return inlinedCss.then(function (css) {
	                            return prefix + _this._transformImportedCss(css, mediaQuery, url) + "\n";
	                        });
	                    } else {
	                        // there are no nested @import, return the css
	                        return prefix + _this._transformImportedCss(inlinedCss, mediaQuery, url) + "\n";
	                    }
	                }, function (error) {
	                    return "/* failed to import " + url + " */\n";
	                });
	            }
	            collection_1.ListWrapper.push(promises, promise);
	            partIndex += 2;
	        }
	        return async_1.PromiseWrapper.all(promises).then(function (cssParts) {
	            var cssText = cssParts.join("");
	            if (partIndex < parts.length) {
	                // append then content located after the last @import rule
	                cssText += parts[partIndex];
	            }
	            return cssText;
	        });
	    };
	    StyleInliner.prototype._transformImportedCss = function (css, mediaQuery, url) {
	        css = this._styleUrlResolver.resolveUrls(css, url);
	        return _wrapInMediaRule(css, mediaQuery);
	    };
	    StyleInliner = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [xhr_1.XHR, style_url_resolver_1.StyleUrlResolver, url_resolver_1.UrlResolver])], StyleInliner);
	    return StyleInliner;
	})();
	exports.StyleInliner = StyleInliner;
	// Extracts the url from an import rule, supported formats:
	// - 'url' / "url",
	// - url(url) / url('url') / url("url")
	function _extractUrl(importRule) {
	    var match = lang_1.RegExpWrapper.firstMatch(_urlRe, importRule);
	    if (lang_1.isBlank(match)) return null;
	    return lang_1.isPresent(match[1]) ? match[1] : match[2];
	}
	// Extracts the media query from an import rule.
	// Returns null when there is no media query.
	function _extractMediaQuery(importRule) {
	    var match = lang_1.RegExpWrapper.firstMatch(_mediaQueryRe, importRule);
	    if (lang_1.isBlank(match)) return null;
	    var mediaQuery = match[1].trim();
	    return mediaQuery.length > 0 ? mediaQuery : null;
	}
	// Wraps the css in a media rule when the media query is not null
	function _wrapInMediaRule(css, query) {
	    return lang_1.isBlank(query) ? css : "@media " + query + " {\n" + css + "\n}";
	}
	var _importRe = lang_1.RegExpWrapper.create("@import\\s+([^;]+);");
	var _urlRe = lang_1.RegExpWrapper.create("url\\(\\s*?['\"]?([^'\")]+)['\"]?|" + "['\"]([^'\")]+)['\"]" // "url" or 'url'
	);
	var _mediaQueryRe = lang_1.RegExpWrapper.create("['\"][^'\"]+['\"]\\s*\\)?\\s*(.*)");
	exports.__esModule = true;
	//# sourceMappingURL=style_inliner.js.map

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var dom_adapter_1 = __webpack_require__(163);
	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var getTestabilityModule = __webpack_require__(225);
	/**
	 * The Testability service provides testing hooks that can be accessed from
	 * the browser and by services such as Protractor. Each bootstrapped Angular
	 * application on the page will have an instance of Testability.
	 */
	var Testability = (function () {
	    function Testability() {
	        this._pendingCount = 0;
	        this._callbacks = collection_1.ListWrapper.create();
	    }
	    Testability.prototype.increaseCount = function (delta) {
	        if (delta === void 0) {
	            delta = 1;
	        }
	        this._pendingCount += delta;
	        if (this._pendingCount < 0) {
	            throw new lang_1.BaseException("pending async requests below zero");
	        } else if (this._pendingCount == 0) {
	            this._runCallbacks();
	        }
	        return this._pendingCount;
	    };
	    Testability.prototype._runCallbacks = function () {
	        while (this._callbacks.length !== 0) {
	            collection_1.ListWrapper.removeLast(this._callbacks)();
	        }
	    };
	    Testability.prototype.whenStable = function (callback) {
	        collection_1.ListWrapper.push(this._callbacks, callback);
	        if (this._pendingCount === 0) {
	            this._runCallbacks();
	        }
	        // TODO(juliemr) - hook into the zone api.
	    };
	    Testability.prototype.getPendingCount = function () {
	        return this._pendingCount;
	    };
	    Testability.prototype.findBindings = function (using, binding, exactMatch) {
	        // TODO(juliemr): implement.
	        return [];
	    };
	    Testability = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [])], Testability);
	    return Testability;
	})();
	exports.Testability = Testability;
	var TestabilityRegistry = (function () {
	    function TestabilityRegistry() {
	        this._applications = collection_1.MapWrapper.create();
	        getTestabilityModule.GetTestability.addToWindow(this);
	    }
	    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	        collection_1.MapWrapper.set(this._applications, token, testability);
	    };
	    TestabilityRegistry.prototype.findTestabilityInTree = function (elem) {
	        if (elem == null) {
	            return null;
	        }
	        if (collection_1.MapWrapper.contains(this._applications, elem)) {
	            return collection_1.MapWrapper.get(this._applications, elem);
	        }
	        if (dom_adapter_1.DOM.isShadowRoot(elem)) {
	            return this.findTestabilityInTree(dom_adapter_1.DOM.getHost(elem));
	        }
	        return this.findTestabilityInTree(dom_adapter_1.DOM.parentElement(elem));
	    };
	    TestabilityRegistry = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [])], TestabilityRegistry);
	    return TestabilityRegistry;
	})();
	exports.TestabilityRegistry = TestabilityRegistry;
	exports.__esModule = true;
	//# sourceMappingURL=testability.js.map

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var PublicTestability = (function () {
	    function PublicTestability(testability) {
	        this._testability = testability;
	    }
	    PublicTestability.prototype.whenStable = function (callback) {
	        this._testability.whenStable(callback);
	    };
	    PublicTestability.prototype.findBindings = function (using, binding, exactMatch) {
	        return this._testability.findBindings(using, binding, exactMatch);
	    };
	    return PublicTestability;
	})();
	var GetTestability = (function () {
	    function GetTestability() {}
	    GetTestability.addToWindow = function (registry) {
	        lang_1.global.getAngularTestability = function (elem) {
	            var testability = registry.findTestabilityInTree(elem);
	            if (testability == null) {
	                throw new Error('Could not find testability for element.');
	            }
	            return new PublicTestability(testability);
	        };
	    };
	    return GetTestability;
	})();
	exports.GetTestability = GetTestability;
	exports.__esModule = true;
	//# sourceMappingURL=get_testability.js.map

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = this && this.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var di_1 = __webpack_require__(167);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var dom_adapter_1 = __webpack_require__(163);
	var content_tag_1 = __webpack_require__(227);
	var shadow_dom_strategy_1 = __webpack_require__(202);
	var event_manager_1 = __webpack_require__(206);
	var proto_view_1 = __webpack_require__(228);
	var view_1 = __webpack_require__(164);
	var view_container_1 = __webpack_require__(230);
	var util_1 = __webpack_require__(229);
	var api_1 = __webpack_require__(165);
	// TODO(tbosch): use an OpaqueToken here once our transpiler supports
	// const expressions!
	exports.DOCUMENT_TOKEN = "DocumentToken";
	var DomRenderer = (function (_super) {
	    __extends(DomRenderer, _super);
	    function DomRenderer(eventManager, shadowDomStrategy, document) {
	        _super.call(this);
	        this._eventManager = eventManager;
	        this._shadowDomStrategy = shadowDomStrategy;
	        this._document = document;
	    }
	    DomRenderer.prototype.createRootHostView = function (hostProtoViewRef, hostElementSelector) {
	        var hostProtoView = proto_view_1.resolveInternalDomProtoView(hostProtoViewRef);
	        var element = dom_adapter_1.DOM.querySelector(this._document, hostElementSelector);
	        if (lang_1.isBlank(element)) {
	            throw new lang_1.BaseException("The selector \"" + hostElementSelector + "\" did not match any elements");
	        }
	        return new view_1.DomViewRef(this._createView(hostProtoView, element));
	    };
	    DomRenderer.prototype.detachFreeHostView = function (parentHostViewRef, hostViewRef) {
	        var hostView = view_1.resolveInternalDomView(hostViewRef);
	        this._removeViewNodes(hostView);
	    };
	    DomRenderer.prototype.createView = function (protoViewRef) {
	        var protoView = proto_view_1.resolveInternalDomProtoView(protoViewRef);
	        return new view_1.DomViewRef(this._createView(protoView, null));
	    };
	    DomRenderer.prototype.destroyView = function (view) {};
	    DomRenderer.prototype.attachComponentView = function (hostViewRef, elementIndex, componentViewRef) {
	        var hostView = view_1.resolveInternalDomView(hostViewRef);
	        var componentView = view_1.resolveInternalDomView(componentViewRef);
	        var element = hostView.boundElements[elementIndex];
	        var lightDom = hostView.lightDoms[elementIndex];
	        if (lang_1.isPresent(lightDom)) {
	            lightDom.attachShadowDomView(componentView);
	        }
	        var shadowRoot = this._shadowDomStrategy.prepareShadowRoot(element);
	        this._moveViewNodesIntoParent(shadowRoot, componentView);
	        componentView.hostLightDom = lightDom;
	        componentView.shadowRoot = shadowRoot;
	    };
	    DomRenderer.prototype.setComponentViewRootNodes = function (componentViewRef, rootNodes) {
	        var componentView = view_1.resolveInternalDomView(componentViewRef);
	        this._removeViewNodes(componentView);
	        componentView.rootNodes = rootNodes;
	        this._moveViewNodesIntoParent(componentView.shadowRoot, componentView);
	    };
	    DomRenderer.prototype.getHostElement = function (hostViewRef) {
	        var hostView = view_1.resolveInternalDomView(hostViewRef);
	        return hostView.boundElements[0];
	    };
	    DomRenderer.prototype.detachComponentView = function (hostViewRef, boundElementIndex, componentViewRef) {
	        var hostView = view_1.resolveInternalDomView(hostViewRef);
	        var componentView = view_1.resolveInternalDomView(componentViewRef);
	        this._removeViewNodes(componentView);
	        var lightDom = hostView.lightDoms[boundElementIndex];
	        if (lang_1.isPresent(lightDom)) {
	            lightDom.detachShadowDomView();
	        }
	        componentView.hostLightDom = null;
	        componentView.shadowRoot = null;
	    };
	    DomRenderer.prototype.attachViewInContainer = function (parentViewRef, boundElementIndex, atIndex, viewRef) {
	        var parentView = view_1.resolveInternalDomView(parentViewRef);
	        var view = view_1.resolveInternalDomView(viewRef);
	        var viewContainer = this._getOrCreateViewContainer(parentView, boundElementIndex);
	        collection_1.ListWrapper.insert(viewContainer.views, atIndex, view);
	        view.hostLightDom = parentView.hostLightDom;
	        var directParentLightDom = parentView.getDirectParentLightDom(boundElementIndex);
	        if (lang_1.isBlank(directParentLightDom)) {
	            var siblingToInsertAfter;
	            if (atIndex == 0) {
	                siblingToInsertAfter = parentView.boundElements[boundElementIndex];
	            } else {
	                siblingToInsertAfter = collection_1.ListWrapper.last(viewContainer.views[atIndex - 1].rootNodes);
	            }
	            this._moveViewNodesAfterSibling(siblingToInsertAfter, view);
	        } else {
	            directParentLightDom.redistribute();
	        }
	        // new content tags might have appeared, we need to redistribute.
	        if (lang_1.isPresent(parentView.hostLightDom)) {
	            parentView.hostLightDom.redistribute();
	        }
	    };
	    DomRenderer.prototype.detachViewInContainer = function (parentViewRef, boundElementIndex, atIndex, viewRef) {
	        var parentView = view_1.resolveInternalDomView(parentViewRef);
	        var view = view_1.resolveInternalDomView(viewRef);
	        var viewContainer = parentView.viewContainers[boundElementIndex];
	        var detachedView = viewContainer.views[atIndex];
	        collection_1.ListWrapper.removeAt(viewContainer.views, atIndex);
	        var directParentLightDom = parentView.getDirectParentLightDom(boundElementIndex);
	        if (lang_1.isBlank(directParentLightDom)) {
	            this._removeViewNodes(detachedView);
	        } else {
	            directParentLightDom.redistribute();
	        }
	        view.hostLightDom = null;
	        // content tags might have disappeared we need to do redistribution.
	        if (lang_1.isPresent(parentView.hostLightDom)) {
	            parentView.hostLightDom.redistribute();
	        }
	    };
	    DomRenderer.prototype.hydrateView = function (viewRef) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        if (view.hydrated) throw new lang_1.BaseException("The view is already hydrated.");
	        view.hydrated = true;
	        for (var i = 0; i < view.lightDoms.length; ++i) {
	            var lightDom = view.lightDoms[i];
	            if (lang_1.isPresent(lightDom)) {
	                lightDom.redistribute();
	            }
	        }
	        // add global events
	        view.eventHandlerRemovers = collection_1.ListWrapper.create();
	        var binders = view.proto.elementBinders;
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            if (lang_1.isPresent(binder.globalEvents)) {
	                for (var i = 0; i < binder.globalEvents.length; i++) {
	                    var globalEvent = binder.globalEvents[i];
	                    var remover = this._createGlobalEventListener(view, binderIdx, globalEvent.name, globalEvent.target, globalEvent.fullName);
	                    collection_1.ListWrapper.push(view.eventHandlerRemovers, remover);
	                }
	            }
	        }
	        if (lang_1.isPresent(view.hostLightDom)) {
	            view.hostLightDom.redistribute();
	        }
	    };
	    DomRenderer.prototype.dehydrateView = function (viewRef) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        // remove global events
	        for (var i = 0; i < view.eventHandlerRemovers.length; i++) {
	            view.eventHandlerRemovers[i]();
	        }
	        view.eventHandlerRemovers = null;
	        view.hydrated = false;
	    };
	    DomRenderer.prototype.setElementProperty = function (viewRef, elementIndex, propertyName, propertyValue) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        view.setElementProperty(elementIndex, propertyName, propertyValue);
	    };
	    DomRenderer.prototype.callAction = function (viewRef, elementIndex, actionExpression, actionArgs) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        view.callAction(elementIndex, actionExpression, actionArgs);
	    };
	    DomRenderer.prototype.setText = function (viewRef, textNodeIndex, text) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        dom_adapter_1.DOM.setText(view.boundTextNodes[textNodeIndex], text);
	    };
	    DomRenderer.prototype.setEventDispatcher = function (viewRef, dispatcher /*api.EventDispatcher*/) {
	        var view = view_1.resolveInternalDomView(viewRef);
	        view.eventDispatcher = dispatcher;
	    };
	    DomRenderer.prototype._createView = function (protoView, inplaceElement) {
	        var rootElementClone = lang_1.isPresent(inplaceElement) ? inplaceElement : dom_adapter_1.DOM.importIntoDoc(protoView.element);
	        var elementsWithBindingsDynamic;
	        if (protoView.isTemplateElement) {
	            elementsWithBindingsDynamic = dom_adapter_1.DOM.querySelectorAll(dom_adapter_1.DOM.content(rootElementClone), util_1.NG_BINDING_CLASS_SELECTOR);
	        } else {
	            elementsWithBindingsDynamic = dom_adapter_1.DOM.getElementsByClassName(rootElementClone, util_1.NG_BINDING_CLASS);
	        }
	        var elementsWithBindings = collection_1.ListWrapper.createFixedSize(elementsWithBindingsDynamic.length);
	        for (var binderIdx = 0; binderIdx < elementsWithBindingsDynamic.length; ++binderIdx) {
	            elementsWithBindings[binderIdx] = elementsWithBindingsDynamic[binderIdx];
	        }
	        var viewRootNodes;
	        if (protoView.isTemplateElement) {
	            var childNode = dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.content(rootElementClone));
	            viewRootNodes = []; // TODO(perf): Should be fixed size, since we could pre-compute in in DomProtoView
	            // Note: An explicit loop is the fastest way to convert a DOM array into a JS array!
	            while (childNode != null) {
	                collection_1.ListWrapper.push(viewRootNodes, childNode);
	                childNode = dom_adapter_1.DOM.nextSibling(childNode);
	            }
	        } else {
	            viewRootNodes = [rootElementClone];
	        }
	        var binders = protoView.elementBinders;
	        var boundTextNodes = [];
	        var boundElements = collection_1.ListWrapper.createFixedSize(binders.length);
	        var contentTags = collection_1.ListWrapper.createFixedSize(binders.length);
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            var element;
	            if (binderIdx === 0 && protoView.rootBindingOffset === 1) {
	                element = rootElementClone;
	            } else {
	                element = elementsWithBindings[binderIdx - protoView.rootBindingOffset];
	            }
	            boundElements[binderIdx] = element;
	            // boundTextNodes
	            var childNodes = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.templateAwareRoot(element));
	            var textNodeIndices = binder.textNodeIndices;
	            for (var i = 0; i < textNodeIndices.length; i++) {
	                collection_1.ListWrapper.push(boundTextNodes, childNodes[textNodeIndices[i]]);
	            }
	            // contentTags
	            var contentTag = null;
	            if (lang_1.isPresent(binder.contentTagSelector)) {
	                contentTag = new content_tag_1.Content(element, binder.contentTagSelector);
	            }
	            contentTags[binderIdx] = contentTag;
	        }
	        var view = new view_1.DomView(protoView, viewRootNodes, boundTextNodes, boundElements, contentTags);
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	            var binder = binders[binderIdx];
	            var element = boundElements[binderIdx];
	            // lightDoms
	            var lightDom = null;
	            if (lang_1.isPresent(binder.componentId)) {
	                lightDom = this._shadowDomStrategy.constructLightDom(view, boundElements[binderIdx]);
	            }
	            view.lightDoms[binderIdx] = lightDom;
	            // init contentTags
	            var contentTag = contentTags[binderIdx];
	            if (lang_1.isPresent(contentTag)) {
	                var destLightDom = view.getDirectParentLightDom(binderIdx);
	                contentTag.init(destLightDom);
	            }
	            // events
	            if (lang_1.isPresent(binder.eventLocals) && lang_1.isPresent(binder.localEvents)) {
	                for (var i = 0; i < binder.localEvents.length; i++) {
	                    this._createEventListener(view, element, binderIdx, binder.localEvents[i].name, binder.eventLocals);
	                }
	            }
	        }
	        return view;
	    };
	    DomRenderer.prototype._createEventListener = function (view, element, elementIndex, eventName, eventLocals) {
	        this._eventManager.addEventListener(element, eventName, function (event) {
	            view.dispatchEvent(elementIndex, eventName, event);
	        });
	    };
	    DomRenderer.prototype._moveViewNodesAfterSibling = function (sibling, view) {
	        for (var i = view.rootNodes.length - 1; i >= 0; --i) {
	            dom_adapter_1.DOM.insertAfter(sibling, view.rootNodes[i]);
	        }
	    };
	    DomRenderer.prototype._moveViewNodesIntoParent = function (parent, view) {
	        for (var i = 0; i < view.rootNodes.length; ++i) {
	            dom_adapter_1.DOM.appendChild(parent, view.rootNodes[i]);
	        }
	    };
	    DomRenderer.prototype._removeViewNodes = function (view) {
	        var len = view.rootNodes.length;
	        if (len == 0) return;
	        var parent = view.rootNodes[0].parentNode;
	        for (var i = len - 1; i >= 0; --i) {
	            dom_adapter_1.DOM.removeChild(parent, view.rootNodes[i]);
	        }
	    };
	    DomRenderer.prototype._getOrCreateViewContainer = function (parentView, boundElementIndex) {
	        var vc = parentView.viewContainers[boundElementIndex];
	        if (lang_1.isBlank(vc)) {
	            vc = new view_container_1.DomViewContainer();
	            parentView.viewContainers[boundElementIndex] = vc;
	        }
	        return vc;
	    };
	    DomRenderer.prototype._createGlobalEventListener = function (view, elementIndex, eventName, eventTarget, fullName) {
	        return this._eventManager.addGlobalEventListener(eventTarget, eventName, function (event) {
	            view.dispatchEvent(elementIndex, fullName, event);
	        });
	    };
	    DomRenderer = __decorate([di_1.Injectable(), __param(2, di_1.Inject(exports.DOCUMENT_TOKEN)), __metadata("design:paramtypes", [event_manager_1.EventManager, shadow_dom_strategy_1.ShadowDomStrategy, Object])], DomRenderer);
	    return DomRenderer;
	})(api_1.Renderer);
	exports.DomRenderer = DomRenderer;
	exports.__esModule = true;
	//# sourceMappingURL=dom_renderer.js.map

	// noop for now

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(163);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var ContentStrategy = (function () {
	    function ContentStrategy() {}
	    ContentStrategy.prototype.insert = function (nodes) {};
	    return ContentStrategy;
	})();
	/**
	 * An implementation of the content tag that is used by transcluding components.
	 * It is used when the content tag is not a direct child of another component,
	 * and thus does not affect redistribution.
	 */
	var RenderedContent = (function (_super) {
	    __extends(RenderedContent, _super);
	    function RenderedContent(contentEl) {
	        _super.call(this);
	        this.beginScript = contentEl;
	        this.endScript = dom_adapter_1.DOM.nextSibling(this.beginScript);
	        this.nodes = [];
	    }
	    // Inserts the nodes in between the start and end scripts.
	    // Previous content is removed.
	    RenderedContent.prototype.insert = function (nodes) {
	        this.nodes = nodes;
	        dom_adapter_1.DOM.insertAllBefore(this.endScript, nodes);
	        this._removeNodesUntil(collection_1.ListWrapper.isEmpty(nodes) ? this.endScript : nodes[0]);
	    };
	    RenderedContent.prototype._removeNodesUntil = function (node) {
	        var p = dom_adapter_1.DOM.parentElement(this.beginScript);
	        for (var next = dom_adapter_1.DOM.nextSibling(this.beginScript); next !== node; next = dom_adapter_1.DOM.nextSibling(this.beginScript)) {
	            dom_adapter_1.DOM.removeChild(p, next);
	        }
	    };
	    return RenderedContent;
	})(ContentStrategy);
	/**
	 * An implementation of the content tag that is used by transcluding components.
	 * It is used when the content tag is a direct child of another component,
	 * and thus does not get rendered but only affect the distribution of its parent component.
	 */
	var IntermediateContent = (function (_super) {
	    __extends(IntermediateContent, _super);
	    function IntermediateContent(destinationLightDom) {
	        _super.call(this);
	        this.nodes = [];
	        this.destinationLightDom = destinationLightDom;
	    }
	    IntermediateContent.prototype.insert = function (nodes) {
	        this.nodes = nodes;
	        this.destinationLightDom.redistribute();
	    };
	    return IntermediateContent;
	})(ContentStrategy);
	var Content = (function () {
	    function Content(contentStartEl, selector) {
	        this.select = selector;
	        this.contentStartElement = contentStartEl;
	        this._strategy = null;
	    }
	    Content.prototype.init = function (destinationLightDom) {
	        this._strategy = lang_1.isPresent(destinationLightDom) ? new IntermediateContent(destinationLightDom) : new RenderedContent(this.contentStartElement);
	    };
	    Content.prototype.nodes = function () {
	        return this._strategy.nodes;
	    };
	    Content.prototype.insert = function (nodes) {
	        this._strategy.insert(nodes);
	    };
	    return Content;
	})();
	exports.Content = Content;
	exports.__esModule = true;
	//# sourceMappingURL=content_tag.js.map

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var dom_adapter_1 = __webpack_require__(163);
	var util_1 = __webpack_require__(229);
	var api_1 = __webpack_require__(165);
	function resolveInternalDomProtoView(protoViewRef) {
	    return protoViewRef._protoView;
	}
	exports.resolveInternalDomProtoView = resolveInternalDomProtoView;
	var DomProtoViewRef = (function (_super) {
	    __extends(DomProtoViewRef, _super);
	    function DomProtoViewRef(protoView) {
	        _super.call(this);
	        this._protoView = protoView;
	    }
	    return DomProtoViewRef;
	})(api_1.RenderProtoViewRef);
	exports.DomProtoViewRef = DomProtoViewRef;
	var DomProtoView = (function () {
	    function DomProtoView(_a) {
	        var elementBinders = _a.elementBinders,
	            element = _a.element;
	        this.element = element;
	        this.elementBinders = elementBinders;
	        this.isTemplateElement = dom_adapter_1.DOM.isTemplateElement(this.element);
	        this.rootBindingOffset = lang_1.isPresent(this.element) && dom_adapter_1.DOM.hasClass(this.element, util_1.NG_BINDING_CLASS) ? 1 : 0;
	    }
	    return DomProtoView;
	})();
	exports.DomProtoView = DomProtoView;
	exports.__esModule = true;
	//# sourceMappingURL=proto_view.js.map

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	exports.NG_BINDING_CLASS_SELECTOR = '.ng-binding';
	exports.NG_BINDING_CLASS = 'ng-binding';
	exports.EVENT_TARGET_SEPARATOR = ':';
	var CAMEL_CASE_REGEXP = lang_1.RegExpWrapper.create('([A-Z])');
	var DASH_CASE_REGEXP = lang_1.RegExpWrapper.create('-([a-z])');
	function camelCaseToDashCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) {
	        return '-' + m[1].toLowerCase();
	    });
	}
	exports.camelCaseToDashCase = camelCaseToDashCase;
	function dashCaseToCamelCase(input) {
	    return lang_1.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) {
	        return m[1].toUpperCase();
	    });
	}
	exports.dashCaseToCamelCase = dashCaseToCamelCase;
	exports.__esModule = true;
	//# sourceMappingURL=util.js.map

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	var DomViewContainer = (function () {
	    function DomViewContainer() {
	        // The order in this list matches the DOM order.
	        this.views = [];
	    }
	    DomViewContainer.prototype.contentTagContainers = function () {
	        return this.views;
	    };
	    DomViewContainer.prototype.nodes = function () {
	        var r = [];
	        for (var i = 0; i < this.views.length; ++i) {
	            r = collection_1.ListWrapper.concat(r, this.views[i].rootNodes);
	        }
	        return r;
	    };
	    return DomViewContainer;
	})();
	exports.DomViewContainer = DomViewContainer;
	exports.__esModule = true;
	//# sourceMappingURL=view_container.js.map

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var di_1 = __webpack_require__(167);
	var async_1 = __webpack_require__(155);
	var lang_1 = __webpack_require__(118);
	var dom_adapter_1 = __webpack_require__(163);
	var api_1 = __webpack_require__(165);
	var compile_pipeline_1 = __webpack_require__(232);
	var template_loader_1 = __webpack_require__(210);
	var compile_step_factory_1 = __webpack_require__(238);
	var change_detection_1 = __webpack_require__(122);
	var shadow_dom_strategy_1 = __webpack_require__(202);
	/**
	 * The compiler loads and translates the html templates of components into
	 * nested ProtoViews. To decompose its functionality it uses
	 * the CompilePipeline and the CompileSteps.
	 */
	var DomCompiler = (function (_super) {
	    __extends(DomCompiler, _super);
	    function DomCompiler(stepFactory, templateLoader) {
	        _super.call(this);
	        this._templateLoader = templateLoader;
	        this._stepFactory = stepFactory;
	    }
	    DomCompiler.prototype.compile = function (template) {
	        var _this = this;
	        var tplPromise = this._templateLoader.load(template);
	        return async_1.PromiseWrapper.then(tplPromise, function (el) {
	            return _this._compileTemplate(template, el, api_1.ProtoViewDto.COMPONENT_VIEW_TYPE);
	        }, function (_) {
	            throw new lang_1.BaseException("Failed to load the template \"" + template.componentId + "\"");
	        });
	    };
	    DomCompiler.prototype.compileHost = function (directiveMetadata) {
	        var hostViewDef = new api_1.ViewDefinition({
	            componentId: directiveMetadata.id,
	            absUrl: null, template: null,
	            directives: [directiveMetadata]
	        });
	        var element = dom_adapter_1.DOM.createElement(directiveMetadata.selector);
	        return this._compileTemplate(hostViewDef, element, api_1.ProtoViewDto.HOST_VIEW_TYPE);
	    };
	    DomCompiler.prototype._compileTemplate = function (viewDef, tplElement, protoViewType) {
	        var subTaskPromises = [];
	        var pipeline = new compile_pipeline_1.CompilePipeline(this._stepFactory.createSteps(viewDef, subTaskPromises));
	        var compileElements = pipeline.process(tplElement, protoViewType, viewDef.componentId);
	        var protoView = compileElements[0].inheritedProtoView.build();
	        if (subTaskPromises.length > 0) {
	            return async_1.PromiseWrapper.all(subTaskPromises).then(function (_) {
	                return protoView;
	            });
	        } else {
	            return async_1.PromiseWrapper.resolve(protoView);
	        }
	    };
	    return DomCompiler;
	})(api_1.RenderCompiler);
	exports.DomCompiler = DomCompiler;
	var DefaultDomCompiler = (function (_super) {
	    __extends(DefaultDomCompiler, _super);
	    function DefaultDomCompiler(parser, shadowDomStrategy, templateLoader) {
	        _super.call(this, new compile_step_factory_1.DefaultStepFactory(parser, shadowDomStrategy), templateLoader);
	    }
	    DefaultDomCompiler = __decorate([di_1.Injectable(), __metadata("design:paramtypes", [change_detection_1.Parser, shadow_dom_strategy_1.ShadowDomStrategy, template_loader_1.TemplateLoader])], DefaultDomCompiler);
	    return DefaultDomCompiler;
	})(DomCompiler);
	exports.DefaultDomCompiler = DefaultDomCompiler;
	exports.__esModule = true;
	//# sourceMappingURL=compiler.js.map

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var dom_adapter_1 = __webpack_require__(163);
	var compile_element_1 = __webpack_require__(233);
	var compile_control_1 = __webpack_require__(234);
	var proto_view_builder_1 = __webpack_require__(235);
	var api_1 = __webpack_require__(165);
	/**
	 * CompilePipeline for executing CompileSteps recursively for
	 * all elements in a template.
	 */
	var CompilePipeline = (function () {
	    function CompilePipeline(steps) {
	        this._control = new compile_control_1.CompileControl(steps);
	    }
	    CompilePipeline.prototype.process = function (rootElement, protoViewType, compilationCtxtDescription) {
	        if (protoViewType === void 0) {
	            protoViewType = null;
	        }
	        if (compilationCtxtDescription === void 0) {
	            compilationCtxtDescription = '';
	        }
	        if (lang_1.isBlank(protoViewType)) {
	            protoViewType = api_1.ProtoViewDto.COMPONENT_VIEW_TYPE;
	        }
	        var results = collection_1.ListWrapper.create();
	        var rootCompileElement = new compile_element_1.CompileElement(rootElement, compilationCtxtDescription);
	        rootCompileElement.inheritedProtoView = new proto_view_builder_1.ProtoViewBuilder(rootElement, protoViewType);
	        rootCompileElement.isViewRoot = true;
	        this._process(results, null, rootCompileElement, compilationCtxtDescription);
	        return results;
	    };
	    CompilePipeline.prototype._process = function (results, parent, current, compilationCtxtDescription) {
	        if (compilationCtxtDescription === void 0) {
	            compilationCtxtDescription = '';
	        }
	        var additionalChildren = this._control.internalProcess(results, 0, parent, current);
	        if (current.compileChildren) {
	            var node = dom_adapter_1.DOM.firstChild(dom_adapter_1.DOM.templateAwareRoot(current.element));
	            while (lang_1.isPresent(node)) {
	                // compiliation can potentially move the node, so we need to store the
	                // next sibling before recursing.
	                var nextNode = dom_adapter_1.DOM.nextSibling(node);
	                if (dom_adapter_1.DOM.isElementNode(node)) {
	                    var childCompileElement = new compile_element_1.CompileElement(node, compilationCtxtDescription);
	                    childCompileElement.inheritedProtoView = current.inheritedProtoView;
	                    childCompileElement.inheritedElementBinder = current.inheritedElementBinder;
	                    childCompileElement.distanceToInheritedBinder = current.distanceToInheritedBinder + 1;
	                    this._process(results, current, childCompileElement);
	                }
	                node = nextNode;
	            }
	        }
	        if (lang_1.isPresent(additionalChildren)) {
	            for (var i = 0; i < additionalChildren.length; i++) {
	                this._process(results, current, additionalChildren[i]);
	            }
	        }
	    };
	    return CompilePipeline;
	})();
	exports.CompilePipeline = CompilePipeline;
	exports.__esModule = true;
	//# sourceMappingURL=compile_pipeline.js.map

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	var dom_adapter_1 = __webpack_require__(163);
	var lang_1 = __webpack_require__(118);
	/**
	 * Collects all data that is needed to process an element
	 * in the compile process. Fields are filled
	 * by the CompileSteps starting out with the pure HTMLElement.
	 */
	var CompileElement = (function () {
	    // error
	    function CompileElement(element, compilationUnit) {
	        if (compilationUnit === void 0) {
	            compilationUnit = '';
	        }
	        this.element = element;
	        this._attrs = null;
	        this._classList = null;
	        this.isViewRoot = false;
	        // inherited down to children if they don't have
	        // an own protoView
	        this.inheritedProtoView = null;
	        // inherited down to children if they don't have
	        // an own elementBinder
	        this.inheritedElementBinder = null;
	        this.distanceToInheritedBinder = 0;
	        this.compileChildren = true;
	        // description is calculated here as compilation steps may change the element
	        var tplDesc = lang_1.assertionsEnabled() ? getElementDescription(element) : null;
	        if (compilationUnit !== '') {
	            this.elementDescription = compilationUnit;
	            if (lang_1.isPresent(tplDesc)) this.elementDescription += ': ' + tplDesc;
	        } else {
	            this.elementDescription = tplDesc;
	        }
	    }
	    CompileElement.prototype.isBound = function () {
	        return lang_1.isPresent(this.inheritedElementBinder) && this.distanceToInheritedBinder === 0;
	    };
	    CompileElement.prototype.bindElement = function () {
	        if (!this.isBound()) {
	            var parentBinder = this.inheritedElementBinder;
	            this.inheritedElementBinder = this.inheritedProtoView.bindElement(this.element, this.elementDescription);
	            if (lang_1.isPresent(parentBinder)) {
	                this.inheritedElementBinder.setParent(parentBinder, this.distanceToInheritedBinder);
	            }
	            this.distanceToInheritedBinder = 0;
	        }
	        return this.inheritedElementBinder;
	    };
	    CompileElement.prototype.refreshAttrs = function () {
	        this._attrs = null;
	    };
	    CompileElement.prototype.attrs = function () {
	        if (lang_1.isBlank(this._attrs)) {
	            this._attrs = dom_adapter_1.DOM.attributeMap(this.element);
	        }
	        return this._attrs;
	    };
	    CompileElement.prototype.refreshClassList = function () {
	        this._classList = null;
	    };
	    CompileElement.prototype.classList = function () {
	        if (lang_1.isBlank(this._classList)) {
	            this._classList = collection_1.ListWrapper.create();
	            var elClassList = dom_adapter_1.DOM.classList(this.element);
	            for (var i = 0; i < elClassList.length; i++) {
	                collection_1.ListWrapper.push(this._classList, elClassList[i]);
	            }
	        }
	        return this._classList;
	    };
	    return CompileElement;
	})();
	exports.CompileElement = CompileElement;
	// return an HTML representation of an element start tag - without its content
	// this is used to give contextual information in case of errors
	function getElementDescription(domElement) {
	    var buf = new lang_1.StringJoiner();
	    var atts = dom_adapter_1.DOM.attributeMap(domElement);
	    buf.add('<');
	    buf.add(dom_adapter_1.DOM.tagName(domElement).toLowerCase());
	    // show id and class first to ease element identification
	    addDescriptionAttribute(buf, 'id', collection_1.MapWrapper.get(atts, 'id'));
	    addDescriptionAttribute(buf, 'class', collection_1.MapWrapper.get(atts, 'class'));
	    collection_1.MapWrapper.forEach(atts, function (attValue, attName) {
	        if (attName !== 'id' && attName !== 'class') {
	            addDescriptionAttribute(buf, attName, attValue);
	        }
	    });
	    buf.add('>');
	    return buf.toString();
	}
	function addDescriptionAttribute(buffer, attName, attValue) {
	    if (lang_1.isPresent(attValue)) {
	        if (attValue.length === 0) {
	            buffer.add(' ' + attName);
	        } else {
	            buffer.add(' ' + attName + '="' + attValue + '"');
	        }
	    }
	}
	exports.__esModule = true;
	//# sourceMappingURL=compile_element.js.map

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	/**
	 * Controls the processing order of elements.
	 * Right now it only allows to add a parent element.
	 */
	var CompileControl = (function () {
	    function CompileControl(steps) {
	        this._steps = steps;
	        this._currentStepIndex = 0;
	        this._parent = null;
	        this._results = null;
	        this._additionalChildren = null;
	    }
	    // only public so that it can be used by compile_pipeline
	    CompileControl.prototype.internalProcess = function (results, startStepIndex, parent, current) {
	        this._results = results;
	        var previousStepIndex = this._currentStepIndex;
	        var previousParent = this._parent;
	        this._ignoreCurrentElement = false;
	        for (var i = startStepIndex; i < this._steps.length && !this._ignoreCurrentElement; i++) {
	            var step = this._steps[i];
	            this._parent = parent;
	            this._currentStepIndex = i;
	            step.process(parent, current, this);
	            parent = this._parent;
	        }
	        if (!this._ignoreCurrentElement) {
	            collection_1.ListWrapper.push(results, current);
	        }
	        this._currentStepIndex = previousStepIndex;
	        this._parent = previousParent;
	        var localAdditionalChildren = this._additionalChildren;
	        this._additionalChildren = null;
	        return localAdditionalChildren;
	    };
	    CompileControl.prototype.addParent = function (newElement) {
	        this.internalProcess(this._results, this._currentStepIndex + 1, this._parent, newElement);
	        this._parent = newElement;
	    };
	    CompileControl.prototype.addChild = function (element) {
	        if (lang_1.isBlank(this._additionalChildren)) {
	            this._additionalChildren = collection_1.ListWrapper.create();
	        }
	        collection_1.ListWrapper.push(this._additionalChildren, element);
	    };
	    /**
	     * Ignores the current element.
	     *
	     * When a step calls `ignoreCurrentElement`, no further steps are executed on the current
	     * element and no `CompileElement` is added to the result list.
	     */
	    CompileControl.prototype.ignoreCurrentElement = function () {
	        this._ignoreCurrentElement = true;
	    };
	    return CompileControl;
	})();
	exports.CompileControl = CompileControl;
	exports.__esModule = true;
	//# sourceMappingURL=compile_control.js.map

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var dom_adapter_1 = __webpack_require__(163);
	var change_detection_1 = __webpack_require__(122);
	var proto_view_1 = __webpack_require__(228);
	var element_binder_1 = __webpack_require__(236);
	var property_setter_factory_1 = __webpack_require__(237);
	var api = __webpack_require__(165);
	var util_1 = __webpack_require__(229);
	var ProtoViewBuilder = (function () {
	    function ProtoViewBuilder(rootElement, type) {
	        this.rootElement = rootElement;
	        this.elements = [];
	        this.variableBindings = collection_1.MapWrapper.create();
	        this.type = type;
	    }
	    ProtoViewBuilder.prototype.bindElement = function (element, description) {
	        if (description === void 0) {
	            description = null;
	        }
	        var builder = new ElementBinderBuilder(this.elements.length, element, description);
	        collection_1.ListWrapper.push(this.elements, builder);
	        dom_adapter_1.DOM.addClass(element, util_1.NG_BINDING_CLASS);
	        return builder;
	    };
	    ProtoViewBuilder.prototype.bindVariable = function (name, value) {
	        // Store the variable map from value to variable, reflecting how it will be used later by
	        // DomView. When a local is set to the view, a lookup for the variable name will take place
	        // keyed
	        // by the "value", or exported identifier. For example, ng-for sets a view local of "index".
	        // When this occurs, a lookup keyed by "index" must occur to find if there is a var referencing
	        // it.
	        collection_1.MapWrapper.set(this.variableBindings, value, name);
	    };
	    ProtoViewBuilder.prototype.build = function () {
	        var renderElementBinders = [];
	        var apiElementBinders = [];
	        collection_1.ListWrapper.forEach(this.elements, function (ebb) {
	            var propertySetters = collection_1.MapWrapper.create();
	            var hostActions = collection_1.MapWrapper.create();
	            var apiDirectiveBinders = collection_1.ListWrapper.map(ebb.directives, function (dbb) {
	                ebb.eventBuilder.merge(dbb.eventBuilder);
	                collection_1.MapWrapper.forEach(dbb.hostPropertyBindings, function (_, hostPropertyName) {
	                    collection_1.MapWrapper.set(propertySetters, hostPropertyName, property_setter_factory_1.setterFactory(hostPropertyName));
	                });
	                collection_1.ListWrapper.forEach(dbb.hostActions, function (hostAction) {
	                    collection_1.MapWrapper.set(hostActions, hostAction.actionExpression, hostAction.expression);
	                });
	                return new api.DirectiveBinder({
	                    directiveIndex: dbb.directiveIndex,
	                    propertyBindings: dbb.propertyBindings,
	                    eventBindings: dbb.eventBindings,
	                    hostPropertyBindings: dbb.hostPropertyBindings
	                });
	            });
	            collection_1.MapWrapper.forEach(ebb.propertyBindings, function (_, propertyName) {
	                collection_1.MapWrapper.set(propertySetters, propertyName, property_setter_factory_1.setterFactory(propertyName));
	            });
	            var nestedProtoView = lang_1.isPresent(ebb.nestedProtoView) ? ebb.nestedProtoView.build() : null;
	            var parentIndex = lang_1.isPresent(ebb.parent) ? ebb.parent.index : -1;
	            collection_1.ListWrapper.push(apiElementBinders, new api.ElementBinder({
	                index: ebb.index,
	                parentIndex: parentIndex,
	                distanceToParent: ebb.distanceToParent,
	                directives: apiDirectiveBinders,
	                nestedProtoView: nestedProtoView,
	                propertyBindings: ebb.propertyBindings,
	                variableBindings: ebb.variableBindings,
	                eventBindings: ebb.eventBindings,
	                textBindings: ebb.textBindings,
	                readAttributes: ebb.readAttributes
	            }));
	            collection_1.ListWrapper.push(renderElementBinders, new element_binder_1.ElementBinder({
	                textNodeIndices: ebb.textBindingIndices,
	                contentTagSelector: ebb.contentTagSelector,
	                parentIndex: parentIndex,
	                distanceToParent: ebb.distanceToParent,
	                nestedProtoView: lang_1.isPresent(nestedProtoView) ? proto_view_1.resolveInternalDomProtoView(nestedProtoView.render) : null,
	                componentId: ebb.componentId,
	                eventLocals: new change_detection_1.LiteralArray(ebb.eventBuilder.buildEventLocals()),
	                localEvents: ebb.eventBuilder.buildLocalEvents(),
	                globalEvents: ebb.eventBuilder.buildGlobalEvents(),
	                hostActions: hostActions,
	                propertySetters: propertySetters
	            }));
	        });
	        return new api.ProtoViewDto({
	            render: new proto_view_1.DomProtoViewRef(new proto_view_1.DomProtoView({ element: this.rootElement, elementBinders: renderElementBinders })),
	            type: this.type,
	            elementBinders: apiElementBinders,
	            variableBindings: this.variableBindings
	        });
	    };
	    return ProtoViewBuilder;
	})();
	exports.ProtoViewBuilder = ProtoViewBuilder;
	var ElementBinderBuilder = (function () {
	    function ElementBinderBuilder(index, element, description) {
	        this.element = element;
	        this.index = index;
	        this.parent = null;
	        this.distanceToParent = 0;
	        this.directives = [];
	        this.nestedProtoView = null;
	        this.propertyBindings = collection_1.MapWrapper.create();
	        this.variableBindings = collection_1.MapWrapper.create();
	        this.eventBindings = collection_1.ListWrapper.create();
	        this.eventBuilder = new EventBuilder();
	        this.textBindings = [];
	        this.textBindingIndices = [];
	        this.contentTagSelector = null;
	        this.componentId = null;
	        this.readAttributes = collection_1.MapWrapper.create();
	    }
	    ElementBinderBuilder.prototype.setParent = function (parent, distanceToParent) {
	        this.parent = parent;
	        if (lang_1.isPresent(parent)) {
	            this.distanceToParent = distanceToParent;
	        }
	        return this;
	    };
	    ElementBinderBuilder.prototype.readAttribute = function (attrName) {
	        if (lang_1.isBlank(collection_1.MapWrapper.get(this.readAttributes, attrName))) {
	            collection_1.MapWrapper.set(this.readAttributes, attrName, dom_adapter_1.DOM.getAttribute(this.element, attrName));
	        }
	    };
	    ElementBinderBuilder.prototype.bindDirective = function (directiveIndex) {
	        var directive = new DirectiveBuilder(directiveIndex);
	        collection_1.ListWrapper.push(this.directives, directive);
	        return directive;
	    };
	    ElementBinderBuilder.prototype.bindNestedProtoView = function (rootElement) {
	        if (lang_1.isPresent(this.nestedProtoView)) {
	            throw new lang_1.BaseException('Only one nested view per element is allowed');
	        }
	        this.nestedProtoView = new ProtoViewBuilder(rootElement, api.ProtoViewDto.EMBEDDED_VIEW_TYPE);
	        return this.nestedProtoView;
	    };
	    ElementBinderBuilder.prototype.bindProperty = function (name, expression) {
	        collection_1.MapWrapper.set(this.propertyBindings, name, expression);
	    };
	    ElementBinderBuilder.prototype.bindVariable = function (name, value) {
	        // When current is a view root, the variable bindings are set to the *nested* proto view.
	        // The root view conceptually signifies a new "block scope" (the nested view), to which
	        // the variables are bound.
	        if (lang_1.isPresent(this.nestedProtoView)) {
	            this.nestedProtoView.bindVariable(name, value);
	        } else {
	            // Store the variable map from value to variable, reflecting how it will be used later by
	            // DomView. When a local is set to the view, a lookup for the variable name will take place
	            // keyed
	            // by the "value", or exported identifier. For example, ng-for sets a view local of "index".
	            // When this occurs, a lookup keyed by "index" must occur to find if there is a var
	            // referencing
	            // it.
	            collection_1.MapWrapper.set(this.variableBindings, value, name);
	        }
	    };
	    ElementBinderBuilder.prototype.bindEvent = function (name, expression, target) {
	        if (target === void 0) {
	            target = null;
	        }
	        collection_1.ListWrapper.push(this.eventBindings, this.eventBuilder.add(name, expression, target));
	    };
	    ElementBinderBuilder.prototype.bindText = function (index, expression) {
	        collection_1.ListWrapper.push(this.textBindingIndices, index);
	        collection_1.ListWrapper.push(this.textBindings, expression);
	    };
	    ElementBinderBuilder.prototype.setContentTagSelector = function (value) {
	        this.contentTagSelector = value;
	    };
	    ElementBinderBuilder.prototype.setComponentId = function (componentId) {
	        this.componentId = componentId;
	    };
	    return ElementBinderBuilder;
	})();
	exports.ElementBinderBuilder = ElementBinderBuilder;
	var DirectiveBuilder = (function () {
	    function DirectiveBuilder(directiveIndex) {
	        this.directiveIndex = directiveIndex;
	        this.propertyBindings = collection_1.MapWrapper.create();
	        this.hostPropertyBindings = collection_1.MapWrapper.create();
	        this.hostActions = collection_1.ListWrapper.create();
	        this.eventBindings = collection_1.ListWrapper.create();
	        this.eventBuilder = new EventBuilder();
	    }
	    DirectiveBuilder.prototype.bindProperty = function (name, expression) {
	        collection_1.MapWrapper.set(this.propertyBindings, name, expression);
	    };
	    DirectiveBuilder.prototype.bindHostProperty = function (name, expression) {
	        collection_1.MapWrapper.set(this.hostPropertyBindings, name, expression);
	    };
	    DirectiveBuilder.prototype.bindHostAction = function (actionName, actionExpression, expression) {
	        collection_1.ListWrapper.push(this.hostActions, new element_binder_1.HostAction(actionName, actionExpression, expression));
	    };
	    DirectiveBuilder.prototype.bindEvent = function (name, expression, target) {
	        if (target === void 0) {
	            target = null;
	        }
	        collection_1.ListWrapper.push(this.eventBindings, this.eventBuilder.add(name, expression, target));
	    };
	    return DirectiveBuilder;
	})();
	exports.DirectiveBuilder = DirectiveBuilder;
	var EventBuilder = (function (_super) {
	    __extends(EventBuilder, _super);
	    function EventBuilder() {
	        _super.call(this);
	        this.locals = [];
	        this.localEvents = [];
	        this.globalEvents = [];
	        this._implicitReceiver = new change_detection_1.ImplicitReceiver();
	    }
	    EventBuilder.prototype.add = function (name, source, target) {
	        // TODO(tbosch): reenable this when we are parsing element properties
	        // out of action expressions
	        // var adjustedAst = astWithSource.ast.visit(this);
	        var adjustedAst = source.ast;
	        var fullName = lang_1.isPresent(target) ? target + util_1.EVENT_TARGET_SEPARATOR + name : name;
	        var result = new api.EventBinding(fullName, new change_detection_1.ASTWithSource(adjustedAst, source.source, source.location));
	        var event = new element_binder_1.Event(name, target, fullName);
	        if (lang_1.isBlank(target)) {
	            collection_1.ListWrapper.push(this.localEvents, event);
	        } else {
	            collection_1.ListWrapper.push(this.globalEvents, event);
	        }
	        return result;
	    };
	    EventBuilder.prototype.visitAccessMember = function (ast) {
	        var isEventAccess = false;
	        var current = ast;
	        while (!isEventAccess && current instanceof change_detection_1.AccessMember) {
	            var am = current;
	            if (am.name == '$event') {
	                isEventAccess = true;
	            }
	            current = am.receiver;
	        }
	        if (isEventAccess) {
	            collection_1.ListWrapper.push(this.locals, ast);
	            var index = this.locals.length - 1;
	            return new change_detection_1.AccessMember(this._implicitReceiver, '' + index, function (arr) {
	                return arr[index];
	            }, null);
	        } else {
	            return ast;
	        }
	    };
	    EventBuilder.prototype.buildEventLocals = function () {
	        return this.locals;
	    };
	    EventBuilder.prototype.buildLocalEvents = function () {
	        return this.localEvents;
	    };
	    EventBuilder.prototype.buildGlobalEvents = function () {
	        return this.globalEvents;
	    };
	    EventBuilder.prototype.merge = function (eventBuilder) {
	        this._merge(this.localEvents, eventBuilder.localEvents);
	        this._merge(this.globalEvents, eventBuilder.globalEvents);
	        collection_1.ListWrapper.concat(this.locals, eventBuilder.locals);
	    };
	    EventBuilder.prototype._merge = function (host, tobeAdded) {
	        var names = collection_1.ListWrapper.create();
	        for (var i = 0; i < host.length; i++) {
	            collection_1.ListWrapper.push(names, host[i].fullName);
	        }
	        for (var j = 0; j < tobeAdded.length; j++) {
	            if (!collection_1.ListWrapper.contains(names, tobeAdded[j].fullName)) {
	                collection_1.ListWrapper.push(host, tobeAdded[j]);
	            }
	        }
	    };
	    return EventBuilder;
	})(change_detection_1.AstTransformer);
	exports.EventBuilder = EventBuilder;
	exports.__esModule = true;
	//# sourceMappingURL=proto_view_builder.js.map

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var ElementBinder = (function () {
	    function ElementBinder(_a) {
	        var _b = _a === void 0 ? {} : _a,
	            textNodeIndices = _b.textNodeIndices,
	            contentTagSelector = _b.contentTagSelector,
	            nestedProtoView = _b.nestedProtoView,
	            componentId = _b.componentId,
	            eventLocals = _b.eventLocals,
	            localEvents = _b.localEvents,
	            globalEvents = _b.globalEvents,
	            hostActions = _b.hostActions,
	            parentIndex = _b.parentIndex,
	            distanceToParent = _b.distanceToParent,
	            propertySetters = _b.propertySetters;
	        this.textNodeIndices = textNodeIndices;
	        this.contentTagSelector = contentTagSelector;
	        this.nestedProtoView = nestedProtoView;
	        this.componentId = componentId;
	        this.eventLocals = eventLocals;
	        this.localEvents = localEvents;
	        this.globalEvents = globalEvents;
	        this.hostActions = hostActions;
	        this.parentIndex = parentIndex;
	        this.distanceToParent = distanceToParent;
	        this.propertySetters = propertySetters;
	    }
	    return ElementBinder;
	})();
	exports.ElementBinder = ElementBinder;
	var Event = (function () {
	    function Event(name, target, fullName) {
	        this.name = name;
	        this.target = target;
	        this.fullName = fullName;
	    }
	    return Event;
	})();
	exports.Event = Event;
	var HostAction = (function () {
	    function HostAction(actionName, actionExpression, expression) {
	        this.actionName = actionName;
	        this.actionExpression = actionExpression;
	        this.expression = expression;
	    }
	    return HostAction;
	})();
	exports.HostAction = HostAction;
	exports.__esModule = true;
	//# sourceMappingURL=element_binder.js.map

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var dom_adapter_1 = __webpack_require__(163);
	var util_1 = __webpack_require__(229);
	var reflection_1 = __webpack_require__(129);
	var STYLE_SEPARATOR = '.';
	var propertySettersCache = collection_1.StringMapWrapper.create();
	var innerHTMLSetterCache;
	var ATTRIBUTE_PREFIX = 'attr.';
	var attributeSettersCache = collection_1.StringMapWrapper.create();
	var CLASS_PREFIX = 'class.';
	var classSettersCache = collection_1.StringMapWrapper.create();
	var STYLE_PREFIX = 'style.';
	var styleSettersCache = collection_1.StringMapWrapper.create();
	function setterFactory(property) {
	    var setterFn, styleParts, styleSuffix;
	    if (lang_1.StringWrapper.startsWith(property, ATTRIBUTE_PREFIX)) {
	        setterFn = attributeSetterFactory(lang_1.StringWrapper.substring(property, ATTRIBUTE_PREFIX.length));
	    } else if (lang_1.StringWrapper.startsWith(property, CLASS_PREFIX)) {
	        setterFn = classSetterFactory(lang_1.StringWrapper.substring(property, CLASS_PREFIX.length));
	    } else if (lang_1.StringWrapper.startsWith(property, STYLE_PREFIX)) {
	        styleParts = property.split(STYLE_SEPARATOR);
	        styleSuffix = styleParts.length > 2 ? collection_1.ListWrapper.get(styleParts, 2) : '';
	        setterFn = styleSetterFactory(collection_1.ListWrapper.get(styleParts, 1), styleSuffix);
	    } else if (lang_1.StringWrapper.equals(property, 'innerHtml')) {
	        if (lang_1.isBlank(innerHTMLSetterCache)) {
	            innerHTMLSetterCache = function (el, value) {
	                return dom_adapter_1.DOM.setInnerHTML(el, value);
	            };
	        }
	        setterFn = innerHTMLSetterCache;
	    } else {
	        property = resolvePropertyName(property);
	        setterFn = collection_1.StringMapWrapper.get(propertySettersCache, property);
	        if (lang_1.isBlank(setterFn)) {
	            var propertySetterFn = reflection_1.reflector.setter(property);
	            setterFn = function (receiver, value) {
	                if (dom_adapter_1.DOM.hasProperty(receiver, property)) {
	                    return propertySetterFn(receiver, value);
	                }
	            };
	            collection_1.StringMapWrapper.set(propertySettersCache, property, setterFn);
	        }
	    }
	    return setterFn;
	}
	exports.setterFactory = setterFactory;
	function _isValidAttributeValue(attrName, value) {
	    if (attrName == 'role') {
	        return lang_1.isString(value);
	    } else {
	        return lang_1.isPresent(value);
	    }
	}
	function attributeSetterFactory(attrName) {
	    var setterFn = collection_1.StringMapWrapper.get(attributeSettersCache, attrName);
	    var dashCasedAttributeName;
	    if (lang_1.isBlank(setterFn)) {
	        dashCasedAttributeName = util_1.camelCaseToDashCase(attrName);
	        setterFn = function (element, value) {
	            if (_isValidAttributeValue(dashCasedAttributeName, value)) {
	                dom_adapter_1.DOM.setAttribute(element, dashCasedAttributeName, lang_1.stringify(value));
	            } else {
	                if (lang_1.isPresent(value)) {
	                    throw new lang_1.BaseException('Invalid ' + dashCasedAttributeName + ' attribute, only string values are allowed, got \'' + lang_1.stringify(value) + '\'');
	                }
	                dom_adapter_1.DOM.removeAttribute(element, dashCasedAttributeName);
	            }
	        };
	        collection_1.StringMapWrapper.set(attributeSettersCache, attrName, setterFn);
	    }
	    return setterFn;
	}
	function classSetterFactory(className) {
	    var setterFn = collection_1.StringMapWrapper.get(classSettersCache, className);
	    var dashCasedClassName;
	    if (lang_1.isBlank(setterFn)) {
	        dashCasedClassName = util_1.camelCaseToDashCase(className);
	        setterFn = function (element, value) {
	            if (value) {
	                dom_adapter_1.DOM.addClass(element, dashCasedClassName);
	            } else {
	                dom_adapter_1.DOM.removeClass(element, dashCasedClassName);
	            }
	        };
	        collection_1.StringMapWrapper.set(classSettersCache, className, setterFn);
	    }
	    return setterFn;
	}
	function styleSetterFactory(styleName, styleSuffix) {
	    var cacheKey = styleName + styleSuffix;
	    var setterFn = collection_1.StringMapWrapper.get(styleSettersCache, cacheKey);
	    var dashCasedStyleName;
	    if (lang_1.isBlank(setterFn)) {
	        dashCasedStyleName = util_1.camelCaseToDashCase(styleName);
	        setterFn = function (element, value) {
	            var valAsStr;
	            if (lang_1.isPresent(value)) {
	                valAsStr = lang_1.stringify(value);
	                dom_adapter_1.DOM.setStyle(element, dashCasedStyleName, valAsStr + styleSuffix);
	            } else {
	                dom_adapter_1.DOM.removeStyle(element, dashCasedStyleName);
	            }
	        };
	        collection_1.StringMapWrapper.set(styleSettersCache, cacheKey, setterFn);
	    }
	    return setterFn;
	}
	function resolvePropertyName(attrName) {
	    var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, attrName);
	    return lang_1.isPresent(mappedPropName) ? mappedPropName : attrName;
	}
	exports.__esModule = true;
	//# sourceMappingURL=property_setter_factory.js.map

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var property_binding_parser_1 = __webpack_require__(239);
	var text_interpolation_parser_1 = __webpack_require__(240);
	var directive_parser_1 = __webpack_require__(241);
	var view_splitter_1 = __webpack_require__(243);
	var shadow_dom_compile_step_1 = __webpack_require__(244);
	var CompileStepFactory = (function () {
	    function CompileStepFactory() {}
	    CompileStepFactory.prototype.createSteps = function (template, subTaskPromises) {
	        return null;
	    };
	    return CompileStepFactory;
	})();
	exports.CompileStepFactory = CompileStepFactory;
	var DefaultStepFactory = (function (_super) {
	    __extends(DefaultStepFactory, _super);
	    function DefaultStepFactory(parser, shadowDomStrategy) {
	        _super.call(this);
	        this._parser = parser;
	        this._shadowDomStrategy = shadowDomStrategy;
	    }
	    DefaultStepFactory.prototype.createSteps = function (template, subTaskPromises) {
	        return [new view_splitter_1.ViewSplitter(this._parser), new property_binding_parser_1.PropertyBindingParser(this._parser), new directive_parser_1.DirectiveParser(this._parser, template.directives), new text_interpolation_parser_1.TextInterpolationParser(this._parser), new shadow_dom_compile_step_1.ShadowDomCompileStep(this._shadowDomStrategy, template, subTaskPromises)];
	    };
	    return DefaultStepFactory;
	})(CompileStepFactory);
	exports.DefaultStepFactory = DefaultStepFactory;
	exports.__esModule = true;
	//# sourceMappingURL=compile_step_factory.js.map

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var util_1 = __webpack_require__(229);
	// Group 1 = "bind-"
	// Group 2 = "var-" or "#"
	// Group 3 = "on-"
	// Group 4 = "bindon-"
	// Group 5 = the identifier after "bind-", "var-/#", or "on-"
	// Group 6 = idenitifer inside [()]
	// Group 7 = idenitifer inside []
	// Group 8 = identifier inside ()
	var BIND_NAME_REGEXP = lang_1.RegExpWrapper.create('^(?:(?:(?:(bind-)|(var-|#)|(on-)|(bindon-))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$');
	/**
	 * Parses the property bindings on a single element.
	 */
	var PropertyBindingParser = (function () {
	    function PropertyBindingParser(parser) {
	        this._parser = parser;
	    }
	    PropertyBindingParser.prototype.process = function (parent, current, control) {
	        var _this = this;
	        var attrs = current.attrs();
	        var newAttrs = collection_1.MapWrapper.create();
	        collection_1.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	            var bindParts = lang_1.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
	            if (lang_1.isPresent(bindParts)) {
	                if (lang_1.isPresent(bindParts[1])) {
	                    _this._bindProperty(bindParts[5], attrValue, current, newAttrs);
	                } else if (lang_1.isPresent(bindParts[2])) {
	                    var identifier = bindParts[5];
	                    var value = attrValue == '' ? '$implicit' : attrValue;
	                    _this._bindVariable(identifier, value, current, newAttrs);
	                } else if (lang_1.isPresent(bindParts[3])) {
	                    _this._bindEvent(bindParts[5], attrValue, current, newAttrs);
	                } else if (lang_1.isPresent(bindParts[4])) {
	                    _this._bindProperty(bindParts[5], attrValue, current, newAttrs);
	                    _this._bindAssignmentEvent(bindParts[5], attrValue, current, newAttrs);
	                } else if (lang_1.isPresent(bindParts[6])) {
	                    _this._bindProperty(bindParts[6], attrValue, current, newAttrs);
	                    _this._bindAssignmentEvent(bindParts[6], attrValue, current, newAttrs);
	                } else if (lang_1.isPresent(bindParts[7])) {
	                    _this._bindProperty(bindParts[7], attrValue, current, newAttrs);
	                } else if (lang_1.isPresent(bindParts[8])) {
	                    _this._bindEvent(bindParts[8], attrValue, current, newAttrs);
	                }
	            } else {
	                var expr = _this._parser.parseInterpolation(attrValue, current.elementDescription);
	                if (lang_1.isPresent(expr)) {
	                    _this._bindPropertyAst(attrName, expr, current, newAttrs);
	                }
	            }
	        });
	        collection_1.MapWrapper.forEach(newAttrs, function (attrValue, attrName) {
	            collection_1.MapWrapper.set(attrs, attrName, attrValue);
	        });
	    };
	    PropertyBindingParser.prototype._bindVariable = function (identifier, value, current, newAttrs) {
	        current.bindElement().bindVariable(util_1.dashCaseToCamelCase(identifier), value);
	        collection_1.MapWrapper.set(newAttrs, identifier, value);
	    };
	    PropertyBindingParser.prototype._bindProperty = function (name, expression, current, newAttrs) {
	        this._bindPropertyAst(name, this._parser.parseBinding(expression, current.elementDescription), current, newAttrs);
	    };
	    PropertyBindingParser.prototype._bindPropertyAst = function (name, ast, current, newAttrs) {
	        var binder = current.bindElement();
	        var camelCaseName = util_1.dashCaseToCamelCase(name);
	        binder.bindProperty(camelCaseName, ast);
	        collection_1.MapWrapper.set(newAttrs, name, ast.source);
	    };
	    PropertyBindingParser.prototype._bindAssignmentEvent = function (name, expression, current, newAttrs) {
	        this._bindEvent(name, expression + '=$event', current, newAttrs);
	    };
	    PropertyBindingParser.prototype._bindEvent = function (name, expression, current, newAttrs) {
	        current.bindElement().bindEvent(util_1.dashCaseToCamelCase(name), this._parser.parseAction(expression, current.elementDescription));
	        // Don't detect directives for event names for now,
	        // so don't add the event name to the CompileElement.attrs
	    };
	    return PropertyBindingParser;
	})();
	exports.PropertyBindingParser = PropertyBindingParser;
	exports.__esModule = true;
	//# sourceMappingURL=property_binding_parser.js.map

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var dom_adapter_1 = __webpack_require__(163);
	/**
	 * Parses interpolations in direct text child nodes of the current element.
	 */
	var TextInterpolationParser = (function () {
	    function TextInterpolationParser(parser) {
	        this._parser = parser;
	    }
	    TextInterpolationParser.prototype.process = function (parent, current, control) {
	        if (!current.compileChildren) {
	            return;
	        }
	        var element = current.element;
	        var childNodes = dom_adapter_1.DOM.childNodes(dom_adapter_1.DOM.templateAwareRoot(element));
	        for (var i = 0; i < childNodes.length; i++) {
	            var node = childNodes[i];
	            if (dom_adapter_1.DOM.isTextNode(node)) {
	                var text = dom_adapter_1.DOM.nodeValue(node);
	                var expr = this._parser.parseInterpolation(text, current.elementDescription);
	                if (lang_1.isPresent(expr)) {
	                    dom_adapter_1.DOM.setText(node, ' ');
	                    current.bindElement().bindText(i, expr);
	                }
	            }
	        }
	    };
	    return TextInterpolationParser;
	})();
	exports.TextInterpolationParser = TextInterpolationParser;
	exports.__esModule = true;
	//# sourceMappingURL=text_interpolation_parser.js.map

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var dom_adapter_1 = __webpack_require__(163);
	var selector_1 = __webpack_require__(242);
	var api_1 = __webpack_require__(165);
	var util_1 = __webpack_require__(229);
	/**
	 * Parses the directives on a single element. Assumes ViewSplitter has already created
	 * <template> elements for template directives.
	 */
	var DirectiveParser = (function () {
	    function DirectiveParser(parser, directives) {
	        this._parser = parser;
	        this._selectorMatcher = new selector_1.SelectorMatcher();
	        this._directives = directives;
	        for (var i = 0; i < directives.length; i++) {
	            var directive = directives[i];
	            var selector = selector_1.CssSelector.parse(directive.selector);
	            this._ensureComponentOnlyHasElementSelector(selector, directive);
	            this._selectorMatcher.addSelectables(selector, i);
	        }
	    }
	    DirectiveParser.prototype._ensureComponentOnlyHasElementSelector = function (selector, directive) {
	        var isElementSelector = selector.length === 1 && selector[0].isElementSelector();
	        if (!isElementSelector && directive.type === api_1.DirectiveMetadata.COMPONENT_TYPE) {
	            throw new lang_1.BaseException('Component \'' + directive.id + '\' can only have an element selector, but had \'' + directive.selector + '\'');
	        }
	    };
	    DirectiveParser.prototype.process = function (parent, current, control) {
	        var _this = this;
	        var attrs = current.attrs();
	        var classList = current.classList();
	        var cssSelector = new selector_1.CssSelector();
	        var nodeName = dom_adapter_1.DOM.nodeName(current.element);
	        cssSelector.setElement(nodeName);
	        for (var i = 0; i < classList.length; i++) {
	            cssSelector.addClassName(classList[i]);
	        }
	        collection_1.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	            cssSelector.addAttribute(attrName, attrValue);
	        });
	        var componentDirective;
	        var foundDirectiveIndices = [];
	        var elementBinder = null;
	        this._selectorMatcher.match(cssSelector, function (selector, directiveIndex) {
	            elementBinder = current.bindElement();
	            var directive = _this._directives[directiveIndex];
	            if (directive.type === api_1.DirectiveMetadata.COMPONENT_TYPE) {
	                // components need to go first, so it is easier to locate them in the result.
	                collection_1.ListWrapper.insert(foundDirectiveIndices, 0, directiveIndex);
	                if (lang_1.isPresent(componentDirective)) {
	                    throw new lang_1.BaseException('Only one component directive is allowed per element - check ' + current.elementDescription);
	                }
	                componentDirective = directive;
	                elementBinder.setComponentId(directive.id);
	            } else {
	                collection_1.ListWrapper.push(foundDirectiveIndices, directiveIndex);
	            }
	        });
	        collection_1.ListWrapper.forEach(foundDirectiveIndices, function (directiveIndex) {
	            var directive = _this._directives[directiveIndex];
	            var directiveBinderBuilder = elementBinder.bindDirective(directiveIndex);
	            current.compileChildren = current.compileChildren && directive.compileChildren;
	            if (lang_1.isPresent(directive.properties)) {
	                collection_1.MapWrapper.forEach(directive.properties, function (bindConfig, dirProperty) {
	                    _this._bindDirectiveProperty(dirProperty, bindConfig, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(directive.hostListeners)) {
	                collection_1.MapWrapper.forEach(directive.hostListeners, function (action, eventName) {
	                    _this._bindDirectiveEvent(eventName, action, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(directive.hostActions)) {
	                collection_1.MapWrapper.forEach(directive.hostActions, function (action, actionName) {
	                    _this._bindHostAction(actionName, action, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(directive.hostProperties)) {
	                collection_1.MapWrapper.forEach(directive.hostProperties, function (hostPropertyName, directivePropertyName) {
	                    _this._bindHostProperty(hostPropertyName, directivePropertyName, current, directiveBinderBuilder);
	                });
	            }
	            if (lang_1.isPresent(directive.hostAttributes)) {
	                collection_1.MapWrapper.forEach(directive.hostAttributes, function (hostAttrValue, hostAttrName) {
	                    _this._addHostAttribute(hostAttrName, hostAttrValue, current);
	                });
	            }
	            if (lang_1.isPresent(directive.readAttributes)) {
	                collection_1.ListWrapper.forEach(directive.readAttributes, function (attrName) {
	                    elementBinder.readAttribute(attrName);
	                });
	            }
	        });
	    };
	    DirectiveParser.prototype._bindDirectiveProperty = function (dirProperty, bindConfig, compileElement, directiveBinderBuilder) {
	        var pipes = this._splitBindConfig(bindConfig);
	        var elProp = collection_1.ListWrapper.removeAt(pipes, 0);
	        var bindingAst = collection_1.MapWrapper.get(compileElement.bindElement().propertyBindings, util_1.dashCaseToCamelCase(elProp));
	        if (lang_1.isBlank(bindingAst)) {
	            var attributeValue = collection_1.MapWrapper.get(compileElement.attrs(), util_1.camelCaseToDashCase(elProp));
	            if (lang_1.isPresent(attributeValue)) {
	                bindingAst = this._parser.wrapLiteralPrimitive(attributeValue, compileElement.elementDescription);
	            }
	        }
	        // Bindings are optional, so this binding only needs to be set up if an expression is given.
	        if (lang_1.isPresent(bindingAst)) {
	            var fullExpAstWithBindPipes = this._parser.addPipes(bindingAst, pipes);
	            directiveBinderBuilder.bindProperty(dirProperty, fullExpAstWithBindPipes);
	        }
	    };
	    DirectiveParser.prototype._bindDirectiveEvent = function (eventName, action, compileElement, directiveBinderBuilder) {
	        var ast = this._parser.parseAction(action, compileElement.elementDescription);
	        if (lang_1.StringWrapper.contains(eventName, util_1.EVENT_TARGET_SEPARATOR)) {
	            var parts = eventName.split(util_1.EVENT_TARGET_SEPARATOR);
	            directiveBinderBuilder.bindEvent(parts[1], ast, parts[0]);
	        } else {
	            directiveBinderBuilder.bindEvent(eventName, ast);
	        }
	    };
	    DirectiveParser.prototype._bindHostAction = function (actionName, actionExpression, compileElement, directiveBinderBuilder) {
	        var ast = this._parser.parseAction(actionExpression, compileElement.elementDescription);
	        directiveBinderBuilder.bindHostAction(actionName, actionExpression, ast);
	    };
	    DirectiveParser.prototype._bindHostProperty = function (hostPropertyName, directivePropertyName, compileElement, directiveBinderBuilder) {
	        var ast = this._parser.parseBinding(directivePropertyName, 'hostProperties of ' + compileElement.elementDescription);
	        directiveBinderBuilder.bindHostProperty(hostPropertyName, ast);
	    };
	    DirectiveParser.prototype._addHostAttribute = function (attrName, attrValue, compileElement) {
	        if (lang_1.StringWrapper.equals(attrName, 'class')) {
	            collection_1.ListWrapper.forEach(attrValue.split(' '), function (className) {
	                dom_adapter_1.DOM.addClass(compileElement.element, className);
	            });
	        } else if (!dom_adapter_1.DOM.hasAttribute(compileElement.element, attrName)) {
	            dom_adapter_1.DOM.setAttribute(compileElement.element, attrName, attrValue);
	        }
	    };
	    DirectiveParser.prototype._splitBindConfig = function (bindConfig) {
	        return collection_1.ListWrapper.map(bindConfig.split('|'), function (s) {
	            return s.trim();
	        });
	    };
	    return DirectiveParser;
	})();
	exports.DirectiveParser = DirectiveParser;
	exports.__esModule = true;
	//# sourceMappingURL=directive_parser.js.map

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var _EMPTY_ATTR_VALUE = '';
	// TODO: Can't use `const` here as
	// in Dart this is not transpiled into `final` yet...
	var _SELECTOR_REGEXP = lang_1.RegExpWrapper.create('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(?:\\))|' + '(\\s*,\\s*)'); // ","
	/**
	 * A css selector contains an element name,
	 * css classes and attribute/value pairs with the purpose
	 * of selecting subsets out of them.
	 */
	var CssSelector = (function () {
	    function CssSelector() {
	        this.element = null;
	        this.classNames = collection_1.ListWrapper.create();
	        this.attrs = collection_1.ListWrapper.create();
	        this.notSelector = null;
	    }
	    CssSelector.parse = function (selector) {
	        var results = collection_1.ListWrapper.create();
	        var _addResult = function _addResult(res, cssSel) {
	            if (lang_1.isPresent(cssSel.notSelector) && lang_1.isBlank(cssSel.element) && collection_1.ListWrapper.isEmpty(cssSel.classNames) && collection_1.ListWrapper.isEmpty(cssSel.attrs)) {
	                cssSel.element = '*';
	            }
	            collection_1.ListWrapper.push(res, cssSel);
	        };
	        var cssSelector = new CssSelector();
	        var matcher = lang_1.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
	        var match;
	        var current = cssSelector;
	        while (lang_1.isPresent(match = lang_1.RegExpMatcherWrapper.next(matcher))) {
	            if (lang_1.isPresent(match[1])) {
	                if (lang_1.isPresent(cssSelector.notSelector)) {
	                    throw new lang_1.BaseException('Nesting :not is not allowed in a selector');
	                }
	                current.notSelector = new CssSelector();
	                current = current.notSelector;
	            }
	            if (lang_1.isPresent(match[2])) {
	                current.setElement(match[2]);
	            }
	            if (lang_1.isPresent(match[3])) {
	                current.addClassName(match[3]);
	            }
	            if (lang_1.isPresent(match[4])) {
	                current.addAttribute(match[4], match[5]);
	            }
	            if (lang_1.isPresent(match[6])) {
	                _addResult(results, cssSelector);
	                cssSelector = current = new CssSelector();
	            }
	        }
	        _addResult(results, cssSelector);
	        return results;
	    };
	    CssSelector.prototype.isElementSelector = function () {
	        return lang_1.isPresent(this.element) && collection_1.ListWrapper.isEmpty(this.classNames) && collection_1.ListWrapper.isEmpty(this.attrs) && lang_1.isBlank(this.notSelector);
	    };
	    CssSelector.prototype.setElement = function (element) {
	        if (element === void 0) {
	            element = null;
	        }
	        if (lang_1.isPresent(element)) {
	            element = element.toLowerCase();
	        }
	        this.element = element;
	    };
	    CssSelector.prototype.addAttribute = function (name, value) {
	        if (value === void 0) {
	            value = _EMPTY_ATTR_VALUE;
	        }
	        collection_1.ListWrapper.push(this.attrs, name.toLowerCase());
	        if (lang_1.isPresent(value)) {
	            value = value.toLowerCase();
	        } else {
	            value = _EMPTY_ATTR_VALUE;
	        }
	        collection_1.ListWrapper.push(this.attrs, value);
	    };
	    CssSelector.prototype.addClassName = function (name) {
	        collection_1.ListWrapper.push(this.classNames, name.toLowerCase());
	    };
	    CssSelector.prototype.toString = function () {
	        var res = '';
	        if (lang_1.isPresent(this.element)) {
	            res += this.element;
	        }
	        if (lang_1.isPresent(this.classNames)) {
	            for (var i = 0; i < this.classNames.length; i++) {
	                res += '.' + this.classNames[i];
	            }
	        }
	        if (lang_1.isPresent(this.attrs)) {
	            for (var i = 0; i < this.attrs.length;) {
	                var attrName = this.attrs[i++];
	                var attrValue = this.attrs[i++];
	                res += '[' + attrName;
	                if (attrValue.length > 0) {
	                    res += '=' + attrValue;
	                }
	                res += ']';
	            }
	        }
	        if (lang_1.isPresent(this.notSelector)) {
	            res += ':not(' + this.notSelector.toString() + ')';
	        }
	        return res;
	    };
	    return CssSelector;
	})();
	exports.CssSelector = CssSelector;
	/**
	 * Reads a list of CssSelectors and allows to calculate which ones
	 * are contained in a given CssSelector.
	 */
	var SelectorMatcher = (function () {
	    function SelectorMatcher() {
	        this._elementMap = collection_1.MapWrapper.create();
	        this._elementPartialMap = collection_1.MapWrapper.create();
	        this._classMap = collection_1.MapWrapper.create();
	        this._classPartialMap = collection_1.MapWrapper.create();
	        this._attrValueMap = collection_1.MapWrapper.create();
	        this._attrValuePartialMap = collection_1.MapWrapper.create();
	        this._listContexts = collection_1.ListWrapper.create();
	    }
	    SelectorMatcher.createNotMatcher = function (notSelector) {
	        var notMatcher = new SelectorMatcher();
	        notMatcher._addSelectable(notSelector, null, null);
	        return notMatcher;
	    };
	    SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	        var listContext = null;
	        if (cssSelectors.length > 1) {
	            listContext = new SelectorListContext(cssSelectors);
	            collection_1.ListWrapper.push(this._listContexts, listContext);
	        }
	        for (var i = 0; i < cssSelectors.length; i++) {
	            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	        }
	    };
	    /**
	     * Add an object that can be found later on by calling `match`.
	     * @param cssSelector A css selector
	     * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
	     */
	    SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	        var matcher = this;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	        if (lang_1.isPresent(element)) {
	            var isTerminal = attrs.length === 0 && classNames.length === 0;
	            if (isTerminal) {
	                this._addTerminal(matcher._elementMap, element, selectable);
	            } else {
	                matcher = this._addPartial(matcher._elementPartialMap, element);
	            }
	        }
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var isTerminal = attrs.length === 0 && index === classNames.length - 1;
	                var className = classNames[index];
	                if (isTerminal) {
	                    this._addTerminal(matcher._classMap, className, selectable);
	                } else {
	                    matcher = this._addPartial(matcher._classPartialMap, className);
	                }
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var isTerminal = index === attrs.length - 2;
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                if (isTerminal) {
	                    var terminalMap = matcher._attrValueMap;
	                    var terminalValuesMap = collection_1.MapWrapper.get(terminalMap, attrName);
	                    if (lang_1.isBlank(terminalValuesMap)) {
	                        terminalValuesMap = collection_1.MapWrapper.create();
	                        collection_1.MapWrapper.set(terminalMap, attrName, terminalValuesMap);
	                    }
	                    this._addTerminal(terminalValuesMap, attrValue, selectable);
	                } else {
	                    var parttialMap = matcher._attrValuePartialMap;
	                    var partialValuesMap = collection_1.MapWrapper.get(parttialMap, attrName);
	                    if (lang_1.isBlank(partialValuesMap)) {
	                        partialValuesMap = collection_1.MapWrapper.create();
	                        collection_1.MapWrapper.set(parttialMap, attrName, partialValuesMap);
	                    }
	                    matcher = this._addPartial(partialValuesMap, attrValue);
	                }
	            }
	        }
	    };
	    SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	        var terminalList = collection_1.MapWrapper.get(map, name);
	        if (lang_1.isBlank(terminalList)) {
	            terminalList = collection_1.ListWrapper.create();
	            collection_1.MapWrapper.set(map, name, terminalList);
	        }
	        collection_1.ListWrapper.push(terminalList, selectable);
	    };
	    SelectorMatcher.prototype._addPartial = function (map, name) {
	        var matcher = collection_1.MapWrapper.get(map, name);
	        if (lang_1.isBlank(matcher)) {
	            matcher = new SelectorMatcher();
	            collection_1.MapWrapper.set(map, name, matcher);
	        }
	        return matcher;
	    };
	    /**
	     * Find the objects that have been added via `addSelectable`
	     * whose css selector is contained in the given css selector.
	     * @param cssSelector A css selector
	     * @param matchedCallback This callback will be called with the object handed into `addSelectable`
	     * @return boolean true if a match was found
	    */
	    SelectorMatcher.prototype.match = function (cssSelector, matchedCallback /*: (CssSelector, any) => void*/) {
	        var result = false;
	        var element = cssSelector.element;
	        var classNames = cssSelector.classNames;
	        var attrs = cssSelector.attrs;
	        for (var i = 0; i < this._listContexts.length; i++) {
	            this._listContexts[i].alreadyMatched = false;
	        }
	        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
	        if (lang_1.isPresent(classNames)) {
	            for (var index = 0; index < classNames.length; index++) {
	                var className = classNames[index];
	                result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
	            }
	        }
	        if (lang_1.isPresent(attrs)) {
	            for (var index = 0; index < attrs.length;) {
	                var attrName = attrs[index++];
	                var attrValue = attrs[index++];
	                var terminalValuesMap = collection_1.MapWrapper.get(this._attrValueMap, attrName);
	                if (!lang_1.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	                    result = this._matchTerminal(terminalValuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
	                }
	                result = this._matchTerminal(terminalValuesMap, attrValue, cssSelector, matchedCallback) || result;
	                var partialValuesMap = collection_1.MapWrapper.get(this._attrValuePartialMap, attrName);
	                result = this._matchPartial(partialValuesMap, attrValue, cssSelector, matchedCallback) || result;
	            }
	        }
	        return result;
	    };
	    SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback /*: (CssSelector, any) => void*/) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var selectables = collection_1.MapWrapper.get(map, name);
	        var starSelectables = collection_1.MapWrapper.get(map, '*');
	        if (lang_1.isPresent(starSelectables)) {
	            selectables = collection_1.ListWrapper.concat(selectables, starSelectables);
	        }
	        if (lang_1.isBlank(selectables)) {
	            return false;
	        }
	        var selectable;
	        var result = false;
	        for (var index = 0; index < selectables.length; index++) {
	            selectable = selectables[index];
	            result = selectable.finalize(cssSelector, matchedCallback) || result;
	        }
	        return result;
	    };
	    SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback /*: (CssSelector, any) => void*/) {
	        if (lang_1.isBlank(map) || lang_1.isBlank(name)) {
	            return false;
	        }
	        var nestedSelector = collection_1.MapWrapper.get(map, name);
	        if (lang_1.isBlank(nestedSelector)) {
	            return false;
	        }
	        // TODO(perf): get rid of recursion and measure again
	        // TODO(perf): don't pass the whole selector into the recursion,
	        // but only the not processed parts
	        return nestedSelector.match(cssSelector, matchedCallback);
	    };
	    return SelectorMatcher;
	})();
	exports.SelectorMatcher = SelectorMatcher;
	var SelectorListContext = (function () {
	    function SelectorListContext(selectors) {
	        this.selectors = selectors;
	        this.alreadyMatched = false;
	    }
	    return SelectorListContext;
	})();
	// Store context to pass back selector and context when a selector is matched
	var SelectorContext = (function () {
	    function SelectorContext(selector, cbContext, listContext) {
	        this.selector = selector;
	        this.notSelector = selector.notSelector;
	        this.cbContext = cbContext;
	        this.listContext = listContext;
	    }
	    SelectorContext.prototype.finalize = function (cssSelector, callback /*: (CssSelector, any) => void*/) {
	        var result = true;
	        if (lang_1.isPresent(this.notSelector) && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            var notMatcher = SelectorMatcher.createNotMatcher(this.notSelector);
	            result = !notMatcher.match(cssSelector, null);
	        }
	        if (result && lang_1.isPresent(callback) && (lang_1.isBlank(this.listContext) || !this.listContext.alreadyMatched)) {
	            if (lang_1.isPresent(this.listContext)) {
	                this.listContext.alreadyMatched = true;
	            }
	            callback(this.selector, this.cbContext);
	        }
	        return result;
	    };
	    return SelectorContext;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=selector.js.map

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var dom_adapter_1 = __webpack_require__(163);
	var collection_1 = __webpack_require__(121);
	var compile_element_1 = __webpack_require__(233);
	var util_1 = __webpack_require__(229);
	/**
	 * Splits views at `<template>` elements or elements with `template` attribute:
	 * For `<template>` elements:
	 * - moves the content into a new and disconnected `<template>` element
	 *   that is marked as view root.
	 *
	 * For elements with a `template` attribute:
	 * - replaces the element with an empty `<template>` element,
	 *   parses the content of the `template` attribute and adds the information to that
	 *   `<template>` element. Marks the elements as view root.
	 *
	 * Note: In both cases the root of the nested view is disconnected from its parent element.
	 * This is needed for browsers that don't support the `<template>` element
	 * as we want to do locate elements with bindings using `getElementsByClassName` later on,
	 * which should not descend into the nested view.
	 */
	var ViewSplitter = (function () {
	    function ViewSplitter(parser) {
	        this._parser = parser;
	    }
	    ViewSplitter.prototype.process = function (parent, current, control) {
	        var attrs = current.attrs();
	        var templateBindings = collection_1.MapWrapper.get(attrs, 'template');
	        var hasTemplateBinding = lang_1.isPresent(templateBindings);
	        // look for template shortcuts such as *ng-if="condition" and treat them as template="if
	        // condition"
	        collection_1.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	            if (lang_1.StringWrapper.startsWith(attrName, '*')) {
	                var key = lang_1.StringWrapper.substring(attrName, 1); // remove the star
	                if (hasTemplateBinding) {
	                    // 2nd template binding detected
	                    throw new lang_1.BaseException('Only one template directive per element is allowed: ' + (templateBindings + ' and ' + key + ' cannot be used simultaneously ') + ('in ' + current.elementDescription));
	                } else {
	                    templateBindings = attrValue.length == 0 ? key : key + ' ' + attrValue;
	                    hasTemplateBinding = true;
	                }
	            }
	        });
	        if (lang_1.isPresent(parent)) {
	            if (dom_adapter_1.DOM.isTemplateElement(current.element)) {
	                if (!current.isViewRoot) {
	                    var viewRoot = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
	                    viewRoot.inheritedProtoView = current.bindElement().bindNestedProtoView(viewRoot.element);
	                    // viewRoot doesn't appear in the original template, so we associate
	                    // the current element description to get a more meaningful message in case of error
	                    viewRoot.elementDescription = current.elementDescription;
	                    viewRoot.isViewRoot = true;
	                    this._moveChildNodes(dom_adapter_1.DOM.content(current.element), dom_adapter_1.DOM.content(viewRoot.element));
	                    control.addChild(viewRoot);
	                }
	            }
	            if (hasTemplateBinding) {
	                var newParent = new compile_element_1.CompileElement(dom_adapter_1.DOM.createTemplate(''));
	                newParent.inheritedProtoView = current.inheritedProtoView;
	                newParent.inheritedElementBinder = current.inheritedElementBinder;
	                newParent.distanceToInheritedBinder = current.distanceToInheritedBinder;
	                // newParent doesn't appear in the original template, so we associate
	                // the current element description to get a more meaningful message in case of error
	                newParent.elementDescription = current.elementDescription;
	                current.inheritedProtoView = newParent.bindElement().bindNestedProtoView(current.element);
	                current.inheritedElementBinder = null;
	                current.distanceToInheritedBinder = 0;
	                current.isViewRoot = true;
	                this._parseTemplateBindings(templateBindings, newParent);
	                this._addParentElement(current.element, newParent.element);
	                control.addParent(newParent);
	                dom_adapter_1.DOM.remove(current.element);
	            }
	        }
	    };
	    ViewSplitter.prototype._moveChildNodes = function (source, target) {
	        var next = dom_adapter_1.DOM.firstChild(source);
	        while (lang_1.isPresent(next)) {
	            dom_adapter_1.DOM.appendChild(target, next);
	            next = dom_adapter_1.DOM.firstChild(source);
	        }
	    };
	    ViewSplitter.prototype._addParentElement = function (currentElement, newParentElement) {
	        dom_adapter_1.DOM.insertBefore(currentElement, newParentElement);
	        dom_adapter_1.DOM.appendChild(newParentElement, currentElement);
	    };
	    ViewSplitter.prototype._parseTemplateBindings = function (templateBindings, compileElement) {
	        var bindings = this._parser.parseTemplateBindings(templateBindings, compileElement.elementDescription);
	        for (var i = 0; i < bindings.length; i++) {
	            var binding = bindings[i];
	            if (binding.keyIsVar) {
	                compileElement.bindElement().bindVariable(util_1.dashCaseToCamelCase(binding.key), binding.name);
	                collection_1.MapWrapper.set(compileElement.attrs(), binding.key, binding.name);
	            } else if (lang_1.isPresent(binding.expression)) {
	                compileElement.bindElement().bindProperty(util_1.dashCaseToCamelCase(binding.key), binding.expression);
	                collection_1.MapWrapper.set(compileElement.attrs(), binding.key, binding.expression.source);
	            } else {
	                dom_adapter_1.DOM.setAttribute(compileElement.element, binding.key, '');
	            }
	        }
	    };
	    return ViewSplitter;
	})();
	exports.ViewSplitter = ViewSplitter;
	exports.__esModule = true;
	//# sourceMappingURL=view_splitter.js.map

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var async_1 = __webpack_require__(155);
	var dom_adapter_1 = __webpack_require__(163);
	var ShadowDomCompileStep = (function () {
	    function ShadowDomCompileStep(shadowDomStrategy, template, subTaskPromises) {
	        this._shadowDomStrategy = shadowDomStrategy;
	        this._template = template;
	        this._subTaskPromises = subTaskPromises;
	    }
	    ShadowDomCompileStep.prototype.process = function (parent, current, control) {
	        var tagName = dom_adapter_1.DOM.tagName(current.element).toUpperCase();
	        if (tagName == 'STYLE') {
	            this._processStyleElement(current, control);
	        } else if (tagName == 'CONTENT') {
	            this._processContentElement(current);
	        } else {
	            var componentId = current.isBound() ? current.inheritedElementBinder.componentId : null;
	            this._shadowDomStrategy.processElement(this._template.componentId, componentId, current.element);
	        }
	    };
	    ShadowDomCompileStep.prototype._processStyleElement = function (current, control) {
	        var stylePromise = this._shadowDomStrategy.processStyleElement(this._template.componentId, this._template.absUrl, current.element);
	        if (lang_1.isPresent(stylePromise) && async_1.PromiseWrapper.isPromise(stylePromise)) {
	            collection_1.ListWrapper.push(this._subTaskPromises, stylePromise);
	        }
	        // Style elements should not be further processed by the compiler, as they can not contain
	        // bindings. Skipping further compiler steps allow speeding up the compilation process.
	        control.ignoreCurrentElement();
	    };
	    ShadowDomCompileStep.prototype._processContentElement = function (current) {
	        if (this._shadowDomStrategy.hasNativeContentElement()) {
	            return;
	        }
	        var attrs = current.attrs();
	        var selector = collection_1.MapWrapper.get(attrs, 'select');
	        selector = lang_1.isPresent(selector) ? selector : '';
	        var contentStart = dom_adapter_1.DOM.createScriptTag('type', 'ng/contentStart');
	        if (lang_1.assertionsEnabled()) {
	            dom_adapter_1.DOM.setAttribute(contentStart, 'select', selector);
	        }
	        var contentEnd = dom_adapter_1.DOM.createScriptTag('type', 'ng/contentEnd');
	        dom_adapter_1.DOM.insertBefore(current.element, contentStart);
	        dom_adapter_1.DOM.insertBefore(current.element, contentEnd);
	        dom_adapter_1.DOM.remove(current.element);
	        current.element = contentStart;
	        current.bindElement().setContentTagSelector(selector);
	    };
	    return ShadowDomCompileStep;
	})();
	exports.ShadowDomCompileStep = ShadowDomCompileStep;
	exports.__esModule = true;
	//# sourceMappingURL=shadow_dom_compile_step.js.map

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	var di_1 = __webpack_require__(167);
	exports.appComponentRefToken = new di_1.OpaqueToken('ComponentRef');
	exports.appComponentTypeToken = new di_1.OpaqueToken('RootComponent');
	exports.__esModule = true;
	//# sourceMappingURL=application_tokens.js.map

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var di_1 = __webpack_require__(177);
	exports.QueryAnnotation = di_1.Query;
	exports.AttributeAnnotation = di_1.Attribute;
	exports.__esModule = true;
	//# sourceMappingURL=di.js.map

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var dom_adapter_1 = __webpack_require__(163);
	var shadow_dom_strategy_1 = __webpack_require__(202);
	/**
	 * This strategies uses the native Shadow DOM support.
	 *
	 * The templates for the component are inserted in a Shadow Root created on the component element.
	 * Hence they are strictly isolated.
	 */
	var NativeShadowDomStrategy = (function (_super) {
	    __extends(NativeShadowDomStrategy, _super);
	    function NativeShadowDomStrategy(styleUrlResolver) {
	        _super.call(this);
	        this.styleUrlResolver = styleUrlResolver;
	    }
	    NativeShadowDomStrategy.prototype.prepareShadowRoot = function (el) {
	        return dom_adapter_1.DOM.createShadowRoot(el);
	    };
	    NativeShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleEl) {
	        var cssText = dom_adapter_1.DOM.getText(styleEl);
	        cssText = this.styleUrlResolver.resolveUrls(cssText, templateUrl);
	        dom_adapter_1.DOM.setText(styleEl, cssText);
	        return null;
	    };
	    return NativeShadowDomStrategy;
	})(shadow_dom_strategy_1.ShadowDomStrategy);
	exports.NativeShadowDomStrategy = NativeShadowDomStrategy;
	exports.__esModule = true;
	//# sourceMappingURL=native_shadow_dom_strategy.js.map

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var async_1 = __webpack_require__(155);
	var dom_adapter_1 = __webpack_require__(163);
	var emulated_unscoped_shadow_dom_strategy_1 = __webpack_require__(214);
	var util_1 = __webpack_require__(216);
	/**
	 * This strategy emulates the Shadow DOM for the templates, styles **included**:
	 * - components templates are added as children of their component element,
	 * - both the template and the styles are modified so that styles are scoped to the component
	 *   they belong to,
	 * - styles are moved from the templates to the styleHost (i.e. the document head).
	 *
	 * Notes:
	 * - styles are scoped to their component and will apply only to it,
	 * - a common subset of shadow DOM selectors are supported,
	 * - see `ShadowCss` for more information and limitations.
	 */
	var EmulatedScopedShadowDomStrategy = (function (_super) {
	    __extends(EmulatedScopedShadowDomStrategy, _super);
	    function EmulatedScopedShadowDomStrategy(styleInliner, styleUrlResolver, styleHost) {
	        _super.call(this, styleUrlResolver, styleHost);
	        this.styleInliner = styleInliner;
	    }
	    EmulatedScopedShadowDomStrategy.prototype.processStyleElement = function (hostComponentId, templateUrl, styleEl) {
	        var cssText = dom_adapter_1.DOM.getText(styleEl);
	        cssText = this.styleUrlResolver.resolveUrls(cssText, templateUrl);
	        var inlinedCss = this.styleInliner.inlineImports(cssText, templateUrl);
	        if (async_1.PromiseWrapper.isPromise(inlinedCss)) {
	            dom_adapter_1.DOM.setText(styleEl, '');
	            return inlinedCss.then(function (css) {
	                css = util_1.shimCssForComponent(css, hostComponentId);
	                dom_adapter_1.DOM.setText(styleEl, css);
	            });
	        } else {
	            var css = util_1.shimCssForComponent(inlinedCss, hostComponentId);
	            dom_adapter_1.DOM.setText(styleEl, css);
	            dom_adapter_1.DOM.remove(styleEl);
	            util_1.insertStyleElement(this.styleHost, styleEl);
	            return null;
	        }
	    };
	    EmulatedScopedShadowDomStrategy.prototype.processElement = function (hostComponentId, elementComponentId, element) {
	        // Shim the element as a child of the compiled component
	        if (lang_1.isPresent(hostComponentId)) {
	            var contentAttribute = util_1.getContentAttribute(util_1.getComponentId(hostComponentId));
	            dom_adapter_1.DOM.setAttribute(element, contentAttribute, '');
	        }
	        // If the current element is also a component, shim it as a host
	        if (lang_1.isPresent(elementComponentId)) {
	            var hostAttribute = util_1.getHostAttribute(util_1.getComponentId(elementComponentId));
	            dom_adapter_1.DOM.setAttribute(element, hostAttribute, '');
	        }
	    };
	    return EmulatedScopedShadowDomStrategy;
	})(emulated_unscoped_shadow_dom_strategy_1.EmulatedUnscopedShadowDomStrategy);
	exports.EmulatedScopedShadowDomStrategy = EmulatedScopedShadowDomStrategy;
	exports.__esModule = true;
	//# sourceMappingURL=emulated_scoped_shadow_dom_strategy.js.map

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	function __export(m) {
	  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	/**
	 * @module
	 * @public
	 * @description
	 *
	 * Annotations provide the additional information that Angular requires in order to run your
	 * application. This module
	 * contains {@link Component}, {@link Directive}, and {@link View} annotations, as well as {@link
	 * Parent} and {@link Ancestor} annotations that are
	 * used by Angular to resolve dependencies.
	 *
	 */
	__export(__webpack_require__(250));
	__export(__webpack_require__(251));
	exports.__esModule = true;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This indirection is needed to free up Component, etc symbols in the public API
	 * to be used by the decorator versions of these annotations.
	 */
	var annotations_1 = __webpack_require__(120);
	exports.ComponentAnnotation = annotations_1.Component;
	exports.DirectiveAnnotation = annotations_1.Directive;
	exports.onDestroy = annotations_1.onDestroy;
	exports.onChange = annotations_1.onChange;
	exports.onAllChangesDone = annotations_1.onAllChangesDone;
	exports.__esModule = true;
	//# sourceMappingURL=annotations.js.map

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var annotations_1 = __webpack_require__(250);
	var view_1 = __webpack_require__(204);
	var visibility_1 = __webpack_require__(203);
	var di_1 = __webpack_require__(246);
	var decorators_1 = __webpack_require__(127);
	/* from annotations */
	exports.Component = decorators_1.makeDecorator(annotations_1.ComponentAnnotation);
	exports.Directive = decorators_1.makeDecorator(annotations_1.DirectiveAnnotation);
	/* from view */
	exports.View = decorators_1.makeDecorator(view_1.ViewAnnotation);
	/* from visibility */
	exports.Self = decorators_1.makeParamDecorator(visibility_1.SelfAnnotation);
	exports.Parent = decorators_1.makeParamDecorator(visibility_1.ParentAnnotation);
	exports.Ancestor = decorators_1.makeParamDecorator(visibility_1.AncestorAnnotation);
	exports.Unbounded = decorators_1.makeParamDecorator(visibility_1.UnboundedAnnotation);
	/* from di */
	exports.Attribute = decorators_1.makeParamDecorator(di_1.AttributeAnnotation);
	exports.Query = decorators_1.makeParamDecorator(di_1.QueryAnnotation);
	exports.__esModule = true;
	//# sourceMappingURL=decorators.js.map

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module
	 * @public
	 * @description
	 * Common directives shipped with Angular.
	 */
	function __export(m) {
	  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	var lang_1 = __webpack_require__(118);
	var ng_for_1 = __webpack_require__(254);
	var ng_if_1 = __webpack_require__(255);
	var ng_non_bindable_1 = __webpack_require__(256);
	var ng_switch_1 = __webpack_require__(257);
	__export(__webpack_require__(253));
	__export(__webpack_require__(254));
	__export(__webpack_require__(255));
	__export(__webpack_require__(256));
	__export(__webpack_require__(257));
	/**
	 * A collection of the Angular core directives that are likely to be used in each and every Angular
	 * application.
	 *
	 * This collection can be used to quickly enumerate all the built-in directives in the `@View`
	 * annotation. For example,
	 * instead of writing:
	 *
	 * ```
	 * import {If, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault} from 'angular2/angular2';
	 * import {OtherDirective} from 'myDirectives';
	 *
	 * @Component({
	 *  selector: 'my-component'
	 * })
	 * @View({
	 *   templateUrl: 'myComponent.html',
	 *   directives: [If, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 * one could enumerate all the core directives at once:
	 *
	 * ```
	 * import {coreDirectives} from 'angular2/angular2';
	 * import {OtherDirective} from 'myDirectives';
	 *
	 * @Component({
	 *  selector: 'my-component'
	 * })
	 * @View({
	 *   templateUrl: 'myComponent.html',
	 *   directives: [coreDirectives, OtherDirective]
	 * })
	 * export class MyComponent {
	 *   ...
	 * }
	 * ```
	 *
	 */
	exports.coreDirectives = lang_1.CONST_EXPR([ng_for_1.NgFor, ng_if_1.NgIf, ng_non_bindable_1.NgNonBindable, ng_switch_1.NgSwitch, ng_switch_1.NgSwitchWhen, ng_switch_1.NgSwitchDefault]);
	exports.__esModule = true;
	//# sourceMappingURL=directives.js.map

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(249);
	var core_1 = __webpack_require__(201);
	var lang_1 = __webpack_require__(118);
	var dom_adapter_1 = __webpack_require__(163);
	var CSSClass = (function () {
	    function CSSClass(ngEl) {
	        this._domEl = ngEl.domElement;
	    }
	    CSSClass.prototype._toggleClass = function (className, enabled) {
	        if (enabled) {
	            dom_adapter_1.DOM.addClass(this._domEl, className);
	        } else {
	            dom_adapter_1.DOM.removeClass(this._domEl, className);
	        }
	    };
	    Object.defineProperty(CSSClass.prototype, "iterableChanges", {
	        set: function set(changes) {
	            var _this = this;
	            if (lang_1.isPresent(changes)) {
	                changes.forEachAddedItem(function (record) {
	                    _this._toggleClass(record.key, record.currentValue);
	                });
	                changes.forEachChangedItem(function (record) {
	                    _this._toggleClass(record.key, record.currentValue);
	                });
	                changes.forEachRemovedItem(function (record) {
	                    if (record.previousValue) {
	                        dom_adapter_1.DOM.removeClass(_this._domEl, record.key);
	                    }
	                });
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    CSSClass = __decorate([annotations_1.Directive({ selector: "[class]", properties: { "iterableChanges": "class | keyValDiff" } }), __metadata("design:paramtypes", [core_1.ElementRef])], CSSClass);
	    return CSSClass;
	})();
	exports.CSSClass = CSSClass;
	exports.__esModule = true;
	//# sourceMappingURL=class.js.map

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(249);
	var core_1 = __webpack_require__(201);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	/**
	 * The `For` directive instantiates a template once per item from an iterable. The context for each
	 * instantiated template inherits from the outer context with the given loop variable set to the
	 * current item from the iterable.
	 *
	 * It is possible to alias the `index` to a local variable that will be set to the current loop
	 * iteration in the template context.
	 *
	 * When the contents of the iterator changes, `For` makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * # Example
	 *
	 * ```
	 * <ul>
	 *   <li *ng-for="#error of errors; #i = index">
	 *     Error {{i}} of {{errors.length}}: {{error.message}}
	 *   </li>
	 * </ul>
	 * ```
	 *
	 * # Syntax
	 *
	 * - `<li *ng-for="#item of items; #i = index">...</li>`
	 * - `<li template="ng-for #item of items; #i = index">...</li>`
	 * - `<template [ng-for] #item [ng-for-of]="items" #i="index"><li>...</li></template>`
	 *
	 * @exportedAs angular2/directives
	 */
	var NgFor = (function () {
	    function NgFor(viewContainer, protoViewRef) {
	        this.viewContainer = viewContainer;
	        this.protoViewRef = protoViewRef;
	    }
	    Object.defineProperty(NgFor.prototype, "iterableChanges", {
	        set: function set(changes) {
	            if (lang_1.isBlank(changes)) {
	                this.viewContainer.clear();
	                return;
	            }
	            // TODO(rado): check if change detection can produce a change record that is
	            // easier to consume than current.
	            var recordViewTuples = [];
	            changes.forEachRemovedItem(function (removedRecord) {
	                return collection_1.ListWrapper.push(recordViewTuples, new RecordViewTuple(removedRecord, null));
	            });
	            changes.forEachMovedItem(function (movedRecord) {
	                return collection_1.ListWrapper.push(recordViewTuples, new RecordViewTuple(movedRecord, null));
	            });
	            var insertTuples = NgFor.bulkRemove(recordViewTuples, this.viewContainer);
	            changes.forEachAddedItem(function (addedRecord) {
	                return collection_1.ListWrapper.push(insertTuples, new RecordViewTuple(addedRecord, null));
	            });
	            NgFor.bulkInsert(insertTuples, this.viewContainer, this.protoViewRef);
	            for (var i = 0; i < insertTuples.length; i++) {
	                this.perViewChange(insertTuples[i].view, insertTuples[i].record);
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgFor.prototype.perViewChange = function (view, record) {
	        view.setLocal("$implicit", record.item);
	        view.setLocal("index", record.currentIndex);
	    };
	    NgFor.bulkRemove = function (tuples, viewContainer) {
	        tuples.sort(function (a, b) {
	            return a.record.previousIndex - b.record.previousIndex;
	        });
	        var movedTuples = [];
	        for (var i = tuples.length - 1; i >= 0; i--) {
	            var tuple = tuples[i];
	            // separate moved views from removed views.
	            if (lang_1.isPresent(tuple.record.currentIndex)) {
	                tuple.view = viewContainer.detach(tuple.record.previousIndex);
	                collection_1.ListWrapper.push(movedTuples, tuple);
	            } else {
	                viewContainer.remove(tuple.record.previousIndex);
	            }
	        }
	        return movedTuples;
	    };
	    NgFor.bulkInsert = function (tuples, viewContainer, protoViewRef) {
	        tuples.sort(function (a, b) {
	            return a.record.currentIndex - b.record.currentIndex;
	        });
	        for (var i = 0; i < tuples.length; i++) {
	            var tuple = tuples[i];
	            if (lang_1.isPresent(tuple.view)) {
	                viewContainer.insert(tuple.view, tuple.record.currentIndex);
	            } else {
	                tuple.view = viewContainer.create(protoViewRef, tuple.record.currentIndex);
	            }
	        }
	        return tuples;
	    };
	    NgFor = __decorate([annotations_1.Directive({ selector: "[ng-for][ng-for-of]", properties: { "iterableChanges": "ngForOf | iterableDiff" } }), __metadata("design:paramtypes", [core_1.ViewContainerRef, core_1.ProtoViewRef])], NgFor);
	    return NgFor;
	})();
	exports.NgFor = NgFor;
	var RecordViewTuple = (function () {
	    function RecordViewTuple(record, view) {
	        this.record = record;
	        this.view = view;
	    }
	    return RecordViewTuple;
	})();
	exports.__esModule = true;
	//# sourceMappingURL=ng_for.js.map

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(249);
	var core_1 = __webpack_require__(201);
	var lang_1 = __webpack_require__(118);
	/**
	 * Removes or recreates a portion of the DOM tree based on an {expression}.
	 *
	 * If the expression assigned to `if` evaluates to a false value then the element is removed from
	 * the
	 * DOM, otherwise a clone of the element is reinserted into the DOM.
	 *
	 * # Example:
	 *
	 * ```
	 * <div *ng-if="errorCount > 0" class="error">
	 *   <!-- Error message displayed when the errorCount property on the current context is greater
	 * than 0. -->
	 *   {{errorCount}} errors detected
	 * </div>
	 * ```
	 *
	 * # Syntax
	 *
	 * - `<div *ng-if="condition">...</div>`
	 * - `<div template="ng-if condition">...</div>`
	 * - `<template [ng-if]="condition"><div>...</div></template>`
	 *
	 * @exportedAs angular2/directives
	 */
	var NgIf = (function () {
	    function NgIf(viewContainer, protoViewRef) {
	        this.viewContainer = viewContainer;
	        this.prevCondition = null;
	        this.protoViewRef = protoViewRef;
	    }
	    Object.defineProperty(NgIf.prototype, "ngIf", {
	        set: function set(newCondition /* boolean */) {
	            if (newCondition && (lang_1.isBlank(this.prevCondition) || !this.prevCondition)) {
	                this.prevCondition = true;
	                this.viewContainer.create(this.protoViewRef);
	            } else if (!newCondition && (lang_1.isBlank(this.prevCondition) || this.prevCondition)) {
	                this.prevCondition = false;
	                this.viewContainer.clear();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgIf = __decorate([annotations_1.Directive({ selector: "[ng-if]", properties: { "ngIf": "ngIf" } }), __metadata("design:paramtypes", [core_1.ViewContainerRef, core_1.ProtoViewRef])], NgIf);
	    return NgIf;
	})();
	exports.NgIf = NgIf;
	exports.__esModule = true;
	//# sourceMappingURL=ng_if.js.map

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var annotations_1 = __webpack_require__(249);
	/**
	 * The `NgNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * Example:
	 *
	 * ```
	 * <div>Normal: {{1 + 2}}</div> // output "Normal: 3"
	 * <div non-bindable>Ignored: {{1 + 2}}</div> // output "Ignored: {{1 + 2}}"
	 * ```
	 *
	 * @exportedAs angular2/directives
	 */
	var NgNonBindable = (function () {
	    function NgNonBindable() {}
	    NgNonBindable = __decorate([annotations_1.Directive({ selector: "[ng-non-bindable]", compileChildren: false }), __metadata("design:paramtypes", [])], NgNonBindable);
	    return NgNonBindable;
	})();
	exports.NgNonBindable = NgNonBindable;
	exports.__esModule = true;
	//# sourceMappingURL=ng_non_bindable.js.map

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = this && this.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var annotations_1 = __webpack_require__(249);
	var core_1 = __webpack_require__(201);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var SwitchView = (function () {
	    function SwitchView(viewContainerRef, protoViewRef) {
	        this._protoViewRef = protoViewRef;
	        this._viewContainerRef = viewContainerRef;
	    }
	    SwitchView.prototype.create = function () {
	        this._viewContainerRef.create(this._protoViewRef);
	    };
	    SwitchView.prototype.destroy = function () {
	        this._viewContainerRef.clear();
	    };
	    return SwitchView;
	})();
	exports.SwitchView = SwitchView;
	/**
	 * The `NgSwitch` directive is used to conditionally swap DOM structure on your template based on a
	 * scope expression.
	 * Elements within `NgSwitch` but without `NgSwitchWhen` or `NgSwitchDefault` directives will be
	 * preserved at the location as specified in the template.
	 *
	 * `NgSwitch` simply chooses nested elements and makes them visible based on which element matches
	 * the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`[ng-switch]="..."` attribute**),
	 * define any inner elements inside of the directive and place a `[ng-switch-when]` attribute per
	 * element.
	 * The when attribute is used to inform NgSwitch which element to display when the expression is
	 * evaluated. If a matching expression is not found via a when attribute then an element with the
	 * default attribute is displayed.
	 *
	 * # Example:
	 *
	 * ```
	 * <ANY [ng-switch]="expression">
	 *   <template [ng-switch-when]="whenExpression1">...</template>
	 *   <template [ng-switch-when]="whenExpression1">...</template>
	 *   <template [ng-switch-default]>...</template>
	 * </ANY>
	 * ```
	 *
	 * @exportedAs angular2/directives
	 */
	var NgSwitch = (function () {
	    function NgSwitch() {
	        this._valueViews = collection_1.MapWrapper.create();
	        this._activeViews = collection_1.ListWrapper.create();
	        this._useDefault = false;
	    }
	    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	        set: function set(value) {
	            // Empty the currently active ViewContainers
	            this._emptyAllActiveViews();
	            // Add the ViewContainers matching the value (with a fallback to default)
	            this._useDefault = false;
	            var views = collection_1.MapWrapper.get(this._valueViews, value);
	            if (lang_1.isBlank(views)) {
	                this._useDefault = true;
	                views = lang_1.normalizeBlank(collection_1.MapWrapper.get(this._valueViews, _whenDefault));
	            }
	            this._activateViews(views);
	            this._switchValue = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgSwitch.prototype._onWhenValueChanged = function (oldWhen, newWhen, view) {
	        this._deregisterView(oldWhen, view);
	        this._registerView(newWhen, view);
	        if (oldWhen === this._switchValue) {
	            view.destroy();
	            collection_1.ListWrapper.remove(this._activeViews, view);
	        } else if (newWhen === this._switchValue) {
	            if (this._useDefault) {
	                this._useDefault = false;
	                this._emptyAllActiveViews();
	            }
	            view.create();
	            collection_1.ListWrapper.push(this._activeViews, view);
	        }
	        // Switch to default when there is no more active ViewContainers
	        if (this._activeViews.length === 0 && !this._useDefault) {
	            this._useDefault = true;
	            this._activateViews(collection_1.MapWrapper.get(this._valueViews, _whenDefault));
	        }
	    };
	    NgSwitch.prototype._emptyAllActiveViews = function () {
	        var activeContainers = this._activeViews;
	        for (var i = 0; i < activeContainers.length; i++) {
	            activeContainers[i].destroy();
	        }
	        this._activeViews = collection_1.ListWrapper.create();
	    };
	    NgSwitch.prototype._activateViews = function (views) {
	        // TODO(vicb): assert(this._activeViews.length === 0);
	        if (lang_1.isPresent(views)) {
	            for (var i = 0; i < views.length; i++) {
	                views[i].create();
	            }
	            this._activeViews = views;
	        }
	    };
	    NgSwitch.prototype._registerView = function (value, view) {
	        var views = collection_1.MapWrapper.get(this._valueViews, value);
	        if (lang_1.isBlank(views)) {
	            views = collection_1.ListWrapper.create();
	            collection_1.MapWrapper.set(this._valueViews, value, views);
	        }
	        collection_1.ListWrapper.push(views, view);
	    };
	    NgSwitch.prototype._deregisterView = function (value, view) {
	        // `_whenDefault` is used a marker for non-registered whens
	        if (value == _whenDefault) return;
	        var views = collection_1.MapWrapper.get(this._valueViews, value);
	        if (views.length == 1) {
	            collection_1.MapWrapper["delete"](this._valueViews, value);
	        } else {
	            collection_1.ListWrapper.remove(views, view);
	        }
	    };
	    NgSwitch = __decorate([annotations_1.Directive({ selector: "[ng-switch]", properties: { "ngSwitch": "ngSwitch" } }), __metadata("design:paramtypes", [])], NgSwitch);
	    return NgSwitch;
	})();
	exports.NgSwitch = NgSwitch;
	/**
	 * Defines a case statement as an expression.
	 *
	 * If multiple `NgSwitchWhen` match the `NgSwitch` value, all of them are displayed.
	 *
	 * Example:
	 *
	 * ```
	 * // match against a context variable
	 * <template [ng-switch-when]="contextVariable">...</template>
	 *
	 * // match against a constant string
	 * <template [ng-switch-when]="'stringValue'">...</template>
	 * ```
	 *
	 * @exportedAs angular2/directives
	 */
	var NgSwitchWhen = (function () {
	    function NgSwitchWhen(viewContainer, protoViewRef, sswitch) {
	        // `_whenDefault` is used as a marker for a not yet initialized value
	        this._value = _whenDefault;
	        this._switch = sswitch;
	        this._view = new SwitchView(viewContainer, protoViewRef);
	    }
	    NgSwitchWhen.prototype.onDestroy = function () {
	        this._switch;
	    };
	    Object.defineProperty(NgSwitchWhen.prototype, "ngSwitchWhen", {
	        set: function set(value) {
	            this._switch._onWhenValueChanged(this._value, value, this._view);
	            this._value = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgSwitchWhen = __decorate([annotations_1.Directive({ selector: "[ng-switch-when]", properties: { "ngSwitchWhen": "ngSwitchWhen" } }), __param(2, annotations_1.Parent()), __metadata("design:paramtypes", [core_1.ViewContainerRef, core_1.ProtoViewRef, NgSwitch])], NgSwitchWhen);
	    return NgSwitchWhen;
	})();
	exports.NgSwitchWhen = NgSwitchWhen;
	/**
	 * Defines a default case statement.
	 *
	 * Default case statements are displayed when no `NgSwitchWhen` match the `switch` value.
	 *
	 * Example:
	 *
	 * ```
	 * <template [ng-switch-default]>...</template>
	 * ```
	 *
	 * @exportedAs angular2/directives
	 */
	var NgSwitchDefault = (function () {
	    function NgSwitchDefault(viewContainer, protoViewRef, sswitch) {
	        sswitch._registerView(_whenDefault, new SwitchView(viewContainer, protoViewRef));
	    }
	    NgSwitchDefault = __decorate([annotations_1.Directive({ selector: "[ng-switch-default]" }), __param(2, annotations_1.Parent()), __metadata("design:paramtypes", [core_1.ViewContainerRef, core_1.ProtoViewRef, NgSwitch])], NgSwitchDefault);
	    return NgSwitchDefault;
	})();
	exports.NgSwitchDefault = NgSwitchDefault;
	var _whenDefault = new Object();
	exports.__esModule = true;
	//# sourceMappingURL=ng_switch.js.map

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module
	 * @public
	 * @description
	 * This module is used for handling user input, by defining and building a {@link ControlGroup} that
	 * consists of
	 * {@link Control} objects, and mapping them onto the DOM. {@link Control} objects can then be used
	 * to read information
	 * from the form DOM elements.
	 *
	 * This module is not included in the `angular2` module; you must import the forms module
	 * explicitly.
	 *
	 */
	function __export(m) {
	  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}
	__export(__webpack_require__(259));
	__export(__webpack_require__(261));
	__export(__webpack_require__(260));
	__export(__webpack_require__(262));
	__export(__webpack_require__(263));
	exports.__esModule = true;
	//# sourceMappingURL=forms.js.map

/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = this && this.__extends || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() {
	        this.constructor = d;
	    }
	    __.prototype = b.prototype;
	    d.prototype = new __();
	};
	var lang_1 = __webpack_require__(118);
	var async_1 = __webpack_require__(155);
	var collection_1 = __webpack_require__(121);
	var validators_1 = __webpack_require__(260);
	/**
	 * Indicates that a Control is valid, i.e. that no errors exist in the input value.
	 *
	 * @exportedAs angular2/forms
	 */
	exports.VALID = 'VALID';
	/**
	 * Indicates that a Control is invalid, i.e. that an error exists in the input value.
	 *
	 * @exportedAs angular2/forms
	 */
	exports.INVALID = 'INVALID';
	function isControl(c) {
	    return c instanceof AbstractControl;
	}
	exports.isControl = isControl;
	/**
	 * Omitting from external API doc as this is really an abstract internal concept.
	 */
	var AbstractControl = (function () {
	    function AbstractControl(validator) {
	        this.validator = validator;
	        this._pristine = true;
	    }
	    Object.defineProperty(AbstractControl.prototype, 'value', {
	        get: function get() {
	            return this._value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, 'status', {
	        get: function get() {
	            return this._status;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, 'valid', {
	        get: function get() {
	            return this._status === exports.VALID;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, 'errors', {
	        get: function get() {
	            return this._errors;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, 'pristine', {
	        get: function get() {
	            return this._pristine;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, 'dirty', {
	        get: function get() {
	            return !this.pristine;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(AbstractControl.prototype, 'valueChanges', {
	        get: function get() {
	            return this._valueChanges;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    AbstractControl.prototype.setParent = function (parent) {
	        this._parent = parent;
	    };
	    AbstractControl.prototype._updateParent = function () {
	        if (lang_1.isPresent(this._parent)) {
	            this._parent._updateValue();
	        }
	    };
	    return AbstractControl;
	})();
	exports.AbstractControl = AbstractControl;
	/**
	 * Defines a part of a form that cannot be divided into other controls.
	 *
	 * `Control` is one of the three fundamental building blocks used to define forms in Angular, along
	 * with
	 * {@link ControlGroup} and {@link ControlArray}.
	 *
	 * @exportedAs angular2/forms
	 */
	var Control = (function (_super) {
	    __extends(Control, _super);
	    function Control(value, validator) {
	        if (validator === void 0) {
	            validator = validators_1.Validators.nullValidator;
	        }
	        _super.call(this, validator);
	        this._setValueErrorsStatus(value);
	        this._valueChanges = new async_1.EventEmitter();
	    }
	    Control.prototype.updateValue = function (value) {
	        this._setValueErrorsStatus(value);
	        this._pristine = false;
	        async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
	        this._updateParent();
	    };
	    Control.prototype._setValueErrorsStatus = function (value) {
	        this._value = value;
	        this._errors = this.validator(this);
	        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
	    };
	    return Control;
	})(AbstractControl);
	exports.Control = Control;
	/**
	 * Defines a part of a form, of fixed length, that can contain other controls.
	 *
	 * A ControlGroup aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls
	 * in a group is invalid, the entire group is invalid. Similarly, if a control changes its value,
	 * the entire group
	 * changes as well.
	 *
	 * `ControlGroup` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with
	 * {@link Control} and {@link ControlArray}. {@link ControlArray} can also contain other controls,
	 * but is of variable
	 * length.
	 *
	 * @exportedAs angular2/forms
	 */
	var ControlGroup = (function (_super) {
	    __extends(ControlGroup, _super);
	    function ControlGroup(controls, optionals, validator) {
	        if (optionals === void 0) {
	            optionals = null;
	        }
	        if (validator === void 0) {
	            validator = validators_1.Validators.group;
	        }
	        _super.call(this, validator);
	        this.controls = controls;
	        this._optionals = lang_1.isPresent(optionals) ? optionals : {};
	        this._valueChanges = new async_1.EventEmitter();
	        this._setParentForControls();
	        this._setValueErrorsStatus();
	    }
	    ControlGroup.prototype.include = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, true);
	        this._updateValue();
	    };
	    ControlGroup.prototype.exclude = function (controlName) {
	        collection_1.StringMapWrapper.set(this._optionals, controlName, false);
	        this._updateValue();
	    };
	    ControlGroup.prototype.contains = function (controlName) {
	        var c = collection_1.StringMapWrapper.contains(this.controls, controlName);
	        return c && this._included(controlName);
	    };
	    ControlGroup.prototype._setParentForControls = function () {
	        var _this = this;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
	            control.setParent(_this);
	        });
	    };
	    ControlGroup.prototype._updateValue = function () {
	        this._setValueErrorsStatus();
	        this._pristine = false;
	        async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
	        this._updateParent();
	    };
	    ControlGroup.prototype._setValueErrorsStatus = function () {
	        this._value = this._reduceValue();
	        this._errors = this.validator(this);
	        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
	    };
	    ControlGroup.prototype._reduceValue = function () {
	        return this._reduceChildren({}, function (acc, control, name) {
	            acc[name] = control.value;
	            return acc;
	        });
	    };
	    ControlGroup.prototype._reduceChildren = function (initValue, fn) {
	        var _this = this;
	        var res = initValue;
	        collection_1.StringMapWrapper.forEach(this.controls, function (control, name) {
	            if (_this._included(name)) {
	                res = fn(res, control, name);
	            }
	        });
	        return res;
	    };
	    ControlGroup.prototype._included = function (controlName) {
	        var isOptional = collection_1.StringMapWrapper.contains(this._optionals, controlName);
	        return !isOptional || collection_1.StringMapWrapper.get(this._optionals, controlName);
	    };
	    return ControlGroup;
	})(AbstractControl);
	exports.ControlGroup = ControlGroup;
	/**
	 * Defines a part of a form, of variable length, that can contain other controls.
	 *
	 * A `ControlArray` aggregates the values and errors of each {@link Control} in the group. Thus, if
	 * one of the controls
	 * in a group is invalid, the entire group is invalid. Similarly, if a control changes its value,
	 * the entire group
	 * changes as well.
	 *
	 * `ControlArray` is one of the three fundamental building blocks used to define forms in Angular,
	 * along with
	 * {@link Control} and {@link ControlGroup}. {@link ControlGroup} can also contain other controls,
	 * but is of fixed
	 * length.
	 *
	 * @exportedAs angular2/forms
	 */
	var ControlArray = (function (_super) {
	    __extends(ControlArray, _super);
	    function ControlArray(controls, validator) {
	        if (validator === void 0) {
	            validator = validators_1.Validators.array;
	        }
	        _super.call(this, validator);
	        this.controls = controls;
	        this._valueChanges = new async_1.EventEmitter();
	        this._setParentForControls();
	        this._setValueErrorsStatus();
	    }
	    ControlArray.prototype.at = function (index) {
	        return this.controls[index];
	    };
	    ControlArray.prototype.push = function (control) {
	        collection_1.ListWrapper.push(this.controls, control);
	        control.setParent(this);
	        this._updateValue();
	    };
	    ControlArray.prototype.insert = function (index, control) {
	        collection_1.ListWrapper.insert(this.controls, index, control);
	        control.setParent(this);
	        this._updateValue();
	    };
	    ControlArray.prototype.removeAt = function (index) {
	        collection_1.ListWrapper.removeAt(this.controls, index);
	        this._updateValue();
	    };
	    Object.defineProperty(ControlArray.prototype, 'length', {
	        get: function get() {
	            return this.controls.length;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ControlArray.prototype._updateValue = function () {
	        this._setValueErrorsStatus();
	        this._pristine = false;
	        async_1.ObservableWrapper.callNext(this._valueChanges, this._value);
	        this._updateParent();
	    };
	    ControlArray.prototype._setParentForControls = function () {
	        var _this = this;
	        collection_1.ListWrapper.forEach(this.controls, function (control) {
	            control.setParent(_this);
	        });
	    };
	    ControlArray.prototype._setValueErrorsStatus = function () {
	        this._value = collection_1.ListWrapper.map(this.controls, function (c) {
	            return c.value;
	        });
	        this._errors = this.validator(this);
	        this._status = lang_1.isPresent(this._errors) ? exports.INVALID : exports.VALID;
	    };
	    return ControlArray;
	})(AbstractControl);
	exports.ControlArray = ControlArray;
	exports.__esModule = true;
	//# sourceMappingURL=model.js.map

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	/**
	 * Provides a set of validators used by form controls.
	 *
	 * # Example
	 *
	 * ```
	 * var loginControl = new Control("", Validators.required)
	 * ```
	 *
	 * @exportedAs angular2/forms
	 */
	var Validators = (function () {
	    function Validators() {}
	    Validators.required = function (c) {
	        return lang_1.isBlank(c.value) || c.value == '' ? { 'required': true } : null;
	    };
	    Validators.nullValidator = function (c) {
	        return null;
	    };
	    Validators.compose = function (validators) {
	        return function (c) {
	            var res = collection_1.ListWrapper.reduce(validators, function (res, validator) {
	                var errors = validator(c);
	                return lang_1.isPresent(errors) ? collection_1.StringMapWrapper.merge(res, errors) : res;
	            }, {});
	            return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	        };
	    };
	    Validators.group = function (c) {
	        var res = {};
	        collection_1.StringMapWrapper.forEach(c.controls, function (control, name) {
	            if (c.contains(name) && lang_1.isPresent(control.errors)) {
	                Validators._mergeErrors(control, res);
	            }
	        });
	        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	    };
	    Validators.array = function (c) {
	        var res = {};
	        collection_1.ListWrapper.forEach(c.controls, function (control) {
	            if (lang_1.isPresent(control.errors)) {
	                Validators._mergeErrors(control, res);
	            }
	        });
	        return collection_1.StringMapWrapper.isEmpty(res) ? null : res;
	    };
	    Validators._mergeErrors = function (control, res) {
	        collection_1.StringMapWrapper.forEach(control.errors, function (value, error) {
	            if (!collection_1.StringMapWrapper.contains(res, error)) {
	                res[error] = [];
	            }
	            collection_1.ListWrapper.push(res[error], control);
	        });
	    };
	    return Validators;
	})();
	exports.Validators = Validators;
	exports.__esModule = true;
	//# sourceMappingURL=validators.js.map

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = this && this.__param || function (paramIndex, decorator) {
	    return function (target, key) {
	        decorator(target, key, paramIndex);
	    };
	};
	var decorators_1 = __webpack_require__(251);
	var decorators_2 = __webpack_require__(125);
	var element_ref_1 = __webpack_require__(162);
	var api_1 = __webpack_require__(165);
	var lang_1 = __webpack_require__(118);
	var collection_1 = __webpack_require__(121);
	var model_1 = __webpack_require__(259);
	var validators_1 = __webpack_require__(260);
	function _lookupControl(groupDirective, controlOrName) {
	    if (model_1.isControl(controlOrName)) {
	        return controlOrName;
	    }
	    if (lang_1.isBlank(groupDirective)) {
	        throw new lang_1.BaseException("No control group found for \"" + controlOrName + "\"");
	    }
	    var control = groupDirective.findControl(controlOrName);
	    if (lang_1.isBlank(control)) {
	        throw new lang_1.BaseException("Cannot find control \"" + controlOrName + "\"");
	    }
	    return control;
	}
	/**
	 * Binds a control group to a DOM element.
	 *
	 * # Example
	 *
	 * In this example, we bind the control group to the form element, and we bind the login and
	 * password controls to the
	 * login and password elements.
	 *
	 * Here we use {@link formDirectives}, rather than importing each form directive individually, e.g.
	 * `ControlDirective`, `ControlGroupDirective`. This is just a shorthand for the same end result.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      inline: "<form [control-group]='loginForm'>" +
	 *              "Login <input type='text' control='login'>" +
	 *              "Password <input type='password' control='password'>" +
	 *              "<button (click)="onLogin()">Login</button>" +
	 *              "</form>"
	 *      })
	 * class LoginComp {
	 *  loginForm:ControlGroup;
	 *
	 *  constructor() {
	 *    this.loginForm = new ControlGroup({
	 *      login: new Control(""),
	 *      password: new Control("")
	 *    });
	 *  }
	 *
	 *  onLogin() {
	 *    // this.loginForm.value
	 *  }
	 * }
	 *
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var ControlGroupDirective = (function () {
	    function ControlGroupDirective(groupDirective) {
	        this._groupDirective = groupDirective;
	        this._directives = collection_1.ListWrapper.create();
	    }
	    Object.defineProperty(ControlGroupDirective.prototype, "controlOrName", {
	        set: function set(controlOrName) {
	            this._controlOrName = controlOrName;
	            this._updateDomValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ControlGroupDirective.prototype._updateDomValue = function () {
	        collection_1.ListWrapper.forEach(this._directives, function (cd) {
	            return cd._updateDomValue();
	        });
	    };
	    ControlGroupDirective.prototype.addDirective = function (c) {
	        collection_1.ListWrapper.push(this._directives, c);
	    };
	    ControlGroupDirective.prototype.findControl = function (name) {
	        return this._getControlGroup().controls[name];
	    };
	    ControlGroupDirective.prototype._getControlGroup = function () {
	        return _lookupControl(this._groupDirective, this._controlOrName);
	    };
	    ControlGroupDirective = __decorate([decorators_1.Directive({ selector: "[control-group]", properties: { "controlOrName": "control-group" } }), __param(0, decorators_2.Optional()), __param(0, decorators_1.Ancestor()), __metadata("design:paramtypes", [ControlGroupDirective])], ControlGroupDirective);
	    return ControlGroupDirective;
	})();
	exports.ControlGroupDirective = ControlGroupDirective;
	/**
	 * Binds a control to a DOM element.
	 *
	 * # Example
	 *
	 * In this example, we bind the control to an input element. When the value of the input element
	 * changes, the value of
	 * the control will reflect that change. Likewise, if the value of the control changes, the input
	 * element reflects that
	 * change.
	 *
	 * Here we use {@link formDirectives}, rather than importing each form directive individually, e.g.
	 * `ControlDirective`, `ControlGroupDirective`. This is just a shorthand for the same end result.
	 *
	 *  ```
	 * @Component({selector: "login-comp"})
	 * @View({
	 *      directives: [formDirectives],
	 *      inline: "<input type='text' [control]='loginControl'>"
	 *      })
	 * class LoginComp {
	 *  loginControl:Control;
	 *
	 *  constructor() {
	 *    this.loginControl = new Control('');
	 *  }
	 * }
	 *
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var ControlDirective = (function () {
	    function ControlDirective(groupDirective) {
	        this._groupDirective = groupDirective;
	        this._controlOrName = null;
	        this.validator = validators_1.Validators.nullValidator;
	    }
	    Object.defineProperty(ControlDirective.prototype, "controlOrName", {
	        set: function set(controlOrName) {
	            this._controlOrName = controlOrName;
	            if (lang_1.isPresent(this._groupDirective)) {
	                this._groupDirective.addDirective(this);
	            }
	            var c = this._control();
	            c.validator = validators_1.Validators.compose([c.validator, this.validator]);
	            if (lang_1.isBlank(this.valueAccessor)) {
	                throw new lang_1.BaseException("Cannot find value accessor for control \"" + controlOrName + "\"");
	            }
	            this._updateDomValue();
	            this._setUpUpdateControlValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ControlDirective.prototype._updateDomValue = function () {
	        this.valueAccessor.writeValue(this._control().value);
	    };
	    ControlDirective.prototype._setUpUpdateControlValue = function () {
	        var _this = this;
	        this.valueAccessor.onChange = function (newValue) {
	            return _this._control().updateValue(newValue);
	        };
	    };
	    ControlDirective.prototype._control = function () {
	        return _lookupControl(this._groupDirective, this._controlOrName);
	    };
	    ControlDirective = __decorate([decorators_1.Directive({ selector: "[control]", properties: { "controlOrName": "control" } }), __param(0, decorators_2.Optional()), __param(0, decorators_1.Ancestor()), __metadata("design:paramtypes", [ControlGroupDirective])], ControlDirective);
	    return ControlDirective;
	})();
	exports.ControlDirective = ControlDirective;
	/**
	 * The default accessor for writing a value and listening to changes that is used by a {@link
	  * Control} directive.
	 *
	 * This is the default strategy that Angular uses when no other accessor is applied.
	 *
	 *  # Example
	 *  ```
	 *  <input type="text" [control]="loginControl">
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var DefaultValueAccessor = (function () {
	    function DefaultValueAccessor(cd, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.value = null;
	        this.onChange = function (_) {};
	        cd.valueAccessor = this;
	    }
	    DefaultValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.parentView.render, this._elementRef.boundElementIndex, "value", value);
	    };
	    DefaultValueAccessor = __decorate([decorators_1.Directive({
	        selector: "input:not([type=checkbox])[control],textarea[control]",
	        hostListeners: { "change": "onChange($event.target.value)", "input": "onChange($event.target.value)" },
	        hostProperties: { "value": "value" }
	    }), __metadata("design:paramtypes", [ControlDirective, element_ref_1.ElementRef, api_1.Renderer])], DefaultValueAccessor);
	    return DefaultValueAccessor;
	})();
	exports.DefaultValueAccessor = DefaultValueAccessor;
	/**
	 * The accessor for writing a value and listening to changes that is used by a {@link
	  * Control} directive.
	 *
	 * This is the default strategy that Angular uses when no other accessor is applied.
	 *
	 *  # Example
	 *  ```
	 *  <input type="text" [control]="loginControl">
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var SelectControlValueAccessor = (function () {
	    function SelectControlValueAccessor(cd, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.value = null;
	        this.onChange = function (_) {};
	        this.value = "";
	        cd.valueAccessor = this;
	    }
	    SelectControlValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.parentView.render, this._elementRef.boundElementIndex, "value", value);
	    };
	    SelectControlValueAccessor = __decorate([decorators_1.Directive({
	        selector: "select[control]",
	        hostListeners: { "change": "onChange($event.target.value)", "input": "onChange($event.target.value)" },
	        hostProperties: { "value": "value" }
	    }), __metadata("design:paramtypes", [ControlDirective, element_ref_1.ElementRef, api_1.Renderer])], SelectControlValueAccessor);
	    return SelectControlValueAccessor;
	})();
	exports.SelectControlValueAccessor = SelectControlValueAccessor;
	/**
	 * The accessor for writing a value and listening to changes on a checkbox input element.
	 *
	 *
	 *  # Example
	 *  ```
	 *  <input type="checkbox" [control]="rememberLogin">
	 *  ```
	 *
	 * @exportedAs angular2/forms
	 */
	var CheckboxControlValueAccessor = (function () {
	    function CheckboxControlValueAccessor(cd, _elementRef, _renderer) {
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        this.onChange = function (_) {};
	        cd.valueAccessor = this;
	    }
	    CheckboxControlValueAccessor.prototype.writeValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.parentView.render, this._elementRef.boundElementIndex, "checked", value);
	    };
	    CheckboxControlValueAccessor = __decorate([decorators_1.Directive({
	        selector: "input[type=checkbox][control]",
	        hostListeners: { "change": "onChange($event.target.checked)" },
	        hostProperties: { "checked": "checked" }
	    }), __metadata("design:paramtypes", [ControlDirective, element_ref_1.ElementRef, api_1.Renderer])], CheckboxControlValueAccessor);
	    return CheckboxControlValueAccessor;
	})();
	exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
	/**
	 *
	 * A list of all the form directives used as part of a `@View` annotation.
	 *
	 *  This is a shorthand for importing them each individually.
	 *
	 * @exportedAs angular2/forms
	 */
	exports.formDirectives = lang_1.CONST_EXPR([ControlGroupDirective, ControlDirective, CheckboxControlValueAccessor, DefaultValueAccessor, SelectControlValueAccessor]);
	exports.__esModule = true;
	//# sourceMappingURL=directives.js.map

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var __decorate = this && this.__decorate || function (decorators, target, key, desc) {
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
	    switch (arguments.length) {
	        case 2:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(o) || o;
	            }, target);
	        case 3:
	            return decorators.reduceRight(function (o, d) {
	                return (d && d(target, key), void 0);
	            }, void 0);
	        case 4:
	            return decorators.reduceRight(function (o, d) {
	                return d && d(target, key, o) || o;
	            }, desc);
	    }
	};
	var __metadata = this && this.__metadata || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var decorators_1 = __webpack_require__(251);
	var validators_1 = __webpack_require__(260);
	var directives_1 = __webpack_require__(261);
	var RequiredValidatorDirective = (function () {
	    function RequiredValidatorDirective(c) {
	        c.validator = validators_1.Validators.compose([c.validator, validators_1.Validators.required]);
	    }
	    RequiredValidatorDirective = __decorate([decorators_1.Directive({ selector: "[required]" }), __metadata("design:paramtypes", [directives_1.ControlDirective])], RequiredValidatorDirective);
	    return RequiredValidatorDirective;
	})();
	exports.RequiredValidatorDirective = RequiredValidatorDirective;
	exports.__esModule = true;
	//# sourceMappingURL=validator_directives.js.map

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var collection_1 = __webpack_require__(121);
	var lang_1 = __webpack_require__(118);
	var modelModule = __webpack_require__(259);
	/**
	 * Creates a form object from a user-specified configuration.
	 *
	 * # Example
	 *
	 * ```
	 * import {Component, View, bootstrap} from 'angular2/angular2';
	 * import {FormBuilder, Validators, formDirectives, ControlGroup} from 'angular2/forms';
	 *
	 * @Component({
	 *   selector: 'login-comp',
	 *   appInjector: [
	 *     FormBuilder
	 *   ]
	 * })
	 * @View({
	 *   template: `
	 *     <form [control-group]="loginForm">
	 *       Login <input control="login">
	 *
	 *       <div control-group="passwordRetry">
	 *         Password <input type="password" control="password">
	 *         Confirm password <input type="password" control="passwordConfirmation">
	 *       </div>
	 *     </form>
	 *   `,
	 *   directives: [
	 *     formDirectives
	 *   ]
	 * })
	 * class LoginComp {
	 *   loginForm: ControlGroup;
	 *
	 *   constructor(builder: FormBuilder) {
	 *     this.loginForm = builder.group({
	 *       login: ["", Validators.required],
	 *
	 *       passwordRetry: builder.group({
	 *         password: ["", Validators.required],
	 *         passwordConfirmation: ["", Validators.required]
	 *       })
	 *     });
	 *   }
	 * }
	 *
	 * bootstrap(LoginComp)
	 * ```
	 *
	 * This example creates a {@link ControlGroup} that consists of a `login` {@link Control}, and a
	 * nested
	 * {@link ControlGroup} that defines a `password` and a `passwordConfirmation` {@link Control}:
	 *
	 * ```
	 *  var loginForm = builder.group({
	 *    login: ["", Validators.required],
	 *
	 *    passwordRetry: builder.group({
	 *      password: ["", Validators.required],
	 *      passwordConfirmation: ["", Validators.required]
	 *    })
	 *  });
	 *
	 *  ```
	 * @exportedAs angular2/forms
	 */
	var FormBuilder = (function () {
	    function FormBuilder() {}
	    FormBuilder.prototype.group = function (controlsConfig, extra) {
	        if (extra === void 0) {
	            extra = null;
	        }
	        var controls = this._reduceControls(controlsConfig);
	        var optionals = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, 'optionals') : null;
	        var validator = lang_1.isPresent(extra) ? collection_1.StringMapWrapper.get(extra, 'validator') : null;
	        if (lang_1.isPresent(validator)) {
	            return new modelModule.ControlGroup(controls, optionals, validator);
	        } else {
	            return new modelModule.ControlGroup(controls, optionals);
	        }
	    };
	    FormBuilder.prototype.control = function (value, validator) {
	        if (validator === void 0) {
	            validator = null;
	        }
	        if (lang_1.isPresent(validator)) {
	            return new modelModule.Control(value, validator);
	        } else {
	            return new modelModule.Control(value);
	        }
	    };
	    FormBuilder.prototype.array = function (controlsConfig, validator) {
	        var _this = this;
	        if (validator === void 0) {
	            validator = null;
	        }
	        var controls = collection_1.ListWrapper.map(controlsConfig, function (c) {
	            return _this._createControl(c);
	        });
	        if (lang_1.isPresent(validator)) {
	            return new modelModule.ControlArray(controls, validator);
	        } else {
	            return new modelModule.ControlArray(controls);
	        }
	    };
	    FormBuilder.prototype._reduceControls = function (controlsConfig) {
	        var _this = this;
	        var controls = {};
	        collection_1.StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
	            controls[controlName] = _this._createControl(controlConfig);
	        });
	        return controls;
	    };
	    FormBuilder.prototype._createControl = function (controlConfig) {
	        if (controlConfig instanceof modelModule.Control || controlConfig instanceof modelModule.ControlGroup || controlConfig instanceof modelModule.ControlArray) {
	            return controlConfig;
	        } else if (collection_1.ListWrapper.isList(controlConfig)) {
	            var value = collection_1.ListWrapper.get(controlConfig, 0);
	            var validator = controlConfig.length > 1 ? controlConfig[1] : null;
	            return this.control(value, validator);
	        } else {
	            return this.control(controlConfig);
	        }
	    };
	    return FormBuilder;
	})();
	exports.FormBuilder = FormBuilder;
	exports.__esModule = true;
	//# sourceMappingURL=form_builder.js.map

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	var _ionicPlatformPlatform = __webpack_require__(265);

	var platformMode = _ionicPlatformPlatform.Platform.getMode();

	// Low-level: how the user will override
	// BackButton.config.bind.icon.value = 'ion-chevron-right'
	// BackButton.config._computeDefaultValue(BackButton.config.bind.icon)

	var IonicComponent = (function () {
	  function IonicComponent(ComponentClass, _ref) {
	    var properties = _ref.properties;
	    var bind = _ref.bind;
	    var enhanceRawElement = _ref.enhanceRawElement;
	    var delegates = _ref.delegates;
	    var propClasses = _ref.propClasses;

	    _classCallCheck(this, IonicComponent);

	    // TODO give errors if not providing valid delegates
	    ComponentClass.config = this;
	    this.componentCssName = util.pascalCaseToDashCase(ComponentClass.name);

	    this.properties = properties || (properties = {});

	    this.bind = bind || (bind = {});
	    for (var attrName in bind) {
	      var binding = bind[attrName];
	      if (util.isObject(binding)) {
	        binding.property || (binding.property = attrName);
	        this._computeDefaultValue(binding);
	      }
	    }

	    this.delegates = delegates || (delegates = {});
	    this.propClasses = propClasses || (propClasses = []);

	    // Whether to support raw element enhancement (for example, supporting <button>).
	    // We only do this if there is a matching style property on the element
	    this.enhanceRawElement = enhanceRawElement || false;

	    // for (let delegateName of delegates) {
	    //   let delegate = delegates[delegateName]
	    // }
	  }

	  _createClass(IonicComponent, [{
	    key: '_computeDefaultValue',
	    value: function _computeDefaultValue() {
	      var binding = arguments[0] === undefined ? {} : arguments[0];

	      var defaults = binding.defaults || {};
	      binding._defaultValue = binding.value || defaults[platformMode] || defaults.base;
	    }
	  }, {
	    key: 'invoke',
	    value: function invoke(instance) {
	      var config = this;

	      // For each property class, check if it exists on the element and add the
	      // corresponding classname for it, otherwise add it
	      var foundMatchingPropClass = false;
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = this.propClasses[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var propClass = _step.value;

	          if (_ionicUtil.dom.hasAttribute(instance.domElement, propClass)) {
	            _ionicUtil.dom.addClass(instance.domElement, '' + this.componentCssName + '-' + propClass);
	            foundMatchingPropClass = true;
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator['return']) {
	            _iterator['return']();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      // TODO: This worked fine for property-only buttons, but breaks with
	      // class, etc.
	      //
	      // If we want to enhance a raw element (for example, a button),
	      // only do it if we also have a matching prop class
	      //if(!foundMatchingPropClass && this.enhanceRawElement) {
	      // Don't enhace this raw element
	      //return;
	      //}

	      // Add the base element classes (ex, button and button-ios)
	      _ionicUtil.dom.addClass(instance.domElement, this.componentCssName, '' + this.componentCssName + '-' + platformMode);

	      // Check and apply and property classes (properties that should be
	      // converted to class names). For example, <button primary> should
	      // add the class button-primary

	      for (var attrName in this.bind) {
	        var binding = this.bind[attrName];
	        var defaultValue = binding._defaultValue;
	        if (!instance[binding.property] && defaultValue) {
	          instance[binding.property] = defaultValue;
	          instance.domElement.setAttribute(util.pascalCaseToDashCase(attrName), defaultValue);
	        }
	      }

	      return {
	        properties: this.properties,
	        getDelegate: function getDelegate(delegateName) {
	          var cases = (config.delegates || {})[delegateName] || [];
	          for (var i = 0; i < cases.length; i++) {
	            var delegateCase = cases[i];
	            if (util.isArray(delegateCase)) {
	              var _delegateCase = _slicedToArray(delegateCase, 2);

	              var check = _delegateCase[0];
	              var DelegateConstructor = _delegateCase[1];

	              if (check(instance)) {
	                return new DelegateConstructor(instance);
	              }
	            } else {
	              return new delegateCase(instance);
	            }
	          }
	        }
	      };
	    }
	  }]);

	  return IonicComponent;
	})();

	exports.IonicComponent = IonicComponent;
	// TODO recompute defaultValue when user possibly adds a binding

	/*
	@IonicComponent({
	  selector: 'ion-back-button',
	  properties: {
	    icon: {
	      ios: 'ion-back-ios',
	      android: 'ion-back-android',
	      default: 'ion-back'
	    }
	  }
	})
	*/

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	var registry = {};
	var defaultPlatform = undefined;
	var activePlatform = undefined;

	var PlatformController = (function () {
	  function PlatformController() {
	    _classCallCheck(this, PlatformController);
	  }

	  _createClass(PlatformController, [{
	    key: 'get',
	    value: function get() {
	      if (util.isUndefined(activePlatform)) {
	        this.set(this.detect());
	      }
	      return activePlatform || defaultPlatform;
	    }
	  }, {
	    key: 'getName',
	    value: function getName() {
	      return this.get().name;
	    }
	  }, {
	    key: 'getMode',
	    value: function getMode() {
	      var plt = this.get();
	      return plt.mode || plt.name;
	    }
	  }, {
	    key: 'register',
	    value: function register(platform) {
	      registry[platform.name] = platform;
	    }
	  }, {
	    key: 'set',
	    value: function set(platform) {
	      activePlatform = platform;

	      this._applyBodyClasses();
	    }
	  }, {
	    key: 'setDefault',
	    value: function setDefault(platform) {
	      defaultPlatform = platform;
	    }
	  }, {
	    key: 'isRegistered',
	    value: function isRegistered(platformName) {
	      return registry.some(function (platform) {
	        return platform.name === platformName;
	      });
	    }
	  }, {
	    key: 'detect',
	    value: function detect() {
	      for (var _name in registry) {
	        if (registry[_name].isMatch()) {
	          return registry[_name];
	        }
	      }
	      return null;
	    }
	  }, {
	    key: '_applyBodyClasses',
	    value: function _applyBodyClasses() {
	      if (!activePlatform) {
	        return;
	      }

	      util.dom.raf(function () {
	        document.body.classList.add('platform-' + activePlatform.name);
	      });
	    }
	  }]);

	  return PlatformController;
	})();

	var Platform = new PlatformController();

	exports.Platform = Platform;
	var ua = window.navigator.userAgent;
	var queryPlatform = util.getQuerystring('ionicplatform').toLowerCase();

	Platform.register({
	  name: 'android',
	  mode: 'md',
	  isMatch: function isMatch() {
	    return queryPlatform == 'android' || /android/i.test(ua);
	  }
	});

	Platform.register({
	  name: 'ios',
	  isMatch: function isMatch() {
	    return queryPlatform === 'ios' || /ipad|iphone|ipod/i.test(ua);
	  }
	});

	// Last case is a catch-all
	Platform.setDefault({
	  name: 'core'
	});

	Platform.set(Platform.detect());

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _ionicComponentsAsideExtensionsTypes = __webpack_require__(267);

	var types = _interopRequireWildcard(_ionicComponentsAsideExtensionsTypes);

	var _ionicComponentsAsideExtensionsGestures = __webpack_require__(268);

	var gestures = _interopRequireWildcard(_ionicComponentsAsideExtensionsGestures);

	var _ionicUtil = __webpack_require__(193);

	var _ionicConfigComponent = __webpack_require__(264

	/**
	 * TODO (?) add docs about how to have a root aside and a nested aside, then hide the root one
	 */

	);

	var Aside = (function () {
	  function Aside(elementRef) {
	    var _this = this;

	    _classCallCheck(this, _Aside);

	    this.domElement = elementRef.domElement;

	    this.opening = new _angular2Angular2.EventEmitter('opening');

	    // FIXME(ajoslin): have to wait for setTimeout for bindings to apply.
	    setTimeout(function () {
	      _this.side = _this.side || 'left';
	      _this.type = _this.type || 'reveal';

	      _this.domElement.setAttribute('side', _this.side);
	      _this.domElement.setAttribute('type', _this.type);

	      console.log('Aisde content', _this.content);

	      _this.config = Aside.config.invoke(_this);
	      _this.gestureDelegate = _this.config.getDelegate('gesture');
	      _this.typeDelegate = _this.config.getDelegate('type');
	    });

	    this.domElement.addEventListener('transitionend', function (ev) {
	      _this.setChanging(false);
	    });
	  }

	  var _Aside = Aside;

	  _createClass(_Aside, [{
	    key: 'getContentElement',
	    value: function getContentElement() {
	      return this.content.domElement;
	    }
	  }, {
	    key: 'setOpenAmt',
	    value: function setOpenAmt(v) {
	      this.opening.next(v);
	    }
	  }, {
	    key: 'setTransform',
	    value: function setTransform(transform) {
	      this.typeDelegate.setTransform(transform);
	    }
	  }, {
	    key: 'setSliding',
	    value: function setSliding(isSliding) {
	      if (isSliding !== this.isSliding) {
	        this.typeDelegate.setSliding(isSliding);
	      }
	    }
	  }, {
	    key: 'setChanging',
	    value: function setChanging(isChanging) {
	      if (isChanging !== this.isChanging) {
	        this.isChanging = isChanging;
	        this.domElement.classList[isChanging ? 'add' : 'remove']('changing');
	      }
	    }
	  }, {
	    key: 'setOpen',
	    value: function setOpen(isOpen) {
	      var _this2 = this;

	      if (isOpen !== this.isOpen) {
	        this.isOpen = isOpen;
	        this.setChanging(true);

	        // Set full or closed amount
	        this.setOpenAmt(isOpen ? 1 : 0);

	        return _ionicUtil.dom.rafPromise().then(function () {
	          _this2.typeDelegate.setOpen(isOpen);
	        });
	      }
	    }
	  }]);

	  Aside = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '<content></content>'
	  })(Aside) || Aside;
	  Aside = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-aside',
	    properties: {
	      content: 'content',
	      side: 'side',
	      dragThreshold: 'dragThreshold'
	    },
	    events: ['opening']
	  })(Aside) || Aside;
	  return Aside;
	})();

	exports.Aside = Aside;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef], Aside);

	new _ionicConfigComponent.IonicComponent(Aside, {
	  properties: {
	    side: {
	      value: 'left'
	    },
	    type: {
	      defaults: {
	        ios: 'reveal',
	        android: 'overlay',
	        core: 'overlay' }
	    },
	    dragThreshold: {},
	    content: {} },
	  delegates: {
	    gesture: [[function (instance) {
	      return instance.side == 'top';
	    }, gestures.TopAsideGesture], [function (instance) {
	      return instance.side == 'bottom';
	    }, gestures.BottomAsideGesture], [function (instance) {
	      return instance.side == 'right';
	    }, gestures.RightAsideGesture], [function (instance) {
	      return instance.side == 'left';
	    }, gestures.LeftAsideGesture]],
	    type: [[function (instance) {
	      return instance.type == 'overlay';
	    }, types.AsideTypeOverlay], [function (instance) {
	      return instance.type == 'reveal';
	    }, types.AsideTypeReveal], [function (instance) {
	      return instance.type == 'push';
	    }, types.AsideTypePush]]
	  }
	});

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _ionicComponentsAsideAside = __webpack_require__(266);

	// TODO use setters instead of direct dom manipulation
	var asideManipulator = {
	  setSliding: function setSliding(sliding) {
	    this.aside.domElement.classList[sliding ? 'add' : 'remove']('no-transition');
	  },
	  setOpen: function setOpen(open) {
	    this.aside.domElement.classList[open ? 'add' : 'remove']('open');
	  },
	  setTransform: function setTransform(t) {
	    this.aside.domElement.style.transform = t;
	  }
	};
	var contentManipulator = {
	  setSliding: function setSliding(sliding) {
	    this.aside.content.domElement.classList[sliding ? 'add' : 'remove']('no-transition');
	  },
	  setOpen: function setOpen(open) {
	    this.aside.content.domElement.classList[open ? 'add' : 'remove']('aside-open-' + this.aside.side);
	  },
	  setTransform: function setTransform(t) {
	    this.aside.content.domElement.style.transform = t;
	  }
	};

	var AsideType = function AsideType(aside) {
	  _classCallCheck(this, AsideType);

	  this.aside = aside;

	  //FIXME(ajoslin): have to wait for for bindings to apply in a component
	  setTimeout(function () {
	    aside.content.domElement.classList.add('aside-content');
	  });
	};

	exports.AsideType = AsideType;
	Reflect.defineMetadata('design:paramtypes', [_ionicComponentsAsideAside.Aside], AsideType);

	var AsideTypeOverlay = (function (_AsideType) {
	  function AsideTypeOverlay() {
	    _classCallCheck(this, AsideTypeOverlay);

	    if (_AsideType != null) {
	      _AsideType.apply(this, arguments);
	    }
	  }

	  _inherits(AsideTypeOverlay, _AsideType);

	  _createClass(AsideTypeOverlay, [{
	    key: 'setSliding',
	    value: function setSliding(sliding) {
	      asideManipulator.setSliding.call(this, sliding);
	    }
	  }, {
	    key: 'setOpen',
	    value: function setOpen(open) {
	      asideManipulator.setOpen.call(this, open);
	    }
	  }, {
	    key: 'setTransform',
	    value: function setTransform(t) {
	      asideManipulator.setTransform.call(this, t);
	    }
	  }]);

	  return AsideTypeOverlay;
	})(AsideType);

	exports.AsideTypeOverlay = AsideTypeOverlay;

	var AsideTypePush = (function (_AsideType2) {
	  function AsideTypePush() {
	    _classCallCheck(this, AsideTypePush);

	    if (_AsideType2 != null) {
	      _AsideType2.apply(this, arguments);
	    }
	  }

	  _inherits(AsideTypePush, _AsideType2);

	  _createClass(AsideTypePush, [{
	    key: 'setSliding',
	    value: function setSliding(sliding) {
	      asideManipulator.setSliding.call(this, sliding);
	      contentManipulator.setSliding.call(this, sliding);
	    }
	  }, {
	    key: 'setOpen',
	    value: function setOpen(open) {
	      asideManipulator.setOpen.call(this, open);
	      contentManipulator.setOpen.call(this, open);
	    }
	  }, {
	    key: 'setTransform',
	    value: function setTransform(t) {
	      asideManipulator.setTransform.call(this, t);
	      contentManipulator.setTransform.call(this, t);
	    }
	  }]);

	  return AsideTypePush;
	})(AsideType);

	exports.AsideTypePush = AsideTypePush;

	var AsideTypeReveal = (function (_AsideType3) {
	  function AsideTypeReveal() {
	    _classCallCheck(this, AsideTypeReveal);

	    if (_AsideType3 != null) {
	      _AsideType3.apply(this, arguments);
	    }
	  }

	  _inherits(AsideTypeReveal, _AsideType3);

	  _createClass(AsideTypeReveal, [{
	    key: 'setSliding',
	    value: function setSliding(sliding) {
	      contentManipulator.setSliding.call(this, sliding);
	    }
	  }, {
	    key: 'setOpen',
	    value: function setOpen(sliding) {
	      contentManipulator.setOpen.call(this, sliding);
	    }
	  }, {
	    key: 'setTransform',
	    value: function setTransform(t) {
	      contentManipulator.setTransform.call(this, t);
	    }
	  }]);

	  return AsideTypeReveal;
	})(AsideType);

	exports.AsideTypeReveal = AsideTypeReveal;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _ionicComponentsAsideAside = __webpack_require__(266);

	//TODO: figure out way to get rid of all the ../../../../

	var _ionicGesturesSlideEdgeGesture = __webpack_require__(269);

	var AsideGesture = (function (_SlideEdgeGesture) {
	  function AsideGesture(aside) {
	    _classCallCheck(this, AsideGesture);

	    // TODO figure out the sliding element, dont just use the parent
	    var slideElement = aside.getContentElement();
	    _get(Object.getPrototypeOf(AsideGesture.prototype), 'constructor', this).call(this, slideElement, {
	      direction: aside.side === 'left' || aside.side === 'right' ? 'x' : 'y',
	      edge: aside.side,
	      threshold: 75
	    });
	    this.aside = aside;
	    this.slideElement = slideElement;
	    this.listen();
	  }

	  _inherits(AsideGesture, _SlideEdgeGesture);

	  _createClass(AsideGesture, [{
	    key: 'canStart',
	    value: function canStart(ev) {
	      // Only restrict edges if the aside is closed
	      return this.aside.isOpen ? true : _get(Object.getPrototypeOf(AsideGesture.prototype), 'canStart', this).call(this, ev);
	    }
	  }, {
	    key: 'onSlideBeforeStart',

	    // Set CSS, then wait one frame for it to apply before sliding starts
	    value: function onSlideBeforeStart(slide, ev) {
	      this.aside.setSliding(true);
	      this.aside.setChanging(true);
	      return new Promise(function (resolve) {
	        requestAnimationFrame(resolve);
	      });
	    }
	  }, {
	    key: 'onSlide',
	    value: function onSlide(slide, ev) {
	      this.aside.setOpenAmt(slide.distance / slide.max);
	      this.aside.setTransform('translate3d(' + slide.distance + 'px,0,0)');
	    }
	  }, {
	    key: 'onSlideEnd',
	    value: function onSlideEnd(slide, ev) {
	      this.aside.setTransform('');
	      this.aside.setSliding(false);
	      if (Math.abs(ev.velocityX) > 0.2 || Math.abs(slide.delta) > Math.abs(slide.max) * 0.5) {
	        this.aside.setOpen(!this.aside.isOpen);
	      }
	    }
	  }, {
	    key: 'getElementStartPos',
	    value: function getElementStartPos(slide, ev) {
	      return this.aside.isOpen ? slide.max : slide.min;
	    }
	  }, {
	    key: 'getSlideBoundaries',
	    value: function getSlideBoundaries() {
	      return {
	        min: 0,
	        max: this.aside.domElement.offsetWidth
	      };
	    }
	  }]);

	  return AsideGesture;
	})(_ionicGesturesSlideEdgeGesture.SlideEdgeGesture);

	Reflect.defineMetadata('design:paramtypes', [_ionicComponentsAsideAside.Aside], AsideGesture);

	var LeftAsideGesture = (function (_AsideGesture) {
	  function LeftAsideGesture() {
	    _classCallCheck(this, LeftAsideGesture);

	    if (_AsideGesture != null) {
	      _AsideGesture.apply(this, arguments);
	    }
	  }

	  _inherits(LeftAsideGesture, _AsideGesture);

	  return LeftAsideGesture;
	})(AsideGesture);

	exports.LeftAsideGesture = LeftAsideGesture;

	var RightAsideGesture = (function (_LeftAsideGesture) {
	  function RightAsideGesture() {
	    _classCallCheck(this, RightAsideGesture);

	    if (_LeftAsideGesture != null) {
	      _LeftAsideGesture.apply(this, arguments);
	    }
	  }

	  _inherits(RightAsideGesture, _LeftAsideGesture);

	  _createClass(RightAsideGesture, [{
	    key: 'getElementStartPos',
	    value: function getElementStartPos(slide, ev) {
	      return this.aside.isOpen ? slide.min : slide.max;
	    }
	  }, {
	    key: 'getSlideBoundaries',
	    value: function getSlideBoundaries() {
	      return {
	        min: -this.aside.domElement.offsetWidth,
	        max: 0
	      };
	    }
	  }]);

	  return RightAsideGesture;
	})(LeftAsideGesture);

	exports.RightAsideGesture = RightAsideGesture;

	var TopAsideGesture = (function (_AsideGesture2) {
	  function TopAsideGesture() {
	    _classCallCheck(this, TopAsideGesture);

	    if (_AsideGesture2 != null) {
	      _AsideGesture2.apply(this, arguments);
	    }
	  }

	  _inherits(TopAsideGesture, _AsideGesture2);

	  _createClass(TopAsideGesture, [{
	    key: 'onSlide',
	    value: function onSlide(slide, ev) {
	      this.aside.setTransform('translate3d(0,' + slide.distance + 'px,0)');
	    }
	  }, {
	    key: 'getSlideBoundaries',
	    value: function getSlideBoundaries() {
	      return {
	        min: 0,
	        max: this.aside.domElement.offsetHeight
	      };
	    }
	  }]);

	  return TopAsideGesture;
	})(AsideGesture);

	exports.TopAsideGesture = TopAsideGesture;

	var BottomAsideGesture = (function (_TopAsideGesture) {
	  function BottomAsideGesture() {
	    _classCallCheck(this, BottomAsideGesture);

	    if (_TopAsideGesture != null) {
	      _TopAsideGesture.apply(this, arguments);
	    }
	  }

	  _inherits(BottomAsideGesture, _TopAsideGesture);

	  _createClass(BottomAsideGesture, [{
	    key: 'getElementStartPos',
	    value: function getElementStartPos(slide, ev) {
	      return this.aside.isOpen ? slide.min : slide.max;
	    }
	  }, {
	    key: 'getSlideBoundaries',
	    value: function getSlideBoundaries() {
	      return {
	        min: -this.aside.domElement.offsetHeight,
	        max: 0
	      };
	    }
	  }]);

	  return BottomAsideGesture;
	})(TopAsideGesture);

	exports.BottomAsideGesture = BottomAsideGesture;

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _ionicGesturesSlideGesture = __webpack_require__(270);

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	var SlideEdgeGesture = (function (_SlideGesture) {
	  function SlideEdgeGesture(element) {
	    var opts = arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, SlideEdgeGesture);

	    util.defaults(opts, {
	      edge: 'left',
	      threshold: 50
	    });
	    _get(Object.getPrototypeOf(SlideEdgeGesture.prototype), 'constructor', this).call(this, element, opts);
	    // Can check corners through use of eg 'left top'
	    this.edges = opts.edge.split(' ');
	    this.threshold = opts.threshold;
	  }

	  _inherits(SlideEdgeGesture, _SlideGesture);

	  _createClass(SlideEdgeGesture, [{
	    key: 'canStart',
	    value: function canStart(ev) {
	      var _this = this;

	      this._containerRect = this.getContainerDimensions();
	      return this.edges.every(function (edge) {
	        return _this._checkEdge(edge, ev.gesture.center);
	      });
	    }
	  }, {
	    key: 'getContainerDimensions',
	    value: function getContainerDimensions() {
	      return {
	        left: 0,
	        top: 0,
	        width: window.innerWidth,
	        height: window.innerHeight
	      };
	    }
	  }, {
	    key: '_checkEdge',
	    value: function _checkEdge(edge, pos) {
	      switch (edge) {
	        case 'left':
	          return pos.x <= this._containerRect.left + this.threshold;
	        case 'right':
	          return pos.x >= this._containerRect.width - this.threshold;
	        case 'top':
	          return pos.y <= this._containerRect.top + this.threshold;
	        case 'bottom':
	          return pos.y >= this._containerRect.height - this.threshold;
	      }
	    }
	  }]);

	  return SlideEdgeGesture;
	})(_ionicGesturesSlideGesture.SlideGesture);

	exports.SlideEdgeGesture = SlideEdgeGesture;
	Reflect.defineMetadata('design:paramtypes', [Element,,], SlideEdgeGesture);

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _ionicGesturesDragGesture = __webpack_require__(271);

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	var SlideGesture = (function (_DragGesture) {
	  function SlideGesture(element) {
	    var opts = arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, SlideGesture);

	    _get(Object.getPrototypeOf(SlideGesture.prototype), 'constructor', this).call(this, element, opts);
	    this.element = element;
	  }

	  _inherits(SlideGesture, _DragGesture);

	  _createClass(SlideGesture, [{
	    key: 'getSlideBoundaries',

	    /*
	     * Get the min and max for the slide. pageX/pageY.
	     * Only called on dragstart.
	     */
	    value: function getSlideBoundaries(slide, ev) {
	      return {
	        min: 0,
	        max: this.element.offsetWidth
	      };
	    }
	  }, {
	    key: 'getElementStartPos',

	    /*
	     * Get the element's pos when the drag starts.
	     * For example, an open side menu starts at 100% and a closed
	     * sidemenu starts at 0%.
	     */
	    value: function getElementStartPos(slide, ev) {
	      return 0;
	    }
	  }, {
	    key: 'canStart',
	    value: function canStart() {
	      return true;
	    }
	  }, {
	    key: 'onDragStart',
	    value: function onDragStart(ev) {
	      var _this = this;

	      if (!this.canStart(ev)) return false;
	      this.slide = {};
	      var promise = this.onSlideBeforeStart(this.slide, ev) || Promise.resolve();
	      promise.then(function () {
	        var _getSlideBoundaries = _this.getSlideBoundaries(_this.slide, ev);

	        var min = _getSlideBoundaries.min;
	        var max = _getSlideBoundaries.max;

	        _this.slide.min = min;
	        _this.slide.max = max;
	        _this.slide.elementStartPos = _this.getElementStartPos(_this.slide, ev);
	        _this.slide.pointerStartPos = ev.gesture.center[_this.direction];
	        _this.slide.started = true;
	        _this.onSlideStart(_this.slide, ev);
	      })['catch'](function () {
	        _this.slide = null;
	      });
	    }
	  }, {
	    key: 'onDrag',
	    value: function onDrag(ev) {
	      if (!this.slide || !this.slide.started) return;
	      this.slide.pos = ev.gesture.center[this.direction];
	      this.slide.distance = util.clamp(this.slide.min, this.slide.pos - this.slide.pointerStartPos + this.slide.elementStartPos, this.slide.max);
	      this.slide.delta = this.slide.pos - this.slide.pointerStartPos;
	      this.onSlide(this.slide, ev);
	    }
	  }, {
	    key: 'onDragEnd',
	    value: function onDragEnd(ev) {
	      if (!this.slide || !this.slide.started) return;
	      this.onSlideEnd(this.slide, ev);
	      this.slide = null;
	    }
	  }, {
	    key: 'onSlideBeforeStart',
	    value: function onSlideBeforeStart() {}
	  }, {
	    key: 'onSlideStart',
	    value: function onSlideStart() {}
	  }, {
	    key: 'onSlide',
	    value: function onSlide() {}
	  }, {
	    key: 'onSlideEnd',
	    value: function onSlideEnd() {}
	  }]);

	  return SlideGesture;
	})(_ionicGesturesDragGesture.DragGesture);

	exports.SlideGesture = SlideGesture;

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _ionicGesturesGesture = __webpack_require__(272);

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	//import Hammer from 'hammer';

	/*
	 * BUG(ajoslin): HammerJS 2.x does not have an alternative to HammerJS 1.x's
	 * dragLockToAxis, so a vertical and horizontal gesture can happen at the same time.
	 */

	var DragGesture = (function (_Gesture) {
	  function DragGesture(element) {
	    var opts = arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, DragGesture);

	    util.defaults(opts, {});
	    _get(Object.getPrototypeOf(DragGesture.prototype), 'constructor', this).call(this, element, opts);
	  }

	  _inherits(DragGesture, _Gesture);

	  _createClass(DragGesture, [{
	    key: 'listen',
	    value: function listen() {
	      var _this = this;

	      _get(Object.getPrototypeOf(DragGesture.prototype), 'listen', this).call(this);
	      this.on('panstart', function (ev) {
	        if (_this.onDragStart(ev) !== false) {
	          _this.dragging = true;
	        }
	        // ev.stopPropagation();
	      });
	      this.on('panmove', function (ev) {
	        if (!_this.dragging) return;
	        if (_this.onDrag(ev) === false) {
	          _this.dragging = false;
	        }
	        // ev.stopPropagation()
	      });
	      this.on('panend', function (ev) {
	        if (!_this.dragging) return;
	        _this.onDragEnd(ev);
	        _this.dragging = false;
	        // ev.stopPropagation()
	      });
	    }
	  }, {
	    key: 'onDrag',
	    value: function onDrag() {}
	  }, {
	    key: 'onDragStart',
	    value: function onDragStart() {}
	  }, {
	    key: 'onDragEnd',
	    value: function onDragEnd() {}
	  }]);

	  return DragGesture;
	})(_ionicGesturesGesture.Gesture);

	exports.DragGesture = DragGesture;

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	var _ionicGesturesHammer = __webpack_require__(273);

	var Gesture = (function () {
	  function Gesture(element) {
	    var opts = arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, Gesture);

	    util.defaults(opts, {
	      domEvents: true
	    });
	    this.element = element;

	    // Map 'x' or 'y' string to hammerjs opts
	    this.direction = opts.direction || 'x';
	    opts.direction = this.direction === 'x' ? _ionicGesturesHammer.Hammer.DIRECTION_HORIZONTAL : _ionicGesturesHammer.Hammer.DIRECTION_VERTICAL;

	    this._options = opts;
	    this._callbacks = {};
	  }

	  _createClass(Gesture, [{
	    key: 'options',
	    value: function options() {
	      var opts = arguments[0] === undefined ? {} : arguments[0];

	      util.extend(this._options, opts);
	    }
	  }, {
	    key: 'on',
	    value: function on(type, cb) {
	      this.hammertime.on(type, util.noop);
	      (this._callbacks[type] || (this._callbacks[type] = [])).push(cb);
	      this.element.addEventListener(type, cb);
	    }
	  }, {
	    key: 'listen',
	    value: function listen() {
	      this.hammertime = (0, _ionicGesturesHammer.Hammer)(this.element, this._options);
	    }
	  }, {
	    key: 'unlisten',
	    value: function unlisten() {
	      this.hammertime.destroy();
	      this.hammertime = null;
	      for (var type in this._callbacks) {
	        for (var i = 0; i < this._callbacks[type].length; i++) {
	          this.element.removeEventListener(type, this._callbacks[type][i]);
	        }
	      }
	      this._callbacks = {};
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy() {
	      this.unlisten();
	    }
	  }]);

	  return Gesture;
	})();

	exports.Gesture = Gesture;

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	/*! Hammer.JS - v2.0.4 - 2014-09-28
	 * http://hammerjs.github.io/
	 *
	 * Copyright (c) 2014 Jorik Tangelder;
	 * Licensed under the MIT license */
	//(function(window, document, exportName, undefined) {
	//'use strict';

	var VENDOR_PREFIXES = ['', 'webkit', 'moz', 'MS', 'ms', 'o'];
	var TEST_ELEMENT = document.createElement('div');

	var TYPE_FUNCTION = 'function';

	var round = Math.round;
	var abs = Math.abs;
	var now = Date.now;

	/**
	 * set a timeout with a given scope
	 * @param {Function} fn
	 * @param {Number} timeout
	 * @param {Object} context
	 * @returns {number}
	 */
	function setTimeoutContext(fn, timeout, context) {
	    return setTimeout(bindFn(fn, context), timeout);
	}

	/**
	 * if the argument is an array, we want to execute the fn on each entry
	 * if it aint an array we don't want to do a thing.
	 * this is used by all the methods that accept a single and array argument.
	 * @param {*|Array} arg
	 * @param {String} fn
	 * @param {Object} [context]
	 * @returns {Boolean}
	 */
	function invokeArrayArg(arg, fn, context) {
	    if (Array.isArray(arg)) {
	        each(arg, context[fn], context);
	        return true;
	    }
	    return false;
	}

	/**
	 * walk objects and arrays
	 * @param {Object} obj
	 * @param {Function} iterator
	 * @param {Object} context
	 */
	function each(obj, iterator, context) {
	    var i;

	    if (!obj) {
	        return;
	    }

	    if (obj.forEach) {
	        obj.forEach(iterator, context);
	    } else if (obj.length !== undefined) {
	        i = 0;
	        while (i < obj.length) {
	            iterator.call(context, obj[i], i, obj);
	            i++;
	        }
	    } else {
	        for (i in obj) {
	            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);
	        }
	    }
	}

	/**
	 * extend object.
	 * means that properties in dest will be overwritten by the ones in src.
	 * @param {Object} dest
	 * @param {Object} src
	 * @param {Boolean} [merge]
	 * @returns {Object} dest
	 */
	function extend(dest, src, merge) {
	    var keys = Object.keys(src);
	    var i = 0;
	    while (i < keys.length) {
	        if (!merge || merge && dest[keys[i]] === undefined) {
	            dest[keys[i]] = src[keys[i]];
	        }
	        i++;
	    }
	    return dest;
	}

	/**
	 * merge the values from src in the dest.
	 * means that properties that exist in dest will not be overwritten by src
	 * @param {Object} dest
	 * @param {Object} src
	 * @returns {Object} dest
	 */
	function merge(dest, src) {
	    return extend(dest, src, true);
	}

	/**
	 * simple class inheritance
	 * @param {Function} child
	 * @param {Function} base
	 * @param {Object} [properties]
	 */
	function inherit(child, base, properties) {
	    var baseP = base.prototype,
	        childP;

	    childP = child.prototype = Object.create(baseP);
	    childP.constructor = child;
	    childP._super = baseP;

	    if (properties) {
	        extend(childP, properties);
	    }
	}

	/**
	 * simple function bind
	 * @param {Function} fn
	 * @param {Object} context
	 * @returns {Function}
	 */
	function bindFn(fn, context) {
	    return function boundFn() {
	        return fn.apply(context, arguments);
	    };
	}

	/**
	 * let a boolean value also be a function that must return a boolean
	 * this first item in args will be used as the context
	 * @param {Boolean|Function} val
	 * @param {Array} [args]
	 * @returns {Boolean}
	 */
	function boolOrFn(val, args) {
	    if (typeof val == TYPE_FUNCTION) {
	        return val.apply(args ? args[0] || undefined : undefined, args);
	    }
	    return val;
	}

	/**
	 * use the val2 when val1 is undefined
	 * @param {*} val1
	 * @param {*} val2
	 * @returns {*}
	 */
	function ifUndefined(val1, val2) {
	    return val1 === undefined ? val2 : val1;
	}

	/**
	 * addEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function addEventListeners(target, types, handler) {
	    each(splitStr(types), function (type) {
	        target.addEventListener(type, handler, false);
	    });
	}

	/**
	 * removeEventListener with multiple events at once
	 * @param {EventTarget} target
	 * @param {String} types
	 * @param {Function} handler
	 */
	function removeEventListeners(target, types, handler) {
	    each(splitStr(types), function (type) {
	        target.removeEventListener(type, handler, false);
	    });
	}

	/**
	 * find if a node is in the given parent
	 * @method hasParent
	 * @param {HTMLElement} node
	 * @param {HTMLElement} parent
	 * @return {Boolean} found
	 */
	function hasParent(node, parent) {
	    while (node) {
	        if (node == parent) {
	            return true;
	        }
	        node = node.parentNode;
	    }
	    return false;
	}

	/**
	 * small indexOf wrapper
	 * @param {String} str
	 * @param {String} find
	 * @returns {Boolean} found
	 */
	function inStr(str, find) {
	    return str.indexOf(find) > -1;
	}

	/**
	 * split string on whitespace
	 * @param {String} str
	 * @returns {Array} words
	 */
	function splitStr(str) {
	    return str.trim().split(/\s+/g);
	}

	/**
	 * find if a array contains the object using indexOf or a simple polyFill
	 * @param {Array} src
	 * @param {String} find
	 * @param {String} [findByKey]
	 * @return {Boolean|Number} false when not found, or the index
	 */
	function inArray(src, find, findByKey) {
	    if (src.indexOf && !findByKey) {
	        return src.indexOf(find);
	    } else {
	        var i = 0;
	        while (i < src.length) {
	            if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {
	                return i;
	            }
	            i++;
	        }
	        return -1;
	    }
	}

	/**
	 * convert array-like objects to real arrays
	 * @param {Object} obj
	 * @returns {Array}
	 */
	function toArray(obj) {
	    return Array.prototype.slice.call(obj, 0);
	}

	/**
	 * unique array with objects based on a key (like 'id') or just by the array's value
	 * @param {Array} src [{id:1},{id:2},{id:1}]
	 * @param {String} [key]
	 * @param {Boolean} [sort=False]
	 * @returns {Array} [{id:1},{id:2}]
	 */
	function uniqueArray(src, key, sort) {
	    var results = [];
	    var values = [];
	    var i = 0;

	    while (i < src.length) {
	        var val = key ? src[i][key] : src[i];
	        if (inArray(values, val) < 0) {
	            results.push(src[i]);
	        }
	        values[i] = val;
	        i++;
	    }

	    if (sort) {
	        if (!key) {
	            results = results.sort();
	        } else {
	            results = results.sort(function sortUniqueArray(a, b) {
	                return a[key] > b[key];
	            });
	        }
	    }

	    return results;
	}

	/**
	 * get the prefixed property
	 * @param {Object} obj
	 * @param {String} property
	 * @returns {String|Undefined} prefixed
	 */
	function prefixed(obj, property) {
	    var prefix, prop;
	    var camelProp = property[0].toUpperCase() + property.slice(1);

	    var i = 0;
	    while (i < VENDOR_PREFIXES.length) {
	        prefix = VENDOR_PREFIXES[i];
	        prop = prefix ? prefix + camelProp : property;

	        if (prop in obj) {
	            return prop;
	        }
	        i++;
	    }
	    return undefined;
	}

	/**
	 * get a unique id
	 * @returns {number} uniqueId
	 */
	var _uniqueId = 1;
	function uniqueId() {
	    return _uniqueId++;
	}

	/**
	 * get the window object of an element
	 * @param {HTMLElement} element
	 * @returns {DocumentView|Window}
	 */
	function getWindowForElement(element) {
	    var doc = element.ownerDocument;
	    return doc.defaultView || doc.parentWindow;
	}

	var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;

	var SUPPORT_TOUCH = ('ontouchstart' in window);
	var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;
	var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);

	var INPUT_TYPE_TOUCH = 'touch';
	var INPUT_TYPE_PEN = 'pen';
	var INPUT_TYPE_MOUSE = 'mouse';
	var INPUT_TYPE_KINECT = 'kinect';

	var COMPUTE_INTERVAL = 25;

	var INPUT_START = 1;
	var INPUT_MOVE = 2;
	var INPUT_END = 4;
	var INPUT_CANCEL = 8;

	var DIRECTION_NONE = 1;
	var DIRECTION_LEFT = 2;
	var DIRECTION_RIGHT = 4;
	var DIRECTION_UP = 8;
	var DIRECTION_DOWN = 16;

	var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;
	var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;
	var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;

	var PROPS_XY = ['x', 'y'];
	var PROPS_CLIENT_XY = ['clientX', 'clientY'];

	/**
	 * create new input type manager
	 * @param {Manager} manager
	 * @param {Function} callback
	 * @returns {Input}
	 * @constructor
	 */
	function Input(manager, callback) {
	    var self = this;
	    this.manager = manager;
	    this.callback = callback;
	    this.element = manager.element;
	    this.target = manager.options.inputTarget;

	    // smaller wrapper around the handler, for the scope and the enabled state of the manager,
	    // so when disabled the input events are completely bypassed.
	    this.domHandler = function (ev) {
	        if (boolOrFn(manager.options.enable, [manager])) {
	            self.handler(ev);
	        }
	    };

	    this.init();
	}

	Input.prototype = {
	    /**
	     * should handle the inputEvent data and trigger the callback
	     * @virtual
	     */
	    handler: function handler() {},

	    /**
	     * bind the events
	     */
	    init: function init() {
	        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    },

	    /**
	     * unbind the events
	     */
	    destroy: function destroy() {
	        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);
	        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);
	        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
	    }
	};

	/**
	 * create new input type manager
	 * called by the Manager constructor
	 * @param {Hammer} manager
	 * @returns {Input}
	 */
	function createInputInstance(manager) {
	    var Type;
	    var inputClass = manager.options.inputClass;

	    if (inputClass) {
	        Type = inputClass;
	    } else if (SUPPORT_POINTER_EVENTS) {
	        Type = PointerEventInput;
	    } else if (SUPPORT_ONLY_TOUCH) {
	        Type = TouchInput;
	    } else if (!SUPPORT_TOUCH) {
	        Type = MouseInput;
	    } else {
	        Type = TouchMouseInput;
	    }
	    return new Type(manager, inputHandler);
	}

	/**
	 * handle input events
	 * @param {Manager} manager
	 * @param {String} eventType
	 * @param {Object} input
	 */
	function inputHandler(manager, eventType, input) {
	    var pointersLen = input.pointers.length;
	    var changedPointersLen = input.changedPointers.length;
	    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;
	    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;

	    input.isFirst = !!isFirst;
	    input.isFinal = !!isFinal;

	    if (isFirst) {
	        manager.session = {};
	    }

	    // source event is the normalized value of the domEvents
	    // like 'touchstart, mouseup, pointerdown'
	    input.eventType = eventType;

	    // compute scale, rotation etc
	    computeInputData(manager, input);

	    // emit secret event
	    manager.emit('hammer.input', input);

	    manager.recognize(input);
	    manager.session.prevInput = input;
	}

	/**
	 * extend the data with some usable properties like scale, rotate, velocity etc
	 * @param {Object} manager
	 * @param {Object} input
	 */
	function computeInputData(manager, input) {
	    var session = manager.session;
	    var pointers = input.pointers;
	    var pointersLength = pointers.length;

	    // store the first input to calculate the distance and direction
	    if (!session.firstInput) {
	        session.firstInput = simpleCloneInputData(input);
	    }

	    // to compute scale and rotation we need to store the multiple touches
	    if (pointersLength > 1 && !session.firstMultiple) {
	        session.firstMultiple = simpleCloneInputData(input);
	    } else if (pointersLength === 1) {
	        session.firstMultiple = false;
	    }

	    var firstInput = session.firstInput;
	    var firstMultiple = session.firstMultiple;
	    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;

	    var center = input.center = getCenter(pointers);
	    input.timeStamp = now();
	    input.deltaTime = input.timeStamp - firstInput.timeStamp;

	    input.angle = getAngle(offsetCenter, center);
	    input.distance = getDistance(offsetCenter, center);

	    computeDeltaXY(session, input);
	    input.offsetDirection = getDirection(input.deltaX, input.deltaY);

	    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
	    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;

	    computeIntervalInputData(session, input);

	    // find the correct target
	    var target = manager.element;
	    if (hasParent(input.srcEvent.target, target)) {
	        target = input.srcEvent.target;
	    }
	    input.target = target;
	}

	function computeDeltaXY(session, input) {
	    var center = input.center;
	    var offset = session.offsetDelta || {};
	    var prevDelta = session.prevDelta || {};
	    var prevInput = session.prevInput || {};

	    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {
	        prevDelta = session.prevDelta = {
	            x: prevInput.deltaX || 0,
	            y: prevInput.deltaY || 0
	        };

	        offset = session.offsetDelta = {
	            x: center.x,
	            y: center.y
	        };
	    }

	    input.deltaX = prevDelta.x + (center.x - offset.x);
	    input.deltaY = prevDelta.y + (center.y - offset.y);
	}

	/**
	 * velocity is calculated every x ms
	 * @param {Object} session
	 * @param {Object} input
	 */
	function computeIntervalInputData(session, input) {
	    var last = session.lastInterval || input,
	        deltaTime = input.timeStamp - last.timeStamp,
	        velocity,
	        velocityX,
	        velocityY,
	        direction;

	    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {
	        var deltaX = last.deltaX - input.deltaX;
	        var deltaY = last.deltaY - input.deltaY;

	        var v = getVelocity(deltaTime, deltaX, deltaY);
	        velocityX = v.x;
	        velocityY = v.y;
	        velocity = abs(v.x) > abs(v.y) ? v.x : v.y;
	        direction = getDirection(deltaX, deltaY);

	        session.lastInterval = input;
	    } else {
	        // use latest velocity info if it doesn't overtake a minimum period
	        velocity = last.velocity;
	        velocityX = last.velocityX;
	        velocityY = last.velocityY;
	        direction = last.direction;
	    }

	    input.velocity = velocity;
	    input.velocityX = velocityX;
	    input.velocityY = velocityY;
	    input.direction = direction;
	}

	/**
	 * create a simple clone from the input used for storage of firstInput and firstMultiple
	 * @param {Object} input
	 * @returns {Object} clonedInputData
	 */
	function simpleCloneInputData(input) {
	    // make a simple copy of the pointers because we will get a reference if we don't
	    // we only need clientXY for the calculations
	    var pointers = [];
	    var i = 0;
	    while (i < input.pointers.length) {
	        pointers[i] = {
	            clientX: round(input.pointers[i].clientX),
	            clientY: round(input.pointers[i].clientY)
	        };
	        i++;
	    }

	    return {
	        timeStamp: now(),
	        pointers: pointers,
	        center: getCenter(pointers),
	        deltaX: input.deltaX,
	        deltaY: input.deltaY
	    };
	}

	/**
	 * get the center of all the pointers
	 * @param {Array} pointers
	 * @return {Object} center contains `x` and `y` properties
	 */
	function getCenter(pointers) {
	    var pointersLength = pointers.length;

	    // no need to loop when only one touch
	    if (pointersLength === 1) {
	        return {
	            x: round(pointers[0].clientX),
	            y: round(pointers[0].clientY)
	        };
	    }

	    var x = 0,
	        y = 0,
	        i = 0;
	    while (i < pointersLength) {
	        x += pointers[i].clientX;
	        y += pointers[i].clientY;
	        i++;
	    }

	    return {
	        x: round(x / pointersLength),
	        y: round(y / pointersLength)
	    };
	}

	/**
	 * calculate the velocity between two points. unit is in px per ms.
	 * @param {Number} deltaTime
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Object} velocity `x` and `y`
	 */
	function getVelocity(deltaTime, x, y) {
	    return {
	        x: x / deltaTime || 0,
	        y: y / deltaTime || 0
	    };
	}

	/**
	 * get the direction between two points
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Number} direction
	 */
	function getDirection(x, y) {
	    if (x === y) {
	        return DIRECTION_NONE;
	    }

	    if (abs(x) >= abs(y)) {
	        return x > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
	    }
	    return y > 0 ? DIRECTION_UP : DIRECTION_DOWN;
	}

	/**
	 * calculate the absolute distance between two points
	 * @param {Object} p1 {x, y}
	 * @param {Object} p2 {x, y}
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} distance
	 */
	function getDistance(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];

	    return Math.sqrt(x * x + y * y);
	}

	/**
	 * calculate the angle between two coordinates
	 * @param {Object} p1
	 * @param {Object} p2
	 * @param {Array} [props] containing x and y keys
	 * @return {Number} angle
	 */
	function getAngle(p1, p2, props) {
	    if (!props) {
	        props = PROPS_XY;
	    }
	    var x = p2[props[0]] - p1[props[0]],
	        y = p2[props[1]] - p1[props[1]];
	    return Math.atan2(y, x) * 180 / Math.PI;
	}

	/**
	 * calculate the rotation degrees between two pointersets
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} rotation
	 */
	function getRotation(start, end) {
	    return getAngle(end[1], end[0], PROPS_CLIENT_XY) - getAngle(start[1], start[0], PROPS_CLIENT_XY);
	}

	/**
	 * calculate the scale factor between two pointersets
	 * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out
	 * @param {Array} start array of pointers
	 * @param {Array} end array of pointers
	 * @return {Number} scale
	 */
	function getScale(start, end) {
	    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);
	}

	var MOUSE_INPUT_MAP = {
	    mousedown: INPUT_START,
	    mousemove: INPUT_MOVE,
	    mouseup: INPUT_END
	};

	var MOUSE_ELEMENT_EVENTS = 'mousedown';
	var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';

	/**
	 * Mouse events input
	 * @constructor
	 * @extends Input
	 */
	function MouseInput() {
	    this.evEl = MOUSE_ELEMENT_EVENTS;
	    this.evWin = MOUSE_WINDOW_EVENTS;

	    this.allow = true; // used by Input.TouchMouse to disable mouse events
	    this.pressed = false; // mousedown state

	    Input.apply(this, arguments);
	}

	inherit(MouseInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function MEhandler(ev) {
	        var eventType = MOUSE_INPUT_MAP[ev.type];

	        // on start we want to have the left mouse button down
	        if (eventType & INPUT_START && ev.button === 0) {
	            this.pressed = true;
	        }

	        if (eventType & INPUT_MOVE && ev.which !== 1) {
	            eventType = INPUT_END;
	        }

	        // mouse must be down, and mouse events are allowed (see the TouchMouse input)
	        if (!this.pressed || !this.allow) {
	            return;
	        }

	        if (eventType & INPUT_END) {
	            this.pressed = false;
	        }

	        this.callback(this.manager, eventType, {
	            pointers: [ev],
	            changedPointers: [ev],
	            pointerType: INPUT_TYPE_MOUSE,
	            srcEvent: ev
	        });
	    }
	});

	var POINTER_INPUT_MAP = {
	    pointerdown: INPUT_START,
	    pointermove: INPUT_MOVE,
	    pointerup: INPUT_END,
	    pointercancel: INPUT_CANCEL,
	    pointerout: INPUT_CANCEL
	};

	// in IE10 the pointer types is defined as an enum
	var IE10_POINTER_TYPE_ENUM = {
	    2: INPUT_TYPE_TOUCH,
	    3: INPUT_TYPE_PEN,
	    4: INPUT_TYPE_MOUSE,
	    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816
	};

	var POINTER_ELEMENT_EVENTS = 'pointerdown';
	var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';

	// IE10 has prefixed support, and case-sensitive
	if (window.MSPointerEvent) {
	    POINTER_ELEMENT_EVENTS = 'MSPointerDown';
	    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';
	}

	/**
	 * Pointer events input
	 * @constructor
	 * @extends Input
	 */
	function PointerEventInput() {
	    this.evEl = POINTER_ELEMENT_EVENTS;
	    this.evWin = POINTER_WINDOW_EVENTS;

	    Input.apply(this, arguments);

	    this.store = this.manager.session.pointerEvents = [];
	}

	inherit(PointerEventInput, Input, {
	    /**
	     * handle mouse events
	     * @param {Object} ev
	     */
	    handler: function PEhandler(ev) {
	        var store = this.store;
	        var removePointer = false;

	        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');
	        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];
	        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;

	        var isTouch = pointerType == INPUT_TYPE_TOUCH;

	        // get index of the event in the store
	        var storeIndex = inArray(store, ev.pointerId, 'pointerId');

	        // start and mouse must be down
	        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {
	            if (storeIndex < 0) {
	                store.push(ev);
	                storeIndex = store.length - 1;
	            }
	        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {
	            removePointer = true;
	        }

	        // it not found, so the pointer hasn't been down (so it's probably a hover)
	        if (storeIndex < 0) {
	            return;
	        }

	        // update the event in the store
	        store[storeIndex] = ev;

	        this.callback(this.manager, eventType, {
	            pointers: store,
	            changedPointers: [ev],
	            pointerType: pointerType,
	            srcEvent: ev
	        });

	        if (removePointer) {
	            // remove from the store
	            store.splice(storeIndex, 1);
	        }
	    }
	});

	var SINGLE_TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};

	var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';
	var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';

	/**
	 * Touch events input
	 * @constructor
	 * @extends Input
	 */
	function SingleTouchInput() {
	    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;
	    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;
	    this.started = false;

	    Input.apply(this, arguments);
	}

	inherit(SingleTouchInput, Input, {
	    handler: function TEhandler(ev) {
	        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];

	        // should we handle the touch events?
	        if (type === INPUT_START) {
	            this.started = true;
	        }

	        if (!this.started) {
	            return;
	        }

	        var touches = normalizeSingleTouches.call(this, ev, type);

	        // when done, reset the started state
	        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {
	            this.started = false;
	        }

	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});

	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function normalizeSingleTouches(ev, type) {
	    var all = toArray(ev.touches);
	    var changed = toArray(ev.changedTouches);

	    if (type & (INPUT_END | INPUT_CANCEL)) {
	        all = uniqueArray(all.concat(changed), 'identifier', true);
	    }

	    return [all, changed];
	}

	var TOUCH_INPUT_MAP = {
	    touchstart: INPUT_START,
	    touchmove: INPUT_MOVE,
	    touchend: INPUT_END,
	    touchcancel: INPUT_CANCEL
	};

	var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';

	/**
	 * Multi-user touch events input
	 * @constructor
	 * @extends Input
	 */
	function TouchInput() {
	    this.evTarget = TOUCH_TARGET_EVENTS;
	    this.targetIds = {};

	    Input.apply(this, arguments);
	}

	inherit(TouchInput, Input, {
	    handler: function MTEhandler(ev) {
	        var type = TOUCH_INPUT_MAP[ev.type];
	        var touches = getTouches.call(this, ev, type);
	        if (!touches) {
	            return;
	        }

	        this.callback(this.manager, type, {
	            pointers: touches[0],
	            changedPointers: touches[1],
	            pointerType: INPUT_TYPE_TOUCH,
	            srcEvent: ev
	        });
	    }
	});

	/**
	 * @this {TouchInput}
	 * @param {Object} ev
	 * @param {Number} type flag
	 * @returns {undefined|Array} [all, changed]
	 */
	function getTouches(ev, type) {
	    var allTouches = toArray(ev.touches);
	    var targetIds = this.targetIds;

	    // when there is only one touch, the process can be simplified
	    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {
	        targetIds[allTouches[0].identifier] = true;
	        return [allTouches, allTouches];
	    }

	    var i,
	        targetTouches,
	        changedTouches = toArray(ev.changedTouches),
	        changedTargetTouches = [],
	        target = this.target;

	    // get target touches from touches
	    targetTouches = allTouches.filter(function (touch) {
	        return hasParent(touch.target, target);
	    });

	    // collect touches
	    if (type === INPUT_START) {
	        i = 0;
	        while (i < targetTouches.length) {
	            targetIds[targetTouches[i].identifier] = true;
	            i++;
	        }
	    }

	    // filter changed touches to only contain touches that exist in the collected target ids
	    i = 0;
	    while (i < changedTouches.length) {
	        if (targetIds[changedTouches[i].identifier]) {
	            changedTargetTouches.push(changedTouches[i]);
	        }

	        // cleanup removed touches
	        if (type & (INPUT_END | INPUT_CANCEL)) {
	            delete targetIds[changedTouches[i].identifier];
	        }
	        i++;
	    }

	    if (!changedTargetTouches.length) {
	        return;
	    }

	    return [
	    // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'
	    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];
	}

	/**
	 * Combined touch and mouse input
	 *
	 * Touch has a higher priority then mouse, and while touching no mouse events are allowed.
	 * This because touch devices also emit mouse events while doing a touch.
	 *
	 * @constructor
	 * @extends Input
	 */
	function TouchMouseInput() {
	    Input.apply(this, arguments);

	    var handler = bindFn(this.handler, this);
	    this.touch = new TouchInput(this.manager, handler);
	    this.mouse = new MouseInput(this.manager, handler);
	}

	inherit(TouchMouseInput, Input, {
	    /**
	     * handle mouse and touch events
	     * @param {Hammer} manager
	     * @param {String} inputEvent
	     * @param {Object} inputData
	     */
	    handler: function TMEhandler(manager, inputEvent, inputData) {
	        var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,
	            isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;

	        // when we're in a touch event, so  block all upcoming mouse events
	        // most mobile browser also emit mouseevents, right after touchstart
	        if (isTouch) {
	            this.mouse.allow = false;
	        } else if (isMouse && !this.mouse.allow) {
	            return;
	        }

	        // reset the allowMouse when we're done
	        if (inputEvent & (INPUT_END | INPUT_CANCEL)) {
	            this.mouse.allow = true;
	        }

	        this.callback(manager, inputEvent, inputData);
	    },

	    /**
	     * remove the event listeners
	     */
	    destroy: function destroy() {
	        this.touch.destroy();
	        this.mouse.destroy();
	    }
	});

	var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');
	var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;

	// magical touchAction value
	var TOUCH_ACTION_COMPUTE = 'compute';
	var TOUCH_ACTION_AUTO = 'auto';
	var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented
	var TOUCH_ACTION_NONE = 'none';
	var TOUCH_ACTION_PAN_X = 'pan-x';
	var TOUCH_ACTION_PAN_Y = 'pan-y';

	/**
	 * Touch Action
	 * sets the touchAction property or uses the js alternative
	 * @param {Manager} manager
	 * @param {String} value
	 * @constructor
	 */
	function TouchAction(manager, value) {
	    this.manager = manager;
	    this.set(value);
	}

	TouchAction.prototype = {
	    /**
	     * set the touchAction value on the element or enable the polyfill
	     * @param {String} value
	     */
	    set: function set(value) {
	        // find out the touch-action by the event handlers
	        if (value == TOUCH_ACTION_COMPUTE) {
	            value = this.compute();
	        }

	        if (NATIVE_TOUCH_ACTION) {
	            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;
	        }
	        this.actions = value.toLowerCase().trim();
	    },

	    /**
	     * just re-set the touchAction value
	     */
	    update: function update() {
	        this.set(this.manager.options.touchAction);
	    },

	    /**
	     * compute the value for the touchAction property based on the recognizer's settings
	     * @returns {String} value
	     */
	    compute: function compute() {
	        var actions = [];
	        each(this.manager.recognizers, function (recognizer) {
	            if (boolOrFn(recognizer.options.enable, [recognizer])) {
	                actions = actions.concat(recognizer.getTouchAction());
	            }
	        });
	        return cleanTouchActions(actions.join(' '));
	    },

	    /**
	     * this method is called on each input cycle and provides the preventing of the browser behavior
	     * @param {Object} input
	     */
	    preventDefaults: function preventDefaults(input) {
	        // not needed with native support for the touchAction property
	        if (NATIVE_TOUCH_ACTION) {
	            return;
	        }

	        var srcEvent = input.srcEvent;
	        var direction = input.offsetDirection;

	        // if the touch action did prevented once this session
	        if (this.manager.session.prevented) {
	            srcEvent.preventDefault();
	            return;
	        }

	        var actions = this.actions;
	        var hasNone = inStr(actions, TOUCH_ACTION_NONE);
	        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);
	        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);

	        if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {
	            return this.preventSrc(srcEvent);
	        }
	    },

	    /**
	     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)
	     * @param {Object} srcEvent
	     */
	    preventSrc: function preventSrc(srcEvent) {
	        this.manager.session.prevented = true;
	        srcEvent.preventDefault();
	    }
	};

	/**
	 * when the touchActions are collected they are not a valid value, so we need to clean things up. *
	 * @param {String} actions
	 * @returns {*}
	 */
	function cleanTouchActions(actions) {
	    // none
	    if (inStr(actions, TOUCH_ACTION_NONE)) {
	        return TOUCH_ACTION_NONE;
	    }

	    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);
	    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);

	    // pan-x and pan-y can be combined
	    if (hasPanX && hasPanY) {
	        return TOUCH_ACTION_PAN_X + ' ' + TOUCH_ACTION_PAN_Y;
	    }

	    // pan-x OR pan-y
	    if (hasPanX || hasPanY) {
	        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
	    }

	    // manipulation
	    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {
	        return TOUCH_ACTION_MANIPULATION;
	    }

	    return TOUCH_ACTION_AUTO;
	}

	/**
	 * Recognizer flow explained; *
	 * All recognizers have the initial state of POSSIBLE when a input session starts.
	 * The definition of a input session is from the first input until the last input, with all it's movement in it. *
	 * Example session for mouse-input: mousedown -> mousemove -> mouseup
	 *
	 * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed
	 * which determines with state it should be.
	 *
	 * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to
	 * POSSIBLE to give it another change on the next cycle.
	 *
	 *               Possible
	 *                  |
	 *            +-----+---------------+
	 *            |                     |
	 *      +-----+-----+               |
	 *      |           |               |
	 *   Failed      Cancelled          |
	 *                          +-------+------+
	 *                          |              |
	 *                      Recognized       Began
	 *                                         |
	 *                                      Changed
	 *                                         |
	 *                                  Ended/Recognized
	 */
	var STATE_POSSIBLE = 1;
	var STATE_BEGAN = 2;
	var STATE_CHANGED = 4;
	var STATE_ENDED = 8;
	var STATE_RECOGNIZED = STATE_ENDED;
	var STATE_CANCELLED = 16;
	var STATE_FAILED = 32;

	/**
	 * Recognizer
	 * Every recognizer needs to extend from this class.
	 * @constructor
	 * @param {Object} options
	 */
	function Recognizer(options) {
	    this.id = uniqueId();

	    this.manager = null;
	    this.options = merge(options || {}, this.defaults);

	    // default is enable true
	    this.options.enable = ifUndefined(this.options.enable, true);

	    this.state = STATE_POSSIBLE;

	    this.simultaneous = {};
	    this.requireFail = [];
	}

	Recognizer.prototype = {
	    /**
	     * @virtual
	     * @type {Object}
	     */
	    defaults: {},

	    /**
	     * set options
	     * @param {Object} options
	     * @return {Recognizer}
	     */
	    set: function set(options) {
	        extend(this.options, options);

	        // also update the touchAction, in case something changed about the directions/enabled state
	        this.manager && this.manager.touchAction.update();
	        return this;
	    },

	    /**
	     * recognize simultaneous with an other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    recognizeWith: function recognizeWith(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {
	            return this;
	        }

	        var simultaneous = this.simultaneous;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (!simultaneous[otherRecognizer.id]) {
	            simultaneous[otherRecognizer.id] = otherRecognizer;
	            otherRecognizer.recognizeWith(this);
	        }
	        return this;
	    },

	    /**
	     * drop the simultaneous link. it doesnt remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRecognizeWith: function dropRecognizeWith(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {
	            return this;
	        }

	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        delete this.simultaneous[otherRecognizer.id];
	        return this;
	    },

	    /**
	     * recognizer can only run when an other is failing
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    requireFailure: function requireFailure(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {
	            return this;
	        }

	        var requireFail = this.requireFail;
	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        if (inArray(requireFail, otherRecognizer) === -1) {
	            requireFail.push(otherRecognizer);
	            otherRecognizer.requireFailure(this);
	        }
	        return this;
	    },

	    /**
	     * drop the requireFailure link. it does not remove the link on the other recognizer.
	     * @param {Recognizer} otherRecognizer
	     * @returns {Recognizer} this
	     */
	    dropRequireFailure: function dropRequireFailure(otherRecognizer) {
	        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {
	            return this;
	        }

	        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);
	        var index = inArray(this.requireFail, otherRecognizer);
	        if (index > -1) {
	            this.requireFail.splice(index, 1);
	        }
	        return this;
	    },

	    /**
	     * has require failures boolean
	     * @returns {boolean}
	     */
	    hasRequireFailures: function hasRequireFailures() {
	        return this.requireFail.length > 0;
	    },

	    /**
	     * if the recognizer can recognize simultaneous with an other recognizer
	     * @param {Recognizer} otherRecognizer
	     * @returns {Boolean}
	     */
	    canRecognizeWith: function canRecognizeWith(otherRecognizer) {
	        return !!this.simultaneous[otherRecognizer.id];
	    },

	    /**
	     * You should use `tryEmit` instead of `emit` directly to check
	     * that all the needed recognizers has failed before emitting.
	     * @param {Object} input
	     */
	    emit: function emit(input) {
	        var self = this;
	        var state = this.state;

	        function emit(withState) {
	            self.manager.emit(self.options.event + (withState ? stateStr(state) : ''), input);
	        }

	        // 'panstart' and 'panmove'
	        if (state < STATE_ENDED) {
	            emit(true);
	        }

	        emit(); // simple 'eventName' events

	        // panend and pancancel
	        if (state >= STATE_ENDED) {
	            emit(true);
	        }
	    },

	    /**
	     * Check that all the require failure recognizers has failed,
	     * if true, it emits a gesture event,
	     * otherwise, setup the state to FAILED.
	     * @param {Object} input
	     */
	    tryEmit: function tryEmit(input) {
	        if (this.canEmit()) {
	            return this.emit(input);
	        }
	        // it's failing anyway
	        this.state = STATE_FAILED;
	    },

	    /**
	     * can we emit?
	     * @returns {boolean}
	     */
	    canEmit: function canEmit() {
	        var i = 0;
	        while (i < this.requireFail.length) {
	            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    },

	    /**
	     * update the recognizer
	     * @param {Object} inputData
	     */
	    recognize: function recognize(inputData) {
	        // make a new copy of the inputData
	        // so we can change the inputData without messing up the other recognizers
	        var inputDataClone = extend({}, inputData);

	        // is is enabled and allow recognizing?
	        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {
	            this.reset();
	            this.state = STATE_FAILED;
	            return;
	        }

	        // reset when we've reached the end
	        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {
	            this.state = STATE_POSSIBLE;
	        }

	        this.state = this.process(inputDataClone);

	        // the recognizer has recognized a gesture
	        // so trigger an event
	        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {
	            this.tryEmit(inputDataClone);
	        }
	    },

	    /**
	     * return the state of the recognizer
	     * the actual recognizing happens in this method
	     * @virtual
	     * @param {Object} inputData
	     * @returns {Const} STATE
	     */
	    process: function process(inputData) {}, // jshint ignore:line

	    /**
	     * return the preferred touch-action
	     * @virtual
	     * @returns {Array}
	     */
	    getTouchAction: function getTouchAction() {},

	    /**
	     * called when the gesture isn't allowed to recognize
	     * like when another is being recognized or it is disabled
	     * @virtual
	     */
	    reset: function reset() {}
	};

	/**
	 * get a usable string, used as event postfix
	 * @param {Const} state
	 * @returns {String} state
	 */
	function stateStr(state) {
	    if (state & STATE_CANCELLED) {
	        return 'cancel';
	    } else if (state & STATE_ENDED) {
	        return 'end';
	    } else if (state & STATE_CHANGED) {
	        return 'move';
	    } else if (state & STATE_BEGAN) {
	        return 'start';
	    }
	    return '';
	}

	/**
	 * direction cons to string
	 * @param {Const} direction
	 * @returns {String}
	 */
	function directionStr(direction) {
	    if (direction == DIRECTION_DOWN) {
	        return 'down';
	    } else if (direction == DIRECTION_UP) {
	        return 'up';
	    } else if (direction == DIRECTION_LEFT) {
	        return 'left';
	    } else if (direction == DIRECTION_RIGHT) {
	        return 'right';
	    }
	    return '';
	}

	/**
	 * get a recognizer by name if it is bound to a manager
	 * @param {Recognizer|String} otherRecognizer
	 * @param {Recognizer} recognizer
	 * @returns {Recognizer}
	 */
	function getRecognizerByNameIfManager(otherRecognizer, recognizer) {
	    var manager = recognizer.manager;
	    if (manager) {
	        return manager.get(otherRecognizer);
	    }
	    return otherRecognizer;
	}

	/**
	 * This recognizer is just used as a base for the simple attribute recognizers.
	 * @constructor
	 * @extends Recognizer
	 */
	function AttrRecognizer() {
	    Recognizer.apply(this, arguments);
	}

	inherit(AttrRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof AttrRecognizer
	     */
	    defaults: {
	        /**
	         * @type {Number}
	         * @default 1
	         */
	        pointers: 1
	    },

	    /**
	     * Used to check if it the recognizer receives valid input, like input.distance > 10.
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {Boolean} recognized
	     */
	    attrTest: function attrTest(input) {
	        var optionPointers = this.options.pointers;
	        return optionPointers === 0 || input.pointers.length === optionPointers;
	    },

	    /**
	     * Process the input and return the state for the recognizer
	     * @memberof AttrRecognizer
	     * @param {Object} input
	     * @returns {*} State
	     */
	    process: function process(input) {
	        var state = this.state;
	        var eventType = input.eventType;

	        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);
	        var isValid = this.attrTest(input);

	        // on cancel input and we've recognized before, return STATE_CANCELLED
	        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {
	            return state | STATE_CANCELLED;
	        } else if (isRecognized || isValid) {
	            if (eventType & INPUT_END) {
	                return state | STATE_ENDED;
	            } else if (!(state & STATE_BEGAN)) {
	                return STATE_BEGAN;
	            }
	            return state | STATE_CHANGED;
	        }
	        return STATE_FAILED;
	    }
	});

	/**
	 * Pan
	 * Recognized when the pointer is down and moved in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PanRecognizer() {
	    AttrRecognizer.apply(this, arguments);

	    this.pX = null;
	    this.pY = null;
	}

	inherit(PanRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PanRecognizer
	     */
	    defaults: {
	        event: 'pan',
	        threshold: 10,
	        pointers: 1,
	        direction: DIRECTION_ALL
	    },

	    getTouchAction: function getTouchAction() {
	        var direction = this.options.direction;
	        var actions = [];
	        if (direction & DIRECTION_HORIZONTAL) {
	            actions.push(TOUCH_ACTION_PAN_Y);
	        }
	        if (direction & DIRECTION_VERTICAL) {
	            actions.push(TOUCH_ACTION_PAN_X);
	        }
	        return actions;
	    },

	    directionTest: function directionTest(input) {
	        var options = this.options;
	        var hasMoved = true;
	        var distance = input.distance;
	        var direction = input.direction;
	        var x = input.deltaX;
	        var y = input.deltaY;

	        // lock to axis?
	        if (!(direction & options.direction)) {
	            if (options.direction & DIRECTION_HORIZONTAL) {
	                direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
	                hasMoved = x != this.pX;
	                distance = Math.abs(input.deltaX);
	            } else {
	                direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;
	                hasMoved = y != this.pY;
	                distance = Math.abs(input.deltaY);
	            }
	        }
	        input.direction = direction;
	        return hasMoved && distance > options.threshold && direction & options.direction;
	    },

	    attrTest: function attrTest(input) {
	        return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));
	    },

	    emit: function emit(input) {
	        this.pX = input.deltaX;
	        this.pY = input.deltaY;

	        var direction = directionStr(input.direction);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }

	        this._super.emit.call(this, input);
	    }
	});

	/**
	 * Pinch
	 * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function PinchRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(PinchRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'pinch',
	        threshold: 0,
	        pointers: 2
	    },

	    getTouchAction: function getTouchAction() {
	        return [TOUCH_ACTION_NONE];
	    },

	    attrTest: function attrTest(input) {
	        return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);
	    },

	    emit: function emit(input) {
	        this._super.emit.call(this, input);
	        if (input.scale !== 1) {
	            var inOut = input.scale < 1 ? 'in' : 'out';
	            this.manager.emit(this.options.event + inOut, input);
	        }
	    }
	});

	/**
	 * Press
	 * Recognized when the pointer is down for x ms without any movement.
	 * @constructor
	 * @extends Recognizer
	 */
	function PressRecognizer() {
	    Recognizer.apply(this, arguments);

	    this._timer = null;
	    this._input = null;
	}

	inherit(PressRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PressRecognizer
	     */
	    defaults: {
	        event: 'press',
	        pointers: 1,
	        time: 500, // minimal time of the pointer to be pressed
	        threshold: 5 // a minimal movement is ok, but keep it low
	    },

	    getTouchAction: function getTouchAction() {
	        return [TOUCH_ACTION_AUTO];
	    },

	    process: function process(input) {
	        var options = this.options;
	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTime = input.deltaTime > options.time;

	        this._input = input;

	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {
	            this.reset();
	        } else if (input.eventType & INPUT_START) {
	            this.reset();
	            this._timer = setTimeoutContext(function () {
	                this.state = STATE_RECOGNIZED;
	                this.tryEmit();
	            }, options.time, this);
	        } else if (input.eventType & INPUT_END) {
	            return STATE_RECOGNIZED;
	        }
	        return STATE_FAILED;
	    },

	    reset: function reset() {
	        clearTimeout(this._timer);
	    },

	    emit: function emit(input) {
	        if (this.state !== STATE_RECOGNIZED) {
	            return;
	        }

	        if (input && input.eventType & INPUT_END) {
	            this.manager.emit(this.options.event + 'up', input);
	        } else {
	            this._input.timeStamp = now();
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});

	/**
	 * Rotate
	 * Recognized when two or more pointer are moving in a circular motion.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function RotateRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(RotateRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof RotateRecognizer
	     */
	    defaults: {
	        event: 'rotate',
	        threshold: 0,
	        pointers: 2
	    },

	    getTouchAction: function getTouchAction() {
	        return [TOUCH_ACTION_NONE];
	    },

	    attrTest: function attrTest(input) {
	        return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);
	    }
	});

	/**
	 * Swipe
	 * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.
	 * @constructor
	 * @extends AttrRecognizer
	 */
	function SwipeRecognizer() {
	    AttrRecognizer.apply(this, arguments);
	}

	inherit(SwipeRecognizer, AttrRecognizer, {
	    /**
	     * @namespace
	     * @memberof SwipeRecognizer
	     */
	    defaults: {
	        event: 'swipe',
	        threshold: 10,
	        velocity: 0.65,
	        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,
	        pointers: 1
	    },

	    getTouchAction: function getTouchAction() {
	        return PanRecognizer.prototype.getTouchAction.call(this);
	    },

	    attrTest: function attrTest(input) {
	        var direction = this.options.direction;
	        var velocity;

	        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {
	            velocity = input.velocity;
	        } else if (direction & DIRECTION_HORIZONTAL) {
	            velocity = input.velocityX;
	        } else if (direction & DIRECTION_VERTICAL) {
	            velocity = input.velocityY;
	        }

	        return this._super.attrTest.call(this, input) && direction & input.direction && input.distance > this.options.threshold && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;
	    },

	    emit: function emit(input) {
	        var direction = directionStr(input.direction);
	        if (direction) {
	            this.manager.emit(this.options.event + direction, input);
	        }

	        this.manager.emit(this.options.event, input);
	    }
	});

	/**
	 * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur
	 * between the given interval and position. The delay option can be used to recognize multi-taps without firing
	 * a single tap.
	 *
	 * The eventData from the emitted event contains the property `tapCount`, which contains the amount of
	 * multi-taps being recognized.
	 * @constructor
	 * @extends Recognizer
	 */
	function TapRecognizer() {
	    Recognizer.apply(this, arguments);

	    // previous time and center,
	    // used for tap counting
	    this.pTime = false;
	    this.pCenter = false;

	    this._timer = null;
	    this._input = null;
	    this.count = 0;
	}

	inherit(TapRecognizer, Recognizer, {
	    /**
	     * @namespace
	     * @memberof PinchRecognizer
	     */
	    defaults: {
	        event: 'tap',
	        pointers: 1,
	        taps: 1,
	        interval: 300, // max time between the multi-tap taps
	        time: 250, // max time of the pointer to be down (like finger on the screen)
	        threshold: 2, // a minimal movement is ok, but keep it low
	        posThreshold: 10 // a multi-tap can be a bit off the initial position
	    },

	    getTouchAction: function getTouchAction() {
	        return [TOUCH_ACTION_MANIPULATION];
	    },

	    process: function process(input) {
	        var options = this.options;

	        var validPointers = input.pointers.length === options.pointers;
	        var validMovement = input.distance < options.threshold;
	        var validTouchTime = input.deltaTime < options.time;

	        this.reset();

	        if (input.eventType & INPUT_START && this.count === 0) {
	            return this.failTimeout();
	        }

	        // we only allow little movement
	        // and we've reached an end event, so a tap is possible
	        if (validMovement && validTouchTime && validPointers) {
	            if (input.eventType != INPUT_END) {
	                return this.failTimeout();
	            }

	            var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
	            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;

	            this.pTime = input.timeStamp;
	            this.pCenter = input.center;

	            if (!validMultiTap || !validInterval) {
	                this.count = 1;
	            } else {
	                this.count += 1;
	            }

	            this._input = input;

	            // if tap count matches we have recognized it,
	            // else it has began recognizing...
	            var tapCount = this.count % options.taps;
	            if (tapCount === 0) {
	                // no failing requirements, immediately trigger the tap event
	                // or wait as long as the multitap interval to trigger
	                if (!this.hasRequireFailures()) {
	                    return STATE_RECOGNIZED;
	                } else {
	                    this._timer = setTimeoutContext(function () {
	                        this.state = STATE_RECOGNIZED;
	                        this.tryEmit();
	                    }, options.interval, this);
	                    return STATE_BEGAN;
	                }
	            }
	        }
	        return STATE_FAILED;
	    },

	    failTimeout: function failTimeout() {
	        this._timer = setTimeoutContext(function () {
	            this.state = STATE_FAILED;
	        }, this.options.interval, this);
	        return STATE_FAILED;
	    },

	    reset: function reset() {
	        clearTimeout(this._timer);
	    },

	    emit: function emit() {
	        if (this.state == STATE_RECOGNIZED) {
	            this._input.tapCount = this.count;
	            this.manager.emit(this.options.event, this._input);
	        }
	    }
	});

	/**
	 * Simple way to create an manager with a default set of recognizers.
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Hammer(element, options) {
	    options = options || {};
	    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);
	    return new Manager(element, options);
	}

	/**
	 * @const {string}
	 */
	Hammer.VERSION = '2.0.4';

	/**
	 * default settings
	 * @namespace
	 */
	Hammer.defaults = {
	    /**
	     * set if DOM events are being triggered.
	     * But this is slower and unused by simple implementations, so disabled by default.
	     * @type {Boolean}
	     * @default false
	     */
	    domEvents: false,

	    /**
	     * The value for the touchAction property/fallback.
	     * When set to `compute` it will magically set the correct value based on the added recognizers.
	     * @type {String}
	     * @default compute
	     */
	    touchAction: TOUCH_ACTION_COMPUTE,

	    /**
	     * @type {Boolean}
	     * @default true
	     */
	    enable: true,

	    /**
	     * EXPERIMENTAL FEATURE -- can be removed/changed
	     * Change the parent input target element.
	     * If Null, then it is being set the to main element.
	     * @type {Null|EventTarget}
	     * @default null
	     */
	    inputTarget: null,

	    /**
	     * force an input class
	     * @type {Null|Function}
	     * @default null
	     */
	    inputClass: null,

	    /**
	     * Default recognizer setup when calling `Hammer()`
	     * When creating a new Manager these will be skipped.
	     * @type {Array}
	     */
	    preset: [
	    // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]
	    [RotateRecognizer, { enable: false }], [PinchRecognizer, { enable: false }, ['rotate']], [SwipeRecognizer, { direction: DIRECTION_HORIZONTAL }], [PanRecognizer, { direction: DIRECTION_HORIZONTAL }, ['swipe']], [TapRecognizer], [TapRecognizer, { event: 'doubletap', taps: 2 }, ['tap']], [PressRecognizer]],

	    /**
	     * Some CSS properties can be used to improve the working of Hammer.
	     * Add them to this method and they will be set when creating a new Manager.
	     * @namespace
	     */
	    cssProps: {
	        /**
	         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userSelect: 'none',

	        /**
	         * Disable the Windows Phone grippers when pressing an element.
	         * @type {String}
	         * @default 'none'
	         */
	        touchSelect: 'none',

	        /**
	         * Disables the default callout shown when you touch and hold a touch target.
	         * On iOS, when you touch and hold a touch target such as a link, Safari displays
	         * a callout containing information about the link. This property allows you to disable that callout.
	         * @type {String}
	         * @default 'none'
	         */
	        touchCallout: 'none',

	        /**
	         * Specifies whether zooming is enabled. Used by IE10>
	         * @type {String}
	         * @default 'none'
	         */
	        contentZooming: 'none',

	        /**
	         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.
	         * @type {String}
	         * @default 'none'
	         */
	        userDrag: 'none',

	        /**
	         * Overrides the highlight color shown when the user taps a link or a JavaScript
	         * clickable element in iOS. This property obeys the alpha value, if specified.
	         * @type {String}
	         * @default 'rgba(0,0,0,0)'
	         */
	        tapHighlightColor: 'rgba(0,0,0,0)'
	    }
	};

	var STOP = 1;
	var FORCED_STOP = 2;

	/**
	 * Manager
	 * @param {HTMLElement} element
	 * @param {Object} [options]
	 * @constructor
	 */
	function Manager(element, options) {
	    options = options || {};

	    this.options = merge(options, Hammer.defaults);
	    this.options.inputTarget = this.options.inputTarget || element;

	    this.handlers = {};
	    this.session = {};
	    this.recognizers = [];

	    this.element = element;
	    this.input = createInputInstance(this);
	    this.touchAction = new TouchAction(this, this.options.touchAction);

	    toggleCssProps(this, true);

	    each(options.recognizers, function (item) {
	        var recognizer = this.add(new item[0](item[1]));
	        item[2] && recognizer.recognizeWith(item[2]);
	        item[3] && recognizer.requireFailure(item[3]);
	    }, this);
	}

	Manager.prototype = {
	    /**
	     * set options
	     * @param {Object} options
	     * @returns {Manager}
	     */
	    set: function set(options) {
	        extend(this.options, options);

	        // Options that need a little more setup
	        if (options.touchAction) {
	            this.touchAction.update();
	        }
	        if (options.inputTarget) {
	            // Clean up existing event listeners and reinitialize
	            this.input.destroy();
	            this.input.target = options.inputTarget;
	            this.input.init();
	        }
	        return this;
	    },

	    /**
	     * stop recognizing for this session.
	     * This session will be discarded, when a new [input]start event is fired.
	     * When forced, the recognizer cycle is stopped immediately.
	     * @param {Boolean} [force]
	     */
	    stop: function stop(force) {
	        this.session.stopped = force ? FORCED_STOP : STOP;
	    },

	    /**
	     * run the recognizers!
	     * called by the inputHandler function on every movement of the pointers (touches)
	     * it walks through all the recognizers and tries to detect the gesture that is being made
	     * @param {Object} inputData
	     */
	    recognize: function recognize(inputData) {
	        var session = this.session;
	        if (session.stopped) {
	            return;
	        }

	        // run the touch-action polyfill
	        this.touchAction.preventDefaults(inputData);

	        var recognizer;
	        var recognizers = this.recognizers;

	        // this holds the recognizer that is being recognized.
	        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED
	        // if no recognizer is detecting a thing, it is set to `null`
	        var curRecognizer = session.curRecognizer;

	        // reset when the last recognizer is recognized
	        // or when we're in a new session
	        if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {
	            curRecognizer = session.curRecognizer = null;
	        }

	        var i = 0;
	        while (i < recognizers.length) {
	            recognizer = recognizers[i];

	            // find out if we are allowed try to recognize the input for this one.
	            // 1.   allow if the session is NOT forced stopped (see the .stop() method)
	            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one
	            //      that is being recognized.
	            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.
	            //      this can be setup with the `recognizeWith()` method on the recognizer.
	            if (session.stopped !== FORCED_STOP && ( // 1
	            !curRecognizer || recognizer == curRecognizer || // 2
	            recognizer.canRecognizeWith(curRecognizer))) {
	                // 3
	                recognizer.recognize(inputData);
	            } else {
	                recognizer.reset();
	            }

	            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the
	            // current active recognizer. but only if we don't already have an active recognizer
	            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {
	                curRecognizer = session.curRecognizer = recognizer;
	            }
	            i++;
	        }
	    },

	    /**
	     * get a recognizer by its event name.
	     * @param {Recognizer|String} recognizer
	     * @returns {Recognizer|Null}
	     */
	    get: function get(recognizer) {
	        if (recognizer instanceof Recognizer) {
	            return recognizer;
	        }

	        var recognizers = this.recognizers;
	        for (var i = 0; i < recognizers.length; i++) {
	            if (recognizers[i].options.event == recognizer) {
	                return recognizers[i];
	            }
	        }
	        return null;
	    },

	    /**
	     * add a recognizer to the manager
	     * existing recognizers with the same event name will be removed
	     * @param {Recognizer} recognizer
	     * @returns {Recognizer|Manager}
	     */
	    add: function add(recognizer) {
	        if (invokeArrayArg(recognizer, 'add', this)) {
	            return this;
	        }

	        // remove existing
	        var existing = this.get(recognizer.options.event);
	        if (existing) {
	            this.remove(existing);
	        }

	        this.recognizers.push(recognizer);
	        recognizer.manager = this;

	        this.touchAction.update();
	        return recognizer;
	    },

	    /**
	     * remove a recognizer by name or instance
	     * @param {Recognizer|String} recognizer
	     * @returns {Manager}
	     */
	    remove: function remove(recognizer) {
	        if (invokeArrayArg(recognizer, 'remove', this)) {
	            return this;
	        }

	        var recognizers = this.recognizers;
	        recognizer = this.get(recognizer);
	        recognizers.splice(inArray(recognizers, recognizer), 1);

	        this.touchAction.update();
	        return this;
	    },

	    /**
	     * bind event
	     * @param {String} events
	     * @param {Function} handler
	     * @returns {EventEmitter} this
	     */
	    on: function on(events, handler) {
	        var handlers = this.handlers;
	        each(splitStr(events), function (event) {
	            handlers[event] = handlers[event] || [];
	            handlers[event].push(handler);
	        });
	        return this;
	    },

	    /**
	     * unbind event, leave emit blank to remove all handlers
	     * @param {String} events
	     * @param {Function} [handler]
	     * @returns {EventEmitter} this
	     */
	    off: function off(events, handler) {
	        var handlers = this.handlers;
	        each(splitStr(events), function (event) {
	            if (!handler) {
	                delete handlers[event];
	            } else {
	                handlers[event].splice(inArray(handlers[event], handler), 1);
	            }
	        });
	        return this;
	    },

	    /**
	     * emit event to the listeners
	     * @param {String} event
	     * @param {Object} data
	     */
	    emit: function emit(event, data) {
	        // we also want to trigger dom events
	        if (this.options.domEvents) {
	            triggerDomEvent(event, data);
	        }

	        // no handlers, so skip it all
	        var handlers = this.handlers[event] && this.handlers[event].slice();
	        if (!handlers || !handlers.length) {
	            return;
	        }

	        data.type = event;
	        data.preventDefault = function () {
	            data.srcEvent.preventDefault();
	        };

	        var i = 0;
	        while (i < handlers.length) {
	            handlers[i](data);
	            i++;
	        }
	    },

	    /**
	     * destroy the manager and unbinds all events
	     * it doesn't unbind dom events, that is the user own responsibility
	     */
	    destroy: function destroy() {
	        this.element && toggleCssProps(this, false);

	        this.handlers = {};
	        this.session = {};
	        this.input.destroy();
	        this.element = null;
	    }
	};

	/**
	 * add/remove the css properties as defined in manager.options.cssProps
	 * @param {Manager} manager
	 * @param {Boolean} add
	 */
	function toggleCssProps(manager, add) {
	    var element = manager.element;
	    each(manager.options.cssProps, function (value, name) {
	        element.style[prefixed(element.style, name)] = add ? value : '';
	    });
	}

	/**
	 * trigger dom event
	 * @param {String} event
	 * @param {Object} data
	 */
	function triggerDomEvent(event, data) {
	    var gestureEvent = document.createEvent('Event');
	    gestureEvent.initEvent(event, true, true);
	    gestureEvent.gesture = data;
	    data.target.dispatchEvent(gestureEvent);
	}

	extend(Hammer, {
	    INPUT_START: INPUT_START,
	    INPUT_MOVE: INPUT_MOVE,
	    INPUT_END: INPUT_END,
	    INPUT_CANCEL: INPUT_CANCEL,

	    STATE_POSSIBLE: STATE_POSSIBLE,
	    STATE_BEGAN: STATE_BEGAN,
	    STATE_CHANGED: STATE_CHANGED,
	    STATE_ENDED: STATE_ENDED,
	    STATE_RECOGNIZED: STATE_RECOGNIZED,
	    STATE_CANCELLED: STATE_CANCELLED,
	    STATE_FAILED: STATE_FAILED,

	    DIRECTION_NONE: DIRECTION_NONE,
	    DIRECTION_LEFT: DIRECTION_LEFT,
	    DIRECTION_RIGHT: DIRECTION_RIGHT,
	    DIRECTION_UP: DIRECTION_UP,
	    DIRECTION_DOWN: DIRECTION_DOWN,
	    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,
	    DIRECTION_VERTICAL: DIRECTION_VERTICAL,
	    DIRECTION_ALL: DIRECTION_ALL,

	    Manager: Manager,
	    Input: Input,
	    TouchAction: TouchAction,

	    TouchInput: TouchInput,
	    MouseInput: MouseInput,
	    PointerEventInput: PointerEventInput,
	    TouchMouseInput: TouchMouseInput,
	    SingleTouchInput: SingleTouchInput,

	    Recognizer: Recognizer,
	    AttrRecognizer: AttrRecognizer,
	    Tap: TapRecognizer,
	    Pan: PanRecognizer,
	    Swipe: SwipeRecognizer,
	    Pinch: PinchRecognizer,
	    Rotate: RotateRecognizer,
	    Press: PressRecognizer,

	    on: addEventListeners,
	    off: removeEventListeners,
	    each: each,
	    merge: merge,
	    extend: extend,
	    inherit: inherit,
	    bindFn: bindFn,
	    prefixed: prefixed
	});

	/*
	if (typeof define == TYPE_FUNCTION && define.amd) {
	    define(function() {
	        return Hammer;
	    });
	} else if (typeof module != 'undefined' && module.exports) {
	    module.exports = Hammer;
	} else {
	    window[exportName] = Hammer;
	}
	*/

	exports.Hammer = Hammer;

	//})(window, document, 'Hammer');

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _ionicConfigComponent = __webpack_require__(264);

	var Button = (function () {
	  function Button(elementRef) {
	    _classCallCheck(this, _Button);

	    this.domElement = elementRef.domElement;
	    this.config = Button.config.invoke(this);
	  }

	  var _Button = Button;
	  Button = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: 'button, ion-button, [ion-button],.button' })(Button) || Button;
	  return Button;
	})();

	exports.Button = Button;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef
	//@NgElement() ngElement:NgElement
	], Button);

	new _ionicConfigComponent.IonicComponent(Button, {
	  enhanceRawElement: true,
	  propClasses: ['primary', 'secondary', 'danger', 'light', 'stable', 'dark', 'block', 'clear', 'full', 'icon']
	});

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implVisibility = __webpack_require__(117);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _angular2Forms = __webpack_require__(258);

	var _ionicConfigComponent = __webpack_require__(264);

	var Checkbox = (function () {
	  function Checkbox(elementRef, cd) {
	    var _this = this;

	    _classCallCheck(this, _Checkbox);

	    this.domElement = elementRef.domElement;
	    this.domElement.classList.add('item');
	    this.controlDirective = cd;
	    cd.valueAccessor = this;

	    var setAriaRole = function setAriaRole(v) {
	      return _this.domElement.setAttribute('aria-role', v);
	    };
	    var setAriaChecked = function setAriaChecked(v) {
	      return _this.domElement.setAttribute('aria-checked', v);
	    };
	    var setAriaInvalid = function setAriaInvalid(v) {
	      return _this.domElement.setAttribute('aria-invalid', v);
	    };
	    var setAriaDisabled = function setAriaDisabled(v) {
	      return _this.domElement.setAttribute('aria-disabled', v);
	    };

	    this.config = Checkbox.config.invoke(this);

	    setAriaRole('checkbox');
	    setAriaInvalid('false');
	    setAriaDisabled('false');

	    this.setAriaRole = setAriaRole;
	    this.setAriaChecked = setAriaChecked;
	    this.setAriaInvalid = setAriaInvalid;
	    this.setAriaDisabled = setAriaDisabled;

	    this.setCheckedProperty = setAriaChecked;

	    // TODO: This is a hack and not a very good one at that
	    this.domElement.querySelector('.checkbox-off').classList.add(this.config.properties.iconOff.defaults.ios);
	    this.domElement.querySelector('.checkbox-on').classList.add(this.config.properties.iconOn.defaults.ios);
	  }

	  var _Checkbox = Checkbox;

	  _createClass(_Checkbox, [{
	    key: 'writeValue',

	    /**
	     * Much like ngModel, this is called from our valueAccessor for the attached
	     * ControlDirective to update the value internally.
	     */
	    value: function writeValue(value) {
	      // Convert it to a boolean
	      this.checked = !!value;
	    }
	  }, {
	    key: 'checked',
	    set: function (checked) {
	      this._checked = checked;
	      this.setCheckedProperty(checked);
	      this.controlDirective._control().updateValue(this._checked);
	    },
	    get: function () {
	      return this._checked;
	    }
	  }, {
	    key: 'onClick',
	    value: function onClick() {
	      this.checked = !this.checked;
	    }
	  }]);

	  Checkbox = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n  <div class="item-media media-checkbox">\n    <icon class="checkbox-off"></icon>\n    <icon class="checkbox-on"></icon>\n  </div>\n\n  <div class="item-content">\n\n    <div class="item-label">\n      <content></content>\n    </div>\n\n  </div>'
	  })(Checkbox) || Checkbox;
	  Checkbox = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-checkbox',
	    properties: {
	      checked: 'checked'
	    },
	    hostListeners: {
	      '^click': 'onClick($event)'
	    }
	  })(Checkbox) || Checkbox;
	  return Checkbox;
	})();

	exports.Checkbox = Checkbox;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef, _angular2Forms.ControlDirective
	// @PropertySetter('attr.role') setAriaRole: Function,
	// @PropertySetter('attr.aria-checked') setAriaChecked: Function,
	// @PropertySetter('attr.aria-invalid') setAriaInvalid: Function,
	// @PropertySetter('attr.aria-disabled') setAriaDisabled: Function
	], Checkbox);

	new _ionicConfigComponent.IonicComponent(Checkbox, {
	  properties: {
	    iconOff: {
	      defaults: {
	        ios: 'ion-ios-circle-outline',
	        android: 'ion-android-checkbox-outline-blank',
	        core: 'ion-android-checkbox-outline-blank'
	      }
	    },
	    iconOn: {
	      defaults: {
	        ios: 'ion-ios-checkmark',
	        android: 'ion-android-checkbox',
	        core: 'ion-android-checkbox' }
	    }
	  }
	});

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _swipeHandle = __webpack_require__(277);

	var _navNavItem = __webpack_require__(197);

	var Content = (function () {
	  function Content(navItem) {
	    _classCallCheck(this, _Content);

	    this.navItem = navItem;
	  }

	  var _Content = Content;

	  _createClass(_Content, [{
	    key: 'hideSwipeHandle',
	    get: function () {
	      return !this.navItem.enableBack;
	    }
	  }]);

	  Content = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n    <div class="scroll-content">\n      <content></content>\n    </div>\n    <swipe-handle [hidden]="hideSwipeHandle"></swipe-handle>',
	    directives: [_swipeHandle.SwipeHandle]
	  })(Content) || Content;
	  Content = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-content'
	  })(Content) || Content;
	  return Content;
	})();

	exports.Content = Content;
	Reflect.defineMetadata('design:paramtypes', [_navNavItem.NavItem], Content);

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implVisibility = __webpack_require__(117);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _ionicGesturesGesture = __webpack_require__(272);

	var _navNavItem = __webpack_require__(197);

	var SwipeHandle = (function () {
	  function SwipeHandle(navItem, elementRef) {
	    _classCallCheck(this, _SwipeHandle);

	    var nav = navItem.nav;

	    var gesture = new _ionicGesturesGesture.Gesture(elementRef.domElement);

	    gesture.listen();

	    gesture.on('panend', onDragEnd);
	    gesture.on('panleft', onDragHorizontal);
	    gesture.on('panright', onDragHorizontal);

	    var startX = null;
	    var swipeableAreaWidth = null;

	    function onDragEnd(ev) {
	      // TODO: POLISH THESE NUMBERS WITH GOOD MATHIFICATION

	      var progress = (ev.gesture.center.x - startX) / swipeableAreaWidth;
	      var completeSwipeBack = progress > 0.5;
	      var playbackRate = 4;

	      if (completeSwipeBack) {
	        // complete swipe back
	        if (progress > 0.9) {
	          playbackRate = 1;
	        } else if (progress > 0.8) {
	          playbackRate = 2;
	        } else if (progress > 0.7) {
	          playbackRate = 3;
	        }
	      } else {
	        // cancel swipe back
	        if (progress < 0.1) {
	          playbackRate = 1;
	        } else if (progress < 0.2) {
	          playbackRate = 2;
	        } else if (progress < 0.3) {
	          playbackRate = 3;
	        }
	      }

	      nav.swipeBackEnd(completeSwipeBack, progress, playbackRate);

	      startX = null;
	    }

	    function onDragHorizontal(ev) {
	      if (startX === null) {
	        startX = ev.gesture.center.x;
	        swipeableAreaWidth = nav.width() - startX;

	        nav.swipeBackStart();
	      }

	      nav.swipeBackProgress((ev.gesture.center.x - startX) / swipeableAreaWidth);
	    }
	  }

	  var _SwipeHandle = SwipeHandle;
	  SwipeHandle = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: 'swipe-handle'
	  })(SwipeHandle) || SwipeHandle;
	  return SwipeHandle;
	})();

	exports.SwipeHandle = SwipeHandle;
	(0, _angular2SrcCoreAnnotations_implVisibility.Ancestor)()(SwipeHandle, null, 0);
	Reflect.defineMetadata('design:paramtypes', [_navNavItem.NavItem, _angular2Angular2.ElementRef], SwipeHandle);

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var Icon = (function () {
	  function Icon() {
	    _classCallCheck(this, _Icon);
	  }

	  var _Icon = Icon;
	  Icon = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: 'ion-icon,ionicon,icon'
	  })(Icon) || Icon;
	  return Icon;
	})();

	exports.Icon = Icon;

	//ngEle.domElement.setAttribute('aria-hidden', 'hidden')

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _ionicUtil = __webpack_require__(193);

	var _ionicConfigComponent = __webpack_require__(264);

	var _ionicComponentsItemItemOptions = __webpack_require__(280);

	var _ionicComponentsItemItemSwipeButtons = __webpack_require__(281);

	var Item = (function () {
	  function Item(elementRef) {
	    _classCallCheck(this, _Item);

	    this._isOpen = false;
	    this._isSlideActive = false;
	    this._isTransitioning = false;
	    this._transform = '';

	    this.domElement = elementRef.domElement;
	    this.swipeButtons = {};
	    this.optionButtons = {};
	    Item.config.invoke(this);
	  }

	  var _Item = Item;
	  Item = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n    <content select="ion-primary-options"></content>\n    <content select="ion-primary-swipe-buttons"></content>\n    <div class="item-content">\n      <div class="item-media">\n      </div>\n      <div class="item-accessory">\n        <content select="ion-item-accessory"></content>\n      </div>\n      <div class="item-label">\n        <content></content>\n      </div>\n    </div>\n    <content select="ion-secondary-options"></content>\n    <content select="ion-secondary-swipe-buttons"></content>\n  ',
	    directives: [_ionicComponentsItemItemSwipeButtons.ItemPrimarySwipeButtons]
	  })(Item) || Item;
	  Item = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-item' })(Item) || Item;
	  return Item;
	})();

	exports.Item = Item;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef], Item);

	new _ionicConfigComponent.IonicComponent(Item, {
	  propClasses: ['full']
	});

	function clsSetter(el, name) {
	  return function (isSet) {
	    return el.classList[isSet ? 'add' : 'remove'](name);
	  };
	}

	var Slideable = (function () {
	  function Slideable(slideElement) {
	    _classCallCheck(this, Slideable);
	  }

	  _createClass(Slideable, [{
	    key: 'onTransform',

	    // override
	    value: function onTransform(str) {}
	  }, {
	    key: 'onTransitionActive',

	    // override
	    value: function onTransitionActive(active) {}
	  }, {
	    key: 'onSlideActive',

	    //override
	    value: function onSlideActive(active) {}
	  }, {
	    key: 'transform',
	    value: function transform(str) {
	      if (arguments.length && str !== this._transform) {
	        this.onTransform();
	      }
	    }
	  }, {
	    key: 'isTransitionActive',
	    value: function isTransitionActive(active) {
	      if (arguments.length && active !== this._isTransitionActive) {
	        this._isTransitionActive = active;
	        this.onSetTransitionActive(active);
	      }
	      return this._isTransitioning;
	    }
	  }, {
	    key: 'isSlideActive',
	    value: function isSlideActive(active) {
	      if (arguments.length && active !== this._isSlideActive) {
	        this._isSlideActive = active;
	        this.onSetDragActive(active);
	      }
	      return this._isSlideActive;
	    }
	  }, {
	    key: 'isOpen',
	    value: (function (_isOpen) {
	      function isOpen(_x) {
	        return _isOpen.apply(this, arguments);
	      }

	      isOpen.toString = function () {
	        return _isOpen.toString();
	      };

	      return isOpen;
	    })(function (open) {
	      var _this = this;

	      if (arguments.length && open !== this._isOpen) {
	        this.isTransitionActive(true);
	        _ionicUtil.dom.rafPromise().then(function () {
	          _this.isOpen = isOpen;
	          _this.onSetIsOpen(open);
	        });
	      }
	    })
	  }]);

	  return Slideable;
	})();

	Reflect.defineMetadata('design:paramtypes', [Element], Slideable);

	var ItemSlideGesture = function ItemSlideGesture() {
	  _classCallCheck(this, ItemSlideGesture);
	};

	//,[ion-item]'

	// ItemSecondarySwipeButtons,
	// ItemPrimaryOptions,
	// ItemSecondaryOptions

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var ItemPrimaryOptions = (function () {
	  function ItemPrimaryOptions() {
	    _classCallCheck(this, _ItemPrimaryOptions);
	  }

	  var _ItemPrimaryOptions = ItemPrimaryOptions;
	  ItemPrimaryOptions = Decorator({
	    selector: 'ion-primary-options'
	  })(ItemPrimaryOptions) || ItemPrimaryOptions;
	  return ItemPrimaryOptions;
	})();

	exports.ItemPrimaryOptions = ItemPrimaryOptions;

	var ItemSecondaryOptions = (function () {
	  function ItemSecondaryOptions() {
	    _classCallCheck(this, _ItemSecondaryOptions);
	  }

	  var _ItemSecondaryOptions = ItemSecondaryOptions;
	  ItemSecondaryOptions = Decorator({
	    selector: 'ion-secondary-options'
	  })(ItemSecondaryOptions) || ItemSecondaryOptions;
	  return ItemSecondaryOptions;
	})();

	exports.ItemSecondaryOptions = ItemSecondaryOptions;

/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _ionicComponentsItemItem = __webpack_require__(279);

	var _ionicGesturesSlideGesture = __webpack_require__(270);

	var ItemPrimarySwipeButtons = (function () {
	  function ItemPrimarySwipeButtons(elementRef, item) {
	    _classCallCheck(this, _ItemPrimarySwipeButtons);

	    item.primarySwipeButtons = this;
	    this.domElement = elementRef.domElement;
	    this.parentItem = item;
	    this.gesture = new ItemSlideGesture(this);
	    this.gesture.listen();
	  }

	  var _ItemPrimarySwipeButtons = ItemPrimarySwipeButtons;

	  _createClass(_ItemPrimarySwipeButtons, [{
	    key: 'setOpen',
	    value: function setOpen(isOpen) {
	      var _this = this;

	      if (isOpen !== this.isOpen) {
	        this.isOpen = isOpen;
	        requestAnimationFrame(function () {
	          _this.domElement.classList[isOpen ? 'add' : 'remove'](isOpen);
	        });
	      }
	    }
	  }]);

	  ItemPrimarySwipeButtons = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: 'ion-primary-swipe-buttons'
	  })(ItemPrimarySwipeButtons) || ItemPrimarySwipeButtons;
	  return ItemPrimarySwipeButtons;
	})();

	exports.ItemPrimarySwipeButtons = ItemPrimarySwipeButtons;
	(0, _angular2Angular2.Parent)()(ItemPrimarySwipeButtons, null, 1);
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef, _ionicComponentsItemItem.Item], ItemPrimarySwipeButtons);

	var ItemSecondarySwipeButtons = (function () {
	  function ItemSecondarySwipeButtons() {
	    _classCallCheck(this, _ItemSecondarySwipeButtons);
	  }

	  var _ItemSecondarySwipeButtons = ItemSecondarySwipeButtons;
	  ItemSecondarySwipeButtons = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: 'ion-secondary-swipe-buttons'
	  })(ItemSecondarySwipeButtons) || ItemSecondarySwipeButtons;
	  return ItemSecondarySwipeButtons;
	})();

	exports.ItemSecondarySwipeButtons = ItemSecondarySwipeButtons;

	var ItemSlideGesture = (function (_SlideGesture) {
	  function ItemSlideGesture(buttons) {
	    _classCallCheck(this, ItemSlideGesture);

	    _get(Object.getPrototypeOf(ItemSlideGesture.prototype), 'constructor', this).call(this, buttons.parentItem.domElement);
	    this.buttons = buttons;
	  }

	  _inherits(ItemSlideGesture, _SlideGesture);

	  _createClass(ItemSlideGesture, [{
	    key: 'getSlideBoundaries',
	    value: function getSlideBoundaries() {
	      return {
	        min: -this.buttons.domElement.offsetWidth,
	        max: 0 };
	    }
	  }, {
	    key: 'getElementStartPos',
	    value: function getElementStartPos(slide, ev) {
	      return this.buttons.isOpen ? slide.max : slide.min;
	    }
	  }, {
	    key: 'onSlideBeforeStart',
	    value: function onSlideBeforeStart() {
	      this.buttons.domElement.classList.add('changing');
	      this.buttons.domElement.classList.add('no-transition');
	      return new Promise(function (resolve) {
	        requestAnimationFrame(resolve);
	      });
	    }
	  }, {
	    key: 'onSlide',
	    value: function onSlide(slide, ev) {
	      this.buttons.domElement.style.transform = 'translate3d(' + slide.distance + 'px,0,0)';
	    }
	  }, {
	    key: 'onSlideEnd',
	    value: function onSlideEnd(slide, ev) {
	      this.buttons.domElement.style.transform = '';
	      this.buttons.domElement.classList.remove('no-transition');
	      if (Math.abs(ev.velocityX) > 0.2 || Math.abs(slide.delta) > Math.abs(slide.max) * 0.5) {
	        this.buttons.setOpen(!this.buttons.isOpen);
	      }
	    }
	  }]);

	  return ItemSlideGesture;
	})(_ionicGesturesSlideGesture.SlideGesture);

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	// form

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _ionicConfigComponent = __webpack_require__(264);

	var Input = (function () {
	  function Input() {
	    _classCallCheck(this, _Input);

	    //this.config = Button.config.invoke(this)
	    console.log('INPUT');
	  }

	  var _Input = Input;
	  Input = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: 'ion-input'
	  })(Input) || Input;
	  return Input;
	})();

	exports.Input = Input;

	// new IonicComponent(Input, {
	// })

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _ionicConfigComponent = __webpack_require__(264);

	var Label = (function () {
	  function Label() {
	    _classCallCheck(this, _Label);
	  }

	  var _Label = Label;
	  Label = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: 'ion-label'
	  })(Label) || Label;
	  return Label;
	})();

	exports.Label = Label;

	// new IonicComponent(Label, {
	// })

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _ionicConfigComponent = __webpack_require__(264);

	var List = (function () {
	  function List(elementRef) {
	    _classCallCheck(this, _List);

	    this.domElement = elementRef.domElement;
	    this.config = List.config.invoke(this);
	  }

	  var _List = List;
	  List = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '<content></content>'
	  })(List) || List;
	  List = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-list'
	  })(List) || List;
	  return List;
	})();

	exports.List = List;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef], List);

	new _ionicConfigComponent.IonicComponent(List, {
	  propClasses: ['inset']
	});

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implVisibility = __webpack_require__(117);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _ionicGesturesDragGesture = __webpack_require__(271);

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	var _ionicConfigComponent = __webpack_require__(264);

	var _ionicGesturesHammer = __webpack_require__(273);

	/**
	 * Slides is a slide box implementation based off of swipe.js
	 * and the ionic1 implementation.
	 *
	 * May 21st, 2015
	 * @maxlynch
	 *
	 * * TODO: Finish the slideshow, should continue on transition end or a
	 *         similar event.
	 * * TODO: Add support for 2 slide cloning
	 * * TODO: Test support for N-slide sliding (like go 2 slides ahead)
	 * * TODO: Analyze performance, add request animation frame if necessary
	 * * TODO: Test mouse support
	 * * TODO: Port over mouse handling
	 */

	var Slides = (function () {
	  function Slides(elementRef) {
	    var _this = this;

	    _classCallCheck(this, _Slides);

	    // Grab the main container, and the slides-view wrapper
	    this.domElement = elementRef.domElement;

	    this.config = Slides.config.invoke(this);

	    this.slides = [];
	    this.currentIndex = 0;
	    this.animateSpeed = 300;
	    this.slideDelay = 0; //3000;

	    // Initialize our slides gesture handler
	    this.gesture = new SlidesGesture(this);
	    this.gesture.listen();

	    // Wait a cycle for the children to exist before computing sizes
	    setTimeout(function () {
	      // Continuous mode, but only if we have at least 2 slides
	      _this.continuous = _this.slides.length > 1 ? true : false;

	      // Grab the wrapper element that contains the slides
	      _this.wrapperElement = _this.domElement.children[0];

	      _this.resize();

	      if (_this.slideDelay) {
	        _this.startShow();
	      }
	    });
	  }

	  var _Slides = Slides;

	  _createClass(_Slides, [{
	    key: 'startShow',

	    /**
	     * Start the slideshow.
	     */
	    value: function startShow() {
	      this._showTimeout = setTimeout(this.slideRight.bind(this), this.slideDelay);
	    }
	  }, {
	    key: 'stopShow',

	    /**
	     * End the slideshow.
	     */
	    value: function stopShow() {
	      clearTimeout(this._showTimout);
	    }
	  }, {
	    key: 'setPager',

	    /**
	     * Set the pager element for handling rendering of page icons and
	     * switching slides through clicks, etc.
	     */
	    value: function setPager(pager) {
	      this._pager = pager;
	    }
	  }, {
	    key: 'resize',
	    value: function resize() {
	      // Get the width of the container, which is the viewport
	      // that the user will actually see.
	      this.containerWidth = this.domElement.offsetWidth || this.domElement.getBoundingClientRect().width;

	      // Set the wrapper element to the total width of the child elements
	      this.wrapperElement.style.width = this.containerWidth * this.slides.length + 'px';

	      // Position all the child slides
	      this._bump();
	    }
	  }, {
	    key: 'add',

	    /**
	     * Add a new slide to the slides.
	     */
	    value: function add(slide) {
	      this._append(slide);
	    }
	  }, {
	    key: 'slide',

	    /**
	     * Slide to a specific slide index.
	     *
	     * @param toIndex the index to slide to.
	     * @param isRight, whether to go right or go left, only works in continuous mode
	     */
	    value: function slide(toIndex, isRight) {
	      if (toIndex === this.currentIndex) {
	        return;
	      }

	      // Some simple variables to reduce typing
	      var m = this._move.bind(this);
	      var c = this._circle.bind(this);
	      var i = this.currentIndex;
	      var w = this.containerWidth;
	      var s = this.slides[c(i)];
	      var speed = this.animateSpeed;

	      // Create a multiplier depending on the direction we want to travel
	      // TODO: Verify isRight doesn't apply in non-continuous mode
	      var dir = isRight ? 1 : -1;

	      var newIndex = undefined;

	      if (this.continuous) {
	        // We are in continuous mode, so wrap the other elements around
	        m(c(i - dir * 1), -dir * w);
	        m(c(i + dir * 2), dir * w);

	        newIndex = isRight ? c(i + 1) : c(i - 1);
	      } else {
	        // We aren't in continuous mode, so move forward one
	        m(i - dir * 1, -dir * w);
	        newIndex = c(i + dir * 1);
	      }

	      // Move the current slide back, animate it
	      m(i, s.x - dir * w, speed);

	      // Move the next appropriate side into this position, animate it
	      m(c(i + dir * 1), this.slides[c(i + dir * 1)].x - dir * w, speed);

	      this.currentIndex = newIndex;

	      console.log('Drag ended, new position:', this.currentIndex);
	    }
	  }, {
	    key: 'slideLeft',

	    /**
	     * Slide left, possibly wrapping around in continuous mode.
	     */
	    value: function slideLeft() {
	      this.slide(this._circle(this.currentIndex - 1), false);
	    }
	  }, {
	    key: 'slideRight',

	    /**
	     * Slide right, possibly wrapping around in continuous mode.
	     */
	    value: function slideRight() {
	      this.slide(this._circle(this.currentIndex + 1), true);
	    }
	  }, {
	    key: '_bump',

	    // Reposition all the existing slides so they are in the right position
	    value: function _bump() {
	      var slide = undefined;
	      var tx = undefined;

	      var i = this.slides.length;

	      while (i--) {
	        slide = this.slides[i];

	        // Set the slide's left position to a negative of the current index and its width
	        slide.left = i * -this.containerWidth;
	        slide.width = this.containerWidth;

	        // Check if this slide is before or after the currently active one,
	        // since we have to position it before or after it
	        tx = 0;
	        if (this.currentIndex > i) {
	          tx = -this.containerWidth;
	        } else if (this.currentIndex < i) {
	          tx = this.containerWidth;
	        }

	        this._move(i, tx);
	      }

	      if (this.continuous) {
	        // If we are in continuous mode, we need to wrap the previous and
	        // last element to get a complete "circle"
	        var index1 = this._circle(this.currentIndex - 1);
	        var index2 = this._circle(this.currentIndex + 1);

	        this._move(index1, -this.containerWidth); //, 0);
	        this._move(index2, this.containerWidth); //, 0);
	      }
	    }
	  }, {
	    key: '_drag',

	    // Process a drag, with a deltaX value
	    value: function _drag(dx) {

	      // Grab the left/center/right slides
	      var index1 = this._circle(this.currentIndex - 1);
	      var index2 = this._circle(this.currentIndex);
	      var index3 = this._circle(this.currentIndex + 1);

	      var s1 = this.slides[index1];
	      var s2 = this.slides[index2];
	      var s3 = this.slides[index3];

	      // Translate the left/center/right slides based on the deltaX of the drag
	      if (s1) {
	        s1.translate(dx + s1.x);
	      }
	      if (s2) {
	        s2.translate(dx + s2.x);
	      }
	      if (s3) {
	        s3.translate(dx + s3.x);
	      }
	    }
	  }, {
	    key: '_endDrag',
	    value: function _endDrag(event) {
	      var isRight = event.gesture.offsetDirection & _ionicGesturesHammer.Hammer.DIRECTION_RIGHT;
	      console.log('Slides: ending drag', event, '\n\t', 'Right?', isRight);

	      if (isRight) {
	        this.slideRight();
	      } else {
	        this.slideLeft();
	      }
	    }
	  }, {
	    key: '_move',
	    value: function _move(pos, translateX, speed) {
	      console.log('MOVE', pos, translateX, speed ? speed : 0);
	      // Should already be wrapped with circle
	      var slide = this.slides[pos];
	      if (!slide) {
	        return;
	      }

	      slide.translate(translateX, speed);
	      slide.x = translateX;
	    }
	  }, {
	    key: '_circle',

	    // A modulo "circle" to stay in the bounds of the slide array
	    value: function _circle(i) {
	      return (this.slides.length + i % this.slides.length) % this.slides.length;
	    }
	  }, {
	    key: '_append',
	    value: function _append(slide) {
	      this.slides.push(slide);
	    }
	  }, {
	    key: '_prepend',
	    value: function _prepend(slide) {
	      this.slides.unshift(slide);
	    }
	  }]);

	  Slides = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '<div class="slides-view"><content></content></div>',
	    directives: [Slide, SlidePager]
	  })(Slides) || Slides;
	  Slides = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-slides'
	  })(Slides) || Slides;
	  return Slides;
	})();

	exports.Slides = Slides;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef], Slides);

	new _ionicConfigComponent.IonicComponent(Slides, {});

	var Slide = (function () {
	  function Slide(slides, elementRef) {
	    _classCallCheck(this, _Slide);

	    this.domElement = elementRef.domElement;
	    this.config = Slide.config.invoke(this);

	    slides.add(this);
	  }

	  var _Slide = Slide;

	  _createClass(_Slide, [{
	    key: 'translate',
	    value: function translate(x, duration) {
	      this._translateX = x;

	      duration = duration || 0;

	      this.domElement.style[_ionicUtil.dom.CSS.transition + 'Duration'] = duration + 'ms';
	      this.domElement.style[_ionicUtil.dom.CSS.transform] = 'translate3d(' + x + 'px, 0, 0)';
	    }
	  }, {
	    key: 'translateX',
	    get: function () {
	      return this._translateX;
	    }
	  }, {
	    key: 'left',
	    set: function (x) {
	      this._left = x;
	      this.domElement.style.left = x + 'px';
	    },
	    get: function () {
	      return this._left;
	    }
	  }, {
	    key: 'width',
	    set: function (width) {
	      this._width = width;
	      this.domElement.style.width = width + 'px';
	    },
	    get: function () {
	      return this._width;
	    }
	  }]);

	  Slide = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '<content></content>'
	  })(Slide) || Slide;
	  Slide = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-slide' })(Slide) || Slide;
	  return Slide;
	})();

	exports.Slide = Slide;
	(0, _angular2SrcCoreAnnotations_implVisibility.Ancestor)()(Slide, null, 0);
	Reflect.defineMetadata('design:paramtypes', [Slides, _angular2Angular2.ElementRef], Slide);

	new _ionicConfigComponent.IonicComponent(Slide, {});

	var SlidePager = (function () {
	  function SlidePager(slides, elementRef) {
	    _classCallCheck(this, _SlidePager);

	    this.domElement = elementRef.domElement;
	    this.config = SlidePager.config.invoke(this);

	    this.slides = slides;

	    this.slides.setPager(this);
	  }

	  var _SlidePager = SlidePager;

	  _createClass(_SlidePager, [{
	    key: 'getSlides',
	    value: function getSlides() {
	      return this.slides.slides;
	    }
	  }]);

	  SlidePager = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '<span class="slide-pager-page" *for="#page of getSlides()">{{page.width}}<i class="icon ion-record"></i>X</span>',
	    direcitves: [_angular2Angular2.For]
	  })(SlidePager) || SlidePager;
	  SlidePager = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-pager' })(SlidePager) || SlidePager;
	  return SlidePager;
	})();

	exports.SlidePager = SlidePager;
	(0, _angular2SrcCoreAnnotations_implVisibility.Ancestor)()(SlidePager, null, 0);
	Reflect.defineMetadata('design:paramtypes', [Slides, _angular2Angular2.ElementRef], SlidePager);

	new _ionicConfigComponent.IonicComponent(SlidePager, {});

	var SlidesGesture = (function (_DragGesture) {
	  function SlidesGesture(slides) {
	    _classCallCheck(this, SlidesGesture);

	    //util.defaults(opts, {});
	    _get(Object.getPrototypeOf(SlidesGesture.prototype), 'constructor', this).call(this, slides.domElement);
	    this.slides = slides;
	  }

	  _inherits(SlidesGesture, _DragGesture);

	  _createClass(SlidesGesture, [{
	    key: 'onDrag',
	    value: function onDrag(event) {
	      //console.log('Drag', event);
	      var x = event.gesture.center.x;
	      var y = event.gesture.center.y;

	      this._drag.x = x;
	      this._drag.y = y;

	      this.slides._drag(event.gesture.deltaX);
	    }
	  }, {
	    key: 'onDragStart',
	    value: function onDragStart(event) {
	      console.log('Drag start', event);

	      this._drag = {
	        startX: event.gesture.center.x,
	        startY: event.gesture.center.y };
	    }
	  }, {
	    key: 'onDragEnd',
	    value: function onDragEnd(event) {
	      console.log('Drag end', event);

	      this.slides._endDrag(event);
	    }
	  }]);

	  return SlidesGesture;
	})(_ionicGesturesDragGesture.DragGesture);

	exports.SlidesGesture = SlidesGesture;

	//[class.active]="$index == currentSlide}" ng-click="pagerClick($index)"><i class="icon ion-record"></i></span></div>',

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implVisibility = __webpack_require__(117);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _angular2Forms = __webpack_require__(258);

	var _ionicConfigComponent = __webpack_require__(264);

	var RadioGroup = (function () {
	  function RadioGroup(elementRef, cd) {
	    _classCallCheck(this, _RadioGroup);

	    this.domElement = elementRef.domElement;
	    this.config = RadioGroup.config.invoke(this);
	    this.controlDirective = cd;
	    cd.valueAccessor = this; //ControlDirective should inject CheckboxControlDirective

	    this.domElement.classList.add('list');

	    this.buttons = [];
	  }

	  var _RadioGroup = RadioGroup;

	  _createClass(_RadioGroup, [{
	    key: 'writeValue',

	    /**
	     * Much like ngModel, this is called from our valueAccessor for the attached
	     * ControlDirective to update the value internally.
	     */
	    value: function writeValue(value) {
	      var _this = this;

	      this.value = value;

	      setTimeout(function () {
	        _this.selectFromValue(value);
	      });
	    }
	  }, {
	    key: 'register',

	    /**
	     * Called by child SegmentButtons to bind themselves to
	     * the Segment.
	     */
	    value: function register(radioButton) {
	      var _this2 = this;

	      this.buttons.push(radioButton);

	      // If we don't have a default value, and this is the
	      // first button added, select it
	      if (!this.value && this.buttons.length === 1) {
	        setTimeout(function () {
	          // We need to defer so the control directive can initialize
	          _this2.selected(radioButton);
	        });
	      }
	    }
	  }, {
	    key: 'selectFromValue',

	    /**
	     * Select the button with the given value.
	     */
	    value: function selectFromValue(value) {
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = this.buttons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var button = _step.value;

	          if (button.value === value) {
	            this.selected(button);
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator['return']) {
	            _iterator['return']();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'selected',

	    /**
	     * Indicate a button should be selected.
	     */
	    value: function selected(radioButton) {
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = this.buttons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var button = _step2.value;

	          button.setActive(false);
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
	            _iterator2['return']();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      radioButton.setActive(true);

	      this.value = radioButton.value;
	      // TODO: Better way to do this?
	      this.controlDirective._control().updateValue(this.value);
	    }
	  }]);

	  RadioGroup = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '<content></content>'
	  })(RadioGroup) || RadioGroup;
	  RadioGroup = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-radio-group'
	  })(RadioGroup) || RadioGroup;
	  return RadioGroup;
	})();

	exports.RadioGroup = RadioGroup;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef, _angular2Forms.ControlDirective], RadioGroup);

	new _ionicConfigComponent.IonicComponent(RadioGroup, {});

	var RadioButton = (function () {
	  function RadioButton(group, elementRef) {
	    _classCallCheck(this, _RadioButton);

	    this.domElement = elementRef.domElement;
	    this.config = RadioButton.config.invoke(this);

	    this.domElement.classList.add('item');
	    this.domElement.setAttribute('aria-checked', true);

	    this.group = group;

	    group.register(this);
	  }

	  var _RadioButton = RadioButton;

	  _createClass(_RadioButton, [{
	    key: 'setActive',
	    value: function setActive(isActive) {
	      // TODO: No domElement
	      if (isActive) {
	        this.domElement.classList.add('active');
	        this.domElement.setAttribute('aria-checked', true);
	      } else {
	        this.domElement.classList.remove('active');
	        this.domElement.setAttribute('aria-checked', false);
	      }
	    }
	  }, {
	    key: 'buttonClicked',
	    value: function buttonClicked(event) {
	      this.group.selected(this, event);
	      event.preventDefault();
	    }
	  }]);

	  RadioButton = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n    <div class="item-content">\n\n      <div class="item-title">\n        <content></content>\n      </div>\n\n      <div class="item-media media-radio">\n        <icon class="radio-off"></icon>\n        <icon class="ion-ios-checkmark-empty radio-on"></icon>\n      </div>\n\n    </div>\n  '
	  })(RadioButton) || RadioButton;
	  RadioButton = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-radio',
	    hostListeners: {
	      '^click': 'buttonClicked($event)'
	    },
	    properties: {
	      value: 'value'
	    }
	  })(RadioButton) || RadioButton;
	  return RadioButton;
	})();

	exports.RadioButton = RadioButton;
	(0, _angular2SrcCoreAnnotations_implVisibility.Ancestor)()(RadioButton, null, 0);
	Reflect.defineMetadata('design:paramtypes', [RadioGroup, _angular2Angular2.ElementRef], RadioButton);

	new _ionicConfigComponent.IonicComponent(RadioButton, {});

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implVisibility = __webpack_require__(117);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _angular2Forms = __webpack_require__(258);

	var _ionicUtil = __webpack_require__(193);

	var _ionicConfigComponent = __webpack_require__(264);

	var _ionicComponentsButtonButton = __webpack_require__(274);

	var Segment = (function () {
	  function Segment(elementRef, renderer, cd) {
	    _classCallCheck(this, _Segment);

	    console.log('ELEMENT REF INJECT', elementRef);
	    this.domElement = elementRef.domElement;
	    this.config = Segment.config.invoke(this);
	    this.elementRef = elementRef;
	    this.renderer = renderer;
	    this.controlDirective = cd;

	    cd.valueAccessor = this; //ControlDirective should inject CheckboxControlDirective

	    this.buttons = [];
	  }

	  var _Segment = Segment;

	  _createClass(_Segment, [{
	    key: 'writeValue',

	    /**
	     * Much like ngModel, this is called from our valueAccessor for the attached
	     * ControlDirective to update the value internally.
	     */
	    value: function writeValue(value) {
	      var _this = this;

	      this.value = value;

	      setTimeout(function () {
	        _this.selectFromValue(value);
	      });
	    }
	  }, {
	    key: 'register',

	    /**
	     * Called by child SegmentButtons to bind themselves to
	     * the Segment.
	     */
	    value: function register(segmentButton) {
	      var _this2 = this;

	      this.buttons.push(segmentButton);

	      // If we don't have a default value, and this is the
	      // first button added, select it
	      if (!this.value && this.buttons.length === 1) {
	        setTimeout(function () {
	          // We need to defer so the control directive can initialize
	          _this2.selected(segmentButton);
	        });
	      }
	    }
	  }, {
	    key: 'selectFromValue',

	    /**
	     * Select the button with the given value.
	     */
	    value: function selectFromValue(value) {
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = this.buttons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var button = _step.value;

	          if (button.value === value) {
	            this.selected(button);
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator['return']) {
	            _iterator['return']();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'selected',

	    /**
	     * Indicate a button should be selected.
	     */
	    value: function selected(segmentButton) {
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = this.buttons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var button = _step2.value;

	          button.setActive(false);
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
	            _iterator2['return']();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      segmentButton.setActive(true);

	      this.value = segmentButton.value;
	      // TODO: Better way to do this?
	      this.controlDirective._control().updateValue(this.value);
	    }
	  }]);

	  Segment = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '<div class="ion-segment">\n    <content></content>\n  </div>\n  ',
	    directives: [_ionicComponentsButtonButton.Button, SegmentButton],
	    properties: {
	      value: 'value'
	    },
	    hostProperties: {
	      value: 'value'
	    }
	  })(Segment) || Segment;
	  Segment = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-segment',
	    hostListeners: {
	      'click': 'buttonClicked($event)'
	    }
	  })(Segment) || Segment;
	  return Segment;
	})();

	exports.Segment = Segment;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef, _angular2Angular2.Renderer, _angular2Forms.ControlDirective], Segment);

	new _ionicConfigComponent.IonicComponent(Segment, {});

	var SegmentButton = (function () {
	  function SegmentButton(segment, elementRef, renderer) {
	    _classCallCheck(this, _SegmentButton);

	    this.domElement = elementRef.domElement;
	    this.segment = segment;

	    segment.register(this);
	  }

	  var _SegmentButton = SegmentButton;

	  _createClass(_SegmentButton, [{
	    key: 'setActive',
	    value: function setActive(isActive) {
	      // TODO: No domElement
	      if (isActive) {
	        this.domElement.classList.add('active');
	      } else {
	        this.domElement.classList.remove('active');
	      }
	    }
	  }, {
	    key: 'buttonClicked',
	    value: function buttonClicked(event) {
	      this.segment.selected(this, event);
	      event.preventDefault();
	    }
	  }]);

	  SegmentButton = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '<content></content>'
	  })(SegmentButton) || SegmentButton;
	  SegmentButton = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-segment-button',
	    hostListeners: {
	      'click': 'buttonClicked($event)'
	    },
	    properties: {
	      value: 'value'
	    }
	  })(SegmentButton) || SegmentButton;
	  return SegmentButton;
	})();

	exports.SegmentButton = SegmentButton;
	(0, _angular2SrcCoreAnnotations_implVisibility.Ancestor)()(SegmentButton, null, 0);
	Reflect.defineMetadata('design:paramtypes', [Segment, _angular2Angular2.ElementRef, _angular2Angular2.Renderer], SegmentButton);

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _angular2Forms = __webpack_require__(258);

	var _ionicUtil = __webpack_require__(193);

	var _ionicConfigComponent = __webpack_require__(264);

	var Switch = (function () {
	  function Switch(elementRef, cd) {
	    var _this = this;

	    _classCallCheck(this, _Switch);

	    this.domElement = elementRef.domElement;
	    this.config = Switch.config.invoke(this);
	    this.controlDirective = cd;
	    cd.valueAccessor = this;

	    // TODO: These are temporary until we figure out what to do
	    // with @PropertSetter
	    var setAriaRole = function setAriaRole(v) {
	      return _this.domElement.setAttribute('aria-role', v);
	    };
	    var setAriaChecked = function setAriaChecked(v) {
	      return _this.domElement.setAttribute('aria-checked', v);
	    };
	    var setAriaInvalid = function setAriaInvalid(v) {
	      return _this.domElement.setAttribute('aria-invalid', v);
	    };
	    var setAriaDisabled = function setAriaDisabled(v) {
	      return _this.domElement.setAttribute('aria-disabled', v);
	    };

	    //let setChecked = (v) => this.domElement.setAttribute('checked', v);

	    this.domElement.classList.add('item');

	    // TODO: These rely on the commented-out PropertySetter's above
	    //setAriaRole('checkbox')
	    //setInvalid('false')
	    //setDisabled('false')
	    this.setCheckedProperty = setAriaChecked;
	  }

	  var _Switch = Switch;

	  _createClass(_Switch, [{
	    key: 'writeValue',

	    /**
	     * Much like ngModel, this is called from our valueAccessor for the attached
	     * ControlDirective to update the value internally.
	     */
	    value: function writeValue(value) {
	      // Convert it to a boolean
	      this.checked = !!value;
	    }
	  }, {
	    key: 'checked',
	    set: function (checked) {
	      this._checked = checked;
	      this.setCheckedProperty(checked);
	      this.controlDirective._control().updateValue(this._checked);
	    },
	    get: function () {
	      return this._checked;
	    }
	  }, {
	    key: 'switchClicked',
	    value: function switchClicked(event) {
	      this.checked = !this.checked;
	    }
	  }]);

	  Switch = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n  <div class="item-content">\n\n    <div class="item-title">\n      <content></content>\n    </div>\n\n    <div class="item-media media-switch">\n      <div class="switch-toggle"></div>\n    </div>\n\n  </div>'
	  })(Switch) || Switch;
	  Switch = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-switch',
	    properties: {
	      checked: 'checked'
	    },
	    hostListeners: {
	      'click': 'switchClicked($event)'
	    } })(Switch) || Switch;
	  return Switch;
	})();

	exports.Switch = Switch;
	Reflect.defineMetadata('design:paramtypes', [_angular2Angular2.ElementRef, _angular2Forms.ControlDirective
	// @PropertySetter('attr.role') setAriaRole: Function,
	// @PropertySetter('attr.aria-checked') setChecked: Function
	// @PropertySetter('attr.aria-invalid') setInvalid: Function,
	// @PropertySetter('attr.aria-disabled') setDisabled: Function
	], Switch);

	new _ionicConfigComponent.IonicComponent(Switch, {});

	/*
	TODO: For some reason this triggers a 'TypeError: array.map is not a function'
	events: {
	  'click': 'onClick()'
	}
	*/

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _angular2Angular2 = __webpack_require__(200);

	var _angular2SrcCoreCompilerElement_ref = __webpack_require__(162);

	var _angular2SrcCoreCompilerDynamic_component_loader = __webpack_require__(166);

	var _angular2Di = __webpack_require__(167);

	var _ionicComponentsNavNavBase = __webpack_require__(192);

	var _ionicConfigComponent = __webpack_require__(264);

	var _ionicComponentsTabsTab = __webpack_require__(291);

	var Tabs = (function (_NavBase) {
	  function Tabs(elementRef, loader, injector) {
	    _classCallCheck(this, _Tabs);

	    _get(Object.getPrototypeOf(_Tabs.prototype), 'constructor', this).call(this, loader, injector);
	    this.domElement = elementRef.domElement;
	    this.config = Tabs.config.invoke(this);

	    this.tabs = [];
	  }

	  _inherits(Tabs, _NavBase);

	  var _Tabs = Tabs;

	  _createClass(_Tabs, [{
	    key: 'addTab',
	    value: function addTab(tab) {
	      this.tabs.push(tab);
	      if (this.tabs.length == 1) {
	        this.select(tab);
	      }
	    }
	  }, {
	    key: 'select',
	    value: function select(tab) {
	      this.tabs.forEach(function (otherTab) {
	        otherTab.setSelected(false);
	      });

	      tab.setSelected(true);
	      this.selectedTab = tab;
	    }
	  }, {
	    key: 'onClickTabItem',
	    value: function onClickTabItem(ev, tab) {
	      ev.preventDefault();
	      ev.stopPropagation();

	      if (this.selectedTab !== tab) {
	        this.select(tab);
	      }
	    }
	  }]);

	  Tabs = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n    <nav class="toolbar-container tab-bar-container">\n      <div class="tab-bar">\n        <button *ng-for="#t of tabs"\n          role="tab"\n          class="tab-bar-item"\n          [attr.id]="\'tab-item-\' + t.tabId"\n          [attr.aria-controls]="\'tab-content-\' + t.tabId"\n          [attr.aria-selected]="t.isSelected"\n          [style.color]="t.isSelected ? \'red\' : \'\'"\n          (^click)="onClickTabItem($event, t)">\n            <icon [class-name]="\'tab-bar-item-icon \' + t.icon" [hidden]="!t.icon"></icon>\n            <span class="tab-bar-item-text" [hidden]="!t.title">{{t.title}}</span>\n        </button>\n      </div>\n    </nav>\n    <section class="tab-item-container">\n      <content></content>\n    </section>\n  ',
	    directives: [_angular2Angular2.NgFor]
	  })(Tabs) || Tabs;
	  Tabs = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-tabs',
	    properties: {
	      tabBarPlacement: 'tab-bar-placement',
	      tabBarIcons: 'tab-bar-icons'
	    }
	  })(Tabs) || Tabs;
	  return Tabs;
	})(_ionicComponentsNavNavBase.NavBase);

	exports.Tabs = Tabs;
	Reflect.defineMetadata('design:paramtypes', [_angular2SrcCoreCompilerElement_ref.ElementRef, _angular2SrcCoreCompilerDynamic_component_loader.DynamicComponentLoader, _angular2Di.Injector], Tabs);

	new _ionicConfigComponent.IonicComponent(Tabs, {
	  properties: {
	    tabBarPlacement: {
	      defaults: {
	        ios: 'bottom',
	        android: 'top',
	        core: 'bottom'
	      }
	    },
	    tabBarIcons: {
	      defaults: {
	        ios: 'top',
	        android: 'top',
	        core: 'top'
	      }
	    }
	  }
	});

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2SrcCoreAnnotations_implVisibility = __webpack_require__(117);

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _angular2SrcCoreCompilerElement_ref = __webpack_require__(162);

	var _ionicComponentsTabsTabs = __webpack_require__(290);

	var _ionicUtil = __webpack_require__(193);

	var util = _interopRequireWildcard(_ionicUtil);

	var _ionicConfigComponent = __webpack_require__(264);

	var Tab = (function () {
	  function Tab(elementRef, tabs) {
	    _classCallCheck(this, _Tab);

	    // this.nav = new NavBase(element);
	    // this.domElement = element.domElement;

	    // let setHidden = (v) => this.domElement.classList[v?'add':'remove']('hide');
	    // let setRole = (v) => this.domElement.setAttribute('role', v);
	    // let setId = (v) => this.domElement.setAttribute('id', v);
	    // let setLabelby = (v) => this.domElement.setAttribute('aria-labelledby', v);

	    // this.config = Tab.config.invoke(this);
	    // this.setHidden = setHidden;

	    // this.tabId = util.nextUid();
	    // setId('tab-content-' + this.tabId);
	    // setLabelby('tab-item-' + this.tabId);
	    // setRole('tabpanel');

	    // this.setSelected(false);
	    tabs.addTab(this);
	  }

	  var _Tab = Tab;

	  _createClass(_Tab, [{
	    key: 'initial',
	    set: function (value) {
	      this.nav.initial = value;
	    }
	  }, {
	    key: 'setSelected',
	    value: function setSelected(isSelected) {
	      this.isSelected = !!isSelected;
	      //this.setHidden(!this.isSelected);
	    }
	  }]);

	  Tab = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n    <section class="nav-item-container">\n      <template content-anchor></template>\n    </section>\n  '
	  })(Tab) || Tab;
	  Tab = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-tab',
	    properties: {
	      title: 'tab-title',
	      icon: 'tab-icon',
	      initial: 'initial'
	    }
	  })(Tab) || Tab;
	  return Tab;
	})();

	exports.Tab = Tab;
	(0, _angular2SrcCoreAnnotations_implVisibility.Ancestor)()(Tab, null, 1);
	Reflect.defineMetadata('design:paramtypes', [_angular2SrcCoreCompilerElement_ref.ElementRef, _ionicComponentsTabsTabs.Tabs], Tab);

	new _ionicConfigComponent.IonicComponent(Tab, {});

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _angular2SrcCoreCompilerElement_ref = __webpack_require__(162);

	var _angular2SrcCoreCompilerView_ref = __webpack_require__(179);

	var _ionicUtilDom = __webpack_require__(194);

	var dom = _interopRequireWildcard(_ionicUtilDom);

	var _ionicConfigComponent = __webpack_require__(264);

	var _ionicComponents = __webpack_require__(115);

	var _ionicPlatformPlatform = __webpack_require__(265);

	var _backButton = __webpack_require__(293);

	var Toolbar = (function () {
	  function Toolbar(navItem, elementRef) {
	    var _this = this;

	    _classCallCheck(this, _Toolbar);

	    this.navItem = navItem;
	    this.domElement = elementRef.domElement;
	    this.config = Toolbar.config.invoke(this);

	    // http://davidwalsh.name/detect-node-insertion
	    dom.animationStart(this.domElement, 'nodeInserted').then(function () {
	      _this.alignTitle();
	    });
	  }

	  var _Toolbar = Toolbar;

	  _createClass(_Toolbar, [{
	    key: 'alignTitle',
	    value: function alignTitle() {
	      var _this2 = this;

	      var toolbarEle = this.domElement;
	      var innerTitleEle = this._innerTitleEle || (this._innerTitleEle = toolbarEle.querySelector('.toolbar-inner-title'));
	      var titleEle = this._titleEle || (this._titleEle = innerTitleEle.querySelector('ion-title'));
	      var style = this._style || (this._style = window.getComputedStyle(titleEle));

	      var titleOffsetWidth = titleEle.offsetWidth;
	      var titleOffsetLeft = titleEle.offsetLeft;
	      var titleScrollWidth = titleEle.scrollWidth;
	      var toolbarOffsetWidth = toolbarEle.offsetWidth;

	      // TODO!!! When an element is being reused by angular2, it'll sometimes keep the
	      // styles from the original element's use, causing these calculations to be wrong
	      if (window.getComputedStyle(innerTitleEle).margin !== '0px') {
	        this._showTitle();
	        return;
	      }

	      // only align if the title is center and if it isn't already overflowing
	      if (style.textAlign !== 'center' || titleOffsetWidth < titleScrollWidth) {
	        this._showTitle();
	      } else {
	        var rightMargin = toolbarOffsetWidth - (titleOffsetLeft + titleOffsetWidth);
	        var centerMargin = titleOffsetLeft - rightMargin;

	        innerTitleEle.style.margin = '0 ' + centerMargin + 'px 0 0';

	        dom.raf(function () {
	          if (titleEle.offsetWidth < titleEle.scrollWidth) {
	            // not enough room yet, just left align title
	            innerTitleEle.style.margin = '';
	            innerTitleEle.style.textAlign = 'left';
	          }
	          _this2._showTitle();
	        });
	      }
	    }
	  }, {
	    key: '_showTitle',
	    value: function _showTitle() {
	      if (!this._shown) {
	        this._shown = true;
	        this._innerTitleEle.classList.remove('toolbar-title-hide');
	      }
	    }
	  }]);

	  Toolbar = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n    <div class="toolbar-inner">\n      <back-button class="button toolbar-item" [hidden]="!navItem.enableBack"></back-button>\n      <div class="toolbar-title">\n        <div class="toolbar-inner-title toolbar-title-hide">\n          <content select="ion-title"></content>\n        </div>\n      </div>\n      <!--<div class="toolbar-item toolbar-primary-item">\n        <content select=".primary"></content>\n      </div>\n      <div class="toolbar-item toolbar-secondary-item">\n        <content select=".secondary"></content>\n      </div>-->\n    </div>\n  ',
	    directives: [_backButton.BackButton]
	  })(Toolbar) || Toolbar;
	  Toolbar = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'ion-toolbar'
	  })(Toolbar) || Toolbar;
	  return Toolbar;
	})();

	exports.Toolbar = Toolbar;
	Reflect.defineMetadata('design:paramtypes', [_ionicComponents.NavItem, _angular2SrcCoreCompilerElement_ref.ElementRef], Toolbar);

	new _ionicConfigComponent.IonicComponent(Toolbar, {});

	/*
	  Used to find and register headers in a view, and this directive's
	  content will be moved up to the common toolbar location, and created
	  using the same context as the view's content area.
	*/

	var HeaderTemplate = (function () {
	  function HeaderTemplate(navItem, protoViewRef) {
	    _classCallCheck(this, _HeaderTemplate);

	    navItem.addHeader(protoViewRef);
	  }

	  var _HeaderTemplate = HeaderTemplate;
	  HeaderTemplate = (0, _angular2SrcCoreAnnotations_implAnnotations.Directive)({
	    selector: 'template[header]'
	  })(HeaderTemplate) || HeaderTemplate;
	  return HeaderTemplate;
	})();

	exports.HeaderTemplate = HeaderTemplate;
	Reflect.defineMetadata('design:paramtypes', [_ionicComponents.NavItem, _angular2SrcCoreCompilerView_ref.ProtoViewRef], HeaderTemplate);

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _angular2SrcCoreAnnotations_implAnnotations = __webpack_require__(120);

	var _angular2SrcCoreAnnotations_implView = __webpack_require__(161);

	var _angular2SrcCoreCompilerElement_ref = __webpack_require__(162);

	var _ionicConfigComponent = __webpack_require__(264);

	var _navNavItem = __webpack_require__(197);

	var BackButton = (function () {
	  function BackButton(navItem, element) {
	    var _this = this;

	    _classCallCheck(this, _BackButton);

	    this.navItem = navItem;
	    this.domElement = element.domElement;

	    setTimeout(function () {
	      // HACK!
	      _this.config = BackButton.config.invoke(_this);
	    });
	  }

	  var _BackButton = BackButton;

	  _createClass(_BackButton, [{
	    key: 'onClick',
	    value: function onClick(ev) {
	      this.navItem.nav.pop();
	      ev.stopPropagation();
	      ev.preventDefault();
	    }
	  }]);

	  BackButton = (0, _angular2SrcCoreAnnotations_implView.View)({
	    template: '\n    <icon class="back-button-icon ion-ios-arrow-back"></icon>\n    <span class="back-button-text">\n      <span class="back-default">Back</span>\n      <span class="back-title"></span>\n    </span>'
	  })(BackButton) || BackButton;
	  BackButton = (0, _angular2SrcCoreAnnotations_implAnnotations.Component)({
	    selector: 'back-button',
	    hostListeners: {
	      '^click': 'onClick($event)'
	    } })(BackButton) || BackButton;
	  return BackButton;
	})();

	exports.BackButton = BackButton;
	(0, _angular2SrcCoreCompilerElement_ref.ElementRef)()(BackButton, null, 1);
	Reflect.defineMetadata('design:paramtypes', [_navNavItem.NavItem, _angular2SrcCoreCompilerElement_ref.ElementRef], BackButton);

	new _ionicConfigComponent.IonicComponent(BackButton, {
	  properties: {
	    icon: {
	      defaults: {
	        ios: 'ion-ios-arrow-back',
	        android: 'ion-android-arrow-back',
	        core: 'ion-chevron-left'
	      }
	    },
	    text: {
	      defaults: {
	        ios: 'Back',
	        android: '',
	        core: ''
	      }
	    }
	  }
	});

/***/ }
/******/ ]);