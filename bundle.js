/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*************************!*\
  !*** ./ionic/ionic.es6 ***!
  \*************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertEs6SrcRtts_assert = __webpack_require__(/*! rtts_assert/es6/src/rtts_assert */ 1);
	
	__webpack_require__(/*! babel-core/polyfill */ 2);
	
	//import 'reflect-metadata';
	//import { assert } from 'rtts_assert/rtts_assert';
	
	var _angular2Angular2 = __webpack_require__(/*! angular2/angular2 */ 93);
	
	var _angular2Router = __webpack_require__(/*! angular2/router */ 224);
	
	var _services = __webpack_require__(/*! ./services */ 235);
	
	var Hello = (function () {
	  // constructor(greeter: Greeter, @Attribute('name') name) {
	  function Hello(greeter) {
	    _classCallCheck(this, _Hello);
	
	    _rtts_assertEs6SrcRtts_assert.assert.argumentTypes(greeter, _services.Greeter);
	
	    this.message = greeter.hello('Angular 2 App');
	  }
	
	  var _Hello = Hello;
	  Hello = (0, _angular2Angular2.View)({
	    template: '\n    <p>{{message}}</p>\n  '
	  })(Hello) || Hello;
	  Hello = (0, _angular2Angular2.Component)({
	    selector: 'hello',
	    hostInjector: [_services.Greeter]
	  })(Hello) || Hello;
	  return Hello;
	})();
	
	Reflect.defineMetadata('design:paramtypes', [_services.Greeter], Hello);
	
	var HelloApp = (function () {
	  function HelloApp(router) {
	    _classCallCheck(this, _HelloApp);
	
	    _rtts_assertEs6SrcRtts_assert.assert.argumentTypes(router, _angular2Router.Router);
	
	    router.config({ path: '/', component: Hello }).then(function (_) {
	      return router.navigate('/');
	    });
	  }
	
	  var _HelloApp = HelloApp;
	  HelloApp = (0, _angular2Angular2.View)({
	    directives: [Hello, _angular2Router.RouterOutlet],
	    template: '\n    <router-outlet></router-outlet>\n  '
	  })(HelloApp) || HelloApp;
	  HelloApp = (0, _angular2Angular2.Component)({
	    selector: 'hello-app'
	  })(HelloApp) || HelloApp;
	  return HelloApp;
	})();
	
	Reflect.defineMetadata('design:paramtypes', [_angular2Router.Router], HelloApp);
	
	(0, _angular2Angular2.bootstrap)(HelloApp, [_angular2Router.routerInjectables]);

/***/ },
/* 1 */
/*!***********************************************!*\
  !*** ./~/rtts_assert/es6/src/rtts_assert.es6 ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.proxy = proxy;
	var _global = typeof window === 'object' ? window : global;
	var POSITION_NAME = ['', '1st', '2nd', '3rd'];
	function argPositionName(i) {
	  var position = i / 2 + 1;
	  return POSITION_NAME[position] || position + 'th';
	}
	var primitives;
	var genericType;
	if (typeof $traceurRuntime === 'object') {
	  primitives = $traceurRuntime.type;
	  genericType = $traceurRuntime.genericType;
	} else {
	  primitives = {
	    any: { name: 'any' },
	    boolean: { name: 'boolean' },
	    number: { name: 'number' },
	    string: { name: 'string' },
	    symbol: { name: 'symbol' },
	    'void': { name: 'void' }
	  };
	  genericType = function (type, args) {
	    return {
	      type: type,
	      args: args
	    };
	  };
	}
	Object.keys(primitives).forEach(function (name) {
	  primitives[name].__assertName = name;
	});
	
	function proxy() {}
	
	function assertArgumentTypes() {
	  for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	    params[_key] = arguments[_key];
	  }
	
	  var actual, type;
	  var currentArgErrors;
	  var errors = [];
	  var msg;
	  for (var i = 0, l = params.length; i < l; i = i + 2) {
	    actual = params[i];
	    type = params[i + 1];
	    currentArgErrors = [];
	    if (!isType(actual, type, currentArgErrors)) {
	      errors.push(argPositionName(i) + ' argument has to be an instance of ' + prettyPrint(type) + ', got ' + prettyPrint(actual));
	      if (currentArgErrors.length) {
	        errors.push(currentArgErrors);
	      }
	    }
	  }
	  if (errors.length) {
	    throw new Error('Invalid arguments given!\n' + formatErrors(errors));
	  }
	}
	function prettyPrint(value, depth) {
	  if (typeof depth === 'undefined') {
	    depth = 0;
	  }
	  if (depth++ > 3) {
	    return '[...]';
	  }
	  if (typeof value === 'undefined') {
	    return 'undefined';
	  }
	  if (typeof value === 'string') {
	    return '"' + value + '"';
	  }
	  if (typeof value === 'boolean') {
	    return value.toString();
	  }
	  if (value === null) {
	    return 'null';
	  }
	  if (typeof value === 'object') {
	    if (value.__assertName) {
	      return value.__assertName;
	    }
	    if (value.map && typeof value.map === 'function') {
	      return '[' + value.map(function (v) {
	        return prettyPrint(v, depth);
	      }).join(', ') + ']';
	    }
	    var properties = Object.keys(value);
	    var suffix = '}';
	    if (properties.length > 20) {
	      properties.length = 20;
	      suffix = ', ... }';
	    }
	    return '{' + properties.map(function (p) {
	      return p + ': ' + prettyPrint(value[p], depth);
	    }).join(', ') + suffix;
	  }
	  return value.__assertName || value.name || value.toString();
	}
	function isType(value, T, errors) {
	  if (T && T.type) {
	    T = T.type;
	  }
	  if (T === primitives['void']) {
	    return typeof value === 'undefined';
	  }
	  if (_isProxy(value)) {
	    return true;
	  }
	  if (T === primitives.any || value === null) {
	    return true;
	  }
	  if (T === primitives.string) {
	    return typeof value === 'string';
	  }
	  if (T === primitives.number) {
	    return typeof value === 'number';
	  }
	  if (T === primitives.boolean) {
	    return typeof value === 'boolean';
	  }
	  if (typeof T.assert === 'function') {
	    var parentStack = currentStack;
	    var isValid;
	    currentStack = errors;
	    try {
	      isValid = T.assert(value);
	    } catch (e) {
	      fail(e.message);
	      isValid = false;
	    }
	    currentStack = parentStack;
	    if (typeof isValid === 'undefined') {
	      isValid = errors.length === 0;
	    }
	    return isValid;
	  }
	  return value instanceof T;
	}
	function _isProxy(obj) {
	  if (!obj || !obj.constructor || !obj.constructor.annotations) return false;
	  return obj.constructor.annotations.filter(function (a) {
	    return a instanceof proxy;
	  }).length > 0;
	}
	function formatErrors(errors) {
	  var indent = arguments[1] === undefined ? '  ' : arguments[1];
	
	  return errors.map(function (e) {
	    if (typeof e === 'string') return indent + '- ' + e;
	    return formatErrors(e, indent + '  ');
	  }).join('\n');
	}
	function type(actual, T) {
	  var errors = [];
	  if (!isType(actual, T, errors)) {
	    var msg = 'Expected an instance of ' + prettyPrint(T) + ', got ' + prettyPrint(actual) + '!';
	    if (errors.length) {
	      msg += '\n' + formatErrors(errors);
	    }
	    throw new Error(msg);
	  }
	  return actual;
	}
	function returnType(actual, T) {
	  var errors = [];
	  if (!isType(actual, T, errors)) {
	    var msg = 'Expected to return an instance of ' + prettyPrint(T) + ', got ' + prettyPrint(actual) + '!';
	    if (errors.length) {
	      msg += '\n' + formatErrors(errors);
	    }
	    throw new Error(msg);
	  }
	  return actual;
	}
	var string = type.string = __def_('string', function (value) {
	  return typeof value === 'string';
	});
	var boolean = type.boolean = __def_('boolean', function (value) {
	  return typeof value === 'boolean';
	});
	var number = type.number = __def_('number', function (value) {
	  return typeof value === 'number';
	});
	function arrayOf() {
	  for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    types[_key2] = arguments[_key2];
	  }
	
	  return assert.__def_('array of ' + types.map(prettyPrint).join('/'), function (value) {
	    if (assert(value).is(Array)) {
	      for (var i = 0; i < value.length; i++) {
	        var _assert;
	
	        (_assert = assert(value[i])).is.apply(_assert, types);
	      }
	    }
	  });
	}
	function structure(definition) {
	  var properties = Object.keys(definition);
	  return assert.__def_('object with properties ' + properties.join(', '), function (value) {
	    if (assert(value).is(Object)) {
	      for (var i = 0; i < properties.length; i++) {
	        var property = properties[i];
	        assert(value[property]).is(definition[property]);
	      }
	    }
	  });
	}
	var currentStack = [];
	function fail(message) {
	  currentStack.push(message);
	}
	function __def_(classOrName, check) {
	  var cls = classOrName;
	  if (typeof classOrName === 'string') {
	    cls = function () {};
	    cls.__assertName = classOrName;
	  }
	  cls.assert = function (value) {
	    return check(value);
	  };
	  return cls;
	}
	function assert(value) {
	  return { is: function is() {
	      for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	        types[_key3] = arguments[_key3];
	      }
	
	      var allErrors = [];
	      var errors;
	      for (var i = 0; i < types.length; i++) {
	        var type = types[i];
	        errors = [];
	        if (isType(value, type, errors)) {
	          return true;
	        }
	        allErrors.push(prettyPrint(value) + ' is not instance of ' + prettyPrint(type));
	        if (errors.length) {
	          allErrors.push(errors);
	        }
	      }
	      currentStack.push.apply(currentStack, allErrors);
	      return false;
	    } };
	}
	assert.type = type;
	for (var prop in primitives) {
	  assert.type[prop] = primitives[prop];
	}
	assert.genericType = genericType;
	assert.argumentTypes = assertArgumentTypes;
	assert.returnType = returnType;
	assert.__def_ = __def_;
	assert.fail = fail;
	assert.string = string;
	assert.number = number;
	assert.boolean = boolean;
	assert.arrayOf = arrayOf;
	assert.structure = structure;
	exports.assert = assert;
	
	//# sourceMappingURL=rtts_assert.es6.map

	//# sourceMappingURL=./rtts_assert.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2 */
/*!**********************************!*\
  !*** ./~/babel-core/polyfill.js ***!
  \**********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(/*! ./lib/babel/polyfill */ 3);


/***/ },
/* 3 */
/*!********************************************!*\
  !*** ./~/babel-core/lib/babel/polyfill.js ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	__webpack_require__(/*! core-js/shim */ 4);
	
	__webpack_require__(/*! regenerator/runtime */ 91);
	
	if (global._babelPolyfill) {
	  throw new Error("only one instance of babel/polyfill is allowed");
	}
	global._babelPolyfill = true;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 4 */
/*!****************************************!*\
  !*** ./~/babel-core/~/core-js/shim.js ***!
  \****************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ./modules/es5 */ 5);
	__webpack_require__(/*! ./modules/es6.symbol */ 22);
	__webpack_require__(/*! ./modules/es6.object.assign */ 25);
	__webpack_require__(/*! ./modules/es6.object.is */ 27);
	__webpack_require__(/*! ./modules/es6.object.set-prototype-of */ 28);
	__webpack_require__(/*! ./modules/es6.object.to-string */ 30);
	__webpack_require__(/*! ./modules/es6.object.statics-accept-primitives */ 31);
	__webpack_require__(/*! ./modules/es6.function.name */ 32);
	__webpack_require__(/*! ./modules/es6.function.has-instance */ 33);
	__webpack_require__(/*! ./modules/es6.number.constructor */ 34);
	__webpack_require__(/*! ./modules/es6.number.statics */ 35);
	__webpack_require__(/*! ./modules/es6.math */ 36);
	__webpack_require__(/*! ./modules/es6.string.from-code-point */ 37);
	__webpack_require__(/*! ./modules/es6.string.raw */ 38);
	__webpack_require__(/*! ./modules/es6.string.iterator */ 39);
	__webpack_require__(/*! ./modules/es6.string.code-point-at */ 43);
	__webpack_require__(/*! ./modules/es6.string.ends-with */ 44);
	__webpack_require__(/*! ./modules/es6.string.includes */ 45);
	__webpack_require__(/*! ./modules/es6.string.repeat */ 46);
	__webpack_require__(/*! ./modules/es6.string.starts-with */ 48);
	__webpack_require__(/*! ./modules/es6.array.from */ 49);
	__webpack_require__(/*! ./modules/es6.array.of */ 52);
	__webpack_require__(/*! ./modules/es6.array.iterator */ 53);
	__webpack_require__(/*! ./modules/es6.array.species */ 55);
	__webpack_require__(/*! ./modules/es6.array.copy-within */ 57);
	__webpack_require__(/*! ./modules/es6.array.fill */ 58);
	__webpack_require__(/*! ./modules/es6.array.find */ 59);
	__webpack_require__(/*! ./modules/es6.array.find-index */ 60);
	__webpack_require__(/*! ./modules/es6.regexp */ 61);
	__webpack_require__(/*! ./modules/es6.promise */ 62);
	__webpack_require__(/*! ./modules/es6.map */ 66);
	__webpack_require__(/*! ./modules/es6.set */ 69);
	__webpack_require__(/*! ./modules/es6.weak-map */ 70);
	__webpack_require__(/*! ./modules/es6.weak-set */ 72);
	__webpack_require__(/*! ./modules/es6.reflect */ 73);
	__webpack_require__(/*! ./modules/es7.array.includes */ 75);
	__webpack_require__(/*! ./modules/es7.string.at */ 76);
	__webpack_require__(/*! ./modules/es7.string.lpad */ 77);
	__webpack_require__(/*! ./modules/es7.string.rpad */ 79);
	__webpack_require__(/*! ./modules/es7.regexp.escape */ 80);
	__webpack_require__(/*! ./modules/es7.object.get-own-property-descriptors */ 81);
	__webpack_require__(/*! ./modules/es7.object.to-array */ 82);
	__webpack_require__(/*! ./modules/es7.map.to-json */ 83);
	__webpack_require__(/*! ./modules/es7.set.to-json */ 85);
	__webpack_require__(/*! ./modules/js.array.statics */ 86);
	__webpack_require__(/*! ./modules/web.timers */ 87);
	__webpack_require__(/*! ./modules/web.immediate */ 89);
	__webpack_require__(/*! ./modules/web.dom.iterable */ 90);
	module.exports = __webpack_require__(/*! ./modules/$ */ 6).core;


/***/ },
/* 5 */
/*!***********************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es5.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	var $                = __webpack_require__(/*! ./$ */ 6)
	  , cel              = __webpack_require__(/*! ./$.dom-create */ 8)
	  , cof              = __webpack_require__(/*! ./$.cof */ 9)
	  , $def             = __webpack_require__(/*! ./$.def */ 13)
	  , invoke           = __webpack_require__(/*! ./$.invoke */ 15)
	  , arrayMethod      = __webpack_require__(/*! ./$.array-methods */ 16)
	  , IE_PROTO         = __webpack_require__(/*! ./$.uid */ 12).safe('__proto__')
	  , assert           = __webpack_require__(/*! ./$.assert */ 18)
	  , assertObject     = assert.obj
	  , ObjectProto      = Object.prototype
	  , html             = $.html
	  , A                = []
	  , _slice           = A.slice
	  , _join            = A.join
	  , classof          = cof.classof
	  , has              = $.has
	  , defineProperty   = $.setDesc
	  , getOwnDescriptor = $.getDesc
	  , defineProperties = $.setDescs
	  , isFunction       = $.isFunction
	  , isObject         = $.isObject
	  , toObject         = $.toObject
	  , toLength         = $.toLength
	  , toIndex          = $.toIndex
	  , IE8_DOM_DEFINE   = false
	  , $indexOf         = __webpack_require__(/*! ./$.array-includes */ 19)(false)
	  , $forEach         = arrayMethod(0)
	  , $map             = arrayMethod(1)
	  , $filter          = arrayMethod(2)
	  , $some            = arrayMethod(3)
	  , $every           = arrayMethod(4);
	
	if(!$.DESC){
	  try {
	    IE8_DOM_DEFINE = defineProperty(cel('div'), 'x',
	      {get: function(){ return 8; }}
	    ).x == 8;
	  } catch(e){ /* empty */ }
	  $.setDesc = function(O, P, Attributes){
	    if(IE8_DOM_DEFINE)try {
	      return defineProperty(O, P, Attributes);
	    } catch(e){ /* empty */ }
	    if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	    if('value' in Attributes)assertObject(O)[P] = Attributes.value;
	    return O;
	  };
	  $.getDesc = function(O, P){
	    if(IE8_DOM_DEFINE)try {
	      return getOwnDescriptor(O, P);
	    } catch(e){ /* empty */ }
	    if(has(O, P))return $.desc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
	  };
	  $.setDescs = defineProperties = function(O, Properties){
	    assertObject(O);
	    var keys   = $.getKeys(Properties)
	      , length = keys.length
	      , i = 0
	      , P;
	    while(length > i)$.setDesc(O, P = keys[i++], Properties[P]);
	    return O;
	  };
	}
	$def($def.S + $def.F * !$.DESC, 'Object', {
	  // 19.1.2.6 / 15.2.3.3 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $.getDesc,
	  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	  defineProperty: $.setDesc,
	  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
	  defineProperties: defineProperties
	});
	
	  // IE 8- don't enum bug keys
	var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' +
	            'toLocaleString,toString,valueOf').split(',')
	  // Additional keys for getOwnPropertyNames
	  , keys2 = keys1.concat('length', 'prototype')
	  , keysLen1 = keys1.length;
	
	// Create object with `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = cel('iframe')
	    , i      = keysLen1
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict.prototype[keys1[i]];
	  return createDict();
	};
	function createGetKeys(names, length){
	  return function(object){
	    var O      = toObject(object)
	      , i      = 0
	      , result = []
	      , key;
	    for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	    // Don't enum bug & hidden keys
	    while(length > i)if(has(O, key = names[i++])){
	      ~$indexOf(result, key) || result.push(key);
	    }
	    return result;
	  };
	}
	function Empty(){}
	$def($def.S, 'Object', {
	  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	  getPrototypeOf: $.getProto = $.getProto || function(O){
	    O = Object(assert.def(O));
	    if(has(O, IE_PROTO))return O[IE_PROTO];
	    if(isFunction(O.constructor) && O instanceof O.constructor){
	      return O.constructor.prototype;
	    } return O instanceof Object ? ObjectProto : null;
	  },
	  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
	  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	  create: $.create = $.create || function(O, /*?*/Properties){
	    var result;
	    if(O !== null){
	      Empty.prototype = assertObject(O);
	      result = new Empty();
	      Empty.prototype = null;
	      // add "__proto__" for Object.getPrototypeOf shim
	      result[IE_PROTO] = O;
	    } else result = createDict();
	    return Properties === undefined ? result : defineProperties(result, Properties);
	  },
	  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
	  keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false),
	  // 19.1.2.17 / 15.2.3.8 Object.seal(O)
	  seal: function seal(it){
	    return it; // <- cap
	  },
	  // 19.1.2.5 / 15.2.3.9 Object.freeze(O)
	  freeze: function freeze(it){
	    return it; // <- cap
	  },
	  // 19.1.2.15 / 15.2.3.10 Object.preventExtensions(O)
	  preventExtensions: function preventExtensions(it){
	    return it; // <- cap
	  },
	  // 19.1.2.13 / 15.2.3.11 Object.isSealed(O)
	  isSealed: function isSealed(it){
	    return !isObject(it); // <- cap
	  },
	  // 19.1.2.12 / 15.2.3.12 Object.isFrozen(O)
	  isFrozen: function isFrozen(it){
	    return !isObject(it); // <- cap
	  },
	  // 19.1.2.11 / 15.2.3.13 Object.isExtensible(O)
	  isExtensible: function isExtensible(it){
	    return isObject(it); // <- cap
	  }
	});
	
	// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
	$def($def.P, 'Function', {
	  bind: function(that /*, args... */){
	    var fn       = assert.fn(this)
	      , partArgs = _slice.call(arguments, 1);
	    function bound(/* args... */){
	      var args   = partArgs.concat(_slice.call(arguments))
	        , constr = this instanceof bound
	        , ctx    = constr ? $.create(fn.prototype) : that
	        , result = invoke(fn, args, ctx);
	      return constr ? ctx : result;
	    }
	    if(fn.prototype)bound.prototype = fn.prototype;
	    return bound;
	  }
	});
	
	// Fix for not array-like ES3 string and DOM objects
	if(!(0 in Object('z') && 'z'[0] == 'z')){
	  $.ES5Object = function(it){
	    return cof(it) == 'String' ? it.split('') : Object(it);
	  };
	}
	
	var buggySlice = true;
	try {
	  if(html)_slice.call(html);
	  buggySlice = false;
	} catch(e){ /* empty */ }
	
	$def($def.P + $def.F * buggySlice, 'Array', {
	  slice: function slice(begin, end){
	    var len   = toLength(this.length)
	      , klass = cof(this);
	    end = end === undefined ? len : end;
	    if(klass == 'Array')return _slice.call(this, begin, end);
	    var start  = toIndex(begin, len)
	      , upTo   = toIndex(end, len)
	      , size   = toLength(upTo - start)
	      , cloned = Array(size)
	      , i      = 0;
	    for(; i < size; i++)cloned[i] = klass == 'String'
	      ? this.charAt(start + i)
	      : this[start + i];
	    return cloned;
	  }
	});
	
	$def($def.P + $def.F * ($.ES5Object != Object), 'Array', {
	  join: function join(){
	    return _join.apply($.ES5Object(this), arguments);
	  }
	});
	
	// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
	$def($def.S, 'Array', {
	  isArray: function(arg){
	    return cof(arg) == 'Array';
	  }
	});
	function createArrayReduce(isRight){
	  return function(callbackfn, memo){
	    assert.fn(callbackfn);
	    var O      = toObject(this)
	      , length = toLength(O.length)
	      , index  = isRight ? length - 1 : 0
	      , i      = isRight ? -1 : 1;
	    if(arguments.length < 2)for(;;){
	      if(index in O){
	        memo = O[index];
	        index += i;
	        break;
	      }
	      index += i;
	      assert(isRight ? index >= 0 : length > index, 'Reduce of empty array with no initial value');
	    }
	    for(;isRight ? index >= 0 : length > index; index += i)if(index in O){
	      memo = callbackfn(memo, O[index], index, this);
	    }
	    return memo;
	  };
	}
	$def($def.P, 'Array', {
	  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
	  forEach: $.each = $.each || function forEach(callbackfn/*, that = undefined */){
	    return $forEach(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
	  map: function map(callbackfn/*, that = undefined */){
	    return $map(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
	  filter: function filter(callbackfn/*, that = undefined */){
	    return $filter(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
	  some: function some(callbackfn/*, that = undefined */){
	    return $some(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
	  every: function every(callbackfn/*, that = undefined */){
	    return $every(this, callbackfn, arguments[1]);
	  },
	  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
	  reduce: createArrayReduce(false),
	  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
	  reduceRight: createArrayReduce(true),
	  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
	  indexOf: function indexOf(el /*, fromIndex = 0 */){
	    return $indexOf(this, el, arguments[1]);
	  },
	  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
	  lastIndexOf: function(el, fromIndex /* = @[*-1] */){
	    var O      = toObject(this)
	      , length = toLength(O.length)
	      , index  = length - 1;
	    if(arguments.length > 1)index = Math.min(index, $.toInteger(fromIndex));
	    if(index < 0)index = toLength(length + index);
	    for(;index >= 0; index--)if(index in O)if(O[index] === el)return index;
	    return -1;
	  }
	});
	
	// 21.1.3.25 / 15.5.4.20 String.prototype.trim()
	$def($def.P, 'String', {trim: __webpack_require__(/*! ./$.replacer */ 20)(/^\s*([\s\S]*\S)?\s*$/, '$1')});
	
	// 20.3.3.1 / 15.9.4.4 Date.now()
	$def($def.S, 'Date', {now: function(){
	  return +new Date;
	}});
	
	function lz(num){
	  return num > 9 ? num : '0' + num;
	}
	
	// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
	// PhantomJS and old webkit had a broken Date implementation.
	var date       = new Date(-5e13 - 1)
	  , brokenDate = !(date.toISOString && date.toISOString() == '0385-07-25T07:06:39.999Z'
	      && __webpack_require__(/*! ./$.throws */ 21)(function(){ new Date(NaN).toISOString(); }));
	$def($def.P + $def.F * brokenDate, 'Date', {toISOString: function(){
	  if(!isFinite(this))throw RangeError('Invalid time value');
	  var d = this
	    , y = d.getUTCFullYear()
	    , m = d.getUTCMilliseconds()
	    , s = y < 0 ? '-' : y > 9999 ? '+' : '';
	  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
	    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
	    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
	    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
	}});
	
	if(classof(function(){ return arguments; }()) == 'Object')cof.classof = function(it){
	  var tag = classof(it);
	  return tag == 'Object' && isFunction(it.callee) ? 'Arguments' : tag;
	};

/***/ },
/* 6 */
/*!*********************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.js ***!
  \*********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global = typeof self != 'undefined' ? self : Function('return this')()
	  , core   = {}
	  , defineProperty = Object.defineProperty
	  , hasOwnProperty = {}.hasOwnProperty
	  , ceil  = Math.ceil
	  , floor = Math.floor
	  , max   = Math.max
	  , min   = Math.min;
	// The engine works fine with descriptors? Thank's IE8 for his funny defineProperty.
	var DESC = !!function(){
	  try {
	    return defineProperty({}, 'a', {get: function(){ return 2; }}).a == 2;
	  } catch(e){ /* empty */ }
	}();
	var hide = createDefiner(1);
	// 7.1.4 ToInteger
	function toInteger(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	}
	function desc(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	}
	function simpleSet(object, key, value){
	  object[key] = value;
	  return object;
	}
	function createDefiner(bitmap){
	  return DESC ? function(object, key, value){
	    return $.setDesc(object, key, desc(bitmap, value));
	  } : simpleSet;
	}
	
	function isObject(it){
	  return it !== null && (typeof it == 'object' || typeof it == 'function');
	}
	function isFunction(it){
	  return typeof it == 'function';
	}
	function assertDefined(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	}
	
	var $ = module.exports = __webpack_require__(/*! ./$.fw */ 7)({
	  g: global,
	  core: core,
	  html: global.document && document.documentElement,
	  // http://jsperf.com/core-js-isobject
	  isObject:   isObject,
	  isFunction: isFunction,
	  that: function(){
	    return this;
	  },
	  // 7.1.4 ToInteger
	  toInteger: toInteger,
	  // 7.1.15 ToLength
	  toLength: function(it){
	    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	  },
	  toIndex: function(index, length){
	    index = toInteger(index);
	    return index < 0 ? max(index + length, 0) : min(index, length);
	  },
	  has: function(it, key){
	    return hasOwnProperty.call(it, key);
	  },
	  create:     Object.create,
	  getProto:   Object.getPrototypeOf,
	  DESC:       DESC,
	  desc:       desc,
	  getDesc:    Object.getOwnPropertyDescriptor,
	  setDesc:    defineProperty,
	  setDescs:   Object.defineProperties,
	  getKeys:    Object.keys,
	  getNames:   Object.getOwnPropertyNames,
	  getSymbols: Object.getOwnPropertySymbols,
	  assertDefined: assertDefined,
	  // Dummy, fix for not array-like ES3 string in es5 module
	  ES5Object: Object,
	  toObject: function(it){
	    return $.ES5Object(assertDefined(it));
	  },
	  hide: hide,
	  def: createDefiner(0),
	  set: global.Symbol ? simpleSet : hide,
	  each: [].forEach
	});
	/* eslint-disable no-undef */
	if(typeof __e != 'undefined')__e = core;
	if(typeof __g != 'undefined')__g = global;

/***/ },
/* 7 */
/*!************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.fw.js ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function($){
	  $.FW   = true;
	  $.path = $.g;
	  return $;
	};

/***/ },
/* 8 */
/*!********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.dom-create.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(/*! ./$ */ 6)
	  , document = $.g.document
	  , isObject = $.isObject
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 9 */
/*!*************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.cof.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(/*! ./$ */ 6)
	  , TAG      = __webpack_require__(/*! ./$.wks */ 10)('toStringTag')
	  , toString = {}.toString;
	function cof(it){
	  return toString.call(it).slice(8, -1);
	}
	cof.classof = function(it){
	  var O, T;
	  return it == undefined ? it === undefined ? 'Undefined' : 'Null'
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T : cof(O);
	};
	cof.set = function(it, tag, stat){
	  if(it && !$.has(it = stat ? it : it.prototype, TAG))$.hide(it, TAG, tag);
	};
	module.exports = cof;

/***/ },
/* 10 */
/*!*************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.wks.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(/*! ./$ */ 6).g
	  , store  = __webpack_require__(/*! ./$.shared */ 11)('wks');
	module.exports = function(name){
	  return store[name] || (store[name] =
	    global.Symbol && global.Symbol[name] || __webpack_require__(/*! ./$.uid */ 12).safe('Symbol.' + name));
	};

/***/ },
/* 11 */
/*!****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.shared.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $      = __webpack_require__(/*! ./$ */ 6)
	  , SHARED = '__core-js_shared__'
	  , store  = $.g[SHARED] || $.hide($.g, SHARED, {})[SHARED];
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 12 */
/*!*************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.uid.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	var sid = 0;
	function uid(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++sid + Math.random()).toString(36));
	}
	uid.safe = __webpack_require__(/*! ./$ */ 6).g.Symbol || uid;
	module.exports = uid;

/***/ },
/* 13 */
/*!*************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.def.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $          = __webpack_require__(/*! ./$ */ 6)
	  , global     = $.g
	  , core       = $.core
	  , isFunction = $.isFunction
	  , $redef     = __webpack_require__(/*! ./$.redef */ 14);
	function ctx(fn, that){
	  return function(){
	    return fn.apply(that, arguments);
	  };
	}
	global.core = core;
	// type bitmap
	$def.F = 1;  // forced
	$def.G = 2;  // global
	$def.S = 4;  // static
	$def.P = 8;  // proto
	$def.B = 16; // bind
	$def.W = 32; // wrap
	function $def(type, name, source){
	  var key, own, out, exp
	    , isGlobal = type & $def.G
	    , isProto  = type & $def.P
	    , target   = isGlobal ? global : type & $def.S
	        ? global[name] : (global[name] || {}).prototype
	    , exports  = isGlobal ? core : core[name] || (core[name] = {});
	  if(isGlobal)source = name;
	  for(key in source){
	    // contains in native
	    own = !(type & $def.F) && target && key in target;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    if(type & $def.B && own)exp = ctx(out, global);
	    else exp = isProto && isFunction(out) ? ctx(Function.call, out) : out;
	    // extend global
	    if(target && !own)$redef(target, key, out);
	    // export
	    if(exports[key] != out)$.hide(exports, key, exp);
	    if(isProto)(exports.prototype || (exports.prototype = {}))[key] = out;
	  }
	}
	module.exports = $def;

/***/ },
/* 14 */
/*!***************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.redef.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $   = __webpack_require__(/*! ./$ */ 6)
	  , tpl = String({}.hasOwnProperty)
	  , SRC = __webpack_require__(/*! ./$.uid */ 12).safe('src')
	  , _toString = Function.toString;
	
	function $redef(O, key, val, safe){
	  if($.isFunction(val)){
	    var base = O[key];
	    $.hide(val, SRC, base ? String(base) : tpl.replace(/hasOwnProperty/, String(key)));
	  }
	  if(O === $.g){
	    O[key] = val;
	  } else {
	    if(!safe)delete O[key];
	    $.hide(O, key, val);
	  }
	}
	
	// add fake Function#toString for correct work wrapped methods / constructors
	// with methods similar to LoDash isNative
	$redef(Function.prototype, 'toString', function toString(){
	  return $.has(this, SRC) ? this[SRC] : _toString.call(this);
	});
	
	$.core.inspectSource = function(it){
	  return _toString.call(it);
	};
	
	module.exports = $redef;

/***/ },
/* 15 */
/*!****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.invoke.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	// Fast apply
	// http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	    case 5: return un ? fn(args[0], args[1], args[2], args[3], args[4])
	                      : fn.call(that, args[0], args[1], args[2], args[3], args[4]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 16 */
/*!***********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.array-methods.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var $   = __webpack_require__(/*! ./$ */ 6)
	  , ctx = __webpack_require__(/*! ./$.ctx */ 17);
	module.exports = function(TYPE){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX;
	  return function($this, callbackfn, that){
	    var O      = Object($.assertDefined($this))
	      , self   = $.ES5Object(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = $.toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? Array(length) : IS_FILTER ? [] : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 17 */
/*!*************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.ctx.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	// Optional / simple context binding
	var assertFunction = __webpack_require__(/*! ./$.assert */ 18).fn;
	module.exports = function(fn, that, length){
	  assertFunction(fn);
	  if(~length && that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  } return function(/* ...args */){
	      return fn.apply(that, arguments);
	    };
	};

/***/ },
/* 18 */
/*!****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.assert.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(/*! ./$ */ 6);
	function assert(condition, msg1, msg2){
	  if(!condition)throw TypeError(msg2 ? msg1 + msg2 : msg1);
	}
	assert.def = $.assertDefined;
	assert.fn = function(it){
	  if(!$.isFunction(it))throw TypeError(it + ' is not a function!');
	  return it;
	};
	assert.obj = function(it){
	  if(!$.isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	assert.inst = function(it, Constructor, name){
	  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
	  return it;
	};
	module.exports = assert;

/***/ },
/* 19 */
/*!************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.array-includes.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var $ = __webpack_require__(/*! ./$ */ 6);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = $.toObject($this)
	      , length = $.toLength(O.length)
	      , index  = $.toIndex(fromIndex, length)
	      , value;
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 20 */
/*!******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.replacer.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	module.exports = function(regExp, replace, isStatic){
	  var replacer = replace === Object(replace) ? function(part){
	    return replace[part];
	  } : replace;
	  return function(it){
	    return String(isStatic ? it : this).replace(regExp, replacer);
	  };
	};

/***/ },
/* 21 */
/*!****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.throws.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(exec){
	  try {
	    exec();
	    return false;
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 22 */
/*!******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.symbol.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var $        = __webpack_require__(/*! ./$ */ 6)
	  , setTag   = __webpack_require__(/*! ./$.cof */ 9).set
	  , uid      = __webpack_require__(/*! ./$.uid */ 12)
	  , shared   = __webpack_require__(/*! ./$.shared */ 11)
	  , $def     = __webpack_require__(/*! ./$.def */ 13)
	  , $redef   = __webpack_require__(/*! ./$.redef */ 14)
	  , keyOf    = __webpack_require__(/*! ./$.keyof */ 23)
	  , enumKeys = __webpack_require__(/*! ./$.enum-keys */ 24)
	  , assertObject = __webpack_require__(/*! ./$.assert */ 18).obj
	  , ObjectProto = Object.prototype
	  , DESC     = $.DESC
	  , has      = $.has
	  , $create  = $.create
	  , getDesc  = $.getDesc
	  , setDesc  = $.setDesc
	  , desc     = $.desc
	  , getNames = $.getNames
	  , toObject = $.toObject
	  , $Symbol  = $.g.Symbol
	  , setter   = false
	  , TAG      = uid('tag')
	  , HIDDEN   = uid('hidden')
	  , _propertyIsEnumerable = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols = shared('symbols')
	  , useNative = $.isFunction($Symbol);
	
	var setSymbolDesc = DESC ? function(){ // fallback for old Android
	  try {
	    return $create(setDesc({}, HIDDEN, {
	      get: function(){
	        return setDesc(this, HIDDEN, {value: false})[HIDDEN];
	      }
	    }))[HIDDEN] || setDesc;
	  } catch(e){
	    return function(it, key, D){
	      var protoDesc = getDesc(ObjectProto, key);
	      if(protoDesc)delete ObjectProto[key];
	      setDesc(it, key, D);
	      if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
	    };
	  }
	}() : setDesc;
	
	function wrap(tag){
	  var sym = AllSymbols[tag] = $.set($create($Symbol.prototype), TAG, tag);
	  DESC && setter && setSymbolDesc(ObjectProto, tag, {
	    configurable: true,
	    set: function(value){
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, desc(1, value));
	    }
	  });
	  return sym;
	}
	
	function defineProperty(it, key, D){
	  if(D && has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))setDesc(it, HIDDEN, desc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = $create(D, {enumerable: desc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return setDesc(it, key, D);
	}
	function defineProperties(it, P){
	  assertObject(it);
	  var keys = enumKeys(P = toObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)defineProperty(it, key = keys[i++], P[key]);
	  return it;
	}
	function create(it, P){
	  return P === undefined ? $create(it) : defineProperties($create(it), P);
	}
	function propertyIsEnumerable(key){
	  var E = _propertyIsEnumerable.call(this, key);
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
	    ? E : true;
	}
	function getOwnPropertyDescriptor(it, key){
	  var D = getDesc(it = toObject(it), key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	}
	function getOwnPropertyNames(it){
	  var names  = getNames(toObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
	  return result;
	}
	function getOwnPropertySymbols(it){
	  var names  = getNames(toObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	}
	
	// 19.4.1.1 Symbol([description])
	if(!useNative){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor');
	    return wrap(uid(arguments[0]));
	  };
	  $redef($Symbol.prototype, 'toString', function(){
	    return this[TAG];
	  });
	
	  $.create     = create;
	  $.setDesc    = defineProperty;
	  $.getDesc    = getOwnPropertyDescriptor;
	  $.setDescs   = defineProperties;
	  $.getNames   = getOwnPropertyNames;
	  $.getSymbols = getOwnPropertySymbols;
	
	  if($.DESC && $.FW)$redef(Object.prototype, 'propertyIsEnumerable', propertyIsEnumerable, true);
	}
	
	var symbolStatics = {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    return keyOf(SymbolRegistry, key);
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	};
	// 19.4.2.2 Symbol.hasInstance
	// 19.4.2.3 Symbol.isConcatSpreadable
	// 19.4.2.4 Symbol.iterator
	// 19.4.2.6 Symbol.match
	// 19.4.2.8 Symbol.replace
	// 19.4.2.9 Symbol.search
	// 19.4.2.10 Symbol.species
	// 19.4.2.11 Symbol.split
	// 19.4.2.12 Symbol.toPrimitive
	// 19.4.2.13 Symbol.toStringTag
	// 19.4.2.14 Symbol.unscopables
	$.each.call((
	    'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
	    'species,split,toPrimitive,toStringTag,unscopables'
	  ).split(','), function(it){
	    var sym = __webpack_require__(/*! ./$.wks */ 10)(it);
	    symbolStatics[it] = useNative ? sym : wrap(sym);
	  }
	);
	
	setter = true;
	
	$def($def.G + $def.W, {Symbol: $Symbol});
	
	$def($def.S, 'Symbol', symbolStatics);
	
	$def($def.S + $def.F * !useNative, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: getOwnPropertySymbols
	});
	
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setTag($.g.JSON, 'JSON', true);

/***/ },
/* 23 */
/*!***************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.keyof.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(/*! ./$ */ 6);
	module.exports = function(object, el){
	  var O      = $.toObject(object)
	    , keys   = $.getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 24 */
/*!*******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.enum-keys.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(/*! ./$ */ 6);
	module.exports = function(it){
	  var keys       = $.getKeys(it)
	    , getDesc    = $.getDesc
	    , getSymbols = $.getSymbols;
	  if(getSymbols)$.each.call(getSymbols(it), function(key){
	    if(getDesc(it, key).enumerable)keys.push(key);
	  });
	  return keys;
	};

/***/ },
/* 25 */
/*!*************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.object.assign.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $def = __webpack_require__(/*! ./$.def */ 13);
	$def($def.S, 'Object', {assign: __webpack_require__(/*! ./$.assign */ 26)});

/***/ },
/* 26 */
/*!****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.assign.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(/*! ./$ */ 6)
	  , enumKeys = __webpack_require__(/*! ./$.enum-keys */ 24);
	// 19.1.2.1 Object.assign(target, source, ...)
	/* eslint-disable no-unused-vars */
	module.exports = Object.assign || function assign(target, source){
	/* eslint-enable no-unused-vars */
	  var T = Object($.assertDefined(target))
	    , l = arguments.length
	    , i = 1;
	  while(l > i){
	    var S      = $.ES5Object(arguments[i++])
	      , keys   = enumKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)T[key = keys[j++]] = S[key];
	  }
	  return T;
	};

/***/ },
/* 27 */
/*!*********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.object.is.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.10 Object.is(value1, value2)
	var $def = __webpack_require__(/*! ./$.def */ 13);
	$def($def.S, 'Object', {
	  is: function is(x, y){
	    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	  }
	});

/***/ },
/* 28 */
/*!***********************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.object.set-prototype-of.js ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $def = __webpack_require__(/*! ./$.def */ 13);
	$def($def.S, 'Object', {setPrototypeOf: __webpack_require__(/*! ./$.set-proto */ 29).set});

/***/ },
/* 29 */
/*!*******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.set-proto.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var $      = __webpack_require__(/*! ./$ */ 6)
	  , assert = __webpack_require__(/*! ./$.assert */ 18);
	function check(O, proto){
	  assert.obj(O);
	  assert(proto === null || $.isObject(proto), proto, ": can't set as prototype!");
	}
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} // eslint-disable-line
	    ? function(buggy, set){
	        try {
	          set = __webpack_require__(/*! ./$.ctx */ 17)(Function.call, $.getDesc(Object.prototype, '__proto__').set, 2);
	          set({}, []);
	        } catch(e){ buggy = true; }
	        return function setPrototypeOf(O, proto){
	          check(O, proto);
	          if(buggy)O.__proto__ = proto;
	          else set(O, proto);
	          return O;
	        };
	      }()
	    : undefined),
	  check: check
	};

/***/ },
/* 30 */
/*!****************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.object.to-string.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(/*! ./$.cof */ 9)
	  , tmp = {};
	tmp[__webpack_require__(/*! ./$.wks */ 10)('toStringTag')] = 'z';
	if(__webpack_require__(/*! ./$ */ 6).FW && cof(tmp) != 'z'){
	  __webpack_require__(/*! ./$.redef */ 14)(Object.prototype, 'toString', function toString(){
	    return '[object ' + cof.classof(this) + ']';
	  }, true);
	}

/***/ },
/* 31 */
/*!********************************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.object.statics-accept-primitives.js ***!
  \********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $        = __webpack_require__(/*! ./$ */ 6)
	  , $def     = __webpack_require__(/*! ./$.def */ 13)
	  , isObject = $.isObject
	  , toObject = $.toObject;
	$.each.call(('freeze,seal,preventExtensions,isFrozen,isSealed,isExtensible,' +
	  'getOwnPropertyDescriptor,getPrototypeOf,keys,getOwnPropertyNames').split(',')
	, function(KEY, ID){
	  var fn     = ($.core.Object || {})[KEY] || Object[KEY]
	    , forced = 0
	    , method = {};
	  method[KEY] = ID == 0 ? function freeze(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 1 ? function seal(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 2 ? function preventExtensions(it){
	    return isObject(it) ? fn(it) : it;
	  } : ID == 3 ? function isFrozen(it){
	    return isObject(it) ? fn(it) : true;
	  } : ID == 4 ? function isSealed(it){
	    return isObject(it) ? fn(it) : true;
	  } : ID == 5 ? function isExtensible(it){
	    return isObject(it) ? fn(it) : false;
	  } : ID == 6 ? function getOwnPropertyDescriptor(it, key){
	    return fn(toObject(it), key);
	  } : ID == 7 ? function getPrototypeOf(it){
	    return fn(Object($.assertDefined(it)));
	  } : ID == 8 ? function keys(it){
	    return fn(toObject(it));
	  } : function getOwnPropertyNames(it){
	    return fn(toObject(it));
	  };
	  try {
	    fn('z');
	  } catch(e){
	    forced = 1;
	  }
	  $def($def.S + $def.F * forced, 'Object', method);
	});

/***/ },
/* 32 */
/*!*************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.function.name.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $    = __webpack_require__(/*! ./$ */ 6)
	  , NAME = 'name'
	  , setDesc = $.setDesc
	  , FunctionProto = Function.prototype;
	// 19.2.4.2 name
	NAME in FunctionProto || $.FW && $.DESC && setDesc(FunctionProto, NAME, {
	  configurable: true,
	  get: function(){
	    var match = String(this).match(/^\s*function ([^ (]*)/)
	      , name  = match ? match[1] : '';
	    $.has(this, NAME) || setDesc(this, NAME, $.desc(5, name));
	    return name;
	  },
	  set: function(value){
	    $.has(this, NAME) || setDesc(this, NAME, $.desc(0, value));
	  }
	});

/***/ },
/* 33 */
/*!*********************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.function.has-instance.js ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $             = __webpack_require__(/*! ./$ */ 6)
	  , HAS_INSTANCE  = __webpack_require__(/*! ./$.wks */ 10)('hasInstance')
	  , FunctionProto = Function.prototype;
	// 19.2.3.6 Function.prototype[@@hasInstance](V)
	if(!(HAS_INSTANCE in FunctionProto))$.setDesc(FunctionProto, HAS_INSTANCE, {value: function(O){
	  if(!$.isFunction(this) || !$.isObject(O))return false;
	  if(!$.isObject(this.prototype))return O instanceof this;
	  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
	  while(O = $.getProto(O))if(this.prototype === O)return true;
	  return false;
	}});

/***/ },
/* 34 */
/*!******************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.number.constructor.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $          = __webpack_require__(/*! ./$ */ 6)
	  , isObject   = $.isObject
	  , isFunction = $.isFunction
	  , NUMBER     = 'Number'
	  , $Number    = $.g[NUMBER]
	  , Base       = $Number
	  , proto      = $Number.prototype;
	function toPrimitive(it){
	  var fn, val;
	  if(isFunction(fn = it.valueOf) && !isObject(val = fn.call(it)))return val;
	  if(isFunction(fn = it.toString) && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to number");
	}
	function toNumber(it){
	  if(isObject(it))it = toPrimitive(it);
	  if(typeof it == 'string' && it.length > 2 && it.charCodeAt(0) == 48){
	    var binary = false;
	    switch(it.charCodeAt(1)){
	      case 66 : case 98  : binary = true;
	      case 79 : case 111 : return parseInt(it.slice(2), binary ? 2 : 8);
	    }
	  } return +it;
	}
	if($.FW && !($Number('0o1') && $Number('0b1'))){
	  $Number = function Number(it){
	    return this instanceof $Number ? new Base(toNumber(it)) : toNumber(it);
	  };
	  $.each.call($.DESC ? $.getNames(Base) : (
	      // ES3:
	      'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
	      // ES6 (in case, if modules with ES6 Number statics required before):
	      'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
	      'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
	    ).split(','), function(key){
	      if($.has(Base, key) && !$.has($Number, key)){
	        $.setDesc($Number, key, $.getDesc(Base, key));
	      }
	    }
	  );
	  $Number.prototype = proto;
	  proto.constructor = $Number;
	  __webpack_require__(/*! ./$.redef */ 14)($.g, NUMBER, $Number);
	}

/***/ },
/* 35 */
/*!**************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.number.statics.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $     = __webpack_require__(/*! ./$ */ 6)
	  , $def  = __webpack_require__(/*! ./$.def */ 13)
	  , abs   = Math.abs
	  , floor = Math.floor
	  , _isFinite = $.g.isFinite
	  , MAX_SAFE_INTEGER = 0x1fffffffffffff; // pow(2, 53) - 1 == 9007199254740991;
	function isInteger(it){
	  return !$.isObject(it) && _isFinite(it) && floor(it) === it;
	}
	$def($def.S, 'Number', {
	  // 20.1.2.1 Number.EPSILON
	  EPSILON: Math.pow(2, -52),
	  // 20.1.2.2 Number.isFinite(number)
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  },
	  // 20.1.2.3 Number.isInteger(number)
	  isInteger: isInteger,
	  // 20.1.2.4 Number.isNaN(number)
	  isNaN: function isNaN(number){
	    return number != number;
	  },
	  // 20.1.2.5 Number.isSafeInteger(number)
	  isSafeInteger: function isSafeInteger(number){
	    return isInteger(number) && abs(number) <= MAX_SAFE_INTEGER;
	  },
	  // 20.1.2.6 Number.MAX_SAFE_INTEGER
	  MAX_SAFE_INTEGER: MAX_SAFE_INTEGER,
	  // 20.1.2.10 Number.MIN_SAFE_INTEGER
	  MIN_SAFE_INTEGER: -MAX_SAFE_INTEGER,
	  // 20.1.2.12 Number.parseFloat(string)
	  parseFloat: parseFloat,
	  // 20.1.2.13 Number.parseInt(string, radix)
	  parseInt: parseInt
	});

/***/ },
/* 36 */
/*!****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.math.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	var Infinity = 1 / 0
	  , $def  = __webpack_require__(/*! ./$.def */ 13)
	  , E     = Math.E
	  , pow   = Math.pow
	  , abs   = Math.abs
	  , exp   = Math.exp
	  , log   = Math.log
	  , sqrt  = Math.sqrt
	  , ceil  = Math.ceil
	  , floor = Math.floor
	  , EPSILON   = pow(2, -52)
	  , EPSILON32 = pow(2, -23)
	  , MAX32     = pow(2, 127) * (2 - EPSILON32)
	  , MIN32     = pow(2, -126);
	function roundTiesToEven(n){
	  return n + 1 / EPSILON - 1 / EPSILON;
	}
	
	// 20.2.2.28 Math.sign(x)
	function sign(x){
	  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
	}
	// 20.2.2.5 Math.asinh(x)
	function asinh(x){
	  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
	}
	// 20.2.2.14 Math.expm1(x)
	function expm1(x){
	  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
	}
	
	$def($def.S, 'Math', {
	  // 20.2.2.3 Math.acosh(x)
	  acosh: function acosh(x){
	    return (x = +x) < 1 ? NaN : isFinite(x) ? log(x / E + sqrt(x + 1) * sqrt(x - 1) / E) + 1 : x;
	  },
	  // 20.2.2.5 Math.asinh(x)
	  asinh: asinh,
	  // 20.2.2.7 Math.atanh(x)
	  atanh: function atanh(x){
	    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
	  },
	  // 20.2.2.9 Math.cbrt(x)
	  cbrt: function cbrt(x){
	    return sign(x = +x) * pow(abs(x), 1 / 3);
	  },
	  // 20.2.2.11 Math.clz32(x)
	  clz32: function clz32(x){
	    return (x >>>= 0) ? 31 - floor(log(x + 0.5) * Math.LOG2E) : 32;
	  },
	  // 20.2.2.12 Math.cosh(x)
	  cosh: function cosh(x){
	    return (exp(x = +x) + exp(-x)) / 2;
	  },
	  // 20.2.2.14 Math.expm1(x)
	  expm1: expm1,
	  // 20.2.2.16 Math.fround(x)
	  fround: function fround(x){
	    var $abs  = abs(x)
	      , $sign = sign(x)
	      , a, result;
	    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
	    a = (1 + EPSILON32 / EPSILON) * $abs;
	    result = a - (a - $abs);
	    if(result > MAX32 || result != result)return $sign * Infinity;
	    return $sign * result;
	  },
	  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
	  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
	    var sum  = 0
	      , i    = 0
	      , len  = arguments.length
	      , args = Array(len)
	      , larg = 0
	      , arg;
	    while(i < len){
	      arg = args[i] = abs(arguments[i++]);
	      if(arg == Infinity)return Infinity;
	      if(arg > larg)larg = arg;
	    }
	    larg = larg || 1;
	    while(len--)sum += pow(args[len] / larg, 2);
	    return larg * sqrt(sum);
	  },
	  // 20.2.2.18 Math.imul(x, y)
	  imul: function imul(x, y){
	    var UInt16 = 0xffff
	      , xn = +x
	      , yn = +y
	      , xl = UInt16 & xn
	      , yl = UInt16 & yn;
	    return 0 | xl * yl + ((UInt16 & xn >>> 16) * yl + xl * (UInt16 & yn >>> 16) << 16 >>> 0);
	  },
	  // 20.2.2.20 Math.log1p(x)
	  log1p: function log1p(x){
	    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
	  },
	  // 20.2.2.21 Math.log10(x)
	  log10: function log10(x){
	    return log(x) / Math.LN10;
	  },
	  // 20.2.2.22 Math.log2(x)
	  log2: function log2(x){
	    return log(x) / Math.LN2;
	  },
	  // 20.2.2.28 Math.sign(x)
	  sign: sign,
	  // 20.2.2.30 Math.sinh(x)
	  sinh: function sinh(x){
	    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
	  },
	  // 20.2.2.33 Math.tanh(x)
	  tanh: function tanh(x){
	    var a = expm1(x = +x)
	      , b = expm1(-x);
	    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
	  },
	  // 20.2.2.34 Math.trunc(x)
	  trunc: function trunc(it){
	    return (it > 0 ? floor : ceil)(it);
	  }
	});

/***/ },
/* 37 */
/*!**********************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.string.from-code-point.js ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $def    = __webpack_require__(/*! ./$.def */ 13)
	  , toIndex = __webpack_require__(/*! ./$ */ 6).toIndex
	  , fromCharCode = String.fromCharCode
	  , $fromCodePoint = String.fromCodePoint;
	
	// length should be 1, old FF problem
	$def($def.S + $def.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
	  // 21.1.2.2 String.fromCodePoint(...codePoints)
	  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
	    var res = []
	      , len = arguments.length
	      , i   = 0
	      , code;
	    while(len > i){
	      code = +arguments[i++];
	      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
	      res.push(code < 0x10000
	        ? fromCharCode(code)
	        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
	      );
	    } return res.join('');
	  }
	});

/***/ },
/* 38 */
/*!**********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.string.raw.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $    = __webpack_require__(/*! ./$ */ 6)
	  , $def = __webpack_require__(/*! ./$.def */ 13);
	
	$def($def.S, 'String', {
	  // 21.1.2.4 String.raw(callSite, ...substitutions)
	  raw: function raw(callSite){
	    var tpl = $.toObject(callSite.raw)
	      , len = $.toLength(tpl.length)
	      , sln = arguments.length
	      , res = []
	      , i   = 0;
	    while(len > i){
	      res.push(String(tpl[i++]));
	      if(i < sln)res.push(String(arguments[i]));
	    } return res.join('');
	  }
	});

/***/ },
/* 39 */
/*!***************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.string.iterator.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var set   = __webpack_require__(/*! ./$ */ 6).set
	  , $at   = __webpack_require__(/*! ./$.string-at */ 40)(true)
	  , ITER  = __webpack_require__(/*! ./$.uid */ 12).safe('iter')
	  , $iter = __webpack_require__(/*! ./$.iter */ 41)
	  , step  = $iter.step;
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(/*! ./$.iter-define */ 42)(String, 'String', function(iterated){
	  set(this, ITER, {o: String(iterated), i: 0});
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var iter  = this[ITER]
	    , O     = iter.o
	    , index = iter.i
	    , point;
	  if(index >= O.length)return step(1);
	  point = $at(O, index);
	  iter.i += point.length;
	  return step(0, point);
	});

/***/ },
/* 40 */
/*!*******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.string-at.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	// true  -> String#at
	// false -> String#codePointAt
	var $ = __webpack_require__(/*! ./$ */ 6);
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String($.assertDefined(that))
	      , i = $.toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l
	      || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	        ? TO_STRING ? s.charAt(i) : a
	        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 41 */
/*!**************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.iter.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $                 = __webpack_require__(/*! ./$ */ 6)
	  , cof               = __webpack_require__(/*! ./$.cof */ 9)
	  , assertObject      = __webpack_require__(/*! ./$.assert */ 18).obj
	  , SYMBOL_ITERATOR   = __webpack_require__(/*! ./$.wks */ 10)('iterator')
	  , FF_ITERATOR       = '@@iterator'
	  , Iterators         = __webpack_require__(/*! ./$.shared */ 11)('iterators')
	  , IteratorPrototype = {};
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	setIterator(IteratorPrototype, $.that);
	function setIterator(O, value){
	  $.hide(O, SYMBOL_ITERATOR, value);
	  // Add iterator for FF iterator protocol
	  if(FF_ITERATOR in [])$.hide(O, FF_ITERATOR, value);
	}
	
	module.exports = {
	  // Safari has buggy iterators w/o `next`
	  BUGGY: 'keys' in [] && !('next' in [].keys()),
	  Iterators: Iterators,
	  step: function(done, value){
	    return {value: value, done: !!done};
	  },
	  is: function(it){
	    var O      = Object(it)
	      , Symbol = $.g.Symbol
	      , SYM    = Symbol && Symbol.iterator || FF_ITERATOR;
	    return SYM in O || SYMBOL_ITERATOR in O || $.has(Iterators, cof.classof(O));
	  },
	  get: function(it){
	    var Symbol  = $.g.Symbol
	      , ext     = it[Symbol && Symbol.iterator || FF_ITERATOR]
	      , getIter = ext || it[SYMBOL_ITERATOR] || Iterators[cof.classof(it)];
	    return assertObject(getIter.call(it));
	  },
	  set: setIterator,
	  create: function(Constructor, NAME, next, proto){
	    Constructor.prototype = $.create(proto || IteratorPrototype, {next: $.desc(1, next)});
	    cof.set(Constructor, NAME + ' Iterator');
	  }
	};

/***/ },
/* 42 */
/*!*********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.iter-define.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $def            = __webpack_require__(/*! ./$.def */ 13)
	  , $redef          = __webpack_require__(/*! ./$.redef */ 14)
	  , $               = __webpack_require__(/*! ./$ */ 6)
	  , cof             = __webpack_require__(/*! ./$.cof */ 9)
	  , $iter           = __webpack_require__(/*! ./$.iter */ 41)
	  , SYMBOL_ITERATOR = __webpack_require__(/*! ./$.wks */ 10)('iterator')
	  , FF_ITERATOR     = '@@iterator'
	  , KEYS            = 'keys'
	  , VALUES          = 'values'
	  , Iterators       = $iter.Iterators;
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCE){
	  $iter.create(Constructor, NAME, next);
	  function createMethod(kind){
	    function $$(that){
	      return new Constructor(that, kind);
	    }
	    switch(kind){
	      case KEYS: return function keys(){ return $$(this); };
	      case VALUES: return function values(){ return $$(this); };
	    } return function entries(){ return $$(this); };
	  }
	  var TAG      = NAME + ' Iterator'
	    , proto    = Base.prototype
	    , _native  = proto[SYMBOL_ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , _default = _native || createMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if(_native){
	    var IteratorPrototype = $.getProto(_default.call(new Base));
	    // Set @@toStringTag to native iterators
	    cof.set(IteratorPrototype, TAG, true);
	    // FF fix
	    if($.FW && $.has(proto, FF_ITERATOR))$iter.set(IteratorPrototype, $.that);
	  }
	  // Define iterator
	  if($.FW)$iter.set(proto, _default);
	  // Plug for library
	  Iterators[NAME] = _default;
	  Iterators[TAG]  = $.that;
	  if(DEFAULT){
	    methods = {
	      keys:    IS_SET            ? _default : createMethod(KEYS),
	      values:  DEFAULT == VALUES ? _default : createMethod(VALUES),
	      entries: DEFAULT != VALUES ? _default : createMethod('entries')
	    };
	    if(FORCE)for(key in methods){
	      if(!(key in proto))$redef(proto, key, methods[key]);
	    } else $def($def.P + $def.F * $iter.BUGGY, NAME, methods);
	  }
	};

/***/ },
/* 43 */
/*!********************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.string.code-point-at.js ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def = __webpack_require__(/*! ./$.def */ 13)
	  , $at  = __webpack_require__(/*! ./$.string-at */ 40)(false);
	$def($def.P, 'String', {
	  // 21.1.3.3 String.prototype.codePointAt(pos)
	  codePointAt: function codePointAt(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 44 */
/*!****************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.string.ends-with.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $    = __webpack_require__(/*! ./$ */ 6)
	  , cof  = __webpack_require__(/*! ./$.cof */ 9)
	  , $def = __webpack_require__(/*! ./$.def */ 13)
	  , toLength = $.toLength;
	
	// should throw error on regex
	$def($def.P + $def.F * !__webpack_require__(/*! ./$.throws */ 21)(function(){ 'q'.endsWith(/./); }), 'String', {
	  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
	  endsWith: function endsWith(searchString /*, endPosition = @length */){
	    if(cof(searchString) == 'RegExp')throw TypeError();
	    var that = String($.assertDefined(this))
	      , endPosition = arguments[1]
	      , len = toLength(that.length)
	      , end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
	    searchString += '';
	    return that.slice(end - searchString.length, end) === searchString;
	  }
	});

/***/ },
/* 45 */
/*!***************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.string.includes.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $    = __webpack_require__(/*! ./$ */ 6)
	  , cof  = __webpack_require__(/*! ./$.cof */ 9)
	  , $def = __webpack_require__(/*! ./$.def */ 13);
	
	$def($def.P, 'String', {
	  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
	  includes: function includes(searchString /*, position = 0 */){
	    if(cof(searchString) == 'RegExp')throw TypeError();
	    return !!~String($.assertDefined(this)).indexOf(searchString, arguments[1]);
	  }
	});

/***/ },
/* 46 */
/*!*************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.string.repeat.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $def = __webpack_require__(/*! ./$.def */ 13);
	
	$def($def.P, 'String', {
	  // 21.1.3.13 String.prototype.repeat(count)
	  repeat: __webpack_require__(/*! ./$.string-repeat */ 47)
	});

/***/ },
/* 47 */
/*!***********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.string-repeat.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $ = __webpack_require__(/*! ./$ */ 6);
	
	module.exports = function repeat(count){
	  var str = String($.assertDefined(this))
	    , res = ''
	    , n   = $.toInteger(count);
	  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
	  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
	  return res;
	};

/***/ },
/* 48 */
/*!******************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.string.starts-with.js ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $    = __webpack_require__(/*! ./$ */ 6)
	  , cof  = __webpack_require__(/*! ./$.cof */ 9)
	  , $def = __webpack_require__(/*! ./$.def */ 13);
	
	// should throw error on regex
	$def($def.P + $def.F * !__webpack_require__(/*! ./$.throws */ 21)(function(){ 'q'.startsWith(/./); }), 'String', {
	  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
	  startsWith: function startsWith(searchString /*, position = 0 */){
	    if(cof(searchString) == 'RegExp')throw TypeError();
	    var that  = String($.assertDefined(this))
	      , index = $.toLength(Math.min(arguments[1], that.length));
	    searchString += '';
	    return that.slice(index, index + searchString.length) === searchString;
	  }
	});

/***/ },
/* 49 */
/*!**********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.array.from.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $     = __webpack_require__(/*! ./$ */ 6)
	  , ctx   = __webpack_require__(/*! ./$.ctx */ 17)
	  , $def  = __webpack_require__(/*! ./$.def */ 13)
	  , $iter = __webpack_require__(/*! ./$.iter */ 41)
	  , call  = __webpack_require__(/*! ./$.iter-call */ 50);
	$def($def.S + $def.F * !__webpack_require__(/*! ./$.iter-detect */ 51)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = Object($.assertDefined(arrayLike))
	      , mapfn   = arguments[1]
	      , mapping = mapfn !== undefined
	      , f       = mapping ? ctx(mapfn, arguments[2], 2) : undefined
	      , index   = 0
	      , length, result, step, iterator;
	    if($iter.is(O)){
	      iterator = $iter.get(O);
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      result   = new (typeof this == 'function' ? this : Array);
	      for(; !(step = iterator.next()).done; index++){
	        result[index] = mapping ? call(iterator, f, [step.value, index], true) : step.value;
	      }
	    } else {
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      result = new (typeof this == 'function' ? this : Array)(length = $.toLength(O.length));
	      for(; length > index; index++){
	        result[index] = mapping ? f(O[index], index) : O[index];
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

/***/ },
/* 50 */
/*!*******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.iter-call.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	var assertObject = __webpack_require__(/*! ./$.assert */ 18).obj;
	function close(iterator){
	  var ret = iterator['return'];
	  if(ret !== undefined)assertObject(ret.call(iterator));
	}
	function call(iterator, fn, value, entries){
	  try {
	    return entries ? fn(assertObject(value)[0], value[1]) : fn(value);
	  } catch(e){
	    close(iterator);
	    throw e;
	  }
	}
	call.close = close;
	module.exports = call;

/***/ },
/* 51 */
/*!*********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.iter-detect.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var SYMBOL_ITERATOR = __webpack_require__(/*! ./$.wks */ 10)('iterator')
	  , SAFE_CLOSING    = false;
	try {
	  var riter = [7][SYMBOL_ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	module.exports = function(exec){
	  if(!SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[SYMBOL_ITERATOR]();
	    iter.next = function(){ safe = true; };
	    arr[SYMBOL_ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 52 */
/*!********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.array.of.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $def = __webpack_require__(/*! ./$.def */ 13);
	$def($def.S, 'Array', {
	  // 22.1.2.3 Array.of( ...items)
	  of: function of(/* ...args */){
	    var index  = 0
	      , length = arguments.length
	      // strange IE quirks mode bug -> use typeof instead of isFunction
	      , result = new (typeof this == 'function' ? this : Array)(length);
	    while(length > index)result[index] = arguments[index++];
	    result.length = length;
	    return result;
	  }
	});

/***/ },
/* 53 */
/*!**************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.array.iterator.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $          = __webpack_require__(/*! ./$ */ 6)
	  , setUnscope = __webpack_require__(/*! ./$.unscope */ 54)
	  , ITER       = __webpack_require__(/*! ./$.uid */ 12).safe('iter')
	  , $iter      = __webpack_require__(/*! ./$.iter */ 41)
	  , step       = $iter.step
	  , Iterators  = $iter.Iterators;
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	__webpack_require__(/*! ./$.iter-define */ 42)(Array, 'Array', function(iterated, kind){
	  $.set(this, ITER, {o: $.toObject(iterated), i: 0, k: kind});
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var iter  = this[ITER]
	    , O     = iter.o
	    , kind  = iter.k
	    , index = iter.i++;
	  if(!O || index >= O.length){
	    iter.o = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	setUnscope('keys');
	setUnscope('values');
	setUnscope('entries');

/***/ },
/* 54 */
/*!*****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.unscope.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	// 22.1.3.31 Array.prototype[@@unscopables]
	var $           = __webpack_require__(/*! ./$ */ 6)
	  , UNSCOPABLES = __webpack_require__(/*! ./$.wks */ 10)('unscopables');
	if($.FW && !(UNSCOPABLES in []))$.hide(Array.prototype, UNSCOPABLES, {});
	module.exports = function(key){
	  if($.FW)[][UNSCOPABLES][key] = true;
	};

/***/ },
/* 55 */
/*!*************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.array.species.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ./$.species */ 56)(Array);

/***/ },
/* 56 */
/*!*****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.species.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $       = __webpack_require__(/*! ./$ */ 6)
	  , SPECIES = __webpack_require__(/*! ./$.wks */ 10)('species');
	module.exports = function(C){
	  if($.DESC && !(SPECIES in C))$.setDesc(C, SPECIES, {
	    configurable: true,
	    get: $.that
	  });
	};

/***/ },
/* 57 */
/*!*****************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.array.copy-within.js ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $       = __webpack_require__(/*! ./$ */ 6)
	  , $def    = __webpack_require__(/*! ./$.def */ 13)
	  , toIndex = $.toIndex;
	$def($def.P, 'Array', {
	  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
	  copyWithin: function copyWithin(target/* = 0 */, start /* = 0, end = @length */){
	    var O     = Object($.assertDefined(this))
	      , len   = $.toLength(O.length)
	      , to    = toIndex(target, len)
	      , from  = toIndex(start, len)
	      , end   = arguments[2]
	      , fin   = end === undefined ? len : toIndex(end, len)
	      , count = Math.min(fin - from, len - to)
	      , inc   = 1;
	    if(from < to && to < from + count){
	      inc  = -1;
	      from = from + count - 1;
	      to   = to   + count - 1;
	    }
	    while(count-- > 0){
	      if(from in O)O[to] = O[from];
	      else delete O[to];
	      to   += inc;
	      from += inc;
	    } return O;
	  }
	});
	__webpack_require__(/*! ./$.unscope */ 54)('copyWithin');

/***/ },
/* 58 */
/*!**********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.array.fill.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $       = __webpack_require__(/*! ./$ */ 6)
	  , $def    = __webpack_require__(/*! ./$.def */ 13)
	  , toIndex = $.toIndex;
	$def($def.P, 'Array', {
	  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
	  fill: function fill(value /*, start = 0, end = @length */){
	    var O      = Object($.assertDefined(this))
	      , length = $.toLength(O.length)
	      , index  = toIndex(arguments[1], length)
	      , end    = arguments[2]
	      , endPos = end === undefined ? length : toIndex(end, length);
	    while(endPos > index)O[index++] = value;
	    return O;
	  }
	});
	__webpack_require__(/*! ./$.unscope */ 54)('fill');

/***/ },
/* 59 */
/*!**********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.array.find.js ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
	var KEY    = 'find'
	  , $def   = __webpack_require__(/*! ./$.def */ 13)
	  , forced = true
	  , $find  = __webpack_require__(/*! ./$.array-methods */ 16)(5);
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$def($def.P + $def.F * forced, 'Array', {
	  find: function find(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments[1]);
	  }
	});
	__webpack_require__(/*! ./$.unscope */ 54)(KEY);

/***/ },
/* 60 */
/*!****************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.array.find-index.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
	var KEY    = 'findIndex'
	  , $def   = __webpack_require__(/*! ./$.def */ 13)
	  , forced = true
	  , $find  = __webpack_require__(/*! ./$.array-methods */ 16)(6);
	// Shouldn't skip holes
	if(KEY in [])Array(1)[KEY](function(){ forced = false; });
	$def($def.P + $def.F * forced, 'Array', {
	  findIndex: function findIndex(callbackfn/*, that = undefined */){
	    return $find(this, callbackfn, arguments[1]);
	  }
	});
	__webpack_require__(/*! ./$.unscope */ 54)(KEY);

/***/ },
/* 61 */
/*!******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.regexp.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $       = __webpack_require__(/*! ./$ */ 6)
	  , cof     = __webpack_require__(/*! ./$.cof */ 9)
	  , $RegExp = $.g.RegExp
	  , Base    = $RegExp
	  , proto   = $RegExp.prototype
	  , re      = /a/g
	  // "new" creates a new object
	  , CORRECT_NEW = new $RegExp(re) !== re
	  // RegExp allows a regex with flags as the pattern
	  , ALLOWS_RE_WITH_FLAGS = function(){
	    try {
	      return $RegExp(re, 'i') == '/a/i';
	    } catch(e){ /* empty */ }
	  }();
	if($.FW && $.DESC){
	  if(!CORRECT_NEW || !ALLOWS_RE_WITH_FLAGS){
	    $RegExp = function RegExp(pattern, flags){
	      var patternIsRegExp  = cof(pattern) == 'RegExp'
	        , flagsIsUndefined = flags === undefined;
	      if(!(this instanceof $RegExp) && patternIsRegExp && flagsIsUndefined)return pattern;
	      return CORRECT_NEW
	        ? new Base(patternIsRegExp && !flagsIsUndefined ? pattern.source : pattern, flags)
	        : new Base(patternIsRegExp ? pattern.source : pattern
	          , patternIsRegExp && flagsIsUndefined ? pattern.flags : flags);
	    };
	    $.each.call($.getNames(Base), function(key){
	      key in $RegExp || $.setDesc($RegExp, key, {
	        configurable: true,
	        get: function(){ return Base[key]; },
	        set: function(it){ Base[key] = it; }
	      });
	    });
	    proto.constructor = $RegExp;
	    $RegExp.prototype = proto;
	    __webpack_require__(/*! ./$.redef */ 14)($.g, 'RegExp', $RegExp);
	  }
	  // 21.2.5.3 get RegExp.prototype.flags()
	  if(/./g.flags != 'g')$.setDesc(proto, 'flags', {
	    configurable: true,
	    get: __webpack_require__(/*! ./$.replacer */ 20)(/^.*\/(\w*)$/, '$1')
	  });
	}
	__webpack_require__(/*! ./$.species */ 56)($RegExp);

/***/ },
/* 62 */
/*!*******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.promise.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $        = __webpack_require__(/*! ./$ */ 6)
	  , ctx      = __webpack_require__(/*! ./$.ctx */ 17)
	  , cof      = __webpack_require__(/*! ./$.cof */ 9)
	  , $def     = __webpack_require__(/*! ./$.def */ 13)
	  , assert   = __webpack_require__(/*! ./$.assert */ 18)
	  , forOf    = __webpack_require__(/*! ./$.for-of */ 63)
	  , setProto = __webpack_require__(/*! ./$.set-proto */ 29).set
	  , species  = __webpack_require__(/*! ./$.species */ 56)
	  , SPECIES  = __webpack_require__(/*! ./$.wks */ 10)('species')
	  , RECORD   = __webpack_require__(/*! ./$.uid */ 12).safe('record')
	  , PROMISE  = 'Promise'
	  , global   = $.g
	  , process  = global.process
	  , asap     = process && process.nextTick || __webpack_require__(/*! ./$.task */ 64).set
	  , P        = global[PROMISE]
	  , isFunction     = $.isFunction
	  , isObject       = $.isObject
	  , assertFunction = assert.fn
	  , assertObject   = assert.obj;
	
	var useNative = function(){
	  var test, works = false;
	  function P2(x){
	    var self = new P(x);
	    setProto(self, P2.prototype);
	    return self;
	  }
	  try {
	    works = isFunction(P) && isFunction(P.resolve) && P.resolve(test = new P(function(){})) == test;
	    setProto(P2, P);
	    P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
	    // actual Firefox has broken subclass support, test that
	    if(!(P2.resolve(5).then(function(){}) instanceof P2)){
	      works = false;
	    }
	  } catch(e){ works = false; }
	  return works;
	}();
	
	// helpers
	function getConstructor(C){
	  var S = assertObject(C)[SPECIES];
	  return S != undefined ? S : C;
	}
	function isThenable(it){
	  var then;
	  if(isObject(it))then = it.then;
	  return isFunction(then) ? then : false;
	}
	function notify(record){
	  var chain = record.c;
	  if(chain.length)asap(function(){
	    var value = record.v
	      , ok    = record.s == 1
	      , i     = 0;
	    function run(react){
	      var cb = ok ? react.ok : react.fail
	        , ret, then;
	      try {
	        if(cb){
	          if(!ok)record.h = true;
	          ret = cb === true ? value : cb(value);
	          if(ret === react.P){
	            react.rej(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(ret)){
	            then.call(ret, react.res, react.rej);
	          } else react.res(ret);
	        } else react.rej(value);
	      } catch(err){
	        react.rej(err);
	      }
	    }
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    chain.length = 0;
	  });
	}
	function isUnhandled(promise){
	  var record = promise[RECORD]
	    , chain  = record.a || record.c
	    , i      = 0
	    , react;
	  if(record.h)return false;
	  while(chain.length > i){
	    react = chain[i++];
	    if(react.fail || !isUnhandled(react.P))return false;
	  } return true;
	}
	function $reject(value){
	  var record = this
	    , promise;
	  if(record.d)return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  record.v = value;
	  record.s = 2;
	  record.a = record.c.slice();
	  setTimeout(function(){
	    asap(function(){
	      if(isUnhandled(promise = record.p)){
	        if(cof(process) == 'process'){
	          process.emit('unhandledRejection', value, promise);
	        } else if(global.console && isFunction(console.error)){
	          console.error('Unhandled promise rejection', value);
	        }
	      }
	      record.a = undefined;
	    });
	  }, 1);
	  notify(record);
	}
	function $resolve(value){
	  var record = this
	    , then, wrapper;
	  if(record.d)return;
	  record.d = true;
	  record = record.r || record; // unwrap
	  try {
	    if(then = isThenable(value)){
	      wrapper = {r: record, d: false}; // wrap
	      then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	    } else {
	      record.v = value;
	      record.s = 1;
	      notify(record);
	    }
	  } catch(err){
	    $reject.call(wrapper || {r: record, d: false}, err); // wrap
	  }
	}
	
	// constructor polyfill
	if(!useNative){
	  // 25.4.3.1 Promise(executor)
	  P = function Promise(executor){
	    assertFunction(executor);
	    var record = {
	      p: assert.inst(this, P, PROMISE),       // <- promise
	      c: [],                                  // <- awaiting reactions
	      a: undefined,                           // <- checked in isUnhandled reactions
	      s: 0,                                   // <- state
	      d: false,                               // <- done
	      v: undefined,                           // <- value
	      h: false                                // <- handled rejection
	    };
	    $.hide(this, RECORD, record);
	    try {
	      executor(ctx($resolve, record, 1), ctx($reject, record, 1));
	    } catch(err){
	      $reject.call(record, err);
	    }
	  };
	  __webpack_require__(/*! ./$.mix */ 65)(P.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var S = assertObject(assertObject(this).constructor)[SPECIES];
	      var react = {
	        ok:   isFunction(onFulfilled) ? onFulfilled : true,
	        fail: isFunction(onRejected)  ? onRejected  : false
	      };
	      var promise = react.P = new (S != undefined ? S : P)(function(res, rej){
	        react.res = assertFunction(res);
	        react.rej = assertFunction(rej);
	      });
	      var record = this[RECORD];
	      record.c.push(react);
	      if(record.a)record.a.push(react);
	      record.s && notify(record);
	      return promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	}
	
	// export
	$def($def.G + $def.W + $def.F * !useNative, {Promise: P});
	cof.set(P, PROMISE);
	species(P);
	species($.core[PROMISE]); // for wrapper
	
	// statics
	$def($def.S + $def.F * !useNative, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    return new (getConstructor(this))(function(res, rej){
	      rej(r);
	    });
	  },
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    return isObject(x) && RECORD in x && $.getProto(x) === this.prototype
	      ? x : new (getConstructor(this))(function(res){
	        res(x);
	      });
	  }
	});
	$def($def.S + $def.F * !(useNative && __webpack_require__(/*! ./$.iter-detect */ 51)(function(iter){
	  P.all(iter)['catch'](function(){});
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C      = getConstructor(this)
	      , values = [];
	    return new C(function(res, rej){
	      forOf(iterable, false, values.push, values);
	      var remaining = values.length
	        , results   = Array(remaining);
	      if(remaining)$.each.call(values, function(promise, index){
	        C.resolve(promise).then(function(value){
	          results[index] = value;
	          --remaining || res(results);
	        }, rej);
	      });
	      else res(results);
	    });
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C = getConstructor(this);
	    return new C(function(res, rej){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(res, rej);
	      });
	    });
	  }
	});

/***/ },
/* 63 */
/*!****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.for-of.js ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	var ctx  = __webpack_require__(/*! ./$.ctx */ 17)
	  , get  = __webpack_require__(/*! ./$.iter */ 41).get
	  , call = __webpack_require__(/*! ./$.iter-call */ 50);
	module.exports = function(iterable, entries, fn, that){
	  var iterator = get(iterable)
	    , f        = ctx(fn, that, entries ? 2 : 1)
	    , step;
	  while(!(step = iterator.next()).done){
	    if(call(iterator, f, step.value, entries) === false){
	      return call.close(iterator);
	    }
	  }
	};

/***/ },
/* 64 */
/*!**************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.task.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $      = __webpack_require__(/*! ./$ */ 6)
	  , ctx    = __webpack_require__(/*! ./$.ctx */ 17)
	  , cof    = __webpack_require__(/*! ./$.cof */ 9)
	  , invoke = __webpack_require__(/*! ./$.invoke */ 15)
	  , cel    = __webpack_require__(/*! ./$.dom-create */ 8)
	  , global             = $.g
	  , isFunction         = $.isFunction
	  , html               = $.html
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , postMessage        = global.postMessage
	  , addEventListener   = global.addEventListener
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	function run(){
	  var id = +this;
	  if($.has(queue, id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	}
	function listner(event){
	  run.call(event.data);
	}
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!isFunction(setTask) || !isFunction(clearTask)){
	  setTask = function(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(isFunction(fn) ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(cof(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Modern browsers, skip implementation for WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is object
	  } else if(addEventListener && isFunction(postMessage) && !global.importScripts){
	    defer = function(id){
	      postMessage(id, '*');
	    };
	    addEventListener('message', listner, false);
	  // WebWorkers
	  } else if(isFunction(MessageChannel)){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listner;
	    defer = ctx(port.postMessage, port, 1);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 65 */
/*!*************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.mix.js ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $redef = __webpack_require__(/*! ./$.redef */ 14);
	module.exports = function(target, src){
	  for(var key in src)$redef(target, key, src[key]);
	  return target;
	};

/***/ },
/* 66 */
/*!***************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.map.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(/*! ./$.collection-strong */ 67);
	
	// 23.1 Map Objects
	__webpack_require__(/*! ./$.collection */ 68)('Map', {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 67 */
/*!***************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.collection-strong.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $        = __webpack_require__(/*! ./$ */ 6)
	  , ctx      = __webpack_require__(/*! ./$.ctx */ 17)
	  , safe     = __webpack_require__(/*! ./$.uid */ 12).safe
	  , assert   = __webpack_require__(/*! ./$.assert */ 18)
	  , forOf    = __webpack_require__(/*! ./$.for-of */ 63)
	  , step     = __webpack_require__(/*! ./$.iter */ 41).step
	  , has      = $.has
	  , set      = $.set
	  , isObject = $.isObject
	  , hide     = $.hide
	  , isExtensible = Object.isExtensible || isObject
	  , ID       = safe('id')
	  , O1       = safe('O1')
	  , LAST     = safe('last')
	  , FIRST    = safe('first')
	  , ITER     = safe('iter')
	  , SIZE     = $.DESC ? safe('size') : 'size'
	  , id       = 0;
	
	function fastKey(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, ID)){
	    // can't set id to frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add id
	    if(!create)return 'E';
	    // add missing object id
	    hide(it, ID, ++id);
	  // return object id with prefix
	  } return 'O' + it[ID];
	}
	
	function getEntry(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that[O1][index];
	  // frozen object case
	  for(entry = that[FIRST]; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	}
	
	module.exports = {
	  getConstructor: function(NAME, IS_MAP, ADDER){
	    function C(){
	      var that     = assert.inst(this, C, NAME)
	        , iterable = arguments[0];
	      set(that, O1, $.create(null));
	      set(that, SIZE, 0);
	      set(that, LAST, undefined);
	      set(that, FIRST, undefined);
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    }
	    __webpack_require__(/*! ./$.mix */ 65)(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that[O1], entry = that[FIRST]; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that[FIRST] = that[LAST] = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that[O1][entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that[FIRST] == entry)that[FIRST] = next;
	          if(that[LAST] == entry)that[LAST] = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        var f = ctx(callbackfn, arguments[1], 3)
	          , entry;
	        while(entry = entry ? entry.n : this[FIRST]){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if($.DESC)$.setDesc(C.prototype, 'size', {
	      get: function(){
	        return assert.def(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that[LAST] = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that[LAST],          // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that[FIRST])that[FIRST] = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that[O1][index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  // add .keys, .values, .entries, [@@iterator]
	  // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	  setIter: function(C, NAME, IS_MAP){
	    __webpack_require__(/*! ./$.iter-define */ 42)(C, NAME, function(iterated, kind){
	      set(this, ITER, {o: iterated, k: kind});
	    }, function(){
	      var iter  = this[ITER]
	        , kind  = iter.k
	        , entry = iter.l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!iter.o || !(iter.l = entry = entry ? entry.n : iter.o[FIRST])){
	        // or finish the iteration
	        iter.o = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);
	  }
	};

/***/ },
/* 68 */
/*!********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.collection.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $     = __webpack_require__(/*! ./$ */ 6)
	  , $def  = __webpack_require__(/*! ./$.def */ 13)
	  , BUGGY = __webpack_require__(/*! ./$.iter */ 41).BUGGY
	  , forOf = __webpack_require__(/*! ./$.for-of */ 63)
	  , species = __webpack_require__(/*! ./$.species */ 56)
	  , assertInstance = __webpack_require__(/*! ./$.assert */ 18).inst;
	
	module.exports = function(NAME, methods, common, IS_MAP, IS_WEAK){
	  var Base  = $.g[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  function fixMethod(KEY, CHAIN){
	    if($.FW){
	      var method = proto[KEY];
	      __webpack_require__(/*! ./$.redef */ 14)(proto, KEY, function(a, b){
	        var result = method.call(this, a === 0 ? 0 : a, b);
	        return CHAIN ? this : result;
	      });
	    }
	  }
	  if(!$.isFunction(C) || !(IS_WEAK || !BUGGY && proto.forEach && proto.entries)){
	    // create collection constructor
	    C = common.getConstructor(NAME, IS_MAP, ADDER);
	    __webpack_require__(/*! ./$.mix */ 65)(C.prototype, methods);
	  } else {
	    var inst  = new C
	      , chain = inst[ADDER](IS_WEAK ? {} : -0, 1)
	      , buggyZero;
	    // wrap for init collections from iterable
	    if(!__webpack_require__(/*! ./$.iter-detect */ 51)(function(iter){ new C(iter); })){ // eslint-disable-line no-new
	      C = function(){
	        assertInstance(this, C, NAME);
	        var that     = new Base
	          , iterable = arguments[0];
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      };
	      C.prototype = proto;
	      if($.FW)proto.constructor = C;
	    }
	    IS_WEAK || inst.forEach(function(val, key){
	      buggyZero = 1 / key === -Infinity;
	    });
	    // fix converting -0 key to +0
	    if(buggyZero){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    // + fix .add & .set for chaining
	    if(buggyZero || chain !== inst)fixMethod(ADDER, true);
	  }
	
	  __webpack_require__(/*! ./$.cof */ 9).set(C, NAME);
	
	  O[NAME] = C;
	  $def($def.G + $def.W + $def.F * (C != Base), O);
	  species(C);
	  species($.core[NAME]); // for wrapper
	
	  if(!IS_WEAK)common.setIter(C, NAME, IS_MAP);
	
	  return C;
	};

/***/ },
/* 69 */
/*!***************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.set.js ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(/*! ./$.collection-strong */ 67);
	
	// 23.2 Set Objects
	__webpack_require__(/*! ./$.collection */ 68)('Set', {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 70 */
/*!********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.weak-map.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $         = __webpack_require__(/*! ./$ */ 6)
	  , weak      = __webpack_require__(/*! ./$.collection-weak */ 71)
	  , leakStore = weak.leakStore
	  , ID        = weak.ID
	  , WEAK      = weak.WEAK
	  , has       = $.has
	  , isObject  = $.isObject
	  , isExtensible = Object.isExtensible || isObject
	  , tmp       = {};
	
	// 23.3 WeakMap Objects
	var WeakMap = __webpack_require__(/*! ./$.collection */ 68)('WeakMap', {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      if(!isExtensible(key))return leakStore(this).get(key);
	      if(has(key, WEAK))return key[WEAK][this[ID]];
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	}, weak, true, true);
	
	// IE11 WeakMap frozen keys fix
	if($.FW && new WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  $.each.call(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = WeakMap.prototype
	      , method = proto[key];
	    __webpack_require__(/*! ./$.redef */ 14)(proto, key, function(a, b){
	      // store frozen objects on leaky map
	      if(isObject(a) && !isExtensible(a)){
	        var result = leakStore(this)[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 71 */
/*!*************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.collection-weak.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $         = __webpack_require__(/*! ./$ */ 6)
	  , safe      = __webpack_require__(/*! ./$.uid */ 12).safe
	  , assert    = __webpack_require__(/*! ./$.assert */ 18)
	  , forOf     = __webpack_require__(/*! ./$.for-of */ 63)
	  , _has      = $.has
	  , isObject  = $.isObject
	  , hide      = $.hide
	  , isExtensible = Object.isExtensible || isObject
	  , id        = 0
	  , ID        = safe('id')
	  , WEAK      = safe('weak')
	  , LEAK      = safe('leak')
	  , method    = __webpack_require__(/*! ./$.array-methods */ 16)
	  , find      = method(5)
	  , findIndex = method(6);
	function findFrozen(store, key){
	  return find(store.array, function(it){
	    return it[0] === key;
	  });
	}
	// fallback for frozen keys
	function leakStore(that){
	  return that[LEAK] || hide(that, LEAK, {
	    array: [],
	    get: function(key){
	      var entry = findFrozen(this, key);
	      if(entry)return entry[1];
	    },
	    has: function(key){
	      return !!findFrozen(this, key);
	    },
	    set: function(key, value){
	      var entry = findFrozen(this, key);
	      if(entry)entry[1] = value;
	      else this.array.push([key, value]);
	    },
	    'delete': function(key){
	      var index = findIndex(this.array, function(it){
	        return it[0] === key;
	      });
	      if(~index)this.array.splice(index, 1);
	      return !!~index;
	    }
	  })[LEAK];
	}
	
	module.exports = {
	  getConstructor: function(NAME, IS_MAP, ADDER){
	    function C(){
	      $.set(assert.inst(this, C, NAME), ID, id++);
	      var iterable = arguments[0];
	      if(iterable != undefined)forOf(iterable, IS_MAP, this[ADDER], this);
	    }
	    __webpack_require__(/*! ./$.mix */ 65)(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        if(!isExtensible(key))return leakStore(this)['delete'](key);
	        return _has(key, WEAK) && _has(key[WEAK], this[ID]) && delete key[WEAK][this[ID]];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        if(!isExtensible(key))return leakStore(this).has(key);
	        return _has(key, WEAK) && _has(key[WEAK], this[ID]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    if(!isExtensible(assert.obj(key))){
	      leakStore(that).set(key, value);
	    } else {
	      _has(key, WEAK) || hide(key, WEAK, {});
	      key[WEAK][that[ID]] = value;
	    } return that;
	  },
	  leakStore: leakStore,
	  WEAK: WEAK,
	  ID: ID
	};

/***/ },
/* 72 */
/*!********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.weak-set.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var weak = __webpack_require__(/*! ./$.collection-weak */ 71);
	
	// 23.4 WeakSet Objects
	__webpack_require__(/*! ./$.collection */ 68)('WeakSet', {
	  // 23.4.3.1 WeakSet.prototype.add(value)
	  add: function add(value){
	    return weak.def(this, value, true);
	  }
	}, weak, false, true);

/***/ },
/* 73 */
/*!*******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es6.reflect.js ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $         = __webpack_require__(/*! ./$ */ 6)
	  , $def      = __webpack_require__(/*! ./$.def */ 13)
	  , setProto  = __webpack_require__(/*! ./$.set-proto */ 29)
	  , $iter     = __webpack_require__(/*! ./$.iter */ 41)
	  , ITERATOR  = __webpack_require__(/*! ./$.wks */ 10)('iterator')
	  , ITER      = __webpack_require__(/*! ./$.uid */ 12).safe('iter')
	  , step      = $iter.step
	  , assert    = __webpack_require__(/*! ./$.assert */ 18)
	  , isObject  = $.isObject
	  , getProto  = $.getProto
	  , $Reflect  = $.g.Reflect
	  , _apply    = Function.apply
	  , assertObject = assert.obj
	  , _isExtensible = Object.isExtensible || isObject
	  , _preventExtensions = Object.preventExtensions
	  // IE TP has broken Reflect.enumerate
	  , buggyEnumerate = !($Reflect && $Reflect.enumerate && ITERATOR in $Reflect.enumerate({}));
	
	function Enumerate(iterated){
	  $.set(this, ITER, {o: iterated, k: undefined, i: 0});
	}
	$iter.create(Enumerate, 'Object', function(){
	  var iter = this[ITER]
	    , keys = iter.k
	    , key;
	  if(keys == undefined){
	    iter.k = keys = [];
	    for(key in iter.o)keys.push(key);
	  }
	  do {
	    if(iter.i >= keys.length)return step(1);
	  } while(!((key = keys[iter.i++]) in iter.o));
	  return step(0, key);
	});
	
	var reflect = {
	  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
	  apply: function apply(target, thisArgument, argumentsList){
	    return _apply.call(target, thisArgument, argumentsList);
	  },
	  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
	  construct: function construct(target, argumentsList /*, newTarget*/){
	    var proto    = assert.fn(arguments.length < 3 ? target : arguments[2]).prototype
	      , instance = $.create(isObject(proto) ? proto : Object.prototype)
	      , result   = _apply.call(target, instance, argumentsList);
	    return isObject(result) ? result : instance;
	  },
	  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
	  defineProperty: function defineProperty(target, propertyKey, attributes){
	    assertObject(target);
	    try {
	      $.setDesc(target, propertyKey, attributes);
	      return true;
	    } catch(e){
	      return false;
	    }
	  },
	  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
	  deleteProperty: function deleteProperty(target, propertyKey){
	    var desc = $.getDesc(assertObject(target), propertyKey);
	    return desc && !desc.configurable ? false : delete target[propertyKey];
	  },
	  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
	  get: function get(target, propertyKey/*, receiver*/){
	    var receiver = arguments.length < 3 ? target : arguments[2]
	      , desc = $.getDesc(assertObject(target), propertyKey), proto;
	    if(desc)return $.has(desc, 'value')
	      ? desc.value
	      : desc.get === undefined
	        ? undefined
	        : desc.get.call(receiver);
	    return isObject(proto = getProto(target))
	      ? get(proto, propertyKey, receiver)
	      : undefined;
	  },
	  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
	    return $.getDesc(assertObject(target), propertyKey);
	  },
	  // 26.1.8 Reflect.getPrototypeOf(target)
	  getPrototypeOf: function getPrototypeOf(target){
	    return getProto(assertObject(target));
	  },
	  // 26.1.9 Reflect.has(target, propertyKey)
	  has: function has(target, propertyKey){
	    return propertyKey in target;
	  },
	  // 26.1.10 Reflect.isExtensible(target)
	  isExtensible: function isExtensible(target){
	    return _isExtensible(assertObject(target));
	  },
	  // 26.1.11 Reflect.ownKeys(target)
	  ownKeys: __webpack_require__(/*! ./$.own-keys */ 74),
	  // 26.1.12 Reflect.preventExtensions(target)
	  preventExtensions: function preventExtensions(target){
	    assertObject(target);
	    try {
	      if(_preventExtensions)_preventExtensions(target);
	      return true;
	    } catch(e){
	      return false;
	    }
	  },
	  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
	  set: function set(target, propertyKey, V/*, receiver*/){
	    var receiver = arguments.length < 4 ? target : arguments[3]
	      , ownDesc  = $.getDesc(assertObject(target), propertyKey)
	      , existingDescriptor, proto;
	    if(!ownDesc){
	      if(isObject(proto = getProto(target))){
	        return set(proto, propertyKey, V, receiver);
	      }
	      ownDesc = $.desc(0);
	    }
	    if($.has(ownDesc, 'value')){
	      if(ownDesc.writable === false || !isObject(receiver))return false;
	      existingDescriptor = $.getDesc(receiver, propertyKey) || $.desc(0);
	      existingDescriptor.value = V;
	      $.setDesc(receiver, propertyKey, existingDescriptor);
	      return true;
	    }
	    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
	  }
	};
	// 26.1.14 Reflect.setPrototypeOf(target, proto)
	if(setProto)reflect.setPrototypeOf = function setPrototypeOf(target, proto){
	  setProto.check(target, proto);
	  try {
	    setProto.set(target, proto);
	    return true;
	  } catch(e){
	    return false;
	  }
	};
	
	$def($def.G, {Reflect: {}});
	
	$def($def.S + $def.F * buggyEnumerate, 'Reflect', {
	  // 26.1.5 Reflect.enumerate(target)
	  enumerate: function enumerate(target){
	    return new Enumerate(assertObject(target));
	  }
	});
	
	$def($def.S, 'Reflect', reflect);

/***/ },
/* 74 */
/*!******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.own-keys.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $            = __webpack_require__(/*! ./$ */ 6)
	  , assertObject = __webpack_require__(/*! ./$.assert */ 18).obj;
	module.exports = function ownKeys(it){
	  assertObject(it);
	  var keys       = $.getNames(it)
	    , getSymbols = $.getSymbols;
	  return getSymbols ? keys.concat(getSymbols(it)) : keys;
	};

/***/ },
/* 75 */
/*!**************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es7.array.includes.js ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/domenic/Array.prototype.includes
	var $def      = __webpack_require__(/*! ./$.def */ 13)
	  , $includes = __webpack_require__(/*! ./$.array-includes */ 19)(true);
	$def($def.P, 'Array', {
	  includes: function includes(el /*, fromIndex = 0 */){
	    return $includes(this, el, arguments[1]);
	  }
	});
	__webpack_require__(/*! ./$.unscope */ 54)('includes');

/***/ },
/* 76 */
/*!*********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es7.string.at.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/mathiasbynens/String.prototype.at
	'use strict';
	var $def = __webpack_require__(/*! ./$.def */ 13)
	  , $at  = __webpack_require__(/*! ./$.string-at */ 40)(true);
	$def($def.P, 'String', {
	  at: function at(pos){
	    return $at(this, pos);
	  }
	});

/***/ },
/* 77 */
/*!***********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es7.string.lpad.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def = __webpack_require__(/*! ./$.def */ 13)
	  , $pad = __webpack_require__(/*! ./$.string-pad */ 78);
	$def($def.P, 'String', {
	  lpad: function lpad(n){
	    return $pad(this, n, arguments[1], true);
	  }
	});

/***/ },
/* 78 */
/*!********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.string-pad.js ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.ecmascript.org/doku.php?id=strawman:string_padding
	var $      = __webpack_require__(/*! ./$ */ 6)
	  , repeat = __webpack_require__(/*! ./$.string-repeat */ 47);
	
	module.exports = function(that, minLength, fillChar, left){
	  // 1. Let O be CheckObjectCoercible(this value).
	  // 2. Let S be ToString(O).
	  var S = String($.assertDefined(that));
	  // 4. If intMinLength is undefined, return S.
	  if(minLength === undefined)return S;
	  // 4. Let intMinLength be ToInteger(minLength).
	  var intMinLength = $.toInteger(minLength);
	  // 5. Let fillLen be the number of characters in S minus intMinLength.
	  var fillLen = intMinLength - S.length;
	  // 6. If fillLen < 0, then throw a RangeError exception.
	  // 7. If fillLen is +∞, then throw a RangeError exception.
	  if(fillLen < 0 || fillLen === Infinity){
	    throw new RangeError('Cannot satisfy string length ' + minLength + ' for string: ' + S);
	  }
	  // 8. Let sFillStr be the string represented by fillStr.
	  // 9. If sFillStr is undefined, let sFillStr be a space character.
	  var sFillStr = fillChar === undefined ? ' ' : String(fillChar);
	  // 10. Let sFillVal be a String made of sFillStr, repeated until fillLen is met.
	  var sFillVal = repeat.call(sFillStr, Math.ceil(fillLen / sFillStr.length));
	  // truncate if we overflowed
	  if(sFillVal.length > fillLen)sFillVal = left
	    ? sFillVal.slice(sFillVal.length - fillLen)
	    : sFillVal.slice(0, fillLen);
	  // 11. Return a string made from sFillVal, followed by S.
	  // 11. Return a String made from S, followed by sFillVal.
	  return left ? sFillVal.concat(S) : S.concat(sFillVal);
	};

/***/ },
/* 79 */
/*!***********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es7.string.rpad.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $def = __webpack_require__(/*! ./$.def */ 13)
	  , $pad = __webpack_require__(/*! ./$.string-pad */ 78);
	$def($def.P, 'String', {
	  rpad: function rpad(n){
	    return $pad(this, n, arguments[1], false);
	  }
	});

/***/ },
/* 80 */
/*!*************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es7.regexp.escape.js ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/kangax/9698100
	var $def = __webpack_require__(/*! ./$.def */ 13);
	$def($def.S, 'RegExp', {
	  escape: __webpack_require__(/*! ./$.replacer */ 20)(/([\\\-[\]{}()*+?.,^$|])/g, '\\$1', true)
	});

/***/ },
/* 81 */
/*!***********************************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es7.object.get-own-property-descriptors.js ***!
  \***********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// https://gist.github.com/WebReflection/9353781
	var $       = __webpack_require__(/*! ./$ */ 6)
	  , $def    = __webpack_require__(/*! ./$.def */ 13)
	  , ownKeys = __webpack_require__(/*! ./$.own-keys */ 74);
	
	$def($def.S, 'Object', {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
	    var O      = $.toObject(object)
	      , result = {};
	    $.each.call(ownKeys(O), function(key){
	      $.setDesc(result, key, $.desc(0, $.getDesc(O, key)));
	    });
	    return result;
	  }
	});

/***/ },
/* 82 */
/*!***************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es7.object.to-array.js ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// http://goo.gl/XkBrjD
	var $    = __webpack_require__(/*! ./$ */ 6)
	  , $def = __webpack_require__(/*! ./$.def */ 13);
	function createObjectToArray(isEntries){
	  return function(object){
	    var O      = $.toObject(object)
	      , keys   = $.getKeys(O)
	      , length = keys.length
	      , i      = 0
	      , result = Array(length)
	      , key;
	    if(isEntries)while(length > i)result[i] = [key = keys[i++], O[key]];
	    else while(length > i)result[i] = O[keys[i++]];
	    return result;
	  };
	}
	$def($def.S, 'Object', {
	  values:  createObjectToArray(false),
	  entries: createObjectToArray(true)
	});

/***/ },
/* 83 */
/*!***********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es7.map.to-json.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	__webpack_require__(/*! ./$.collection-to-json */ 84)('Map');

/***/ },
/* 84 */
/*!****************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.collection-to-json.js ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $def  = __webpack_require__(/*! ./$.def */ 13)
	  , forOf = __webpack_require__(/*! ./$.for-of */ 63);
	module.exports = function(NAME){
	  $def($def.P, NAME, {
	    toJSON: function toJSON(){
	      var arr = [];
	      forOf(this, false, arr.push, arr);
	      return arr;
	    }
	  });
	};

/***/ },
/* 85 */
/*!***********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/es7.set.to-json.js ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	__webpack_require__(/*! ./$.collection-to-json */ 84)('Set');

/***/ },
/* 86 */
/*!************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/js.array.statics.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	// JavaScript 1.6 / Strawman array statics shim
	var $       = __webpack_require__(/*! ./$ */ 6)
	  , $def    = __webpack_require__(/*! ./$.def */ 13)
	  , $Array  = $.core.Array || Array
	  , statics = {};
	function setStatics(keys, length){
	  $.each.call(keys.split(','), function(key){
	    if(length == undefined && key in $Array)statics[key] = $Array[key];
	    else if(key in [])statics[key] = __webpack_require__(/*! ./$.ctx */ 17)(Function.call, [][key], length);
	  });
	}
	setStatics('pop,reverse,shift,keys,values,entries', 1);
	setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
	setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' +
	           'reduce,reduceRight,copyWithin,fill,turn');
	$def($def.S, 'Array', statics);

/***/ },
/* 87 */
/*!******************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/web.timers.js ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	// ie9- setTimeout & setInterval additional parameters fix
	var $         = __webpack_require__(/*! ./$ */ 6)
	  , $def      = __webpack_require__(/*! ./$.def */ 13)
	  , invoke    = __webpack_require__(/*! ./$.invoke */ 15)
	  , partial   = __webpack_require__(/*! ./$.partial */ 88)
	  , navigator = $.g.navigator
	  , MSIE      = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
	function wrap(set){
	  return MSIE ? function(fn, time /*, ...args */){
	    return set(invoke(
	      partial,
	      [].slice.call(arguments, 2),
	      $.isFunction(fn) ? fn : Function(fn)
	    ), time);
	  } : set;
	}
	$def($def.G + $def.B + $def.F * MSIE, {
	  setTimeout:  wrap($.g.setTimeout),
	  setInterval: wrap($.g.setInterval)
	});

/***/ },
/* 88 */
/*!*****************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/$.partial.js ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $      = __webpack_require__(/*! ./$ */ 6)
	  , invoke = __webpack_require__(/*! ./$.invoke */ 15)
	  , assertFunction = __webpack_require__(/*! ./$.assert */ 18).fn;
	module.exports = function(/* ...pargs */){
	  var fn     = assertFunction(this)
	    , length = arguments.length
	    , pargs  = Array(length)
	    , i      = 0
	    , _      = $.path._
	    , holder = false;
	  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
	  return function(/* ...args */){
	    var that    = this
	      , _length = arguments.length
	      , j = 0, k = 0, args;
	    if(!holder && !_length)return invoke(fn, pargs, that);
	    args = pargs.slice();
	    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
	    while(_length > k)args.push(arguments[k++]);
	    return invoke(fn, args, that);
	  };
	};

/***/ },
/* 89 */
/*!*********************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/web.immediate.js ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	var $def  = __webpack_require__(/*! ./$.def */ 13)
	  , $task = __webpack_require__(/*! ./$.task */ 64);
	$def($def.G + $def.B, {
	  setImmediate:   $task.set,
	  clearImmediate: $task.clear
	});

/***/ },
/* 90 */
/*!************************************************************!*\
  !*** ./~/babel-core/~/core-js/modules/web.dom.iterable.js ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(/*! ./es6.array.iterator */ 53);
	var $           = __webpack_require__(/*! ./$ */ 6)
	  , Iterators   = __webpack_require__(/*! ./$.iter */ 41).Iterators
	  , ITERATOR    = __webpack_require__(/*! ./$.wks */ 10)('iterator')
	  , ArrayValues = Iterators.Array
	  , NL          = $.g.NodeList
	  , HTC         = $.g.HTMLCollection
	  , NLProto     = NL && NL.prototype
	  , HTCProto    = HTC && HTC.prototype;
	if($.FW){
	  if(NL && !(ITERATOR in NLProto))$.hide(NLProto, ITERATOR, ArrayValues);
	  if(HTC && !(ITERATOR in HTCProto))$.hide(HTCProto, ITERATOR, ArrayValues);
	}
	Iterators.NodeList = Iterators.HTMLCollection = ArrayValues;

/***/ },
/* 91 */
/*!***********************************************!*\
  !*** ./~/babel-core/~/regenerator/runtime.js ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */
	
	!(function(global) {
	  "use strict";
	
	  var hasOwn = Object.prototype.hasOwnProperty;
	  var undefined; // More compressible than void 0.
	  var iteratorSymbol =
	    typeof Symbol === "function" && Symbol.iterator || "@@iterator";
	
	  var inModule = typeof module === "object";
	  var runtime = global.regeneratorRuntime;
	  if (runtime) {
	    if (inModule) {
	      // If regeneratorRuntime is defined globally and we're in a module,
	      // make the exports object identical to regeneratorRuntime.
	      module.exports = runtime;
	    }
	    // Don't bother evaluating the rest of this file if the runtime was
	    // already defined globally.
	    return;
	  }
	
	  // Define the runtime globally (as expected by generated code) as either
	  // module.exports (if we're in a module) or a new, empty object.
	  runtime = global.regeneratorRuntime = inModule ? module.exports : {};
	
	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided, then outerFn.prototype instanceof Generator.
	    var generator = Object.create((outerFn || Generator).prototype);
	
	    generator._invoke = makeInvokeMethod(
	      innerFn, self || null,
	      new Context(tryLocsList || [])
	    );
	
	    return generator;
	  }
	  runtime.wrap = wrap;
	
	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }
	
	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";
	
	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};
	
	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}
	
	  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = "GeneratorFunction";
	
	  runtime.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };
	
	  runtime.mark = function(genFun) {
	    genFun.__proto__ = GeneratorFunctionPrototype;
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };
	
	  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
	    return new Promise(function(resolve, reject) {
	      var generator = wrap(innerFn, outerFn, self, tryLocsList);
	
	      var step = function(method, arg) {
	        var record = tryCatch(generator[method], generator, arg);
	        if (record.type === "throw") {
	          reject(record.arg);
	          return;
	        }
	
	        var info = record.arg;
	        if (info.done) {
	          resolve(info.value);
	        } else {
	          Promise.resolve(info.value).then(callNext, callThrow);
	        }
	      };
	
	      if (typeof process !== "undefined" && process.domain) {
	        step = process.domain.bind(step);
	      }
	
	      var callNext = step.bind(generator, "next");
	      var callThrow = step.bind(generator, "throw");
	
	      callNext();
	    });
	  };
	
	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;
	
	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }
	
	      if (state === GenStateCompleted) {
	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }
	
	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          if (method === "return" ||
	              (method === "throw" && delegate.iterator[method] === undefined)) {
	            // A return or throw (when the delegate iterator has no throw
	            // method) always terminates the yield* loop.
	            context.delegate = null;
	
	            // If the delegate iterator has a return method, give it a
	            // chance to clean up.
	            var returnMethod = delegate.iterator["return"];
	            if (returnMethod) {
	              var record = tryCatch(returnMethod, delegate.iterator, arg);
	              if (record.type === "throw") {
	                // If the return method threw an exception, let that
	                // exception prevail over the original return or throw.
	                method = "throw";
	                arg = record.arg;
	                continue;
	              }
	            }
	
	            if (method === "return") {
	              // Continue with the outer return, now that the delegate
	              // iterator has been terminated.
	              continue;
	            }
	          }
	
	          var record = tryCatch(
	            delegate.iterator[method],
	            delegate.iterator,
	            arg
	          );
	
	          if (record.type === "throw") {
	            context.delegate = null;
	
	            // Like returning generator.throw(uncaught), but without the
	            // overhead of an extra function call.
	            method = "throw";
	            arg = record.arg;
	            continue;
	          }
	
	          // Delegate generator ran and handled its own exceptions so
	          // regardless of what the method was, we continue as if it is
	          // "next" with an undefined arg.
	          method = "next";
	          arg = undefined;
	
	          var info = record.arg;
	          if (info.done) {
	            context[delegate.resultName] = info.value;
	            context.next = delegate.nextLoc;
	          } else {
	            state = GenStateSuspendedYield;
	            return info;
	          }
	
	          context.delegate = null;
	        }
	
	        if (method === "next") {
	          if (state === GenStateSuspendedYield) {
	            context.sent = arg;
	          } else {
	            delete context.sent;
	          }
	
	        } else if (method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw arg;
	          }
	
	          if (context.dispatchException(arg)) {
	            // If the dispatched exception was caught by a catch block,
	            // then let that catch block handle the exception normally.
	            method = "next";
	            arg = undefined;
	          }
	
	        } else if (method === "return") {
	          context.abrupt("return", arg);
	        }
	
	        state = GenStateExecuting;
	
	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;
	
	          var info = {
	            value: record.arg,
	            done: context.done
	          };
	
	          if (record.arg === ContinueSentinel) {
	            if (context.delegate && method === "next") {
	              // Deliberately forget the last sent value so that we don't
	              // accidentally pass it on to the delegate.
	              arg = undefined;
	            }
	          } else {
	            return info;
	          }
	
	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(arg) call above.
	          method = "throw";
	          arg = record.arg;
	        }
	      }
	    };
	  }
	
	  function defineGeneratorMethod(method) {
	    Gp[method] = function(arg) {
	      return this._invoke(method, arg);
	    };
	  }
	  defineGeneratorMethod("next");
	  defineGeneratorMethod("throw");
	  defineGeneratorMethod("return");
	
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };
	
	  Gp.toString = function() {
	    return "[object Generator]";
	  };
	
	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };
	
	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }
	
	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }
	
	    this.tryEntries.push(entry);
	  }
	
	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }
	
	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset();
	  }
	
	  runtime.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();
	
	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }
	
	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };
	
	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }
	
	      if (typeof iterable.next === "function") {
	        return iterable;
	      }
	
	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }
	
	          next.value = undefined;
	          next.done = true;
	
	          return next;
	        };
	
	        return next.next = next;
	      }
	    }
	
	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  runtime.values = values;
	
	  function doneResult() {
	    return { value: undefined, done: true };
	  }
	
	  Context.prototype = {
	    constructor: Context,
	
	    reset: function() {
	      this.prev = 0;
	      this.next = 0;
	      this.sent = undefined;
	      this.done = false;
	      this.delegate = null;
	
	      this.tryEntries.forEach(resetTryEntry);
	
	      // Pre-initialize at least 20 temporary variables to enable hidden
	      // class optimizations for simple generators.
	      for (var tempIndex = 0, tempName;
	           hasOwn.call(this, tempName = "t" + tempIndex) || tempIndex < 20;
	           ++tempIndex) {
	        this[tempName] = null;
	      }
	    },
	
	    stop: function() {
	      this.done = true;
	
	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }
	
	      return this.rval;
	    },
	
	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }
	
	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;
	        return !!caught;
	      }
	
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;
	
	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }
	
	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");
	
	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }
	
	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }
	
	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },
	
	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }
	
	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }
	
	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;
	
	      if (finallyEntry) {
	        this.next = finallyEntry.finallyLoc;
	      } else {
	        this.complete(record);
	      }
	
	      return ContinueSentinel;
	    },
	
	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }
	
	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = record.arg;
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }
	    },
	
	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },
	
	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }
	
	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },
	
	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };
	
	      return ContinueSentinel;
	    }
	  };
	})(
	  // Among the various tricks for obtaining a reference to the global
	  // object, this seems to be the most reliable technique that does not
	  // use indirect eval (which violates Content Security Policy).
	  typeof global === "object" ? global :
	  typeof window === "object" ? window :
	  typeof self === "object" ? self : this
	);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(/*! ./~/node-libs-browser/~/process/browser.js */ 92)))

/***/ },
/* 92 */
/*!**************************************************!*\
  !*** ./~/node-libs-browser/~/process/browser.js ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            currentQueue[queueIndex].run();
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 93 */
/*!*****************************************!*\
  !*** ./~/angular2/es6/dev/angular2.es6 ***!
  \*****************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	var _change_detection = __webpack_require__(/*! ./change_detection */ 116);
	
	_defaults(exports, _interopRequireWildcard(_change_detection));
	
	var _core = __webpack_require__(/*! ./core */ 143);
	
	_defaults(exports, _interopRequireWildcard(_core));
	
	var _annotations = __webpack_require__(/*! ./annotations */ 217);
	
	_defaults(exports, _interopRequireWildcard(_annotations));
	
	var _directives = __webpack_require__(/*! ./directives */ 218);
	
	_defaults(exports, _interopRequireWildcard(_directives));
	
	var _forms = __webpack_require__(/*! ./forms */ 94);
	
	_defaults(exports, _interopRequireWildcard(_forms));
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	Object.defineProperty(exports, 'Observable', {
	  enumerable: true,
	  get: function get() {
	    return _angular2SrcFacadeAsync.Observable;
	  }
	});
	Object.defineProperty(exports, 'EventEmitter', {
	  enumerable: true,
	  get: function get() {
	    return _angular2SrcFacadeAsync.EventEmitter;
	  }
	});
	
	var _angular2SrcRenderApi = __webpack_require__(/*! angular2/src/render/api */ 115);
	
	_defaults(exports, _interopRequireWildcard(_angular2SrcRenderApi));
	
	var _angular2SrcRenderDomDirect_dom_renderer = __webpack_require__(/*! angular2/src/render/dom/direct_dom_renderer */ 173);
	
	//# sourceMappingURL=angular2.js.map
	
	//# sourceMappingURL=./angular2.map
	Object.defineProperty(exports, 'DirectDomRenderer', {
	  enumerable: true,
	  get: function get() {
	    return _angular2SrcRenderDomDirect_dom_renderer.DirectDomRenderer;
	  }
	});

/***/ },
/* 94 */
/*!**************************************!*\
  !*** ./~/angular2/es6/dev/forms.es6 ***!
  \**************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	var _srcFormsModel = __webpack_require__(/*! ./src/forms/model */ 95);
	
	_defaults(exports, _interopRequireWildcard(_srcFormsModel));
	
	var _srcFormsDirectives = __webpack_require__(/*! ./src/forms/directives */ 103);
	
	_defaults(exports, _interopRequireWildcard(_srcFormsDirectives));
	
	var _srcFormsValidators = __webpack_require__(/*! ./src/forms/validators */ 102);
	
	_defaults(exports, _interopRequireWildcard(_srcFormsValidators));
	
	var _srcFormsValidator_directives = __webpack_require__(/*! ./src/forms/validator_directives */ 141);
	
	_defaults(exports, _interopRequireWildcard(_srcFormsValidator_directives));
	
	var _srcFormsForm_builder = __webpack_require__(/*! ./src/forms/form_builder */ 142);
	
	//# sourceMappingURL=forms.js.map

	//# sourceMappingURL=./forms.map

	_defaults(exports, _interopRequireWildcard(_srcFormsForm_builder));

/***/ },
/* 95 */
/*!************************************************!*\
  !*** ./~/angular2/es6/dev/src/forms/model.es6 ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x5, _x6, _x7) { var _again = true; _function: while (_again) { var object = _x5, property = _x6, receiver = _x7; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x5 = parent; _x6 = property; _x7 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _validators = __webpack_require__(/*! ./validators */ 102);
	
	var VALID = 'VALID';
	exports.VALID = VALID;
	var INVALID = 'INVALID';
	exports.INVALID = INVALID;
	
	var AbstractControl = (function () {
	  function AbstractControl(validator) {
	    _classCallCheck(this, AbstractControl);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(validator, Function);
	    this.validator = validator;
	    this._pristine = true;
	  }
	
	  _createClass(AbstractControl, [{
	    key: 'value',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this._value, _rtts_assertRtts_assert.assert.type.any);
	    }
	  }, {
	    key: 'status',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this._status, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'valid',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this._status === VALID, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'errors',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this._errors, _angular2SrcFacadeCollection.StringMap);
	    }
	  }, {
	    key: 'pristine',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this._pristine, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'dirty',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(!this.pristine, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'valueChanges',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this._valueChanges, _angular2SrcFacadeAsync.Observable);
	    }
	  }, {
	    key: 'setParent',
	    value: function setParent(parent) {
	      this._parent = parent;
	    }
	  }, {
	    key: '_updateParent',
	    value: function _updateParent() {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._parent)) {
	        this._parent._updateValue();
	      }
	    }
	  }]);
	
	  return AbstractControl;
	})();
	
	Object.defineProperty(AbstractControl, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	
	var Control = (function (_AbstractControl) {
	  function Control(value) {
	    var validator = arguments[1] === undefined ? _validators.Validators.nullValidator : arguments[1];
	
	    _classCallCheck(this, Control);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(value, _rtts_assertRtts_assert.assert.type.any, validator, Function);
	    _get(Object.getPrototypeOf(Control.prototype), 'constructor', this).call(this, validator);
	    this._setValueErrorsStatus(value);
	    this._valueChanges = new _angular2SrcFacadeAsync.EventEmitter();
	  }
	
	  _inherits(Control, _AbstractControl);
	
	  _createClass(Control, [{
	    key: 'updateValue',
	    value: function updateValue(value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(value, _rtts_assertRtts_assert.assert.type.any);
	      this._setValueErrorsStatus(value);
	      this._pristine = false;
	      _angular2SrcFacadeAsync.ObservableWrapper.callNext(this._valueChanges, this._value);
	      this._updateParent();
	    }
	  }, {
	    key: '_setValueErrorsStatus',
	    value: function _setValueErrorsStatus(value) {
	      this._value = value;
	      this._errors = this.validator(this);
	      this._status = (0, _angular2SrcFacadeLang.isPresent)(this._errors) ? INVALID : VALID;
	    }
	  }]);
	
	  return Control;
	})(AbstractControl);
	
	exports.Control = Control;
	
	Object.defineProperty(Control, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any], [Function]];
	  } });
	Object.defineProperty(Control.prototype.updateValue, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	
	var ControlGroup = (function (_AbstractControl2) {
	  function ControlGroup(controls) {
	    var optionals = arguments[1] === undefined ? null : arguments[1];
	    var validator = arguments[2] === undefined ? _validators.Validators.group : arguments[2];
	
	    _classCallCheck(this, ControlGroup);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(controls, _angular2SrcFacadeCollection.StringMap, optionals, _angular2SrcFacadeCollection.StringMap, validator, Function);
	    _get(Object.getPrototypeOf(ControlGroup.prototype), 'constructor', this).call(this, validator);
	    this.controls = controls;
	    this._optionals = (0, _angular2SrcFacadeLang.isPresent)(optionals) ? optionals : {};
	    this._valueChanges = new _angular2SrcFacadeAsync.EventEmitter();
	    this._setParentForControls();
	    this._setValueErrorsStatus();
	  }
	
	  _inherits(ControlGroup, _AbstractControl2);
	
	  _createClass(ControlGroup, [{
	    key: 'include',
	    value: function include(controlName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(controlName, _rtts_assertRtts_assert.assert.type.string);
	      _angular2SrcFacadeCollection.StringMapWrapper.set(this._optionals, controlName, true);
	      this._updateValue();
	    }
	  }, {
	    key: 'exclude',
	    value: function exclude(controlName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(controlName, _rtts_assertRtts_assert.assert.type.string);
	      _angular2SrcFacadeCollection.StringMapWrapper.set(this._optionals, controlName, false);
	      this._updateValue();
	    }
	  }, {
	    key: 'contains',
	    value: function contains(controlName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(controlName, _rtts_assertRtts_assert.assert.type.string);
	      var c = _angular2SrcFacadeCollection.StringMapWrapper.contains(this.controls, controlName);
	      return _rtts_assertRtts_assert.assert.returnType(c && this._included(controlName), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: '_setParentForControls',
	    value: function _setParentForControls() {
	      var _this = this;
	
	      _angular2SrcFacadeCollection.StringMapWrapper.forEach(this.controls, function (control, name) {
	        control.setParent(_this);
	      });
	    }
	  }, {
	    key: '_updateValue',
	    value: function _updateValue() {
	      this._setValueErrorsStatus();
	      this._pristine = false;
	      _angular2SrcFacadeAsync.ObservableWrapper.callNext(this._valueChanges, this._value);
	      this._updateParent();
	    }
	  }, {
	    key: '_setValueErrorsStatus',
	    value: function _setValueErrorsStatus() {
	      this._value = this._reduceValue();
	      this._errors = this.validator(this);
	      this._status = (0, _angular2SrcFacadeLang.isPresent)(this._errors) ? INVALID : VALID;
	    }
	  }, {
	    key: '_reduceValue',
	    value: function _reduceValue() {
	      return this._reduceChildren({}, function (acc, control, name) {
	        acc[name] = control.value;
	        return acc;
	      });
	    }
	  }, {
	    key: '_reduceChildren',
	    value: function _reduceChildren(initValue, fn) {
	      var _this2 = this;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(initValue, _rtts_assertRtts_assert.assert.type.any, fn, Function);
	      var res = initValue;
	      _angular2SrcFacadeCollection.StringMapWrapper.forEach(this.controls, function (control, name) {
	        if (_this2._included(name)) {
	          res = fn(res, control, name);
	        }
	      });
	      return res;
	    }
	  }, {
	    key: '_included',
	    value: function _included(controlName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(controlName, _rtts_assertRtts_assert.assert.type.string);
	      var isOptional = _angular2SrcFacadeCollection.StringMapWrapper.contains(this._optionals, controlName);
	      return _rtts_assertRtts_assert.assert.returnType(!isOptional || _angular2SrcFacadeCollection.StringMapWrapper.get(this._optionals, controlName), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return ControlGroup;
	})(AbstractControl);
	
	exports.ControlGroup = ControlGroup;
	
	Object.defineProperty(ControlGroup, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.StringMap], [_angular2SrcFacadeCollection.StringMap], [Function]];
	  } });
	Object.defineProperty(ControlGroup.prototype.include, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ControlGroup.prototype.exclude, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ControlGroup.prototype.contains, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ControlGroup.prototype._reduceChildren, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any], [Function]];
	  } });
	Object.defineProperty(ControlGroup.prototype._included, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var ControlArray = (function (_AbstractControl3) {
	  function ControlArray(controls) {
	    var validator = arguments[1] === undefined ? _validators.Validators.array : arguments[1];
	
	    _classCallCheck(this, ControlArray);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(controls, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, AbstractControl), validator, Function);
	    _get(Object.getPrototypeOf(ControlArray.prototype), 'constructor', this).call(this, validator);
	    this.controls = controls;
	    this._valueChanges = new _angular2SrcFacadeAsync.EventEmitter();
	    this._setParentForControls();
	    this._setValueErrorsStatus();
	  }
	
	  _inherits(ControlArray, _AbstractControl3);
	
	  _createClass(ControlArray, [{
	    key: 'at',
	    value: function at(index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(index, _rtts_assertRtts_assert.assert.type.number);
	      return _rtts_assertRtts_assert.assert.returnType(this.controls[index], AbstractControl);
	    }
	  }, {
	    key: 'push',
	    value: function push(control) {
	      _rtts_assertRtts_assert.assert.argumentTypes(control, AbstractControl);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.controls, control);
	      control.setParent(this);
	      this._updateValue();
	    }
	  }, {
	    key: 'insert',
	    value: function insert(index, control) {
	      _rtts_assertRtts_assert.assert.argumentTypes(index, _rtts_assertRtts_assert.assert.type.number, control, AbstractControl);
	      _angular2SrcFacadeCollection.ListWrapper.insert(this.controls, index, control);
	      control.setParent(this);
	      this._updateValue();
	    }
	  }, {
	    key: 'removeAt',
	    value: function removeAt(index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(index, _rtts_assertRtts_assert.assert.type.number);
	      _angular2SrcFacadeCollection.ListWrapper.removeAt(this.controls, index);
	      this._updateValue();
	    }
	  }, {
	    key: 'length',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this.controls.length, _rtts_assertRtts_assert.assert.type.number);
	    }
	  }, {
	    key: '_updateValue',
	    value: function _updateValue() {
	      this._setValueErrorsStatus();
	      this._pristine = false;
	      _angular2SrcFacadeAsync.ObservableWrapper.callNext(this._valueChanges, this._value);
	      this._updateParent();
	    }
	  }, {
	    key: '_setParentForControls',
	    value: function _setParentForControls() {
	      var _this3 = this;
	
	      _angular2SrcFacadeCollection.ListWrapper.forEach(this.controls, function (control) {
	        control.setParent(_this3);
	      });
	    }
	  }, {
	    key: '_setValueErrorsStatus',
	    value: function _setValueErrorsStatus() {
	      this._value = _angular2SrcFacadeCollection.ListWrapper.map(this.controls, function (c) {
	        return c.value;
	      });
	      this._errors = this.validator(this);
	      this._status = (0, _angular2SrcFacadeLang.isPresent)(this._errors) ? INVALID : VALID;
	    }
	  }]);
	
	  return ControlArray;
	})(AbstractControl);
	
	exports.ControlArray = ControlArray;
	
	Object.defineProperty(ControlArray, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, AbstractControl)], [Function]];
	  } });
	Object.defineProperty(ControlArray.prototype.at, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(ControlArray.prototype.push, 'parameters', { get: function get() {
	    return [[AbstractControl]];
	  } });
	Object.defineProperty(ControlArray.prototype.insert, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [AbstractControl]];
	  } });
	Object.defineProperty(ControlArray.prototype.removeAt, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	//# sourceMappingURL=model.js.map

	//# sourceMappingURL=./model.map

/***/ },
/* 96 */
/*!*******************************************!*\
  !*** ./~/rtts_assert/es6/rtts_assert.es6 ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	var _srcRtts_assert = __webpack_require__(/*! ./src/rtts_assert */ 1);
	
	//# sourceMappingURL=rtts_assert.es6.map

	//# sourceMappingURL=./rtts_assert.map

	_defaults(exports, _interopRequireWildcard(_srcRtts_assert));

/***/ },
/* 97 */
/*!************************************************!*\
  !*** ./~/angular2/es6/dev/src/facade/lang.es6 ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x7, _x8, _x9) { var _again = true; _function: while (_again) { var object = _x7, property = _x8, receiver = _x9; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x7 = parent; _x8 = property; _x9 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	exports.isPresent = isPresent;
	exports.isBlank = isBlank;
	exports.isString = isString;
	exports.isFunction = isFunction;
	exports.isType = isType;
	exports.stringify = stringify;
	exports.looseIdentical = looseIdentical;
	exports.getMapKey = getMapKey;
	exports.normalizeBlank = normalizeBlank;
	exports.isJsObject = isJsObject;
	exports.assertionsEnabled = assertionsEnabled;
	exports.print = print;
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _global = typeof window === 'undefined' ? global : window;
	exports.global = _global;
	var Type = Function;
	exports.Type = Type;
	var Math = _global.Math;
	exports.Math = Math;
	var Date = _global.Date;
	exports.Date = Date;
	var assertionsEnabled_ = typeof _rtts_assertRtts_assert.assert !== 'undefined';
	var int;
	if (assertionsEnabled_) {
	  _global.assert = _rtts_assertRtts_assert.assert;
	  exports.int = int = _rtts_assertRtts_assert.assert.__def_('int', function (value) {
	    return typeof value === 'number' && value % 1 === 0;
	  });
	} else {
	  exports.int = int = {};
	  _global.assert = function () {};
	}
	exports.int = int;
	
	var CONST = function CONST() {
	  _classCallCheck(this, CONST);
	};
	
	exports.CONST = CONST;
	
	var ABSTRACT = function ABSTRACT() {
	  _classCallCheck(this, ABSTRACT);
	};
	
	exports.ABSTRACT = ABSTRACT;
	
	var IMPLEMENTS = function IMPLEMENTS() {
	  _classCallCheck(this, IMPLEMENTS);
	};
	
	exports.IMPLEMENTS = IMPLEMENTS;
	
	function isPresent(obj) {
	  return _rtts_assertRtts_assert.assert.returnType(obj !== undefined && obj !== null, _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	function isBlank(obj) {
	  return _rtts_assertRtts_assert.assert.returnType(obj === undefined || obj === null, _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	function isString(obj) {
	  return _rtts_assertRtts_assert.assert.returnType(typeof obj === 'string', _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	function isFunction(obj) {
	  return _rtts_assertRtts_assert.assert.returnType(typeof obj === 'function', _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	function isType(obj) {
	  return _rtts_assertRtts_assert.assert.returnType(isFunction(obj), _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	function stringify(token) {
	  if (typeof token === 'string') {
	    return _rtts_assertRtts_assert.assert.returnType(token, _rtts_assertRtts_assert.assert.type.string);
	  }
	  if (token === undefined || token === null) {
	    return _rtts_assertRtts_assert.assert.returnType('' + token, _rtts_assertRtts_assert.assert.type.string);
	  }
	  if (token.name) {
	    return _rtts_assertRtts_assert.assert.returnType(token.name, _rtts_assertRtts_assert.assert.type.string);
	  }
	  return _rtts_assertRtts_assert.assert.returnType(token.toString(), _rtts_assertRtts_assert.assert.type.string);
	}
	
	var StringWrapper = (function () {
	  function StringWrapper() {
	    _classCallCheck(this, StringWrapper);
	  }
	
	  _createClass(StringWrapper, null, [{
	    key: 'fromCharCode',
	    value: function fromCharCode(code) {
	      _rtts_assertRtts_assert.assert.argumentTypes(code, int);
	      return _rtts_assertRtts_assert.assert.returnType(String.fromCharCode(code), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'charCodeAt',
	    value: function charCodeAt(s, index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(s, _rtts_assertRtts_assert.assert.type.string, index, int);
	      return s.charCodeAt(index);
	    }
	  }, {
	    key: 'split',
	    value: function split(s, regExp) {
	      _rtts_assertRtts_assert.assert.argumentTypes(s, _rtts_assertRtts_assert.assert.type.string, regExp, _rtts_assertRtts_assert.assert.type.any);
	      return s.split(regExp);
	    }
	  }, {
	    key: 'equals',
	    value: function equals(s, s2) {
	      _rtts_assertRtts_assert.assert.argumentTypes(s, _rtts_assertRtts_assert.assert.type.string, s2, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(s === s2, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'replace',
	    value: function replace(s, from, _replace) {
	      _rtts_assertRtts_assert.assert.argumentTypes(s, _rtts_assertRtts_assert.assert.type.string, from, _rtts_assertRtts_assert.assert.type.string, _replace, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(s.replace(from, _replace), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'replaceAll',
	    value: function replaceAll(s, from, replace) {
	      _rtts_assertRtts_assert.assert.argumentTypes(s, _rtts_assertRtts_assert.assert.type.string, from, RegExp, replace, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(s.replace(from, replace), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'startsWith',
	    value: function startsWith(s, start) {
	      _rtts_assertRtts_assert.assert.argumentTypes(s, _rtts_assertRtts_assert.assert.type.string, start, _rtts_assertRtts_assert.assert.type.string);
	      return s.startsWith(start);
	    }
	  }, {
	    key: 'substring',
	    value: function substring(s, start) {
	      var end = arguments[2] === undefined ? null : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(s, _rtts_assertRtts_assert.assert.type.string, start, int, end, int);
	      return s.substring(start, end === null ? undefined : end);
	    }
	  }, {
	    key: 'replaceAllMapped',
	    value: function replaceAllMapped(s, from, cb) {
	      _rtts_assertRtts_assert.assert.argumentTypes(s, _rtts_assertRtts_assert.assert.type.string, from, RegExp, cb, Function);
	      return _rtts_assertRtts_assert.assert.returnType(s.replace(from, function () {
	        for (var _len = arguments.length, matches = Array(_len), _key = 0; _key < _len; _key++) {
	          matches[_key] = arguments[_key];
	        }
	
	        matches.splice(-2, 2);
	        return cb(matches);
	      }), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'contains',
	    value: function contains(s, substr) {
	      _rtts_assertRtts_assert.assert.argumentTypes(s, _rtts_assertRtts_assert.assert.type.string, substr, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(s.indexOf(substr) != -1, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return StringWrapper;
	})();
	
	exports.StringWrapper = StringWrapper;
	
	Object.defineProperty(StringWrapper.fromCharCode, 'parameters', { get: function get() {
	    return [[int]];
	  } });
	Object.defineProperty(StringWrapper.charCodeAt, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [int]];
	  } });
	Object.defineProperty(StringWrapper.split, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(StringWrapper.equals, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(StringWrapper.replace, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(StringWrapper.replaceAll, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [RegExp], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(StringWrapper.startsWith, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(StringWrapper.substring, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [int], [int]];
	  } });
	Object.defineProperty(StringWrapper.replaceAllMapped, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [RegExp], [Function]];
	  } });
	Object.defineProperty(StringWrapper.contains, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var StringJoiner = (function () {
	  function StringJoiner() {
	    _classCallCheck(this, StringJoiner);
	
	    this.parts = [];
	  }
	
	  _createClass(StringJoiner, [{
	    key: 'add',
	    value: function add(part) {
	      _rtts_assertRtts_assert.assert.argumentTypes(part, _rtts_assertRtts_assert.assert.type.string);
	      this.parts.push(part);
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType(this.parts.join(''), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return StringJoiner;
	})();
	
	exports.StringJoiner = StringJoiner;
	
	Object.defineProperty(StringJoiner.prototype.add, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var NumberParseError = (function (_Error) {
	  function NumberParseError(message) {
	    _classCallCheck(this, NumberParseError);
	
	    _get(Object.getPrototypeOf(NumberParseError.prototype), 'constructor', this).call(this);
	    this.message = message;
	  }
	
	  _inherits(NumberParseError, _Error);
	
	  _createClass(NumberParseError, [{
	    key: 'toString',
	    value: function toString() {
	      return this.message;
	    }
	  }]);
	
	  return NumberParseError;
	})(Error);
	
	exports.NumberParseError = NumberParseError;
	
	var NumberWrapper = (function () {
	  function NumberWrapper() {
	    _classCallCheck(this, NumberWrapper);
	  }
	
	  _createClass(NumberWrapper, null, [{
	    key: 'toFixed',
	    value: function toFixed(n, fractionDigits) {
	      _rtts_assertRtts_assert.assert.argumentTypes(n, _rtts_assertRtts_assert.assert.type.number, fractionDigits, int);
	      return _rtts_assertRtts_assert.assert.returnType(n.toFixed(fractionDigits), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'equal',
	    value: function equal(a, b) {
	      return _rtts_assertRtts_assert.assert.returnType(a === b, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'parseIntAutoRadix',
	    value: function parseIntAutoRadix(text) {
	      _rtts_assertRtts_assert.assert.argumentTypes(text, _rtts_assertRtts_assert.assert.type.string);
	      var result = _rtts_assertRtts_assert.assert.type(parseInt(text), int);
	      if (isNaN(result)) {
	        throw new NumberParseError('Invalid integer literal when parsing ' + text);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(result, int);
	    }
	  }, {
	    key: 'parseInt',
	    value: (function (_parseInt) {
	      function parseInt(_x2, _x3) {
	        return _parseInt.apply(this, arguments);
	      }
	
	      parseInt.toString = function () {
	        return _parseInt.toString();
	      };
	
	      return parseInt;
	    })(function (text, radix) {
	      _rtts_assertRtts_assert.assert.argumentTypes(text, _rtts_assertRtts_assert.assert.type.string, radix, int);
	      if (radix == 10) {
	        if (/^(\-|\+)?[0-9]+$/.test(text)) {
	          return _rtts_assertRtts_assert.assert.returnType(parseInt(text, radix), int);
	        }
	      } else if (radix == 16) {
	        if (/^(\-|\+)?[0-9ABCDEFabcdef]+$/.test(text)) {
	          return _rtts_assertRtts_assert.assert.returnType(parseInt(text, radix), int);
	        }
	      } else {
	        var result = _rtts_assertRtts_assert.assert.type(parseInt(text, radix), int);
	        if (!isNaN(result)) {
	          return _rtts_assertRtts_assert.assert.returnType(result, int);
	        }
	      }
	      throw new NumberParseError('Invalid integer literal when parsing ' + text + ' in base ' + radix);
	    })
	  }, {
	    key: 'parseFloat',
	    value: (function (_parseFloat) {
	      function parseFloat(_x4) {
	        return _parseFloat.apply(this, arguments);
	      }
	
	      parseFloat.toString = function () {
	        return _parseFloat.toString();
	      };
	
	      return parseFloat;
	    })(function (text) {
	      _rtts_assertRtts_assert.assert.argumentTypes(text, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(parseFloat(text), _rtts_assertRtts_assert.assert.type.number);
	    })
	  }, {
	    key: 'NaN',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(NaN, _rtts_assertRtts_assert.assert.type.number);
	    }
	  }, {
	    key: 'isNaN',
	    value: (function (_isNaN) {
	      function isNaN(_x5) {
	        return _isNaN.apply(this, arguments);
	      }
	
	      isNaN.toString = function () {
	        return _isNaN.toString();
	      };
	
	      return isNaN;
	    })(function (value) {
	      return _rtts_assertRtts_assert.assert.returnType(isNaN(value), _rtts_assertRtts_assert.assert.type.boolean);
	    })
	  }, {
	    key: 'isInteger',
	    value: function isInteger(value) {
	      return _rtts_assertRtts_assert.assert.returnType(Number.isInteger(value), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return NumberWrapper;
	})();
	
	exports.NumberWrapper = NumberWrapper;
	
	Object.defineProperty(NumberWrapper.toFixed, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [int]];
	  } });
	Object.defineProperty(NumberWrapper.parseIntAutoRadix, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(NumberWrapper.parseInt, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [int]];
	  } });
	Object.defineProperty(NumberWrapper.parseFloat, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var RegExp = _global.RegExp;
	exports.RegExp = RegExp;
	
	var RegExpWrapper = (function () {
	  function RegExpWrapper() {
	    _classCallCheck(this, RegExpWrapper);
	  }
	
	  _createClass(RegExpWrapper, null, [{
	    key: 'create',
	    value: function create(regExpStr) {
	      var flags = arguments[1] === undefined ? '' : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(regExpStr, _rtts_assertRtts_assert.assert.type.any, flags, _rtts_assertRtts_assert.assert.type.string);
	      flags = flags.replace(/g/g, '');
	      return _rtts_assertRtts_assert.assert.returnType(new _global.RegExp(regExpStr, flags + 'g'), RegExp);
	    }
	  }, {
	    key: 'firstMatch',
	    value: function firstMatch(regExp, input) {
	      regExp.lastIndex = 0;
	      return regExp.exec(input);
	    }
	  }, {
	    key: 'matcher',
	    value: function matcher(regExp, input) {
	      regExp.lastIndex = 0;
	      return {
	        re: regExp,
	        input: input
	      };
	    }
	  }]);
	
	  return RegExpWrapper;
	})();
	
	exports.RegExpWrapper = RegExpWrapper;
	
	Object.defineProperty(RegExpWrapper.create, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var RegExpMatcherWrapper = (function () {
	  function RegExpMatcherWrapper() {
	    _classCallCheck(this, RegExpMatcherWrapper);
	  }
	
	  _createClass(RegExpMatcherWrapper, null, [{
	    key: 'next',
	    value: function next(matcher) {
	      return matcher.re.exec(matcher.input);
	    }
	  }]);
	
	  return RegExpMatcherWrapper;
	})();
	
	exports.RegExpMatcherWrapper = RegExpMatcherWrapper;
	
	var FunctionWrapper = (function () {
	  function FunctionWrapper() {
	    _classCallCheck(this, FunctionWrapper);
	  }
	
	  _createClass(FunctionWrapper, null, [{
	    key: 'apply',
	    value: function apply(fn, posArgs) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function, posArgs, _rtts_assertRtts_assert.assert.type.any);
	      return fn.apply(null, posArgs);
	    }
	  }]);
	
	  return FunctionWrapper;
	})();
	
	exports.FunctionWrapper = FunctionWrapper;
	
	Object.defineProperty(FunctionWrapper.apply, 'parameters', { get: function get() {
	    return [[Function], []];
	  } });
	var BaseException = Error;
	exports.BaseException = BaseException;
	
	function looseIdentical(a, b) {
	  return _rtts_assertRtts_assert.assert.returnType(a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b), _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	function getMapKey(value) {
	  return value;
	}
	
	function normalizeBlank(obj) {
	  return isBlank(obj) ? null : obj;
	}
	
	function isJsObject(o) {
	  return _rtts_assertRtts_assert.assert.returnType(o !== null && (typeof o === 'function' || typeof o === 'object'), _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	function assertionsEnabled() {
	  return _rtts_assertRtts_assert.assert.returnType(assertionsEnabled_, _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	function print(obj) {
	  if (obj instanceof Error) {
	    console.log(obj.stack);
	  } else {
	    console.log(obj);
	  }
	}
	
	var Json = _global.JSON;
	exports.Json = Json;
	
	var DateWrapper = (function () {
	  function DateWrapper() {
	    _classCallCheck(this, DateWrapper);
	  }
	
	  _createClass(DateWrapper, null, [{
	    key: 'fromMillis',
	    value: function fromMillis(ms) {
	      return new Date(ms);
	    }
	  }, {
	    key: 'toMillis',
	    value: function toMillis(date) {
	      _rtts_assertRtts_assert.assert.argumentTypes(date, Date);
	      return date.getTime();
	    }
	  }, {
	    key: 'now',
	    value: function now() {
	      return new Date();
	    }
	  }, {
	    key: 'toJson',
	    value: function toJson(date) {
	      return date.toJSON();
	    }
	  }]);
	
	  return DateWrapper;
	})();
	
	exports.DateWrapper = DateWrapper;
	
	Object.defineProperty(DateWrapper.toMillis, 'parameters', { get: function get() {
	    return [[Date]];
	  } });
	//# sourceMappingURL=lang.es6.map

	//# sourceMappingURL=./lang.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 98 */
/*!*************************************************!*\
  !*** ./~/angular2/es6/dev/src/facade/async.es6 ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _rxDistRxAll = __webpack_require__(/*! rx/dist/rx.all */ 100);
	
	var _rxDistRxAll2 = _interopRequireDefault(_rxDistRxAll);
	
	var Promise = _angular2SrcFacadeLang.global.Promise;
	exports.Promise = Promise;
	
	var PromiseWrapper = (function () {
	  function PromiseWrapper() {
	    _classCallCheck(this, PromiseWrapper);
	  }
	
	  _createClass(PromiseWrapper, null, [{
	    key: 'resolve',
	    value: function resolve(obj) {
	      return _rtts_assertRtts_assert.assert.returnType(Promise.resolve(obj), Promise);
	    }
	  }, {
	    key: 'reject',
	    value: function reject(obj) {
	      return _rtts_assertRtts_assert.assert.returnType(Promise.reject(obj), Promise);
	    }
	  }, {
	    key: 'catchError',
	    value: function catchError(promise, onError) {
	      _rtts_assertRtts_assert.assert.argumentTypes(promise, Promise, onError, Function);
	      return _rtts_assertRtts_assert.assert.returnType(promise['catch'](onError), Promise);
	    }
	  }, {
	    key: 'all',
	    value: function all(promises) {
	      _rtts_assertRtts_assert.assert.argumentTypes(promises, _angular2SrcFacadeCollection.List);
	      if (promises.length == 0) return _rtts_assertRtts_assert.assert.returnType(Promise.resolve([]), Promise);
	      return _rtts_assertRtts_assert.assert.returnType(Promise.all(promises), Promise);
	    }
	  }, {
	    key: 'then',
	    value: function then(promise, success, rejection) {
	      _rtts_assertRtts_assert.assert.argumentTypes(promise, Promise, success, Function, rejection, Function);
	      return _rtts_assertRtts_assert.assert.returnType(promise.then(success, rejection), Promise);
	    }
	  }, {
	    key: 'completer',
	    value: function completer() {
	      var resolve;
	      var reject;
	      var p = new Promise(function (res, rej) {
	        resolve = res;
	        reject = rej;
	      });
	      return {
	        promise: p,
	        resolve: resolve,
	        reject: reject
	      };
	    }
	  }, {
	    key: 'setTimeout',
	    value: function setTimeout(fn, millis) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function, millis, _angular2SrcFacadeLang.int);
	      _angular2SrcFacadeLang.global.setTimeout(fn, millis);
	    }
	  }, {
	    key: 'isPromise',
	    value: function isPromise(maybePromise) {
	      return _rtts_assertRtts_assert.assert.returnType(maybePromise instanceof Promise, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return PromiseWrapper;
	})();
	
	exports.PromiseWrapper = PromiseWrapper;
	
	Object.defineProperty(PromiseWrapper.catchError, 'parameters', { get: function get() {
	    return [[Promise], [Function]];
	  } });
	Object.defineProperty(PromiseWrapper.all, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(PromiseWrapper.then, 'parameters', { get: function get() {
	    return [[Promise], [Function], [Function]];
	  } });
	Object.defineProperty(PromiseWrapper.setTimeout, 'parameters', { get: function get() {
	    return [[Function], [_angular2SrcFacadeLang.int]];
	  } });
	
	var ObservableWrapper = (function () {
	  function ObservableWrapper() {
	    _classCallCheck(this, ObservableWrapper);
	  }
	
	  _createClass(ObservableWrapper, null, [{
	    key: 'subscribe',
	    value: function subscribe(emitter, onNext) {
	      var onThrow = arguments[2] === undefined ? null : arguments[2];
	      var onReturn = arguments[3] === undefined ? null : arguments[3];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(emitter, EventEmitter, onNext, _rtts_assertRtts_assert.assert.type.any, onThrow, _rtts_assertRtts_assert.assert.type.any, onReturn, _rtts_assertRtts_assert.assert.type.any);
	      return emitter.observer({
	        next: onNext,
	        'throw': onThrow,
	        'return': onReturn
	      });
	    }
	  }, {
	    key: 'dispose',
	    value: function dispose(subscription) {
	      _rtts_assertRtts_assert.assert.argumentTypes(subscription, _rtts_assertRtts_assert.assert.type.any);
	      subscription.dispose();
	    }
	  }, {
	    key: 'isObservable',
	    value: function isObservable(obs) {
	      return _rtts_assertRtts_assert.assert.returnType(obs instanceof Observable, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'callNext',
	    value: function callNext(emitter, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(emitter, EventEmitter, value, _rtts_assertRtts_assert.assert.type.any);
	      emitter.next(value);
	    }
	  }, {
	    key: 'callThrow',
	    value: function callThrow(emitter, error) {
	      _rtts_assertRtts_assert.assert.argumentTypes(emitter, EventEmitter, error, _rtts_assertRtts_assert.assert.type.any);
	      emitter['throw'](error);
	    }
	  }, {
	    key: 'callReturn',
	    value: function callReturn(emitter) {
	      _rtts_assertRtts_assert.assert.argumentTypes(emitter, EventEmitter);
	      emitter['return']();
	    }
	  }]);
	
	  return ObservableWrapper;
	})();
	
	exports.ObservableWrapper = ObservableWrapper;
	
	Object.defineProperty(ObservableWrapper.subscribe, 'parameters', { get: function get() {
	    return [[EventEmitter], [], [], []];
	  } });
	Object.defineProperty(ObservableWrapper.dispose, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(ObservableWrapper.callNext, 'parameters', { get: function get() {
	    return [[EventEmitter], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(ObservableWrapper.callThrow, 'parameters', { get: function get() {
	    return [[EventEmitter], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(ObservableWrapper.callReturn, 'parameters', { get: function get() {
	    return [[EventEmitter]];
	  } });
	
	var Observable = (function () {
	  function Observable() {
	    _classCallCheck(this, Observable);
	  }
	
	  _createClass(Observable, [{
	    key: 'observer',
	    value: function observer(generator) {
	      _rtts_assertRtts_assert.assert.argumentTypes(generator, Function);
	    }
	  }]);
	
	  return Observable;
	})();
	
	exports.Observable = Observable;
	
	Object.defineProperty(Observable.prototype.observer, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	
	var EventEmitter = (function (_Observable) {
	  function EventEmitter() {
	    _classCallCheck(this, EventEmitter);
	
	    _get(Object.getPrototypeOf(EventEmitter.prototype), 'constructor', this).call(this);
	    this._subject = new _rxDistRxAll2['default'].Subject();
	  }
	
	  _inherits(EventEmitter, _Observable);
	
	  _createClass(EventEmitter, [{
	    key: 'observer',
	    value: function observer(generator) {
	      return this._subject.observeOn(_rxDistRxAll2['default'].Scheduler.immediate).subscribe(function (value) {
	        setTimeout(function () {
	          return generator.next(value);
	        });
	      }, function (error) {
	        return generator['throw'] ? generator['throw'](error) : null;
	      }, function () {
	        return generator['return'] ? generator['return']() : null;
	      });
	    }
	  }, {
	    key: 'toRx',
	    value: function toRx() {
	      return _rtts_assertRtts_assert.assert.returnType(this._subject, _rxDistRxAll2['default'].Observable);
	    }
	  }, {
	    key: 'next',
	    value: function next(value) {
	      this._subject.onNext(value);
	    }
	  }, {
	    key: 'throw',
	    value: function _throw(error) {
	      this._subject.onError(error);
	    }
	  }, {
	    key: 'return',
	    value: function _return(value) {
	      this._subject.onCompleted();
	    }
	  }]);
	
	  return EventEmitter;
	})(Observable);
	
	exports.EventEmitter = EventEmitter;
	
	//# sourceMappingURL=async.es6.map

	//# sourceMappingURL=./async.map

/***/ },
/* 99 */
/*!******************************************************!*\
  !*** ./~/angular2/es6/dev/src/facade/collection.es6 ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	exports.isListLikeIterable = isListLikeIterable;
	exports.iterateListLike = iterateListLike;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var List = _angular2SrcFacadeLang.global.Array;
	exports.List = List;
	var Map = _angular2SrcFacadeLang.global.Map;
	exports.Map = Map;
	var Set = _angular2SrcFacadeLang.global.Set;
	exports.Set = Set;
	var StringMap = _angular2SrcFacadeLang.global.Object;
	exports.StringMap = StringMap;
	
	var MapWrapper = (function () {
	  function MapWrapper() {
	    _classCallCheck(this, MapWrapper);
	  }
	
	  _createClass(MapWrapper, null, [{
	    key: "create",
	    value: function create() {
	      return _rtts_assertRtts_assert.assert.returnType(new Map(), Map);
	    }
	  }, {
	    key: "clone",
	    value: function clone(m) {
	      _rtts_assertRtts_assert.assert.argumentTypes(m, Map);
	      return _rtts_assertRtts_assert.assert.returnType(new Map(m), Map);
	    }
	  }, {
	    key: "createFromStringMap",
	    value: function createFromStringMap(stringMap) {
	      var result = MapWrapper.create();
	      for (var prop in stringMap) {
	        MapWrapper.set(result, prop, stringMap[prop]);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(result, Map);
	    }
	  }, {
	    key: "createFromPairs",
	    value: function createFromPairs(pairs) {
	      _rtts_assertRtts_assert.assert.argumentTypes(pairs, List);
	      return _rtts_assertRtts_assert.assert.returnType(new Map(pairs), Map);
	    }
	  }, {
	    key: "get",
	    value: function get(m, k) {
	      return m.get(k);
	    }
	  }, {
	    key: "set",
	    value: function set(m, k, v) {
	      m.set(k, v);
	    }
	  }, {
	    key: "contains",
	    value: function contains(m, k) {
	      return m.has(k);
	    }
	  }, {
	    key: "forEach",
	    value: function forEach(m, fn) {
	      m.forEach(fn);
	    }
	  }, {
	    key: "size",
	    value: function size(m) {
	      return m.size;
	    }
	  }, {
	    key: "delete",
	    value: function _delete(m, k) {
	      m["delete"](k);
	    }
	  }, {
	    key: "clear",
	    value: function clear(m) {
	      m.clear();
	    }
	  }, {
	    key: "clearValues",
	    value: function clearValues(m) {
	      var keyIterator = m.keys();
	      var k;
	      while (!(k = keyIterator.next()).done) {
	        m.set(k.value, null);
	      }
	    }
	  }, {
	    key: "iterable",
	    value: function iterable(m) {
	      return m;
	    }
	  }, {
	    key: "keys",
	    value: function keys(m) {
	      return m.keys();
	    }
	  }, {
	    key: "values",
	    value: function values(m) {
	      return m.values();
	    }
	  }]);
	
	  return MapWrapper;
	})();
	
	exports.MapWrapper = MapWrapper;
	
	Object.defineProperty(MapWrapper.clone, "parameters", { get: function get() {
	    return [[Map]];
	  } });
	Object.defineProperty(MapWrapper.createFromPairs, "parameters", { get: function get() {
	    return [[List]];
	  } });
	
	var StringMapWrapper = (function () {
	  function StringMapWrapper() {
	    _classCallCheck(this, StringMapWrapper);
	  }
	
	  _createClass(StringMapWrapper, null, [{
	    key: "create",
	    value: function create() {
	      return _rtts_assertRtts_assert.assert.returnType({}, Object);
	    }
	  }, {
	    key: "contains",
	    value: function contains(map, key) {
	      return map.hasOwnProperty(key);
	    }
	  }, {
	    key: "get",
	    value: function get(map, key) {
	      return map.hasOwnProperty(key) ? map[key] : undefined;
	    }
	  }, {
	    key: "set",
	    value: function set(map, key, value) {
	      map[key] = value;
	    }
	  }, {
	    key: "isEmpty",
	    value: function isEmpty(map) {
	      for (var prop in map) {
	        return false;
	      }
	      return true;
	    }
	  }, {
	    key: "delete",
	    value: function _delete(map, key) {
	      delete map[key];
	    }
	  }, {
	    key: "forEach",
	    value: function forEach(map, callback) {
	      for (var prop in map) {
	        if (map.hasOwnProperty(prop)) {
	          callback(map[prop], prop);
	        }
	      }
	    }
	  }, {
	    key: "merge",
	    value: function merge(m1, m2) {
	      var m = {};
	      for (var attr in m1) {
	        if (m1.hasOwnProperty(attr)) {
	          m[attr] = m1[attr];
	        }
	      }
	      for (var attr in m2) {
	        if (m2.hasOwnProperty(attr)) {
	          m[attr] = m2[attr];
	        }
	      }
	      return m;
	    }
	  }]);
	
	  return StringMapWrapper;
	})();
	
	exports.StringMapWrapper = StringMapWrapper;
	
	var ListWrapper = (function () {
	  function ListWrapper() {
	    _classCallCheck(this, ListWrapper);
	  }
	
	  _createClass(ListWrapper, null, [{
	    key: "create",
	    value: function create() {
	      return _rtts_assertRtts_assert.assert.returnType(new List(), List);
	    }
	  }, {
	    key: "createFixedSize",
	    value: function createFixedSize(size) {
	      return _rtts_assertRtts_assert.assert.returnType(new List(size), List);
	    }
	  }, {
	    key: "get",
	    value: function get(m, k) {
	      return m[k];
	    }
	  }, {
	    key: "set",
	    value: function set(m, k, v) {
	      m[k] = v;
	    }
	  }, {
	    key: "clone",
	    value: function clone(array) {
	      _rtts_assertRtts_assert.assert.argumentTypes(array, List);
	      return array.slice(0);
	    }
	  }, {
	    key: "map",
	    value: function map(array, fn) {
	      return array.map(fn);
	    }
	  }, {
	    key: "forEach",
	    value: function forEach(array, fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(array, List, fn, Function);
	      for (var i = 0; i < array.length; i++) {
	        fn(array[i]);
	      }
	    }
	  }, {
	    key: "push",
	    value: function push(array, el) {
	      array.push(el);
	    }
	  }, {
	    key: "first",
	    value: function first(array) {
	      if (!array) return null;
	      return array[0];
	    }
	  }, {
	    key: "last",
	    value: function last(array) {
	      if (!array || array.length == 0) return null;
	      return array[array.length - 1];
	    }
	  }, {
	    key: "find",
	    value: function find(list, pred) {
	      _rtts_assertRtts_assert.assert.argumentTypes(list, List, pred, Function);
	      for (var i = 0; i < list.length; ++i) {
	        if (pred(list[i])) return list[i];
	      }
	      return null;
	    }
	  }, {
	    key: "reduce",
	    value: function reduce(list, fn, init) {
	      _rtts_assertRtts_assert.assert.argumentTypes(list, List, fn, Function, init, _rtts_assertRtts_assert.assert.type.any);
	      return list.reduce(fn, init);
	    }
	  }, {
	    key: "filter",
	    value: function filter(array, pred) {
	      _rtts_assertRtts_assert.assert.argumentTypes(array, _rtts_assertRtts_assert.assert.type.any, pred, Function);
	      return array.filter(pred);
	    }
	  }, {
	    key: "indexOf",
	    value: function indexOf(array, value) {
	      var startIndex = arguments[2] === undefined ? -1 : arguments[2];
	
	      return array.indexOf(value, startIndex);
	    }
	  }, {
	    key: "any",
	    value: function any(list, pred) {
	      _rtts_assertRtts_assert.assert.argumentTypes(list, List, pred, Function);
	      for (var i = 0; i < list.length; ++i) {
	        if (pred(list[i])) return true;
	      }
	      return false;
	    }
	  }, {
	    key: "contains",
	    value: function contains(list, el) {
	      _rtts_assertRtts_assert.assert.argumentTypes(list, List, el, _rtts_assertRtts_assert.assert.type.any);
	      return list.indexOf(el) !== -1;
	    }
	  }, {
	    key: "reversed",
	    value: function reversed(array) {
	      var a = ListWrapper.clone(array);
	      return a.reverse();
	    }
	  }, {
	    key: "concat",
	    value: function concat(a, b) {
	      return a.concat(b);
	    }
	  }, {
	    key: "isList",
	    value: function isList(list) {
	      return Array.isArray(list);
	    }
	  }, {
	    key: "insert",
	    value: function insert(list, index, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(list, _rtts_assertRtts_assert.assert.type.any, index, _angular2SrcFacadeLang.int, value, _rtts_assertRtts_assert.assert.type.any);
	      list.splice(index, 0, value);
	    }
	  }, {
	    key: "removeAt",
	    value: function removeAt(list, index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(list, _rtts_assertRtts_assert.assert.type.any, index, _angular2SrcFacadeLang.int);
	      var res = list[index];
	      list.splice(index, 1);
	      return res;
	    }
	  }, {
	    key: "removeAll",
	    value: function removeAll(list, items) {
	      for (var i = 0; i < items.length; ++i) {
	        var index = list.indexOf(items[i]);
	        list.splice(index, 1);
	      }
	    }
	  }, {
	    key: "removeLast",
	    value: function removeLast(list) {
	      _rtts_assertRtts_assert.assert.argumentTypes(list, List);
	      return list.pop();
	    }
	  }, {
	    key: "remove",
	    value: function remove(list, el) {
	      var index = list.indexOf(el);
	      if (index > -1) {
	        list.splice(index, 1);
	        return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "clear",
	    value: function clear(list) {
	      list.splice(0, list.length);
	    }
	  }, {
	    key: "join",
	    value: function join(list, s) {
	      return list.join(s);
	    }
	  }, {
	    key: "isEmpty",
	    value: function isEmpty(list) {
	      return list.length == 0;
	    }
	  }, {
	    key: "fill",
	    value: function fill(list, value) {
	      var start = arguments[2] === undefined ? 0 : arguments[2];
	      var end = arguments[3] === undefined ? null : arguments[3];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(list, List, value, _rtts_assertRtts_assert.assert.type.any, start, _angular2SrcFacadeLang.int, end, _angular2SrcFacadeLang.int);
	      list.fill(value, start, end === null ? undefined : end);
	    }
	  }, {
	    key: "equals",
	    value: function equals(a, b) {
	      _rtts_assertRtts_assert.assert.argumentTypes(a, List, b, List);
	      if (a.length != b.length) return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      for (var i = 0; i < a.length; ++i) {
	        if (a[i] !== b[i]) return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "slice",
	    value: function slice(l) {
	      var from = arguments[1] === undefined ? 0 : arguments[1];
	      var to = arguments[2] === undefined ? null : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(l, List, from, _angular2SrcFacadeLang.int, to, _angular2SrcFacadeLang.int);
	      return _rtts_assertRtts_assert.assert.returnType(l.slice(from, to === null ? undefined : to), List);
	    }
	  }, {
	    key: "splice",
	    value: function splice(l, from, length) {
	      _rtts_assertRtts_assert.assert.argumentTypes(l, List, from, _angular2SrcFacadeLang.int, length, _angular2SrcFacadeLang.int);
	      return _rtts_assertRtts_assert.assert.returnType(l.splice(from, length), List);
	    }
	  }, {
	    key: "sort",
	    value: function sort(l, compareFn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(l, List, compareFn, Function);
	      l.sort(compareFn);
	    }
	  }]);
	
	  return ListWrapper;
	})();
	
	exports.ListWrapper = ListWrapper;
	
	Object.defineProperty(ListWrapper.clone, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(ListWrapper.forEach, "parameters", { get: function get() {
	    return [[List], [Function]];
	  } });
	Object.defineProperty(ListWrapper.find, "parameters", { get: function get() {
	    return [[List], [Function]];
	  } });
	Object.defineProperty(ListWrapper.reduce, "parameters", { get: function get() {
	    return [[List], [Function], []];
	  } });
	Object.defineProperty(ListWrapper.filter, "parameters", { get: function get() {
	    return [[], [Function]];
	  } });
	Object.defineProperty(ListWrapper.any, "parameters", { get: function get() {
	    return [[List], [Function]];
	  } });
	Object.defineProperty(ListWrapper.contains, "parameters", { get: function get() {
	    return [[List], []];
	  } });
	Object.defineProperty(ListWrapper.insert, "parameters", { get: function get() {
	    return [[], [_angular2SrcFacadeLang.int], []];
	  } });
	Object.defineProperty(ListWrapper.removeAt, "parameters", { get: function get() {
	    return [[], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(ListWrapper.removeLast, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(ListWrapper.fill, "parameters", { get: function get() {
	    return [[List], [], [_angular2SrcFacadeLang.int], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(ListWrapper.equals, "parameters", { get: function get() {
	    return [[List], [List]];
	  } });
	Object.defineProperty(ListWrapper.slice, "parameters", { get: function get() {
	    return [[List], [_angular2SrcFacadeLang.int], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(ListWrapper.splice, "parameters", { get: function get() {
	    return [[List], [_angular2SrcFacadeLang.int], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(ListWrapper.sort, "parameters", { get: function get() {
	    return [[List], [Function]];
	  } });
	
	function isListLikeIterable(obj) {
	  if (!(0, _angular2SrcFacadeLang.isJsObject)(obj)) return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	  return _rtts_assertRtts_assert.assert.returnType(ListWrapper.isList(obj) || !(obj instanceof Map) && Symbol.iterator in obj, _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	function iterateListLike(obj, fn) {
	  _rtts_assertRtts_assert.assert.argumentTypes(obj, _rtts_assertRtts_assert.assert.type.any, fn, Function);
	  if (ListWrapper.isList(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      fn(obj[i]);
	    }
	  } else {
	    var iterator = obj[Symbol.iterator]();
	    var item;
	    while (!(item = iterator.next()).done) {
	      fn(item.value);
	    }
	  }
	}
	
	Object.defineProperty(iterateListLike, "parameters", { get: function get() {
	    return [[], [Function]];
	  } });
	
	var SetWrapper = (function () {
	  function SetWrapper() {
	    _classCallCheck(this, SetWrapper);
	  }
	
	  _createClass(SetWrapper, null, [{
	    key: "createFromList",
	    value: function createFromList(lst) {
	      _rtts_assertRtts_assert.assert.argumentTypes(lst, List);
	      return new Set(lst);
	    }
	  }, {
	    key: "has",
	    value: function has(s, key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(s, Set, key, _rtts_assertRtts_assert.assert.type.any);
	      return _rtts_assertRtts_assert.assert.returnType(s.has(key), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return SetWrapper;
	})();
	
	exports.SetWrapper = SetWrapper;
	
	Object.defineProperty(SetWrapper.createFromList, "parameters", { get: function get() {
	    return [[List]];
	  } });
	Object.defineProperty(SetWrapper.has, "parameters", { get: function get() {
	    return [[Set], []];
	  } });
	//# sourceMappingURL=collection.es6.map

	//# sourceMappingURL=./collection.map

/***/ },
/* 100 */
/*!*****************************!*\
  !*** ./~/rx/dist/rx.all.js ***!
  \*****************************/
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global, process) {// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.
	
	;(function (undefined) {
	
	  var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	  };
	
	  var root = (objectTypes[typeof window] && window) || this,
	    freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports,
	    freeModule = objectTypes[typeof module] && module && !module.nodeType && module,
	    moduleExports = freeModule && freeModule.exports === freeExports && freeExports,
	    freeGlobal = objectTypes[typeof global] && global;
	
	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    root = freeGlobal;
	  }
	
	  var Rx = {
	      internals: {},
	      config: {
	        Promise: root.Promise
	      },
	      helpers: { }
	  };
	
	  // Defaults
	  var noop = Rx.helpers.noop = function () { },
	    notDefined = Rx.helpers.notDefined = function (x) { return typeof x === 'undefined'; },
	    isScheduler = Rx.helpers.isScheduler = function (x) { return x instanceof Rx.Scheduler; },
	    identity = Rx.helpers.identity = function (x) { return x; },
	    pluck = Rx.helpers.pluck = function (property) { return function (x) { return x[property]; }; },
	    just = Rx.helpers.just = function (value) { return function () { return value; }; },
	    defaultNow = Rx.helpers.defaultNow = Date.now,
	    defaultComparer = Rx.helpers.defaultComparer = function (x, y) { return isEqual(x, y); },
	    defaultSubComparer = Rx.helpers.defaultSubComparer = function (x, y) { return x > y ? 1 : (x < y ? -1 : 0); },
	    defaultKeySerializer = Rx.helpers.defaultKeySerializer = function (x) { return x.toString(); },
	    defaultError = Rx.helpers.defaultError = function (err) { throw err; },
	    isPromise = Rx.helpers.isPromise = function (p) { return !!p && typeof p.then === 'function'; },
	    asArray = Rx.helpers.asArray = function () { return Array.prototype.slice.call(arguments); },
	    not = Rx.helpers.not = function (a) { return !a; },
	    isFunction = Rx.helpers.isFunction = (function () {
	
	      var isFn = function (value) {
	        return typeof value == 'function' || false;
	      }
	
	      // fallback for older versions of Chrome and Safari
	      if (isFn(/x/)) {
	        isFn = function(value) {
	          return typeof value == 'function' && toString.call(value) == '[object Function]';
	        };
	      }
	
	      return isFn;
	    }());
	
	  function cloneArray(arr) { for(var a = [], i = 0, len = arr.length; i < len; i++) { a.push(arr[i]); } return a;}
	
	  Rx.config.longStackSupport = false;
	  var hasStacks = false;
	  try {
	    throw new Error();
	  } catch (e) {
	    hasStacks = !!e.stack;
	  }
	
	  // All code after this point will be filtered from stack traces reported by RxJS
	  var rStartingLine = captureLine(), rFileName;
	
	  var STACK_JUMP_SEPARATOR = "From previous event:";
	
	  function makeStackTraceLong(error, observable) {
	      // If possible, transform the error stack trace by removing Node and RxJS
	      // cruft, then concatenating with the stack trace of `observable`.
	      if (hasStacks &&
	          observable.stack &&
	          typeof error === "object" &&
	          error !== null &&
	          error.stack &&
	          error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	      ) {
	        var stacks = [];
	        for (var o = observable; !!o; o = o.source) {
	          if (o.stack) {
	            stacks.unshift(o.stack);
	          }
	        }
	        stacks.unshift(error.stack);
	
	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	  }
	
	  function filterStackString(stackString) {
	    var lines = stackString.split("\n"),
	        desiredLines = [];
	    for (var i = 0, len = lines.length; i < len; i++) {
	      var line = lines[i];
	
	      if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	        desiredLines.push(line);
	      }
	    }
	    return desiredLines.join("\n");
	  }
	
	  function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	    if (!fileNameAndLineNumber) {
	      return false;
	    }
	    var fileName = fileNameAndLineNumber[0], lineNumber = fileNameAndLineNumber[1];
	
	    return fileName === rFileName &&
	      lineNumber >= rStartingLine &&
	      lineNumber <= rEndingLine;
	  }
	
	  function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	      stackLine.indexOf("(node.js:") !== -1;
	  }
	
	  function captureLine() {
	    if (!hasStacks) { return; }
	
	    try {
	      throw new Error();
	    } catch (e) {
	      var lines = e.stack.split("\n");
	      var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	      var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	      if (!fileNameAndLineNumber) { return; }
	
	      rFileName = fileNameAndLineNumber[0];
	      return fileNameAndLineNumber[1];
	    }
	  }
	
	  function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) { return [attempt1[1], Number(attempt1[2])]; }
	
	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) { return [attempt2[1], Number(attempt2[2])]; }
	
	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) { return [attempt3[1], Number(attempt3[2])]; }
	  }
	
	  var EmptyError = Rx.EmptyError = function() {
	    this.message = 'Sequence contains no elements.';
	    Error.call(this);
	  };
	  EmptyError.prototype = Error.prototype;
	
	  var ObjectDisposedError = Rx.ObjectDisposedError = function() {
	    this.message = 'Object has been disposed';
	    Error.call(this);
	  };
	  ObjectDisposedError.prototype = Error.prototype;
	
	  var ArgumentOutOfRangeError = Rx.ArgumentOutOfRangeError = function () {
	    this.message = 'Argument out of range';
	    Error.call(this);
	  };
	  ArgumentOutOfRangeError.prototype = Error.prototype;
	
	  var NotSupportedError = Rx.NotSupportedError = function (message) {
	    this.message = message || 'This operation is not supported';
	    Error.call(this);
	  };
	  NotSupportedError.prototype = Error.prototype;
	
	  var NotImplementedError = Rx.NotImplementedError = function (message) {
	    this.message = message || 'This operation is not implemented';
	    Error.call(this);
	  };
	  NotImplementedError.prototype = Error.prototype;
	
	  var notImplemented = Rx.helpers.notImplemented = function () {
	    throw new NotImplementedError();
	  };
	
	  var notSupported = Rx.helpers.notSupported = function () {
	    throw new NotSupportedError();
	  };
	
	  // Shim in iterator support
	  var $iterator$ = (typeof Symbol === 'function' && Symbol.iterator) ||
	    '_es6shim_iterator_';
	  // Bug for mozilla version
	  if (root.Set && typeof new root.Set()['@@iterator'] === 'function') {
	    $iterator$ = '@@iterator';
	  }
	
	  var doneEnumerator = Rx.doneEnumerator = { done: true, value: undefined };
	
	  var isIterable = Rx.helpers.isIterable = function (o) {
	    return o[$iterator$] !== undefined;
	  }
	
	  var isArrayLike = Rx.helpers.isArrayLike = function (o) {
	    return o && o.length !== undefined;
	  }
	
	  Rx.helpers.iterator = $iterator$;
	
	  var bindCallback = Rx.internals.bindCallback = function (func, thisArg, argCount) {
	    if (typeof thisArg === 'undefined') { return func; }
	    switch(argCount) {
	      case 0:
	        return function() {
	          return func.call(thisArg)
	        };
	      case 1:
	        return function(arg) {
	          return func.call(thisArg, arg);
	        }
	      case 2:
	        return function(value, index) {
	          return func.call(thisArg, value, index);
	        };
	      case 3:
	        return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	    }
	
	    return function() {
	      return func.apply(thisArg, arguments);
	    };
	  };
	
	  /** Used to determine if values are of the language type Object */
	  var dontEnums = ['toString',
	    'toLocaleString',
	    'valueOf',
	    'hasOwnProperty',
	    'isPrototypeOf',
	    'propertyIsEnumerable',
	    'constructor'],
	  dontEnumsLength = dontEnums.length;
	
	  /** `Object#toString` result shortcuts */
	  var argsClass = '[object Arguments]',
	    arrayClass = '[object Array]',
	    boolClass = '[object Boolean]',
	    dateClass = '[object Date]',
	    errorClass = '[object Error]',
	    funcClass = '[object Function]',
	    numberClass = '[object Number]',
	    objectClass = '[object Object]',
	    regexpClass = '[object RegExp]',
	    stringClass = '[object String]';
	
	  var toString = Object.prototype.toString,
	    hasOwnProperty = Object.prototype.hasOwnProperty,
	    supportsArgsClass = toString.call(arguments) == argsClass, // For less <IE9 && FF<4
	    supportNodeClass,
	    errorProto = Error.prototype,
	    objectProto = Object.prototype,
	    stringProto = String.prototype,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	  try {
	    supportNodeClass = !(toString.call(document) == objectClass && !({ 'toString': 0 } + ''));
	  } catch (e) {
	    supportNodeClass = true;
	  }
	
	  var nonEnumProps = {};
	  nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	  nonEnumProps[boolClass] = nonEnumProps[stringClass] = { 'constructor': true, 'toString': true, 'valueOf': true };
	  nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = { 'constructor': true, 'toString': true };
	  nonEnumProps[objectClass] = { 'constructor': true };
	
	  var support = {};
	  (function () {
	    var ctor = function() { this.x = 1; },
	      props = [];
	
	    ctor.prototype = { 'valueOf': 1, 'y': 1 };
	    for (var key in new ctor) { props.push(key); }
	    for (key in arguments) { }
	
	    // Detect if `name` or `message` properties of `Error.prototype` are enumerable by default.
	    support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') || propertyIsEnumerable.call(errorProto, 'name');
	
	    // Detect if `prototype` properties are enumerable by default.
	    support.enumPrototypes = propertyIsEnumerable.call(ctor, 'prototype');
	
	    // Detect if `arguments` object indexes are non-enumerable
	    support.nonEnumArgs = key != 0;
	
	    // Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	    support.nonEnumShadows = !/valueOf/.test(props);
	  }(1));
	
	  var isObject = Rx.internals.isObject = function(value) {
	    var type = typeof value;
	    return value && (type == 'function' || type == 'object') || false;
	  };
	
	  function keysIn(object) {
	    var result = [];
	    if (!isObject(object)) {
	      return result;
	    }
	    if (support.nonEnumArgs && object.length && isArguments(object)) {
	      object = slice.call(object);
	    }
	    var skipProto = support.enumPrototypes && typeof object == 'function',
	        skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error);
	
	    for (var key in object) {
	      if (!(skipProto && key == 'prototype') &&
	          !(skipErrorProps && (key == 'message' || key == 'name'))) {
	        result.push(key);
	      }
	    }
	
	    if (support.nonEnumShadows && object !== objectProto) {
	      var ctor = object.constructor,
	          index = -1,
	          length = dontEnumsLength;
	
	      if (object === (ctor && ctor.prototype)) {
	        var className = object === stringProto ? stringClass : object === errorProto ? errorClass : toString.call(object),
	            nonEnum = nonEnumProps[className];
	      }
	      while (++index < length) {
	        key = dontEnums[index];
	        if (!(nonEnum && nonEnum[key]) && hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	    }
	    return result;
	  }
	
	  function internalFor(object, callback, keysFunc) {
	    var index = -1,
	      props = keysFunc(object),
	      length = props.length;
	
	    while (++index < length) {
	      var key = props[index];
	      if (callback(object[key], key, object) === false) {
	        break;
	      }
	    }
	    return object;
	  }
	
	  function internalForIn(object, callback) {
	    return internalFor(object, callback, keysIn);
	  }
	
	  function isNode(value) {
	    // IE < 9 presents DOM nodes as `Object` objects except they have `toString`
	    // methods that are `typeof` "string" and still can coerce nodes to strings
	    return typeof value.toString != 'function' && typeof (value + '') == 'string';
	  }
	
	  var isArguments = function(value) {
	    return (value && typeof value == 'object') ? toString.call(value) == argsClass : false;
	  }
	
	  // fallback for browsers that can't detect `arguments` objects by [[Class]]
	  if (!supportsArgsClass) {
	    isArguments = function(value) {
	      return (value && typeof value == 'object') ? hasOwnProperty.call(value, 'callee') : false;
	    };
	  }
	
	  var isEqual = Rx.internals.isEqual = function (x, y) {
	    return deepEquals(x, y, [], []);
	  };
	
	  /** @private
	   * Used for deep comparison
	   **/
	  function deepEquals(a, b, stackA, stackB) {
	    // exit early for identical values
	    if (a === b) {
	      // treat `+0` vs. `-0` as not equal
	      return a !== 0 || (1 / a == 1 / b);
	    }
	
	    var type = typeof a,
	        otherType = typeof b;
	
	    // exit early for unlike primitive values
	    if (a === a && (a == null || b == null ||
	        (type != 'function' && type != 'object' && otherType != 'function' && otherType != 'object'))) {
	      return false;
	    }
	
	    // compare [[Class]] names
	    var className = toString.call(a),
	        otherClass = toString.call(b);
	
	    if (className == argsClass) {
	      className = objectClass;
	    }
	    if (otherClass == argsClass) {
	      otherClass = objectClass;
	    }
	    if (className != otherClass) {
	      return false;
	    }
	    switch (className) {
	      case boolClass:
	      case dateClass:
	        // coerce dates and booleans to numbers, dates to milliseconds and booleans
	        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
	        return +a == +b;
	
	      case numberClass:
	        // treat `NaN` vs. `NaN` as equal
	        return (a != +a) ?
	          b != +b :
	          // but treat `-0` vs. `+0` as not equal
	          (a == 0 ? (1 / a == 1 / b) : a == +b);
	
	      case regexpClass:
	      case stringClass:
	        // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
	        // treat string primitives and their corresponding object instances as equal
	        return a == String(b);
	    }
	    var isArr = className == arrayClass;
	    if (!isArr) {
	
	      // exit for functions and DOM nodes
	      if (className != objectClass || (!support.nodeClass && (isNode(a) || isNode(b)))) {
	        return false;
	      }
	      // in older versions of Opera, `arguments` objects have `Array` constructors
	      var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor,
	          ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;
	
	      // non `Object` object instances with different constructors are not equal
	      if (ctorA != ctorB &&
	            !(hasOwnProperty.call(a, 'constructor') && hasOwnProperty.call(b, 'constructor')) &&
	            !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
	            ('constructor' in a && 'constructor' in b)
	          ) {
	        return false;
	      }
	    }
	    // assume cyclic structures are equal
	    // the algorithm for detecting cyclic structures is adapted from ES 5.1
	    // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
	    var initedStack = !stackA;
	    stackA || (stackA = []);
	    stackB || (stackB = []);
	
	    var length = stackA.length;
	    while (length--) {
	      if (stackA[length] == a) {
	        return stackB[length] == b;
	      }
	    }
	    var size = 0;
	    var result = true;
	
	    // add `a` and `b` to the stack of traversed objects
	    stackA.push(a);
	    stackB.push(b);
	
	    // recursively compare objects and arrays (susceptible to call stack limits)
	    if (isArr) {
	      // compare lengths to determine if a deep comparison is necessary
	      length = a.length;
	      size = b.length;
	      result = size == length;
	
	      if (result) {
	        // deep compare the contents, ignoring non-numeric properties
	        while (size--) {
	          var index = length,
	              value = b[size];
	
	          if (!(result = deepEquals(a[size], value, stackA, stackB))) {
	            break;
	          }
	        }
	      }
	    }
	    else {
	      // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
	      // which, in this case, is more costly
	      internalForIn(b, function(value, key, b) {
	        if (hasOwnProperty.call(b, key)) {
	          // count the number of properties.
	          size++;
	          // deep compare each property value.
	          return (result = hasOwnProperty.call(a, key) && deepEquals(a[key], value, stackA, stackB));
	        }
	      });
	
	      if (result) {
	        // ensure both objects have the same number of properties
	        internalForIn(a, function(value, key, a) {
	          if (hasOwnProperty.call(a, key)) {
	            // `size` will be `-1` if `a` has more properties than `b`
	            return (result = --size > -1);
	          }
	        });
	      }
	    }
	    stackA.pop();
	    stackB.pop();
	
	    return result;
	  }
	
	  var hasProp = {}.hasOwnProperty,
	      slice = Array.prototype.slice;
	
	  var inherits = this.inherits = Rx.internals.inherits = function (child, parent) {
	    function __() { this.constructor = child; }
	    __.prototype = parent.prototype;
	    child.prototype = new __();
	  };
	
	  var addProperties = Rx.internals.addProperties = function (obj) {
	    for(var sources = [], i = 1, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
	    for (var idx = 0, ln = sources.length; idx < ln; idx++) {
	      var source = sources[idx];
	      for (var prop in source) {
	        obj[prop] = source[prop];
	      }
	    }
	  };
	
	  // Rx Utils
	  var addRef = Rx.internals.addRef = function (xs, r) {
	    return new AnonymousObservable(function (observer) {
	      return new CompositeDisposable(r.getDisposable(), xs.subscribe(observer));
	    });
	  };
	
	  function arrayInitialize(count, factory) {
	    var a = new Array(count);
	    for (var i = 0; i < count; i++) {
	      a[i] = factory();
	    }
	    return a;
	  }
	
	  var errorObj = {e: {}};
	  var tryCatchTarget;
	  function tryCatcher() {
	    try {
	      return tryCatchTarget.apply(this, arguments);
	    } catch (e) {
	      errorObj.e = e;
	      return errorObj;
	    }
	  }
	  function tryCatch(fn) {
	    if (!isFunction(fn)) { throw new TypeError('fn must be a function'); }
	    tryCatchTarget = fn;
	    return tryCatcher;
	  }
	  function thrower(e) {
	    throw e;
	  }
	
	  // Collections
	  function IndexedItem(id, value) {
	    this.id = id;
	    this.value = value;
	  }
	
	  IndexedItem.prototype.compareTo = function (other) {
	    var c = this.value.compareTo(other.value);
	    c === 0 && (c = this.id - other.id);
	    return c;
	  };
	
	  // Priority Queue for Scheduling
	  var PriorityQueue = Rx.internals.PriorityQueue = function (capacity) {
	    this.items = new Array(capacity);
	    this.length = 0;
	  };
	
	  var priorityProto = PriorityQueue.prototype;
	  priorityProto.isHigherPriority = function (left, right) {
	    return this.items[left].compareTo(this.items[right]) < 0;
	  };
	
	  priorityProto.percolate = function (index) {
	    if (index >= this.length || index < 0) { return; }
	    var parent = index - 1 >> 1;
	    if (parent < 0 || parent === index) { return; }
	    if (this.isHigherPriority(index, parent)) {
	      var temp = this.items[index];
	      this.items[index] = this.items[parent];
	      this.items[parent] = temp;
	      this.percolate(parent);
	    }
	  };
	
	  priorityProto.heapify = function (index) {
	    +index || (index = 0);
	    if (index >= this.length || index < 0) { return; }
	    var left = 2 * index + 1,
	        right = 2 * index + 2,
	        first = index;
	    if (left < this.length && this.isHigherPriority(left, first)) {
	      first = left;
	    }
	    if (right < this.length && this.isHigherPriority(right, first)) {
	      first = right;
	    }
	    if (first !== index) {
	      var temp = this.items[index];
	      this.items[index] = this.items[first];
	      this.items[first] = temp;
	      this.heapify(first);
	    }
	  };
	
	  priorityProto.peek = function () { return this.items[0].value; };
	
	  priorityProto.removeAt = function (index) {
	    this.items[index] = this.items[--this.length];
	    this.items[this.length] = undefined;
	    this.heapify();
	  };
	
	  priorityProto.dequeue = function () {
	    var result = this.peek();
	    this.removeAt(0);
	    return result;
	  };
	
	  priorityProto.enqueue = function (item) {
	    var index = this.length++;
	    this.items[index] = new IndexedItem(PriorityQueue.count++, item);
	    this.percolate(index);
	  };
	
	  priorityProto.remove = function (item) {
	    for (var i = 0; i < this.length; i++) {
	      if (this.items[i].value === item) {
	        this.removeAt(i);
	        return true;
	      }
	    }
	    return false;
	  };
	  PriorityQueue.count = 0;
	
	  /**
	   * Represents a group of disposable resources that are disposed together.
	   * @constructor
	   */
	  var CompositeDisposable = Rx.CompositeDisposable = function () {
	    var args = [], i, len;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	      len = args.length;
	    } else {
	      len = arguments.length;
	      args = new Array(len);
	      for(i = 0; i < len; i++) { args[i] = arguments[i]; }
	    }
	    for(i = 0; i < len; i++) {
	      if (!isDisposable(args[i])) { throw new TypeError('Not a disposable'); }
	    }
	    this.disposables = args;
	    this.isDisposed = false;
	    this.length = args.length;
	  };
	
	  var CompositeDisposablePrototype = CompositeDisposable.prototype;
	
	  /**
	   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
	   * @param {Mixed} item Disposable to add.
	   */
	  CompositeDisposablePrototype.add = function (item) {
	    if (this.isDisposed) {
	      item.dispose();
	    } else {
	      this.disposables.push(item);
	      this.length++;
	    }
	  };
	
	  /**
	   * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
	   * @param {Mixed} item Disposable to remove.
	   * @returns {Boolean} true if found; false otherwise.
	   */
	  CompositeDisposablePrototype.remove = function (item) {
	    var shouldDispose = false;
	    if (!this.isDisposed) {
	      var idx = this.disposables.indexOf(item);
	      if (idx !== -1) {
	        shouldDispose = true;
	        this.disposables.splice(idx, 1);
	        this.length--;
	        item.dispose();
	      }
	    }
	    return shouldDispose;
	  };
	
	  /**
	   *  Disposes all disposables in the group and removes them from the group.
	   */
	  CompositeDisposablePrototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.isDisposed = true;
	      var len = this.disposables.length, currentDisposables = new Array(len);
	      for(var i = 0; i < len; i++) { currentDisposables[i] = this.disposables[i]; }
	      this.disposables = [];
	      this.length = 0;
	
	      for (i = 0; i < len; i++) {
	        currentDisposables[i].dispose();
	      }
	    }
	  };
	
	  /**
	   * Provides a set of static methods for creating Disposables.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   */
	  var Disposable = Rx.Disposable = function (action) {
	    this.isDisposed = false;
	    this.action = action || noop;
	  };
	
	  /** Performs the task of cleaning up resources. */
	  Disposable.prototype.dispose = function () {
	    if (!this.isDisposed) {
	      this.action();
	      this.isDisposed = true;
	    }
	  };
	
	  /**
	   * Creates a disposable object that invokes the specified action when disposed.
	   * @param {Function} dispose Action to run during the first call to dispose. The action is guaranteed to be run at most once.
	   * @return {Disposable} The disposable object that runs the given action upon disposal.
	   */
	  var disposableCreate = Disposable.create = function (action) { return new Disposable(action); };
	
	  /**
	   * Gets the disposable that does nothing when disposed.
	   */
	  var disposableEmpty = Disposable.empty = { dispose: noop };
	
	  /**
	   * Validates whether the given object is a disposable
	   * @param {Object} Object to test whether it has a dispose method
	   * @returns {Boolean} true if a disposable object, else false.
	   */
	  var isDisposable = Disposable.isDisposable = function (d) {
	    return d && isFunction(d.dispose);
	  };
	
	  var checkDisposed = Disposable.checkDisposed = function (disposable) {
	    if (disposable.isDisposed) { throw new ObjectDisposedError(); }
	  };
	
	  var SingleAssignmentDisposable = Rx.SingleAssignmentDisposable = (function () {
	    function BooleanDisposable () {
	      this.isDisposed = false;
	      this.current = null;
	    }
	
	    var booleanDisposablePrototype = BooleanDisposable.prototype;
	
	    /**
	     * Gets the underlying disposable.
	     * @return The underlying disposable.
	     */
	    booleanDisposablePrototype.getDisposable = function () {
	      return this.current;
	    };
	
	    /**
	     * Sets the underlying disposable.
	     * @param {Disposable} value The new underlying disposable.
	     */
	    booleanDisposablePrototype.setDisposable = function (value) {
	      var shouldDispose = this.isDisposed;
	      if (!shouldDispose) {
	        var old = this.current;
	        this.current = value;
	      }
	      old && old.dispose();
	      shouldDispose && value && value.dispose();
	    };
	
	    /**
	     * Disposes the underlying disposable as well as all future replacements.
	     */
	    booleanDisposablePrototype.dispose = function () {
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        var old = this.current;
	        this.current = null;
	      }
	      old && old.dispose();
	    };
	
	    return BooleanDisposable;
	  }());
	  var SerialDisposable = Rx.SerialDisposable = SingleAssignmentDisposable;
	
	  /**
	   * Represents a disposable resource that only disposes its underlying disposable resource when all dependent disposable objects have been disposed.
	   */
	  var RefCountDisposable = Rx.RefCountDisposable = (function () {
	
	    function InnerDisposable(disposable) {
	      this.disposable = disposable;
	      this.disposable.count++;
	      this.isInnerDisposed = false;
	    }
	
	    InnerDisposable.prototype.dispose = function () {
	      if (!this.disposable.isDisposed && !this.isInnerDisposed) {
	        this.isInnerDisposed = true;
	        this.disposable.count--;
	        if (this.disposable.count === 0 && this.disposable.isPrimaryDisposed) {
	          this.disposable.isDisposed = true;
	          this.disposable.underlyingDisposable.dispose();
	        }
	      }
	    };
	
	    /**
	     * Initializes a new instance of the RefCountDisposable with the specified disposable.
	     * @constructor
	     * @param {Disposable} disposable Underlying disposable.
	      */
	    function RefCountDisposable(disposable) {
	      this.underlyingDisposable = disposable;
	      this.isDisposed = false;
	      this.isPrimaryDisposed = false;
	      this.count = 0;
	    }
	
	    /**
	     * Disposes the underlying disposable only when all dependent disposables have been disposed
	     */
	    RefCountDisposable.prototype.dispose = function () {
	      if (!this.isDisposed && !this.isPrimaryDisposed) {
	        this.isPrimaryDisposed = true;
	        if (this.count === 0) {
	          this.isDisposed = true;
	          this.underlyingDisposable.dispose();
	        }
	      }
	    };
	
	    /**
	     * Returns a dependent disposable that when disposed decreases the refcount on the underlying disposable.
	     * @returns {Disposable} A dependent disposable contributing to the reference count that manages the underlying disposable's lifetime.
	     */
	    RefCountDisposable.prototype.getDisposable = function () {
	      return this.isDisposed ? disposableEmpty : new InnerDisposable(this);
	    };
	
	    return RefCountDisposable;
	  })();
	
	  function ScheduledDisposable(scheduler, disposable) {
	    this.scheduler = scheduler;
	    this.disposable = disposable;
	    this.isDisposed = false;
	  }
	
	  function scheduleItem(s, self) {
	    if (!self.isDisposed) {
	      self.isDisposed = true;
	      self.disposable.dispose();
	    }
	  }
	
	  ScheduledDisposable.prototype.dispose = function () {
	    this.scheduler.scheduleWithState(this, scheduleItem);
	  };
	
	  var ScheduledItem = Rx.internals.ScheduledItem = function (scheduler, state, action, dueTime, comparer) {
	    this.scheduler = scheduler;
	    this.state = state;
	    this.action = action;
	    this.dueTime = dueTime;
	    this.comparer = comparer || defaultSubComparer;
	    this.disposable = new SingleAssignmentDisposable();
	  }
	
	  ScheduledItem.prototype.invoke = function () {
	    this.disposable.setDisposable(this.invokeCore());
	  };
	
	  ScheduledItem.prototype.compareTo = function (other) {
	    return this.comparer(this.dueTime, other.dueTime);
	  };
	
	  ScheduledItem.prototype.isCancelled = function () {
	    return this.disposable.isDisposed;
	  };
	
	  ScheduledItem.prototype.invokeCore = function () {
	    return this.action(this.scheduler, this.state);
	  };
	
	  /** Provides a set of static properties to access commonly used schedulers. */
	  var Scheduler = Rx.Scheduler = (function () {
	
	    function Scheduler(now, schedule, scheduleRelative, scheduleAbsolute) {
	      this.now = now;
	      this._schedule = schedule;
	      this._scheduleRelative = scheduleRelative;
	      this._scheduleAbsolute = scheduleAbsolute;
	    }
	
	    function invokeAction(scheduler, action) {
	      action();
	      return disposableEmpty;
	    }
	
	    var schedulerProto = Scheduler.prototype;
	
	    /**
	     * Schedules an action to be executed.
	     * @param {Function} action Action to execute.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.schedule = function (action) {
	      return this._schedule(action, invokeAction);
	    };
	
	    /**
	     * Schedules an action to be executed.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithState = function (state, action) {
	      return this._schedule(state, action);
	    };
	
	    /**
	     * Schedules an action to be executed after the specified relative due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithRelative = function (dueTime, action) {
	      return this._scheduleRelative(action, dueTime, invokeAction);
	    };
	
	    /**
	     * Schedules an action to be executed after dueTime.
	     * @param state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithRelativeAndState = function (state, dueTime, action) {
	      return this._scheduleRelative(state, dueTime, action);
	    };
	
	    /**
	     * Schedules an action to be executed at the specified absolute due time.
	     * @param {Function} action Action to execute.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	      */
	    schedulerProto.scheduleWithAbsolute = function (dueTime, action) {
	      return this._scheduleAbsolute(action, dueTime, invokeAction);
	    };
	
	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to be executed.
	     * @param {Number}dueTime Absolute time at which to execute the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleWithAbsoluteAndState = function (state, dueTime, action) {
	      return this._scheduleAbsolute(state, dueTime, action);
	    };
	
	    /** Gets the current time according to the local machine's system clock. */
	    Scheduler.now = defaultNow;
	
	    /**
	     * Normalizes the specified TimeSpan value to a positive value.
	     * @param {Number} timeSpan The time span value to normalize.
	     * @returns {Number} The specified TimeSpan value if it is zero or positive; otherwise, 0
	     */
	    Scheduler.normalize = function (timeSpan) {
	      timeSpan < 0 && (timeSpan = 0);
	      return timeSpan;
	    };
	
	    return Scheduler;
	  }());
	
	  var normalizeTime = Scheduler.normalize;
	
	  (function (schedulerProto) {
	
	    function invokeRecImmediate(scheduler, pair) {
	      var state = pair[0], action = pair[1], group = new CompositeDisposable();
	
	      function recursiveAction(state1) {
	        action(state1, function (state2) {
	          var isAdded = false, isDone = false,
	          d = scheduler.scheduleWithState(state2, function (scheduler1, state3) {
	            if (isAdded) {
	              group.remove(d);
	            } else {
	              isDone = true;
	            }
	            recursiveAction(state3);
	            return disposableEmpty;
	          });
	          if (!isDone) {
	            group.add(d);
	            isAdded = true;
	          }
	        });
	      }
	
	      recursiveAction(state);
	      return group;
	    }
	
	    function invokeRecDate(scheduler, pair, method) {
	      var state = pair[0], action = pair[1], group = new CompositeDisposable();
	      function recursiveAction(state1) {
	        action(state1, function (state2, dueTime1) {
	          var isAdded = false, isDone = false,
	          d = scheduler[method](state2, dueTime1, function (scheduler1, state3) {
	            if (isAdded) {
	              group.remove(d);
	            } else {
	              isDone = true;
	            }
	            recursiveAction(state3);
	            return disposableEmpty;
	          });
	          if (!isDone) {
	            group.add(d);
	            isAdded = true;
	          }
	        });
	      };
	      recursiveAction(state);
	      return group;
	    }
	
	    function scheduleInnerRecursive(action, self) {
	      action(function(dt) { self(action, dt); });
	    }
	
	    /**
	     * Schedules an action to be executed recursively.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursive = function (action) {
	      return this.scheduleRecursiveWithState(action, function (_action, self) {
	        _action(function () { self(_action); }); });
	    };
	
	    /**
	     * Schedules an action to be executed recursively.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in recursive invocation state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithState = function (state, action) {
	      return this.scheduleWithState([state, action], invokeRecImmediate);
	    };
	
	    /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified relative time.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithRelative = function (dueTime, action) {
	      return this.scheduleRecursiveWithRelativeAndState(action, dueTime, scheduleInnerRecursive);
	    };
	
	    /**
	     * Schedules an action to be executed recursively after a specified relative due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Relative time after which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithRelativeAndState = function (state, dueTime, action) {
	      return this._scheduleRelative([state, action], dueTime, function (s, p) {
	        return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
	      });
	    };
	
	    /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Function} action Action to execute recursively. The parameter passed to the action is used to trigger recursive scheduling of the action at the specified absolute time.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithAbsolute = function (dueTime, action) {
	      return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, scheduleInnerRecursive);
	    };
	
	    /**
	     * Schedules an action to be executed recursively at a specified absolute due time.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Function} action Action to execute recursively. The last parameter passed to the action is used to trigger recursive scheduling of the action, passing in the recursive due time and invocation state.
	     * @param {Number}dueTime Absolute time at which to execute the action for the first time.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    schedulerProto.scheduleRecursiveWithAbsoluteAndState = function (state, dueTime, action) {
	      return this._scheduleAbsolute([state, action], dueTime, function (s, p) {
	        return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
	      });
	    };
	  }(Scheduler.prototype));
	
	  (function (schedulerProto) {
	
	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    Scheduler.prototype.schedulePeriodic = function (period, action) {
	      return this.schedulePeriodicWithState(null, period, action);
	    };
	
	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be scheduled using window.setInterval for the base implementation.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    Scheduler.prototype.schedulePeriodicWithState = function(state, period, action) {
	      if (typeof root.setInterval === 'undefined') { throw new NotSupportedError(); }
	      period = normalizeTime(period);
	      var s = state, id = root.setInterval(function () { s = action(s); }, period);
	      return disposableCreate(function () { root.clearInterval(id); });
	    };
	
	  }(Scheduler.prototype));
	
	  (function (schedulerProto) {
	    /**
	     * Returns a scheduler that wraps the original scheduler, adding exception handling for scheduled actions.
	     * @param {Function} handler Handler that's run if an exception is caught. The exception will be rethrown if the handler returns false.
	     * @returns {Scheduler} Wrapper around the original scheduler, enforcing exception handling.
	     */
	    schedulerProto.catchError = schedulerProto['catch'] = function (handler) {
	      return new CatchScheduler(this, handler);
	    };
	  }(Scheduler.prototype));
	
	  var SchedulePeriodicRecursive = Rx.internals.SchedulePeriodicRecursive = (function () {
	    function tick(command, recurse) {
	      recurse(0, this._period);
	      try {
	        this._state = this._action(this._state);
	      } catch (e) {
	        this._cancel.dispose();
	        throw e;
	      }
	    }
	
	    function SchedulePeriodicRecursive(scheduler, state, period, action) {
	      this._scheduler = scheduler;
	      this._state = state;
	      this._period = period;
	      this._action = action;
	    }
	
	    SchedulePeriodicRecursive.prototype.start = function () {
	      var d = new SingleAssignmentDisposable();
	      this._cancel = d;
	      d.setDisposable(this._scheduler.scheduleRecursiveWithRelativeAndState(0, this._period, tick.bind(this)));
	
	      return d;
	    };
	
	    return SchedulePeriodicRecursive;
	  }());
	
	  /** Gets a scheduler that schedules work immediately on the current thread. */
	  var immediateScheduler = Scheduler.immediate = (function () {
	    function scheduleNow(state, action) { return action(this, state); }
	    return new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
	  }());
	
	  /**
	   * Gets a scheduler that schedules work as soon as possible on the current thread.
	   */
	  var currentThreadScheduler = Scheduler.currentThread = (function () {
	    var queue;
	
	    function runTrampoline () {
	      while (queue.length > 0) {
	        var item = queue.dequeue();
	        !item.isCancelled() && item.invoke();
	      }
	    }
	
	    function scheduleNow(state, action) {
	      var si = new ScheduledItem(this, state, action, this.now());
	
	      if (!queue) {
	        queue = new PriorityQueue(4);
	        queue.enqueue(si);
	
	        var result = tryCatch(runTrampoline)();
	        queue = null;
	        if (result === errorObj) { return thrower(result.e); }
	      } else {
	        queue.enqueue(si);
	      }
	      return si.disposable;
	    }
	
	    var currentScheduler = new Scheduler(defaultNow, scheduleNow, notSupported, notSupported);
	    currentScheduler.scheduleRequired = function () { return !queue; };
	
	    return currentScheduler;
	  }());
	
	  var scheduleMethod, clearMethod;
	
	  var localTimer = (function () {
	    var localSetTimeout, localClearTimeout = noop;
	    if (!!root.WScript) {
	      localSetTimeout = function (fn, time) {
	        root.WScript.Sleep(time);
	        fn();
	      };
	    } else if (!!root.setTimeout) {
	      localSetTimeout = root.setTimeout;
	      localClearTimeout = root.clearTimeout;
	    } else {
	      throw new NotSupportedError();
	    }
	
	    return {
	      setTimeout: localSetTimeout,
	      clearTimeout: localClearTimeout
	    };
	  }());
	  var localSetTimeout = localTimer.setTimeout,
	    localClearTimeout = localTimer.clearTimeout;
	
	  (function () {
	
	    var nextHandle = 1, tasksByHandle = {}, currentlyRunning = false;
	
	    clearMethod = function (handle) {
	      delete tasksByHandle[handle];
	    };
	
	    function runTask(handle) {
	      if (currentlyRunning) {
	        localSetTimeout(function () { runTask(handle) }, 0);
	      } else {
	        var task = tasksByHandle[handle];
	        if (task) {
	          currentlyRunning = true;
	          var result = tryCatch(task)();
	          clearMethod(handle);
	          currentlyRunning = false;
	          if (result === errorObj) { return thrower(result.e); }
	        }
	      }
	    }
	
	    var reNative = RegExp('^' +
	      String(toString)
	        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
	        .replace(/toString| for [^\]]+/g, '.*?') + '$'
	    );
	
	    var setImmediate = typeof (setImmediate = freeGlobal && moduleExports && freeGlobal.setImmediate) == 'function' &&
	      !reNative.test(setImmediate) && setImmediate;
	
	    function postMessageSupported () {
	      // Ensure not in a worker
	      if (!root.postMessage || root.importScripts) { return false; }
	      var isAsync = false, oldHandler = root.onmessage;
	      // Test for async
	      root.onmessage = function () { isAsync = true; };
	      root.postMessage('', '*');
	      root.onmessage = oldHandler;
	
	      return isAsync;
	    }
	
	    // Use in order, setImmediate, nextTick, postMessage, MessageChannel, script readystatechanged, setTimeout
	    if (isFunction(setImmediate)) {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        setImmediate(function () { runTask(id); });
	
	        return id;
	      };
	    } else if (typeof process !== 'undefined' && {}.toString.call(process) === '[object process]') {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        process.nextTick(function () { runTask(id); });
	
	        return id;
	      };
	    } else if (postMessageSupported()) {
	      var MSG_PREFIX = 'ms.rx.schedule' + Math.random();
	
	      function onGlobalPostMessage(event) {
	        // Only if we're a match to avoid any other global events
	        if (typeof event.data === 'string' && event.data.substring(0, MSG_PREFIX.length) === MSG_PREFIX) {
	          runTask(event.data.substring(MSG_PREFIX.length));
	        }
	      }
	
	      if (root.addEventListener) {
	        root.addEventListener('message', onGlobalPostMessage, false);
	      } else {
	        root.attachEvent('onmessage', onGlobalPostMessage, false);
	      }
	
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        root.postMessage(MSG_PREFIX + currentId, '*');
	        return id;
	      };
	    } else if (!!root.MessageChannel) {
	      var channel = new root.MessageChannel();
	
	      channel.port1.onmessage = function (e) { runTask(e.data); };
	
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        channel.port2.postMessage(id);
	        return id;
	      };
	    } else if ('document' in root && 'onreadystatechange' in root.document.createElement('script')) {
	
	      scheduleMethod = function (action) {
	        var scriptElement = root.document.createElement('script');
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	
	        scriptElement.onreadystatechange = function () {
	          runTask(id);
	          scriptElement.onreadystatechange = null;
	          scriptElement.parentNode.removeChild(scriptElement);
	          scriptElement = null;
	        };
	        root.document.documentElement.appendChild(scriptElement);
	        return id;
	      };
	
	    } else {
	      scheduleMethod = function (action) {
	        var id = nextHandle++;
	        tasksByHandle[id] = action;
	        localSetTimeout(function () {
	          runTask(id);
	        }, 0);
	
	        return id;
	      };
	    }
	  }());
	
	  /**
	   * Gets a scheduler that schedules work via a timed callback based upon platform.
	   */
	  var timeoutScheduler = Scheduler.timeout = Scheduler.default = (function () {
	
	    function scheduleNow(state, action) {
	      var scheduler = this,
	        disposable = new SingleAssignmentDisposable();
	      var id = scheduleMethod(function () {
	        if (!disposable.isDisposed) {
	          disposable.setDisposable(action(scheduler, state));
	        }
	      });
	      return new CompositeDisposable(disposable, disposableCreate(function () {
	        clearMethod(id);
	      }));
	    }
	
	    function scheduleRelative(state, dueTime, action) {
	      var scheduler = this, dt = Scheduler.normalize(dueTime);
	      if (dt === 0) { return scheduler.scheduleWithState(state, action); }
	      var disposable = new SingleAssignmentDisposable();
	      var id = localSetTimeout(function () {
	        if (!disposable.isDisposed) {
	          disposable.setDisposable(action(scheduler, state));
	        }
	      }, dt);
	      return new CompositeDisposable(disposable, disposableCreate(function () {
	        localClearTimeout(id);
	      }));
	    }
	
	    function scheduleAbsolute(state, dueTime, action) {
	      return this.scheduleWithRelativeAndState(state, dueTime - this.now(), action);
	    }
	
	    return new Scheduler(defaultNow, scheduleNow, scheduleRelative, scheduleAbsolute);
	  })();
	
	  var CatchScheduler = (function (__super__) {
	
	    function scheduleNow(state, action) {
	      return this._scheduler.scheduleWithState(state, this._wrap(action));
	    }
	
	    function scheduleRelative(state, dueTime, action) {
	      return this._scheduler.scheduleWithRelativeAndState(state, dueTime, this._wrap(action));
	    }
	
	    function scheduleAbsolute(state, dueTime, action) {
	      return this._scheduler.scheduleWithAbsoluteAndState(state, dueTime, this._wrap(action));
	    }
	
	    inherits(CatchScheduler, __super__);
	
	    function CatchScheduler(scheduler, handler) {
	      this._scheduler = scheduler;
	      this._handler = handler;
	      this._recursiveOriginal = null;
	      this._recursiveWrapper = null;
	      __super__.call(this, this._scheduler.now.bind(this._scheduler), scheduleNow, scheduleRelative, scheduleAbsolute);
	    }
	
	    CatchScheduler.prototype._clone = function (scheduler) {
	        return new CatchScheduler(scheduler, this._handler);
	    };
	
	    CatchScheduler.prototype._wrap = function (action) {
	      var parent = this;
	      return function (self, state) {
	        try {
	          return action(parent._getRecursiveWrapper(self), state);
	        } catch (e) {
	          if (!parent._handler(e)) { throw e; }
	          return disposableEmpty;
	        }
	      };
	    };
	
	    CatchScheduler.prototype._getRecursiveWrapper = function (scheduler) {
	      if (this._recursiveOriginal !== scheduler) {
	        this._recursiveOriginal = scheduler;
	        var wrapper = this._clone(scheduler);
	        wrapper._recursiveOriginal = scheduler;
	        wrapper._recursiveWrapper = wrapper;
	        this._recursiveWrapper = wrapper;
	      }
	      return this._recursiveWrapper;
	    };
	
	    CatchScheduler.prototype.schedulePeriodicWithState = function (state, period, action) {
	      var self = this, failed = false, d = new SingleAssignmentDisposable();
	
	      d.setDisposable(this._scheduler.schedulePeriodicWithState(state, period, function (state1) {
	        if (failed) { return null; }
	        try {
	          return action(state1);
	        } catch (e) {
	          failed = true;
	          if (!self._handler(e)) { throw e; }
	          d.dispose();
	          return null;
	        }
	      }));
	
	      return d;
	    };
	
	    return CatchScheduler;
	  }(Scheduler));
	
	  /**
	   *  Represents a notification to an observer.
	   */
	  var Notification = Rx.Notification = (function () {
	    function Notification(kind, value, exception, accept, acceptObservable, toString) {
	      this.kind = kind;
	      this.value = value;
	      this.exception = exception;
	      this._accept = accept;
	      this._acceptObservable = acceptObservable;
	      this.toString = toString;
	    }
	
	    /**
	     * Invokes the delegate corresponding to the notification or the observer's method corresponding to the notification and returns the produced result.
	     *
	     * @memberOf Notification
	     * @param {Any} observerOrOnNext Delegate to invoke for an OnNext notification or Observer to invoke the notification on..
	     * @param {Function} onError Delegate to invoke for an OnError notification.
	     * @param {Function} onCompleted Delegate to invoke for an OnCompleted notification.
	     * @returns {Any} Result produced by the observation.
	     */
	    Notification.prototype.accept = function (observerOrOnNext, onError, onCompleted) {
	      return observerOrOnNext && typeof observerOrOnNext === 'object' ?
	        this._acceptObservable(observerOrOnNext) :
	        this._accept(observerOrOnNext, onError, onCompleted);
	    };
	
	    /**
	     * Returns an observable sequence with a single notification.
	     *
	     * @memberOf Notifications
	     * @param {Scheduler} [scheduler] Scheduler to send out the notification calls on.
	     * @returns {Observable} The observable sequence that surfaces the behavior of the notification upon subscription.
	     */
	    Notification.prototype.toObservable = function (scheduler) {
	      var self = this;
	      isScheduler(scheduler) || (scheduler = immediateScheduler);
	      return new AnonymousObservable(function (observer) {
	        return scheduler.scheduleWithState(self, function (_, notification) {
	          notification._acceptObservable(observer);
	          notification.kind === 'N' && observer.onCompleted();
	        });
	      });
	    };
	
	    return Notification;
	  })();
	
	  /**
	   * Creates an object that represents an OnNext notification to an observer.
	   * @param {Any} value The value contained in the notification.
	   * @returns {Notification} The OnNext notification containing the value.
	   */
	  var notificationCreateOnNext = Notification.createOnNext = (function () {
	      function _accept(onNext) { return onNext(this.value); }
	      function _acceptObservable(observer) { return observer.onNext(this.value); }
	      function toString() { return 'OnNext(' + this.value + ')'; }
	
	      return function (value) {
	        return new Notification('N', value, null, _accept, _acceptObservable, toString);
	      };
	  }());
	
	  /**
	   * Creates an object that represents an OnError notification to an observer.
	   * @param {Any} error The exception contained in the notification.
	   * @returns {Notification} The OnError notification containing the exception.
	   */
	  var notificationCreateOnError = Notification.createOnError = (function () {
	    function _accept (onNext, onError) { return onError(this.exception); }
	    function _acceptObservable(observer) { return observer.onError(this.exception); }
	    function toString () { return 'OnError(' + this.exception + ')'; }
	
	    return function (e) {
	      return new Notification('E', null, e, _accept, _acceptObservable, toString);
	    };
	  }());
	
	  /**
	   * Creates an object that represents an OnCompleted notification to an observer.
	   * @returns {Notification} The OnCompleted notification.
	   */
	  var notificationCreateOnCompleted = Notification.createOnCompleted = (function () {
	    function _accept (onNext, onError, onCompleted) { return onCompleted(); }
	    function _acceptObservable(observer) { return observer.onCompleted(); }
	    function toString () { return 'OnCompleted()'; }
	
	    return function () {
	      return new Notification('C', null, null, _accept, _acceptObservable, toString);
	    };
	  }());
	
	  var Enumerator = Rx.internals.Enumerator = function (next) {
	    this._next = next;
	  };
	
	  Enumerator.prototype.next = function () {
	    return this._next();
	  };
	
	  Enumerator.prototype[$iterator$] = function () { return this; }
	
	  var Enumerable = Rx.internals.Enumerable = function (iterator) {
	    this._iterator = iterator;
	  };
	
	  Enumerable.prototype[$iterator$] = function () {
	    return this._iterator();
	  };
	
	  Enumerable.prototype.concat = function () {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var e = sources[$iterator$]();
	
	      var isDisposed, subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        if (isDisposed) { return; }
	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return o.onError(ex);
	        }
	
	        if (currentItem.done) {
	          return o.onCompleted();
	        }
	
	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          function(err) { o.onError(err); },
	          self)
	        );
	      });
	
	      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };
	
	  Enumerable.prototype.catchError = function () {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var e = sources[$iterator$]();
	
	      var isDisposed, subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursiveWithState(null, function (lastException, self) {
	        if (isDisposed) { return; }
	
	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return observer.onError(ex);
	        }
	
	        if (currentItem.done) {
	          if (lastException !== null) {
	            o.onError(lastException);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }
	
	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          self,
	          function() { o.onCompleted(); }));
	      });
	      return new CompositeDisposable(subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };
	
	
	  Enumerable.prototype.catchErrorWhen = function (notificationHandler) {
	    var sources = this;
	    return new AnonymousObservable(function (o) {
	      var exceptions = new Subject(),
	        notifier = new Subject(),
	        handled = notificationHandler(exceptions),
	        notificationDisposable = handled.subscribe(notifier);
	
	      var e = sources[$iterator$]();
	
	      var isDisposed,
	        lastException,
	        subscription = new SerialDisposable();
	      var cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        if (isDisposed) { return; }
	
	        try {
	          var currentItem = e.next();
	        } catch (ex) {
	          return o.onError(ex);
	        }
	
	        if (currentItem.done) {
	          if (lastException) {
	            o.onError(lastException);
	          } else {
	            o.onCompleted();
	          }
	          return;
	        }
	
	        // Check if promise
	        var currentValue = currentItem.value;
	        isPromise(currentValue) && (currentValue = observableFromPromise(currentValue));
	
	        var outer = new SingleAssignmentDisposable();
	        var inner = new SingleAssignmentDisposable();
	        subscription.setDisposable(new CompositeDisposable(inner, outer));
	        outer.setDisposable(currentValue.subscribe(
	          function(x) { o.onNext(x); },
	          function (exn) {
	            inner.setDisposable(notifier.subscribe(self, function(ex) {
	              o.onError(ex);
	            }, function() {
	              o.onCompleted();
	            }));
	
	            exceptions.onNext(exn);
	          },
	          function() { o.onCompleted(); }));
	      });
	
	      return new CompositeDisposable(notificationDisposable, subscription, cancelable, disposableCreate(function () {
	        isDisposed = true;
	      }));
	    });
	  };
	
	  var enumerableRepeat = Enumerable.repeat = function (value, repeatCount) {
	    if (repeatCount == null) { repeatCount = -1; }
	    return new Enumerable(function () {
	      var left = repeatCount;
	      return new Enumerator(function () {
	        if (left === 0) { return doneEnumerator; }
	        if (left > 0) { left--; }
	        return { done: false, value: value };
	      });
	    });
	  };
	
	  var enumerableOf = Enumerable.of = function (source, selector, thisArg) {
	    if (selector) {
	      var selectorFn = bindCallback(selector, thisArg, 3);
	    }
	    return new Enumerable(function () {
	      var index = -1;
	      return new Enumerator(
	        function () {
	          return ++index < source.length ?
	            { done: false, value: !selector ? source[index] : selectorFn(source[index], index, source) } :
	            doneEnumerator;
	        });
	    });
	  };
	
	  /**
	   * Supports push-style iteration over an observable sequence.
	   */
	  var Observer = Rx.Observer = function () { };
	
	  /**
	   *  Creates a notification callback from an observer.
	   * @returns The action that forwards its input notification to the underlying observer.
	   */
	  Observer.prototype.toNotifier = function () {
	    var observer = this;
	    return function (n) { return n.accept(observer); };
	  };
	
	  /**
	   *  Hides the identity of an observer.
	   * @returns An observer that hides the identity of the specified observer.
	   */
	  Observer.prototype.asObserver = function () {
	    return new AnonymousObserver(this.onNext.bind(this), this.onError.bind(this), this.onCompleted.bind(this));
	  };
	
	  /**
	   *  Checks access to the observer for grammar violations. This includes checking for multiple OnError or OnCompleted calls, as well as reentrancy in any of the observer methods.
	   *  If a violation is detected, an Error is thrown from the offending observer method call.
	   * @returns An observer that checks callbacks invocations against the observer grammar and, if the checks pass, forwards those to the specified observer.
	   */
	  Observer.prototype.checked = function () { return new CheckedObserver(this); };
	
	  /**
	   *  Creates an observer from the specified OnNext, along with optional OnError, and OnCompleted actions.
	   * @param {Function} [onNext] Observer's OnNext action implementation.
	   * @param {Function} [onError] Observer's OnError action implementation.
	   * @param {Function} [onCompleted] Observer's OnCompleted action implementation.
	   * @returns {Observer} The observer object implemented using the given actions.
	   */
	  var observerCreate = Observer.create = function (onNext, onError, onCompleted) {
	    onNext || (onNext = noop);
	    onError || (onError = defaultError);
	    onCompleted || (onCompleted = noop);
	    return new AnonymousObserver(onNext, onError, onCompleted);
	  };
	
	  /**
	   *  Creates an observer from a notification callback.
	   *
	   * @static
	   * @memberOf Observer
	   * @param {Function} handler Action that handles a notification.
	   * @returns The observer object that invokes the specified handler using a notification corresponding to each message it receives.
	   */
	  Observer.fromNotifier = function (handler, thisArg) {
	    return new AnonymousObserver(function (x) {
	      return handler.call(thisArg, notificationCreateOnNext(x));
	    }, function (e) {
	      return handler.call(thisArg, notificationCreateOnError(e));
	    }, function () {
	      return handler.call(thisArg, notificationCreateOnCompleted());
	    });
	  };
	
	  /**
	   * Schedules the invocation of observer methods on the given scheduler.
	   * @param {Scheduler} scheduler Scheduler to schedule observer messages on.
	   * @returns {Observer} Observer whose messages are scheduled on the given scheduler.
	   */
	  Observer.prototype.notifyOn = function (scheduler) {
	    return new ObserveOnObserver(scheduler, this);
	  };
	
	  Observer.prototype.makeSafe = function(disposable) {
	    return new AnonymousSafeObserver(this._onNext, this._onError, this._onCompleted, disposable);
	  };
	
	  /**
	   * Abstract base class for implementations of the Observer class.
	   * This base class enforces the grammar of observers where OnError and OnCompleted are terminal messages.
	   */
	  var AbstractObserver = Rx.internals.AbstractObserver = (function (__super__) {
	    inherits(AbstractObserver, __super__);
	
	    /**
	     * Creates a new observer in a non-stopped state.
	     */
	    function AbstractObserver() {
	      this.isStopped = false;
	      __super__.call(this);
	    }
	
	    // Must be implemented by other observers
	    AbstractObserver.prototype.next = notImplemented;
	    AbstractObserver.prototype.error = notImplemented;
	    AbstractObserver.prototype.completed = notImplemented;
	
	    /**
	     * Notifies the observer of a new element in the sequence.
	     * @param {Any} value Next element in the sequence.
	     */
	    AbstractObserver.prototype.onNext = function (value) {
	      if (!this.isStopped) { this.next(value); }
	    };
	
	    /**
	     * Notifies the observer that an exception has occurred.
	     * @param {Any} error The error that has occurred.
	     */
	    AbstractObserver.prototype.onError = function (error) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(error);
	      }
	    };
	
	    /**
	     * Notifies the observer of the end of the sequence.
	     */
	    AbstractObserver.prototype.onCompleted = function () {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.completed();
	      }
	    };
	
	    /**
	     * Disposes the observer, causing it to transition to the stopped state.
	     */
	    AbstractObserver.prototype.dispose = function () {
	      this.isStopped = true;
	    };
	
	    AbstractObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.error(e);
	        return true;
	      }
	
	      return false;
	    };
	
	    return AbstractObserver;
	  }(Observer));
	
	  /**
	   * Class to create an Observer instance from delegate-based implementations of the on* methods.
	   */
	  var AnonymousObserver = Rx.AnonymousObserver = (function (__super__) {
	    inherits(AnonymousObserver, __super__);
	
	    /**
	     * Creates an observer from the specified OnNext, OnError, and OnCompleted actions.
	     * @param {Any} onNext Observer's OnNext action implementation.
	     * @param {Any} onError Observer's OnError action implementation.
	     * @param {Any} onCompleted Observer's OnCompleted action implementation.
	     */
	    function AnonymousObserver(onNext, onError, onCompleted) {
	      __super__.call(this);
	      this._onNext = onNext;
	      this._onError = onError;
	      this._onCompleted = onCompleted;
	    }
	
	    /**
	     * Calls the onNext action.
	     * @param {Any} value Next element in the sequence.
	     */
	    AnonymousObserver.prototype.next = function (value) {
	      this._onNext(value);
	    };
	
	    /**
	     * Calls the onError action.
	     * @param {Any} error The error that has occurred.
	     */
	    AnonymousObserver.prototype.error = function (error) {
	      this._onError(error);
	    };
	
	    /**
	     *  Calls the onCompleted action.
	     */
	    AnonymousObserver.prototype.completed = function () {
	      this._onCompleted();
	    };
	
	    return AnonymousObserver;
	  }(AbstractObserver));
	
	  var CheckedObserver = (function (__super__) {
	    inherits(CheckedObserver, __super__);
	
	    function CheckedObserver(observer) {
	      __super__.call(this);
	      this._observer = observer;
	      this._state = 0; // 0 - idle, 1 - busy, 2 - done
	    }
	
	    var CheckedObserverPrototype = CheckedObserver.prototype;
	
	    CheckedObserverPrototype.onNext = function (value) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onNext).call(this._observer, value);
	      this._state = 0;
	      res === errorObj && thrower(res.e);
	    };
	
	    CheckedObserverPrototype.onError = function (err) {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onError).call(this._observer, err);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };
	
	    CheckedObserverPrototype.onCompleted = function () {
	      this.checkAccess();
	      var res = tryCatch(this._observer.onCompleted).call(this._observer);
	      this._state = 2;
	      res === errorObj && thrower(res.e);
	    };
	
	    CheckedObserverPrototype.checkAccess = function () {
	      if (this._state === 1) { throw new Error('Re-entrancy detected'); }
	      if (this._state === 2) { throw new Error('Observer completed'); }
	      if (this._state === 0) { this._state = 1; }
	    };
	
	    return CheckedObserver;
	  }(Observer));
	
	  var ScheduledObserver = Rx.internals.ScheduledObserver = (function (__super__) {
	    inherits(ScheduledObserver, __super__);
	
	    function ScheduledObserver(scheduler, observer) {
	      __super__.call(this);
	      this.scheduler = scheduler;
	      this.observer = observer;
	      this.isAcquired = false;
	      this.hasFaulted = false;
	      this.queue = [];
	      this.disposable = new SerialDisposable();
	    }
	
	    ScheduledObserver.prototype.next = function (value) {
	      var self = this;
	      this.queue.push(function () { self.observer.onNext(value); });
	    };
	
	    ScheduledObserver.prototype.error = function (e) {
	      var self = this;
	      this.queue.push(function () { self.observer.onError(e); });
	    };
	
	    ScheduledObserver.prototype.completed = function () {
	      var self = this;
	      this.queue.push(function () { self.observer.onCompleted(); });
	    };
	
	    ScheduledObserver.prototype.ensureActive = function () {
	      var isOwner = false, parent = this;
	      if (!this.hasFaulted && this.queue.length > 0) {
	        isOwner = !this.isAcquired;
	        this.isAcquired = true;
	      }
	      if (isOwner) {
	        this.disposable.setDisposable(this.scheduler.scheduleRecursive(function (self) {
	          var work;
	          if (parent.queue.length > 0) {
	            work = parent.queue.shift();
	          } else {
	            parent.isAcquired = false;
	            return;
	          }
	          try {
	            work();
	          } catch (ex) {
	            parent.queue = [];
	            parent.hasFaulted = true;
	            throw ex;
	          }
	          self();
	        }));
	      }
	    };
	
	    ScheduledObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.disposable.dispose();
	    };
	
	    return ScheduledObserver;
	  }(AbstractObserver));
	
	  var ObserveOnObserver = (function (__super__) {
	    inherits(ObserveOnObserver, __super__);
	
	    function ObserveOnObserver(scheduler, observer, cancel) {
	      __super__.call(this, scheduler, observer);
	      this._cancel = cancel;
	    }
	
	    ObserveOnObserver.prototype.next = function (value) {
	      __super__.prototype.next.call(this, value);
	      this.ensureActive();
	    };
	
	    ObserveOnObserver.prototype.error = function (e) {
	      __super__.prototype.error.call(this, e);
	      this.ensureActive();
	    };
	
	    ObserveOnObserver.prototype.completed = function () {
	      __super__.prototype.completed.call(this);
	      this.ensureActive();
	    };
	
	    ObserveOnObserver.prototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this._cancel && this._cancel.dispose();
	      this._cancel = null;
	    };
	
	    return ObserveOnObserver;
	  })(ScheduledObserver);
	
	  var observableProto;
	
	  /**
	   * Represents a push-style collection.
	   */
	  var Observable = Rx.Observable = (function () {
	
	    function Observable(subscribe) {
	      if (Rx.config.longStackSupport && hasStacks) {
	        try {
	          throw new Error();
	        } catch (e) {
	          this.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }
	
	        var self = this;
	        this._subscribe = function (observer) {
	          var oldOnError = observer.onError.bind(observer);
	
	          observer.onError = function (err) {
	            makeStackTraceLong(err, self);
	            oldOnError(err);
	          };
	
	          return subscribe.call(self, observer);
	        };
	      } else {
	        this._subscribe = subscribe;
	      }
	    }
	
	    observableProto = Observable.prototype;
	
	    /**
	     *  Subscribes an observer to the observable sequence.
	     *  @param {Mixed} [observerOrOnNext] The object that is to receive notifications or an action to invoke for each element in the observable sequence.
	     *  @param {Function} [onError] Action to invoke upon exceptional termination of the observable sequence.
	     *  @param {Function} [onCompleted] Action to invoke upon graceful termination of the observable sequence.
	     *  @returns {Diposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribe = observableProto.forEach = function (observerOrOnNext, onError, onCompleted) {
	      return this._subscribe(typeof observerOrOnNext === 'object' ?
	        observerOrOnNext :
	        observerCreate(observerOrOnNext, onError, onCompleted));
	    };
	
	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onNext The function to invoke on each element in the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnNext = function (onNext, thisArg) {
	      return this._subscribe(observerCreate(typeof thisArg !== 'undefined' ? function(x) { onNext.call(thisArg, x); } : onNext));
	    };
	
	    /**
	     * Subscribes to an exceptional condition in the sequence with an optional "this" argument.
	     * @param {Function} onError The function to invoke upon exceptional termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnError = function (onError, thisArg) {
	      return this._subscribe(observerCreate(null, typeof thisArg !== 'undefined' ? function(e) { onError.call(thisArg, e); } : onError));
	    };
	
	    /**
	     * Subscribes to the next value in the sequence with an optional "this" argument.
	     * @param {Function} onCompleted The function to invoke upon graceful termination of the observable sequence.
	     * @param {Any} [thisArg] Object to use as this when executing callback.
	     * @returns {Disposable} A disposable handling the subscriptions and unsubscriptions.
	     */
	    observableProto.subscribeOnCompleted = function (onCompleted, thisArg) {
	      return this._subscribe(observerCreate(null, null, typeof thisArg !== 'undefined' ? function() { onCompleted.call(thisArg); } : onCompleted));
	    };
	
	    return Observable;
	  })();
	
	  var ObservableBase = Rx.ObservableBase = (function (__super__) {
	    inherits(ObservableBase, __super__);
	
	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber :
	        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }
	
	    function setDisposable(s, state) {
	      var ado = state[0], self = state[1];
	      var sub = tryCatch(self.subscribeCore).call(self, ado);
	
	      if (sub === errorObj) {
	        if(!ado.fail(errorObj.e)) { return thrower(errorObj.e); }
	      }
	      ado.setDisposable(fixSubscriber(sub));
	    }
	
	    function subscribe(observer) {
	      var ado = new AutoDetachObserver(observer), state = [ado, this];
	
	      if (currentThreadScheduler.scheduleRequired()) {
	        currentThreadScheduler.scheduleWithState(state, setDisposable);
	      } else {
	        setDisposable(null, state);
	      }
	      return ado;
	    }
	
	    function ObservableBase() {
	      __super__.call(this, subscribe);
	    }
	
	    ObservableBase.prototype.subscribeCore = notImplemented;
	
	    return ObservableBase;
	  }(Observable));
	
	   /**
	   *  Wraps the source sequence in order to run its observer callbacks on the specified scheduler.
	   *
	   *  This only invokes observer callbacks on a scheduler. In case the subscription and/or unsubscription actions have side-effects
	   *  that require to be run on a scheduler, use subscribeOn.
	   *
	   *  @param {Scheduler} scheduler Scheduler to notify observers on.
	   *  @returns {Observable} The source sequence whose observations happen on the specified scheduler.
	   */
	  observableProto.observeOn = function (scheduler) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      return source.subscribe(new ObserveOnObserver(scheduler, observer));
	    }, source);
	  };
	
	   /**
	   *  Wraps the source sequence in order to run its subscription and unsubscription logic on the specified scheduler. This operation is not commonly used;
	   *  see the remarks section for more information on the distinction between subscribeOn and observeOn.
	
	   *  This only performs the side-effects of subscription and unsubscription on the specified scheduler. In order to invoke observer
	   *  callbacks on a scheduler, use observeOn.
	
	   *  @param {Scheduler} scheduler Scheduler to perform subscription and unsubscription actions on.
	   *  @returns {Observable} The source sequence whose subscriptions and unsubscriptions happen on the specified scheduler.
	   */
	  observableProto.subscribeOn = function (scheduler) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var m = new SingleAssignmentDisposable(), d = new SerialDisposable();
	      d.setDisposable(m);
	      m.setDisposable(scheduler.schedule(function () {
	        d.setDisposable(new ScheduledDisposable(scheduler, source.subscribe(observer)));
	      }));
	      return d;
	    }, source);
	  };
	
	  /**
	   * Converts a Promise to an Observable sequence
	   * @param {Promise} An ES6 Compliant promise.
	   * @returns {Observable} An Observable sequence which wraps the existing promise success and failure.
	   */
	  var observableFromPromise = Observable.fromPromise = function (promise) {
	    return observableDefer(function () {
	      var subject = new Rx.AsyncSubject();
	
	      promise.then(
	        function (value) {
	          subject.onNext(value);
	          subject.onCompleted();
	        },
	        subject.onError.bind(subject));
	
	      return subject;
	    });
	  };
	
	  /*
	   * Converts an existing observable sequence to an ES6 Compatible Promise
	   * @example
	   * var promise = Rx.Observable.return(42).toPromise(RSVP.Promise);
	   *
	   * // With config
	   * Rx.config.Promise = RSVP.Promise;
	   * var promise = Rx.Observable.return(42).toPromise();
	   * @param {Function} [promiseCtor] The constructor of the promise. If not provided, it looks for it in Rx.config.Promise.
	   * @returns {Promise} An ES6 compatible promise with the last value from the observable sequence.
	   */
	  observableProto.toPromise = function (promiseCtor) {
	    promiseCtor || (promiseCtor = Rx.config.Promise);
	    if (!promiseCtor) { throw new NotSupportedError('Promise type not provided nor in Rx.config.Promise'); }
	    var source = this;
	    return new promiseCtor(function (resolve, reject) {
	      // No cancellation can be done
	      var value, hasValue = false;
	      source.subscribe(function (v) {
	        value = v;
	        hasValue = true;
	      }, reject, function () {
	        hasValue && resolve(value);
	      });
	    });
	  };
	
	  var ToArrayObservable = (function(__super__) {
	    inherits(ToArrayObservable, __super__);
	    function ToArrayObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    ToArrayObservable.prototype.subscribeCore = function(observer) {
	      return this.source.subscribe(new ToArrayObserver(observer));
	    };
	
	    return ToArrayObservable;
	  }(ObservableBase));
	
	  function ToArrayObserver(observer) {
	    this.observer = observer;
	    this.a = [];
	    this.isStopped = false;
	  }
	  ToArrayObserver.prototype.onNext = function (x) { if(!this.isStopped) { this.a.push(x); } };
	  ToArrayObserver.prototype.onError = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	    }
	  };
	  ToArrayObserver.prototype.onCompleted = function () {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onNext(this.a);
	      this.observer.onCompleted();
	    }
	  };
	  ToArrayObserver.prototype.dispose = function () { this.isStopped = true; }
	  ToArrayObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }
	
	    return false;
	  };
	
	  /**
	  * Creates an array from an observable sequence.
	  * @returns {Observable} An observable sequence containing a single element with a list containing all the elements of the source sequence.
	  */
	  observableProto.toArray = function () {
	    return new ToArrayObservable(this);
	  };
	
	  /**
	   *  Creates an observable sequence from a specified subscribe method implementation.
	   * @example
	   *  var res = Rx.Observable.create(function (observer) { return function () { } );
	   *  var res = Rx.Observable.create(function (observer) { return Rx.Disposable.empty; } );
	   *  var res = Rx.Observable.create(function (observer) { } );
	   * @param {Function} subscribe Implementation of the resulting observable sequence's subscribe method, returning a function that will be wrapped in a Disposable.
	   * @returns {Observable} The observable sequence with the specified implementation for the Subscribe method.
	   */
	  Observable.create = Observable.createWithDisposable = function (subscribe, parent) {
	    return new AnonymousObservable(subscribe, parent);
	  };
	
	  /**
	   *  Returns an observable sequence that invokes the specified factory function whenever a new observer subscribes.
	   *
	   * @example
	   *  var res = Rx.Observable.defer(function () { return Rx.Observable.fromArray([1,2,3]); });
	   * @param {Function} observableFactory Observable factory function to invoke for each observer that subscribes to the resulting sequence or Promise.
	   * @returns {Observable} An observable sequence whose observers trigger an invocation of the given observable factory function.
	   */
	  var observableDefer = Observable.defer = function (observableFactory) {
	    return new AnonymousObservable(function (observer) {
	      var result;
	      try {
	        result = observableFactory();
	      } catch (e) {
	        return observableThrow(e).subscribe(observer);
	      }
	      isPromise(result) && (result = observableFromPromise(result));
	      return result.subscribe(observer);
	    });
	  };
	
	  /**
	   *  Returns an empty observable sequence, using the specified scheduler to send out the single OnCompleted message.
	   *
	   * @example
	   *  var res = Rx.Observable.empty();
	   *  var res = Rx.Observable.empty(Rx.Scheduler.timeout);
	   * @param {Scheduler} [scheduler] Scheduler to send the termination call on.
	   * @returns {Observable} An observable sequence with no elements.
	   */
	  var observableEmpty = Observable.empty = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithState(null, function () {
	        observer.onCompleted();
	      });
	    });
	  };
	
	  var FromObservable = (function(__super__) {
	    inherits(FromObservable, __super__);
	    function FromObservable(iterable, mapper, scheduler) {
	      this.iterable = iterable;
	      this.mapper = mapper;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    FromObservable.prototype.subscribeCore = function (observer) {
	      var sink = new FromSink(observer, this);
	      return sink.run();
	    };
	
	    return FromObservable;
	  }(ObservableBase));
	
	  var FromSink = (function () {
	    function FromSink(observer, parent) {
	      this.observer = observer;
	      this.parent = parent;
	    }
	
	    FromSink.prototype.run = function () {
	      var list = Object(this.parent.iterable),
	          it = getIterable(list),
	          observer = this.observer,
	          mapper = this.parent.mapper;
	
	      function loopRecursive(i, recurse) {
	        try {
	          var next = it.next();
	        } catch (e) {
	          return observer.onError(e);
	        }
	        if (next.done) {
	          return observer.onCompleted();
	        }
	
	        var result = next.value;
	
	        if (mapper) {
	          try {
	            result = mapper(result, i);
	          } catch (e) {
	            return observer.onError(e);
	          }
	        }
	
	        observer.onNext(result);
	        recurse(i + 1);
	      }
	
	      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	    };
	
	    return FromSink;
	  }());
	
	  var maxSafeInteger = Math.pow(2, 53) - 1;
	
	  function StringIterable(str) {
	    this._s = s;
	  }
	
	  StringIterable.prototype[$iterator$] = function () {
	    return new StringIterator(this._s);
	  };
	
	  function StringIterator(str) {
	    this._s = s;
	    this._l = s.length;
	    this._i = 0;
	  }
	
	  StringIterator.prototype[$iterator$] = function () {
	    return this;
	  };
	
	  StringIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._s.charAt(this._i++) } : doneEnumerator;
	  };
	
	  function ArrayIterable(a) {
	    this._a = a;
	  }
	
	  ArrayIterable.prototype[$iterator$] = function () {
	    return new ArrayIterator(this._a);
	  };
	
	  function ArrayIterator(a) {
	    this._a = a;
	    this._l = toLength(a);
	    this._i = 0;
	  }
	
	  ArrayIterator.prototype[$iterator$] = function () {
	    return this;
	  };
	
	  ArrayIterator.prototype.next = function () {
	    return this._i < this._l ? { done: false, value: this._a[this._i++] } : doneEnumerator;
	  };
	
	  function numberIsFinite(value) {
	    return typeof value === 'number' && root.isFinite(value);
	  }
	
	  function isNan(n) {
	    return n !== n;
	  }
	
	  function getIterable(o) {
	    var i = o[$iterator$], it;
	    if (!i && typeof o === 'string') {
	      it = new StringIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i && o.length !== undefined) {
	      it = new ArrayIterable(o);
	      return it[$iterator$]();
	    }
	    if (!i) { throw new TypeError('Object is not iterable'); }
	    return o[$iterator$]();
	  }
	
	  function sign(value) {
	    var number = +value;
	    if (number === 0) { return number; }
	    if (isNaN(number)) { return number; }
	    return number < 0 ? -1 : 1;
	  }
	
	  function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) { return 0; }
	    if (len === 0 || !numberIsFinite(len)) { return len; }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) { return 0; }
	    if (len > maxSafeInteger) { return maxSafeInteger; }
	    return len;
	  }
	
	  /**
	  * This method creates a new Observable sequence from an array-like or iterable object.
	  * @param {Any} arrayLike An array-like or iterable object to convert to an Observable sequence.
	  * @param {Function} [mapFn] Map function to call on every element of the array.
	  * @param {Any} [thisArg] The context to use calling the mapFn if provided.
	  * @param {Scheduler} [scheduler] Optional scheduler to use for scheduling.  If not provided, defaults to Scheduler.currentThread.
	  */
	  var observableFrom = Observable.from = function (iterable, mapFn, thisArg, scheduler) {
	    if (iterable == null) {
	      throw new Error('iterable cannot be null.')
	    }
	    if (mapFn && !isFunction(mapFn)) {
	      throw new Error('mapFn when provided must be a function');
	    }
	    if (mapFn) {
	      var mapper = bindCallback(mapFn, thisArg, 2);
	    }
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromObservable(iterable, mapper, scheduler);
	  }
	
	  var FromArrayObservable = (function(__super__) {
	    inherits(FromArrayObservable, __super__);
	    function FromArrayObservable(args, scheduler) {
	      this.args = args;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    FromArrayObservable.prototype.subscribeCore = function (observer) {
	      var sink = new FromArraySink(observer, this);
	      return sink.run();
	    };
	
	    return FromArrayObservable;
	  }(ObservableBase));
	
	  function FromArraySink(observer, parent) {
	    this.observer = observer;
	    this.parent = parent;
	  }
	
	  FromArraySink.prototype.run = function () {
	    var observer = this.observer, args = this.parent.args, len = args.length;
	    function loopRecursive(i, recurse) {
	      if (i < len) {
	        observer.onNext(args[i]);
	        recurse(i + 1);
	      } else {
	        observer.onCompleted();
	      }
	    }
	
	    return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	  };
	
	  /**
	  *  Converts an array to an observable sequence, using an optional scheduler to enumerate the array.
	  * @deprecated use Observable.from or Observable.of
	  * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given enumerable sequence.
	  */
	  var observableFromArray = Observable.fromArray = function (array, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler)
	  };
	
	  /**
	   *  Generates an observable sequence by running a state-driven loop producing the sequence's elements, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; });
	   *  var res = Rx.Observable.generate(0, function (x) { return x < 10; }, function (x) { return x + 1; }, function (x) { return x; }, Rx.Scheduler.timeout);
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Scheduler} [scheduler] Scheduler on which to run the generator loop. If not provided, defaults to Scheduler.currentThread.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generate = function (initialState, condition, iterate, resultSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new AnonymousObservable(function (o) {
	      var first = true;
	      return scheduler.scheduleRecursiveWithState(initialState, function (state, self) {
	        var hasResult, result;
	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          hasResult && (result = resultSelector(state));
	        } catch (e) {
	          return o.onError(e);
	        }
	        if (hasResult) {
	          o.onNext(result);
	          self(state);
	        } else {
	          o.onCompleted();
	        }
	      });
	    });
	  };
	
	  function observableOf (scheduler, array) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new FromArrayObservable(array, scheduler);
	  }
	
	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.of = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    return new FromArrayObservable(args, currentThreadScheduler);
	  };
	
	  /**
	  *  This method creates a new Observable instance with a variable number of arguments, regardless of number or type of the arguments.
	  * @param {Scheduler} scheduler A scheduler to use for scheduling the arguments.
	  * @returns {Observable} The observable sequence whose elements are pulled from the given arguments.
	  */
	  Observable.ofWithScheduler = function (scheduler) {
	    var len = arguments.length, args = new Array(len - 1);
	    for(var i = 1; i < len; i++) { args[i - 1] = arguments[i]; }
	    return new FromArrayObservable(args, scheduler);
	  };
	
	  /**
	   * Creates an Observable sequence from changes to an array using Array.observe.
	   * @param {Array} array An array to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an array from Array.observe.
	   */
	  Observable.ofArrayChanges = function(array) {
	    if (!Array.isArray(array)) { throw new TypeError('Array.observe only accepts arrays.'); }
	    if (typeof Array.observe !== 'function' && typeof Array.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
	    return new AnonymousObservable(function(observer) {
	      function observerFn(changes) {
	        for(var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }
	      
	      Array.observe(array, observerFn);
	
	      return function () {
	        Array.unobserve(array, observerFn);
	      };
	    });
	  };
	
	  /**
	   * Creates an Observable sequence from changes to an object using Object.observe.
	   * @param {Object} obj An object to observe changes.
	   * @returns {Observable} An observable sequence containing changes to an object from Object.observe.
	   */
	  Observable.ofObjectChanges = function(obj) {
	    if (obj == null) { throw new TypeError('object must not be null or undefined.'); }
	    if (typeof Object.observe !== 'function' && typeof Object.unobserve !== 'function') { throw new TypeError('Array.observe is not supported on your platform') }
	    return new AnonymousObservable(function(observer) {
	      function observerFn(changes) {
	        for(var i = 0, len = changes.length; i < len; i++) {
	          observer.onNext(changes[i]);
	        }
	      }
	
	      Object.observe(obj, observerFn);
	
	      return function () {
	        Object.unobserve(obj, observerFn);
	      };
	    });
	  };
	
	  /**
	   *  Returns a non-terminating observable sequence, which can be used to denote an infinite duration (e.g. when using reactive joins).
	   * @returns {Observable} An observable sequence whose observers will never get called.
	   */
	  var observableNever = Observable.never = function () {
	    return new AnonymousObservable(function () {
	      return disposableEmpty;
	    });
	  };
	
	  /**
	   * Convert an object into an observable sequence of [key, value] pairs.
	   * @param {Object} obj The object to inspect.
	   * @param {Scheduler} [scheduler] Scheduler to run the enumeration of the input sequence on.
	   * @returns {Observable} An observable sequence of [key, value] pairs from the object.
	   */
	  Observable.pairs = function (obj, scheduler) {
	    scheduler || (scheduler = Rx.Scheduler.currentThread);
	    return new AnonymousObservable(function (observer) {
	      var keys = Object.keys(obj), len = keys.length;
	      return scheduler.scheduleRecursiveWithState(0, function (idx, self) {
	        if (idx < len) {
	          var key = keys[idx];
	          observer.onNext([key, obj[key]]);
	          self(idx + 1);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };
	
	    var RangeObservable = (function(__super__) {
	    inherits(RangeObservable, __super__);
	    function RangeObservable(start, count, scheduler) {
	      this.start = start;
	      this.count = count;
	      this.scheduler = scheduler;
	      __super__.call(this);
	    }
	
	    RangeObservable.prototype.subscribeCore = function (observer) {
	      var sink = new RangeSink(observer, this);
	      return sink.run();
	    };
	
	    return RangeObservable;
	  }(ObservableBase));
	
	  var RangeSink = (function () {
	    function RangeSink(observer, parent) {
	      this.observer = observer;
	      this.parent = parent;
	    }
	
	    RangeSink.prototype.run = function () {
	      var start = this.parent.start, count = this.parent.count, observer = this.observer;
	      function loopRecursive(i, recurse) {
	        if (i < count) {
	          observer.onNext(start + i);
	          recurse(i + 1);
	        } else {
	          observer.onCompleted();
	        }
	      }
	
	      return this.parent.scheduler.scheduleRecursiveWithState(0, loopRecursive);
	    };
	
	    return RangeSink;
	  }());
	
	  /**
	  *  Generates an observable sequence of integral numbers within a specified range, using the specified scheduler to send out observer messages.
	  * @param {Number} start The value of the first integer in the sequence.
	  * @param {Number} count The number of sequential integers to generate.
	  * @param {Scheduler} [scheduler] Scheduler to run the generator loop on. If not specified, defaults to Scheduler.currentThread.
	  * @returns {Observable} An observable sequence that contains a range of sequential integral numbers.
	  */
	  Observable.range = function (start, count, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return new RangeObservable(start, count, scheduler);
	  };
	
	  /**
	   *  Generates an observable sequence that repeats the given element the specified number of times, using the specified scheduler to send out observer messages.
	   *
	   * @example
	   *  var res = Rx.Observable.repeat(42);
	   *  var res = Rx.Observable.repeat(42, 4);
	   *  3 - res = Rx.Observable.repeat(42, 4, Rx.Scheduler.timeout);
	   *  4 - res = Rx.Observable.repeat(42, null, Rx.Scheduler.timeout);
	   * @param {Mixed} value Element to repeat.
	   * @param {Number} repeatCount [Optiona] Number of times to repeat the element. If not specified, repeats indefinitely.
	   * @param {Scheduler} scheduler Scheduler to run the producer loop on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence that repeats the given element the specified number of times.
	   */
	  Observable.repeat = function (value, repeatCount, scheduler) {
	    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
	    return observableReturn(value, scheduler).repeat(repeatCount == null ? -1 : repeatCount);
	  };
	
	  /**
	   *  Returns an observable sequence that contains a single element, using the specified scheduler to send out observer messages.
	   *  There is an alias called 'just' or browsers <IE9.
	   * @param {Mixed} value Single element in the resulting observable sequence.
	   * @param {Scheduler} scheduler Scheduler to send the single element on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} An observable sequence containing the single specified element.
	   */
	  var observableReturn = Observable['return'] = Observable.just = Observable.returnValue = function (value, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (o) {
	      return scheduler.scheduleWithState(value, function(_,v) {
	        o.onNext(v);
	        o.onCompleted();
	      });
	    });
	  };
	
	  /**
	   *  Returns an observable sequence that terminates with an exception, using the specified scheduler to send out the single onError message.
	   *  There is an alias to this method called 'throwError' for browsers <IE9.
	   * @param {Mixed} error An object used for the sequence's termination.
	   * @param {Scheduler} scheduler Scheduler to send the exceptional termination call on. If not specified, defaults to Scheduler.immediate.
	   * @returns {Observable} The observable sequence that terminates exceptionally with the specified exception object.
	   */
	  var observableThrow = Observable['throw'] = Observable.throwError = function (error, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    return new AnonymousObservable(function (observer) {
	      return scheduler.schedule(function () {
	        observer.onError(error);
	      });
	    });
	  };
	
	  /** @deprecated use #some instead */
	  Observable.throwException = function () {
	    //deprecate('throwException', 'throwError');
	    return Observable.throwError.apply(null, arguments);
	  };
	
	  /**
	   * Constructs an observable sequence that depends on a resource object, whose lifetime is tied to the resulting observable sequence's lifetime.
	   * @param {Function} resourceFactory Factory function to obtain a resource object.
	   * @param {Function} observableFactory Factory function to obtain an observable sequence that depends on the obtained resource.
	   * @returns {Observable} An observable sequence whose lifetime controls the lifetime of the dependent resource object.
	   */
	  Observable.using = function (resourceFactory, observableFactory) {
	    return new AnonymousObservable(function (observer) {
	      var disposable = disposableEmpty, resource, source;
	      try {
	        resource = resourceFactory();
	        resource && (disposable = resource);
	        source = observableFactory(resource);
	      } catch (exception) {
	        return new CompositeDisposable(observableThrow(exception).subscribe(observer), disposable);
	      }
	      return new CompositeDisposable(source.subscribe(observer), disposable);
	    });
	  };
	
	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   * @param {Observable} rightSource Second observable sequence or Promise.
	   * @returns {Observable} {Observable} An observable sequence that surfaces either of the given sequences, whichever reacted first.
	   */
	  observableProto.amb = function (rightSource) {
	    var leftSource = this;
	    return new AnonymousObservable(function (observer) {
	      var choice,
	        leftChoice = 'L', rightChoice = 'R',
	        leftSubscription = new SingleAssignmentDisposable(),
	        rightSubscription = new SingleAssignmentDisposable();
	
	      isPromise(rightSource) && (rightSource = observableFromPromise(rightSource));
	
	      function choiceL() {
	        if (!choice) {
	          choice = leftChoice;
	          rightSubscription.dispose();
	        }
	      }
	
	      function choiceR() {
	        if (!choice) {
	          choice = rightChoice;
	          leftSubscription.dispose();
	        }
	      }
	
	      leftSubscription.setDisposable(leftSource.subscribe(function (left) {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onNext(left);
	        }
	      }, function (err) {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onError(err);
	        }
	      }, function () {
	        choiceL();
	        if (choice === leftChoice) {
	          observer.onCompleted();
	        }
	      }));
	
	      rightSubscription.setDisposable(rightSource.subscribe(function (right) {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onNext(right);
	        }
	      }, function (err) {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onError(err);
	        }
	      }, function () {
	        choiceR();
	        if (choice === rightChoice) {
	          observer.onCompleted();
	        }
	      }));
	
	      return new CompositeDisposable(leftSubscription, rightSubscription);
	    });
	  };
	
	  /**
	   * Propagates the observable sequence or Promise that reacts first.
	   *
	   * @example
	   * var = Rx.Observable.amb(xs, ys, zs);
	   * @returns {Observable} An observable sequence that surfaces any of the given sequences, whichever reacted first.
	   */
	  Observable.amb = function () {
	    var acc = observableNever(), items = [];
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { items.push(arguments[i]); }
	    }
	
	    function func(previous, current) {
	      return previous.amb(current);
	    }
	    for (var i = 0, len = items.length; i < len; i++) {
	      acc = func(acc, items[i]);
	    }
	    return acc;
	  };
	
	  function observableCatchHandler(source, handler) {
	    return new AnonymousObservable(function (o) {
	      var d1 = new SingleAssignmentDisposable(), subscription = new SerialDisposable();
	      subscription.setDisposable(d1);
	      d1.setDisposable(source.subscribe(function (x) { o.onNext(x); }, function (e) {
	        try {
	          var result = handler(e);
	        } catch (ex) {
	          return o.onError(ex);
	        }
	        isPromise(result) && (result = observableFromPromise(result));
	
	        var d = new SingleAssignmentDisposable();
	        subscription.setDisposable(d);
	        d.setDisposable(result.subscribe(o));
	      }, function (x) { o.onCompleted(x); }));
	
	      return subscription;
	    }, source);
	  }
	
	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @example
	   * 1 - xs.catchException(ys)
	   * 2 - xs.catchException(function (ex) { return ys(ex); })
	   * @param {Mixed} handlerOrSecond Exception handler function that returns an observable sequence given the error that occurred in the first sequence, or a second observable sequence used to produce results when an error occurred in the first sequence.
	   * @returns {Observable} An observable sequence containing the first sequence's elements, followed by the elements of the handler sequence in case an exception occurred.
	   */
	  observableProto['catch'] = observableProto.catchError = observableProto.catchException = function (handlerOrSecond) {
	    return typeof handlerOrSecond === 'function' ?
	      observableCatchHandler(this, handlerOrSecond) :
	      observableCatch([this, handlerOrSecond]);
	  };
	
	  /**
	   * Continues an observable sequence that is terminated by an exception with the next observable sequence.
	   * @param {Array | Arguments} args Arguments or an array to use as the next sequence if an error occurs.
	   * @returns {Observable} An observable sequence containing elements from consecutive source sequences until a source sequence terminates successfully.
	   */
	  var observableCatch = Observable.catchError = Observable['catch'] = Observable.catchException = function () {
	    var items = [];
	    if (Array.isArray(arguments[0])) {
	      items = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { items.push(arguments[i]); }
	    }
	    return enumerableOf(items).catchError();
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   * This can be in the form of an argument list of observables or an array.
	   *
	   * @example
	   * 1 - obs = observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.combineLatest = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    if (Array.isArray(args[0])) {
	      args[0].unshift(this);
	    } else {
	      args.unshift(this);
	    }
	    return combineLatest.apply(this, args);
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever any of the observable sequences or Promises produces an element.
	   *
	   * @example
	   * 1 - obs = Rx.Observable.combineLatest(obs1, obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = Rx.Observable.combineLatest([obs1, obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  var combineLatest = Observable.combineLatest = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = args.pop();
	    Array.isArray(args[0]) && (args = args[0]);
	
	    return new AnonymousObservable(function (o) {
	      var n = args.length,
	        falseFactory = function () { return false; },
	        hasValue = arrayInitialize(n, falseFactory),
	        hasValueAll = false,
	        isDone = arrayInitialize(n, falseFactory),
	        values = new Array(n);
	
	      function next(i) {
	        hasValue[i] = true;
	        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
	          try {
	            var res = resultSelector.apply(null, values);
	          } catch (e) {
	            return o.onError(e);
	          }
	          o.onNext(res);
	        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
	          o.onCompleted();
	        }
	      }
	
	      function done (i) {
	        isDone[i] = true;
	        isDone.every(identity) && o.onCompleted();
	      }
	
	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var source = args[i], sad = new SingleAssignmentDisposable();
	          isPromise(source) && (source = observableFromPromise(source));
	          sad.setDisposable(source.subscribe(function (x) {
	              values[i] = x;
	              next(i);
	            },
	            function(e) { o.onError(e); },
	            function () { done(i); }
	          ));
	          subscriptions[i] = sad;
	        }(idx));
	      }
	
	      return new CompositeDisposable(subscriptions);
	    }, this);
	  };
	
	  /**
	   * Concatenates all the observable sequences.  This takes in either an array or variable arguments to concatenate.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  observableProto.concat = function () {
	    for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	    args.unshift(this);
	    return observableConcat.apply(null, args);
	  };
	
	  /**
	   * Concatenates all the observable sequences.
	   * @param {Array | Arguments} args Arguments or an array to concat to the observable sequence.
	   * @returns {Observable} An observable sequence that contains the elements of each given sequence, in sequential order.
	   */
	  var observableConcat = Observable.concat = function () {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      args = new Array(arguments.length);
	      for(var i = 0, len = arguments.length; i < len; i++) { args[i] = arguments[i]; }
	    }
	    return enumerableOf(args).concat();
	  };
	
	  /**
	   * Concatenates an observable sequence of observable sequences.
	   * @returns {Observable} An observable sequence that contains the elements of each observed inner sequence, in sequential order.
	   */
	  observableProto.concatAll = observableProto.concatObservable = function () {
	    return this.merge(1);
	  };
	
	  var MergeObservable = (function (__super__) {
	    inherits(MergeObservable, __super__);
	
	    function MergeObservable(source, maxConcurrent) {
	      this.source = source;
	      this.maxConcurrent = maxConcurrent;
	      __super__.call(this);
	    }
	
	    MergeObservable.prototype.subscribeCore = function(observer) {
	      var g = new CompositeDisposable();
	      g.add(this.source.subscribe(new MergeObserver(observer, this.maxConcurrent, g)));
	      return g;
	    };
	
	    return MergeObservable;
	
	  }(ObservableBase));
	
	  var MergeObserver = (function () {
	    function MergeObserver(o, max, g) {
	      this.o = o;
	      this.max = max;
	      this.g = g;
	      this.done = false;
	      this.q = [];
	      this.activeCount = 0;
	      this.isStopped = false;
	    }
	    MergeObserver.prototype.handleSubscribe = function (xs) {
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);
	      isPromise(xs) && (xs = observableFromPromise(xs));
	      sad.setDisposable(xs.subscribe(new InnerObserver(this, sad)));
	    };
	    MergeObserver.prototype.onNext = function (innerSource) {
	      if (this.isStopped) { return; }
	        if(this.activeCount < this.max) {
	          this.activeCount++;
	          this.handleSubscribe(innerSource);
	        } else {
	          this.q.push(innerSource);
	        }
	      };
	      MergeObserver.prototype.onError = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.o.onError(e);
	        }
	      };
	      MergeObserver.prototype.onCompleted = function () {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.done = true;
	          this.activeCount === 0 && this.o.onCompleted();
	        }
	      };
	      MergeObserver.prototype.dispose = function() { this.isStopped = true; };
	      MergeObserver.prototype.fail = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.o.onError(e);
	          return true;
	        }
	
	        return false;
	      };
	
	      function InnerObserver(parent, sad) {
	        this.parent = parent;
	        this.sad = sad;
	        this.isStopped = false;
	      }
	      InnerObserver.prototype.onNext = function (x) { if(!this.isStopped) { this.parent.o.onNext(x); } };
	      InnerObserver.prototype.onError = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.parent.o.onError(e);
	        }
	      };
	      InnerObserver.prototype.onCompleted = function () {
	        if(!this.isStopped) {
	          this.isStopped = true;
	          var parent = this.parent;
	          parent.g.remove(this.sad);
	          if (parent.q.length > 0) {
	            parent.handleSubscribe(parent.q.shift());
	          } else {
	            parent.activeCount--;
	            parent.done && parent.activeCount === 0 && parent.o.onCompleted();
	          }
	        }
	      };
	      InnerObserver.prototype.dispose = function() { this.isStopped = true; };
	      InnerObserver.prototype.fail = function (e) {
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.parent.o.onError(e);
	          return true;
	        }
	
	        return false;
	      };
	
	      return MergeObserver;
	  }());
	
	
	
	
	
	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence, limiting the number of concurrent subscriptions to inner sequences.
	  * Or merges two observable sequences into a single observable sequence.
	  *
	  * @example
	  * 1 - merged = sources.merge(1);
	  * 2 - merged = source.merge(otherSource);
	  * @param {Mixed} [maxConcurrentOrOther] Maximum number of inner observable sequences being subscribed to concurrently or the second observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.merge = function (maxConcurrentOrOther) {
	    return typeof maxConcurrentOrOther !== 'number' ?
	      observableMerge(this, maxConcurrentOrOther) :
	      new MergeObservable(this, maxConcurrentOrOther);
	  };
	
	  /**
	   * Merges all the observable sequences into a single observable sequence.
	   * The scheduler is optional and if not specified, the immediate scheduler is used.
	   * @returns {Observable} The observable sequence that merges the elements of the observable sequences.
	   */
	  var observableMerge = Observable.merge = function () {
	    var scheduler, sources = [], i, len = arguments.length;
	    if (!arguments[0]) {
	      scheduler = immediateScheduler;
	      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
	    } else if (isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      for(i = 1; i < len; i++) { sources.push(arguments[i]); }
	    } else {
	      scheduler = immediateScheduler;
	      for(i = 0; i < len; i++) { sources.push(arguments[i]); }
	    }
	    if (Array.isArray(sources[0])) {
	      sources = sources[0];
	    }
	    return observableOf(scheduler, sources).mergeAll();
	  };
	
	  var MergeAllObservable = (function (__super__) {
	    inherits(MergeAllObservable, __super__);
	
	    function MergeAllObservable(source) {
	      this.source = source;
	      __super__.call(this);
	    }
	
	    MergeAllObservable.prototype.subscribeCore = function (observer) {
	      var g = new CompositeDisposable(), m = new SingleAssignmentDisposable();
	      g.add(m);
	      m.setDisposable(this.source.subscribe(new MergeAllObserver(observer, g)));
	      return g;
	    };
	
	    return MergeAllObservable;
	  }(ObservableBase));
	
	  var MergeAllObserver = (function() {
	
	    function MergeAllObserver(o, g) {
	      this.o = o;
	      this.g = g;
	      this.isStopped = false;
	      this.done = false;
	    }
	    MergeAllObserver.prototype.onNext = function(innerSource) {
	      if(this.isStopped) { return; }
	      var sad = new SingleAssignmentDisposable();
	      this.g.add(sad);
	
	      isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	      sad.setDisposable(innerSource.subscribe(new InnerObserver(this, this.g, sad)));
	    };
	    MergeAllObserver.prototype.onError = function (e) {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	      }
	    };
	    MergeAllObserver.prototype.onCompleted = function () {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.done = true;
	        this.g.length === 1 && this.o.onCompleted();
	      }
	    };
	    MergeAllObserver.prototype.dispose = function() { this.isStopped = true; };
	    MergeAllObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.o.onError(e);
	        return true;
	      }
	
	      return false;
	    };
	
	    function InnerObserver(parent, g, sad) {
	      this.parent = parent;
	      this.g = g;
	      this.sad = sad;
	      this.isStopped = false;
	    }
	    InnerObserver.prototype.onNext = function (x) { if (!this.isStopped) { this.parent.o.onNext(x); } };
	    InnerObserver.prototype.onError = function (e) {
	      if(!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	      }
	    };
	    InnerObserver.prototype.onCompleted = function () {
	      if(!this.isStopped) {
	        var parent = this.parent;
	        this.isStopped = true;
	        parent.g.remove(this.sad);
	        parent.done && parent.g.length === 1 && parent.o.onCompleted();
	      }
	    };
	    InnerObserver.prototype.dispose = function() { this.isStopped = true; };
	    InnerObserver.prototype.fail = function (e) {
	      if (!this.isStopped) {
	        this.isStopped = true;
	        this.parent.o.onError(e);
	        return true;
	      }
	
	      return false;
	    };
	
	    return MergeAllObserver;
	
	  }());
	
	  /**
	  * Merges an observable sequence of observable sequences into an observable sequence.
	  * @returns {Observable} The observable sequence that merges the elements of the inner sequences.
	  */
	  observableProto.mergeAll = observableProto.mergeObservable = function () {
	    return new MergeAllObservable(this);
	  };
	
	  var CompositeError = Rx.CompositeError = function(errors) {
	    this.name = "NotImplementedError";
	    this.innerErrors = errors;
	    this.message = 'This contains multiple errors. Check the innerErrors';
	    Error.call(this);
	  }
	  CompositeError.prototype = Error.prototype;
	
	  /**
	  * Flattens an Observable that emits Observables into one Observable, in a way that allows an Observer to
	  * receive all successfully emitted items from all of the source Observables without being interrupted by
	  * an error notification from one of them.
	  *
	  * This behaves like Observable.prototype.mergeAll except that if any of the merged Observables notify of an
	  * error via the Observer's onError, mergeDelayError will refrain from propagating that
	  * error notification until all of the merged Observables have finished emitting items.
	  * @param {Array | Arguments} args Arguments or an array to merge.
	  * @returns {Observable} an Observable that emits all of the items emitted by the Observables emitted by the Observable
	  */
	  Observable.mergeDelayError = function() {
	    var args;
	    if (Array.isArray(arguments[0])) {
	      args = arguments[0];
	    } else {
	      var len = arguments.length;
	      args = new Array(len);
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    }
	    var source = observableOf(null, args);
	
	    return new AnonymousObservable(function (o) {
	      var group = new CompositeDisposable(),
	        m = new SingleAssignmentDisposable(),
	        isStopped = false,
	        errors = [];
	
	      function setCompletion() {
	        if (errors.length === 0) {
	          o.onCompleted();
	        } else if (errors.length === 1) {
	          o.onError(errors[0]);
	        } else {
	          o.onError(new CompositeError(errors));
	        }
	      }
	
	      group.add(m);
	
	      m.setDisposable(source.subscribe(
	        function (innerSource) {
	          var innerSubscription = new SingleAssignmentDisposable();
	          group.add(innerSubscription);
	
	          // Check for promises support
	          isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	          innerSubscription.setDisposable(innerSource.subscribe(
	            function (x) { o.onNext(x); },
	            function (e) {
	              errors.push(e);
	              group.remove(innerSubscription);
	              isStopped && group.length === 1 && setCompletion();
	            },
	            function () {
	              group.remove(innerSubscription);
	              isStopped && group.length === 1 && setCompletion();
	          }));
	        },
	        function (e) {
	          errors.push(e);
	          isStopped = true;
	          group.length === 1 && setCompletion();
	        },
	        function () {
	          isStopped = true;
	          group.length === 1 && setCompletion();
	        }));
	      return group;
	    });
	  };
	
	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   * @param {Observable} second Second observable sequence used to produce results after the first sequence terminates.
	   * @returns {Observable} An observable sequence that concatenates the first and second sequence, even if the first sequence terminates exceptionally.
	   */
	  observableProto.onErrorResumeNext = function (second) {
	    if (!second) { throw new Error('Second observable is required'); }
	    return onErrorResumeNext([this, second]);
	  };
	
	  /**
	   * Continues an observable sequence that is terminated normally or by an exception with the next observable sequence.
	   *
	   * @example
	   * 1 - res = Rx.Observable.onErrorResumeNext(xs, ys, zs);
	   * 1 - res = Rx.Observable.onErrorResumeNext([xs, ys, zs]);
	   * @returns {Observable} An observable sequence that concatenates the source sequences, even if a sequence terminates exceptionally.
	   */
	  var onErrorResumeNext = Observable.onErrorResumeNext = function () {
	    var sources = [];
	    if (Array.isArray(arguments[0])) {
	      sources = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { sources.push(arguments[i]); }
	    }
	    return new AnonymousObservable(function (observer) {
	      var pos = 0, subscription = new SerialDisposable(),
	      cancelable = immediateScheduler.scheduleRecursive(function (self) {
	        var current, d;
	        if (pos < sources.length) {
	          current = sources[pos++];
	          isPromise(current) && (current = observableFromPromise(current));
	          d = new SingleAssignmentDisposable();
	          subscription.setDisposable(d);
	          d.setDisposable(current.subscribe(observer.onNext.bind(observer), self, self));
	        } else {
	          observer.onCompleted();
	        }
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    });
	  };
	
	  /**
	   * Returns the values from the source observable sequence only after the other observable sequence produces a value.
	   * @param {Observable | Promise} other The observable sequence or Promise that triggers propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence starting from the point the other sequence triggered propagation.
	   */
	  observableProto.skipUntil = function (other) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var isOpen = false;
	      var disposables = new CompositeDisposable(source.subscribe(function (left) {
	        isOpen && o.onNext(left);
	      }, function (e) { o.onError(e); }, function () {
	        isOpen && o.onCompleted();
	      }));
	
	      isPromise(other) && (other = observableFromPromise(other));
	
	      var rightSubscription = new SingleAssignmentDisposable();
	      disposables.add(rightSubscription);
	      rightSubscription.setDisposable(other.subscribe(function () {
	        isOpen = true;
	        rightSubscription.dispose();
	      }, function (e) { o.onError(e); }, function () {
	        rightSubscription.dispose();
	      }));
	
	      return disposables;
	    }, source);
	  };
	
	  /**
	   * Transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @returns {Observable} The observable sequence that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */
	  observableProto['switch'] = observableProto.switchLatest = function () {
	    var sources = this;
	    return new AnonymousObservable(function (observer) {
	      var hasLatest = false,
	        innerSubscription = new SerialDisposable(),
	        isStopped = false,
	        latest = 0,
	        subscription = sources.subscribe(
	          function (innerSource) {
	            var d = new SingleAssignmentDisposable(), id = ++latest;
	            hasLatest = true;
	            innerSubscription.setDisposable(d);
	
	            // Check if Promise or Observable
	            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	            d.setDisposable(innerSource.subscribe(
	              function (x) { latest === id && observer.onNext(x); },
	              function (e) { latest === id && observer.onError(e); },
	              function () {
	                if (latest === id) {
	                  hasLatest = false;
	                  isStopped && observer.onCompleted();
	                }
	              }));
	          },
	          function (e) { observer.onError(e); },
	          function () {
	            isStopped = true;
	            !hasLatest && observer.onCompleted();
	          });
	      return new CompositeDisposable(subscription, innerSubscription);
	    }, sources);
	  };
	
	  /**
	   * Returns the values from the source observable sequence until the other observable sequence produces a value.
	   * @param {Observable | Promise} other Observable sequence or Promise that terminates propagation of elements of the source sequence.
	   * @returns {Observable} An observable sequence containing the elements of the source sequence up to the point the other sequence interrupted further propagation.
	   */
	  observableProto.takeUntil = function (other) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      isPromise(other) && (other = observableFromPromise(other));
	      return new CompositeDisposable(
	        source.subscribe(o),
	        other.subscribe(function () { o.onCompleted(); }, function (e) { o.onError(e); }, noop)
	      );
	    }, source);
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function only when the (first) source observable sequence produces an element.
	   *
	   * @example
	   * 1 - obs = obs1.withLatestFrom(obs2, obs3, function (o1, o2, o3) { return o1 + o2 + o3; });
	   * 2 - obs = obs1.withLatestFrom([obs2, obs3], function (o1, o2, o3) { return o1 + o2 + o3; });
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  observableProto.withLatestFrom = function () {
	    var len = arguments.length, args = new Array(len)
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var resultSelector = args.pop(), source = this;
	
	    if (typeof source === 'undefined') {
	      throw new Error('Source observable not found for withLatestFrom().');
	    }
	    if (typeof resultSelector !== 'function') {
	      throw new Error('withLatestFrom() expects a resultSelector function.');
	    }
	    if (Array.isArray(args[0])) {
	      args = args[0];
	    }
	
	    return new AnonymousObservable(function (observer) {
	      var falseFactory = function () { return false; },
	        n = args.length,
	        hasValue = arrayInitialize(n, falseFactory),
	        hasValueAll = false,
	        values = new Array(n);
	
	      var subscriptions = new Array(n + 1);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var other = args[i], sad = new SingleAssignmentDisposable();
	          isPromise(other) && (other = observableFromPromise(other));
	          sad.setDisposable(other.subscribe(function (x) {
	            values[i] = x;
	            hasValue[i] = true;
	            hasValueAll = hasValue.every(identity);
	          }, observer.onError.bind(observer), function () {}));
	          subscriptions[i] = sad;
	        }(idx));
	      }
	
	      var sad = new SingleAssignmentDisposable();
	      sad.setDisposable(source.subscribe(function (x) {
	        var res;
	        var allValues = [x].concat(values);
	        if (!hasValueAll) return;
	        try {
	          res = resultSelector.apply(null, allValues);
	        } catch (ex) {
	          observer.onError(ex);
	          return;
	        }
	        observer.onNext(res);
	      }, observer.onError.bind(observer), function () {
	        observer.onCompleted();
	      }));
	      subscriptions[n] = sad;
	
	      return new CompositeDisposable(subscriptions);
	    }, this);
	  };
	
	  function zipArray(second, resultSelector) {
	    var first = this;
	    return new AnonymousObservable(function (observer) {
	      var index = 0, len = second.length;
	      return first.subscribe(function (left) {
	        if (index < len) {
	          var right = second[index++], result;
	          try {
	            result = resultSelector(left, right);
	          } catch (e) {
	            return observer.onError(e);
	          }
	          observer.onNext(result);
	        } else {
	          observer.onCompleted();
	        }
	      }, function (e) { observer.onError(e); }, function () { observer.onCompleted(); });
	    }, first);
	  }
	
	  function falseFactory() { return false; }
	  function emptyArrayFactory() { return []; }
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
	   * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
	   *
	   * @example
	   * 1 - res = obs1.zip(obs2, fn);
	   * 1 - res = x1.zip([1,2,3], fn);
	   * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
	   */
	  observableProto.zip = function () {
	    if (Array.isArray(arguments[0])) { return zipArray.apply(this, arguments); }
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	
	    var parent = this, resultSelector = args.pop();
	    args.unshift(parent);
	    return new AnonymousObservable(function (observer) {
	      var n = args.length,
	        queues = arrayInitialize(n, emptyArrayFactory),
	        isDone = arrayInitialize(n, falseFactory);
	
	      function next(i) {
	        var res, queuedValues;
	        if (queues.every(function (x) { return x.length > 0; })) {
	          try {
	            queuedValues = queues.map(function (x) { return x.shift(); });
	            res = resultSelector.apply(parent, queuedValues);
	          } catch (ex) {
	            observer.onError(ex);
	            return;
	          }
	          observer.onNext(res);
	        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
	          observer.onCompleted();
	        }
	      };
	
	      function done(i) {
	        isDone[i] = true;
	        if (isDone.every(function (x) { return x; })) {
	          observer.onCompleted();
	        }
	      }
	
	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          var source = args[i], sad = new SingleAssignmentDisposable();
	          isPromise(source) && (source = observableFromPromise(source));
	          sad.setDisposable(source.subscribe(function (x) {
	            queues[i].push(x);
	            next(i);
	          }, function (e) { observer.onError(e); }, function () {
	            done(i);
	          }));
	          subscriptions[i] = sad;
	        })(idx);
	      }
	
	      return new CompositeDisposable(subscriptions);
	    }, parent);
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences have produced an element at a corresponding index.
	   * @param arguments Observable sources.
	   * @param {Function} resultSelector Function to invoke for each series of elements at corresponding indexes in the sources.
	   * @returns {Observable} An observable sequence containing the result of combining elements of the sources using the specified result selector function.
	   */
	  Observable.zip = function () {
	    var len = arguments.length, args = new Array(len);
	    for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	    var first = args.shift();
	    return first.zip.apply(first, args);
	  };
	
	  /**
	   * Merges the specified observable sequences into one observable sequence by emitting a list with the elements of the observable sequences at corresponding indexes.
	   * @param arguments Observable sources.
	   * @returns {Observable} An observable sequence containing lists of elements at corresponding indexes.
	   */
	  Observable.zipArray = function () {
	    var sources;
	    if (Array.isArray(arguments[0])) {
	      sources = arguments[0];
	    } else {
	      var len = arguments.length;
	      sources = new Array(len);
	      for(var i = 0; i < len; i++) { sources[i] = arguments[i]; }
	    }
	    return new AnonymousObservable(function (observer) {
	      var n = sources.length,
	        queues = arrayInitialize(n, function () { return []; }),
	        isDone = arrayInitialize(n, function () { return false; });
	
	      function next(i) {
	        if (queues.every(function (x) { return x.length > 0; })) {
	          var res = queues.map(function (x) { return x.shift(); });
	          observer.onNext(res);
	        } else if (isDone.filter(function (x, j) { return j !== i; }).every(identity)) {
	          observer.onCompleted();
	          return;
	        }
	      };
	
	      function done(i) {
	        isDone[i] = true;
	        if (isDone.every(identity)) {
	          observer.onCompleted();
	          return;
	        }
	      }
	
	      var subscriptions = new Array(n);
	      for (var idx = 0; idx < n; idx++) {
	        (function (i) {
	          subscriptions[i] = new SingleAssignmentDisposable();
	          subscriptions[i].setDisposable(sources[i].subscribe(function (x) {
	            queues[i].push(x);
	            next(i);
	          }, function (e) { observer.onError(e); }, function () {
	            done(i);
	          }));
	        })(idx);
	      }
	
	      return new CompositeDisposable(subscriptions);
	    });
	  };
	
	  /**
	   *  Hides the identity of an observable sequence.
	   * @returns {Observable} An observable sequence that hides the identity of the source sequence.
	   */
	  observableProto.asObservable = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) { return source.subscribe(o); }, this);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more buffers which are produced based on element count information.
	   *
	   * @example
	   *  var res = xs.bufferWithCount(10);
	   *  var res = xs.bufferWithCount(10, 1);
	   * @param {Number} count Length of each buffer.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive buffers. If not provided, defaults to the count.
	   * @returns {Observable} An observable sequence of buffers.
	   */
	  observableProto.bufferWithCount = function (count, skip) {
	    if (typeof skip !== 'number') {
	      skip = count;
	    }
	    return this.windowWithCount(count, skip).selectMany(function (x) {
	      return x.toArray();
	    }).where(function (x) {
	      return x.length > 0;
	    });
	  };
	
	  /**
	   * Dematerializes the explicit notification values of an observable sequence as implicit notifications.
	   * @returns {Observable} An observable sequence exhibiting the behavior corresponding to the source sequence's notification values.
	   */
	  observableProto.dematerialize = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(function (x) { return x.accept(o); }, function(e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, this);
	  };
	
	  /**
	   *  Returns an observable sequence that contains only distinct contiguous elements according to the keySelector and the comparer.
	   *
	   *  var obs = observable.distinctUntilChanged();
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; });
	   *  var obs = observable.distinctUntilChanged(function (x) { return x.id; }, function (x, y) { return x === y; });
	   *
	   * @param {Function} [keySelector] A function to compute the comparison key for each element. If not provided, it projects the value.
	   * @param {Function} [comparer] Equality comparer for computed key values. If not provided, defaults to an equality comparer function.
	   * @returns {Observable} An observable sequence only containing the distinct contiguous elements, based on a computed key value, from the source sequence.
	   */
	  observableProto.distinctUntilChanged = function (keySelector, comparer) {
	    var source = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var hasCurrentKey = false, currentKey;
	      return source.subscribe(function (value) {
	        var key = value;
	        if (keySelector) {
	          try {
	            key = keySelector(value);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        if (hasCurrentKey) {
	          try {
	            var comparerEquals = comparer(currentKey, key);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        if (!hasCurrentKey || !comparerEquals) {
	          hasCurrentKey = true;
	          currentKey = key;
	          o.onNext(value);
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, this);
	  };
	
	  /**
	   *  Invokes an action for each element in the observable sequence and invokes an action upon graceful or exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function | Observer} observerOrOnNext Action to invoke for each element in the observable sequence or an observer.
	   * @param {Function} [onError]  Action to invoke upon exceptional termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @param {Function} [onCompleted]  Action to invoke upon graceful termination of the observable sequence. Used if only the observerOrOnNext parameter is also a function.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto['do'] = observableProto.tap = observableProto.doAction = function (observerOrOnNext, onError, onCompleted) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var tapObserver = !observerOrOnNext || isFunction(observerOrOnNext) ?
	        observerCreate(observerOrOnNext || noop, onError || noop, onCompleted || noop) :
	        observerOrOnNext;
	
	      return source.subscribe(function (x) {
	        try {
	          tapObserver.onNext(x);
	        } catch (e) {
	          observer.onError(e);
	        }
	        observer.onNext(x);
	      }, function (err) {
	          try {
	            tapObserver.onError(err);
	          } catch (e) {
	            observer.onError(e);
	          }
	        observer.onError(err);
	      }, function () {
	        try {
	          tapObserver.onCompleted();
	        } catch (e) {
	          observer.onError(e);
	        }
	        observer.onCompleted();
	      });
	    }, this);
	  };
	
	  /**
	   *  Invokes an action for each element in the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onNext Action to invoke for each element in the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnNext = observableProto.tapOnNext = function (onNext, thisArg) {
	    return this.tap(typeof thisArg !== 'undefined' ? function (x) { onNext.call(thisArg, x); } : onNext);
	  };
	
	  /**
	   *  Invokes an action upon exceptional termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onError Action to invoke upon exceptional termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnError = observableProto.tapOnError = function (onError, thisArg) {
	    return this.tap(noop, typeof thisArg !== 'undefined' ? function (e) { onError.call(thisArg, e); } : onError);
	  };
	
	  /**
	   *  Invokes an action upon graceful termination of the observable sequence.
	   *  This method can be used for debugging, logging, etc. of query behavior by intercepting the message stream to run arbitrary actions for messages on the pipeline.
	   * @param {Function} onCompleted Action to invoke upon graceful termination of the observable sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} The source sequence with the side-effecting behavior applied.
	   */
	  observableProto.doOnCompleted = observableProto.tapOnCompleted = function (onCompleted, thisArg) {
	    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function () { onCompleted.call(thisArg); } : onCompleted);
	  };
	
	  /**
	   *  Invokes a specified action after the source observable sequence terminates gracefully or exceptionally.
	   * @param {Function} finallyAction Action to invoke after the source observable sequence terminates.
	   * @returns {Observable} Source sequence with the action-invoking termination behavior applied.
	   */
	  observableProto['finally'] = observableProto.ensure = function (action) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var subscription;
	      try {
	        subscription = source.subscribe(observer);
	      } catch (e) {
	        action();
	        throw e;
	      }
	      return disposableCreate(function () {
	        try {
	          subscription.dispose();
	        } catch (e) {
	          throw e;
	        } finally {
	          action();
	        }
	      });
	    }, this);
	  };
	
	  /**
	   * @deprecated use #finally or #ensure instead.
	   */
	  observableProto.finallyAction = function (action) {
	    //deprecate('finallyAction', 'finally or ensure');
	    return this.ensure(action);
	  };
	
	  /**
	   *  Ignores all elements in an observable sequence leaving only the termination messages.
	   * @returns {Observable} An empty observable sequence that signals termination, successful or exceptional, of the source sequence.
	   */
	  observableProto.ignoreElements = function () {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(noop, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Materializes the implicit notifications of an observable sequence as explicit notification values.
	   * @returns {Observable} An observable sequence containing the materialized notification values from the source sequence.
	   */
	  observableProto.materialize = function () {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      return source.subscribe(function (value) {
	        observer.onNext(notificationCreateOnNext(value));
	      }, function (e) {
	        observer.onNext(notificationCreateOnError(e));
	        observer.onCompleted();
	      }, function () {
	        observer.onNext(notificationCreateOnCompleted());
	        observer.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Repeats the observable sequence a specified number of times. If the repeat count is not specified, the sequence repeats indefinitely.
	   * @param {Number} [repeatCount]  Number of times to repeat the sequence. If not provided, repeats the sequence indefinitely.
	   * @returns {Observable} The observable sequence producing the elements of the given sequence repeatedly.
	   */
	  observableProto.repeat = function (repeatCount) {
	    return enumerableRepeat(this, repeatCount).concat();
	  };
	
	  /**
	   *  Repeats the source observable sequence the specified number of times or until it successfully terminates. If the retry count is not specified, it retries indefinitely.
	   *  Note if you encounter an error and want it to retry once, then you must use .retry(2);
	   *
	   * @example
	   *  var res = retried = retry.repeat();
	   *  var res = retried = retry.repeat(2);
	   * @param {Number} [retryCount]  Number of times to retry the sequence. If not provided, retry the sequence indefinitely.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */
	  observableProto.retry = function (retryCount) {
	    return enumerableRepeat(this, retryCount).catchError();
	  };
	
	  /**
	   *  Repeats the source observable sequence upon error each time the notifier emits or until it successfully terminates. 
	   *  if the notifier completes, the observable sequence completes.
	   *
	   * @example
	   *  var timer = Observable.timer(500);
	   *  var source = observable.retryWhen(timer);
	   * @param {Observable} [notifier] An observable that triggers the retries or completes the observable with onNext or onCompleted respectively.
	   * @returns {Observable} An observable sequence producing the elements of the given sequence repeatedly until it terminates successfully.
	   */
	  observableProto.retryWhen = function (notifier) {
	    return enumerableRepeat(this).catchErrorWhen(notifier);
	  };
	  /**
	   *  Applies an accumulator function over an observable sequence and returns each intermediate result. The optional seed value is used as the initial accumulator value.
	   *  For aggregation behavior with no intermediate results, see Observable.aggregate.
	   * @example
	   *  var res = source.scan(function (acc, x) { return acc + x; });
	   *  var res = source.scan(0, function (acc, x) { return acc + x; });
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing the accumulated values.
	   */
	  observableProto.scan = function () {
	    var hasSeed = false, seed, accumulator, source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[0];
	      accumulator = arguments[1];
	    } else {
	      accumulator = arguments[0];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe (
	        function (x) {
	          !hasValue && (hasValue = true);
	          try {
	            if (hasAccumulation) {
	              accumulation = accumulator(accumulation, x);
	            } else {
	              accumulation = hasSeed ? accumulator(seed, x) : x;
	              hasAccumulation = true;
	            }
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	
	          o.onNext(accumulation);
	        },
	        function (e) { o.onError(e); },
	        function () {
	          !hasValue && hasSeed && o.onNext(seed);
	          o.onCompleted();
	        }
	      );
	    }, source);
	  };
	
	  /**
	   *  Bypasses a specified number of elements at the end of an observable sequence.
	   * @description
	   *  This operator accumulates a queue with a length enough to store the first `count` elements. As more elements are
	   *  received, elements are taken from the front of the queue and produced on the result sequence. This causes elements to be delayed.
	   * @param count Number of elements to bypass at the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the source sequence elements except for the bypassed ones at the end.
	   */
	  observableProto.skipLast = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && o.onNext(q.shift());
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Prepends a sequence of values to an observable sequence with an optional scheduler and an argument list of values to prepend.
	   *  @example
	   *  var res = source.startWith(1, 2, 3);
	   *  var res = source.startWith(Rx.Scheduler.timeout, 1, 2, 3);
	   * @param {Arguments} args The specified values to prepend to the observable sequence
	   * @returns {Observable} The source sequence prepended with the specified values.
	   */
	  observableProto.startWith = function () {
	    var values, scheduler, start = 0;
	    if (!!arguments.length && isScheduler(arguments[0])) {
	      scheduler = arguments[0];
	      start = 1;
	    } else {
	      scheduler = immediateScheduler;
	    }
	    for(var args = [], i = start, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	    return enumerableOf([observableFromArray(args, scheduler), this]).concat();
	  };
	
	  /**
	   *  Returns a specified number of contiguous elements from the end of an observable sequence.
	   * @description
	   *  This operator accumulates a buffer with a length enough to store elements count elements. Upon completion of
	   *  the source sequence, this buffer is drained on the result sequence. This causes the elements to be delayed.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLast = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && q.shift();
	      }, function (e) { o.onError(e); }, function () {
	        while (q.length > 0) { o.onNext(q.shift()); }
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Returns an array with the specified number of contiguous elements from the end of an observable sequence.
	   *
	   * @description
	   *  This operator accumulates a buffer with a length enough to store count elements. Upon completion of the
	   *  source sequence, this buffer is produced on the result sequence.
	   * @param {Number} count Number of elements to take from the end of the source sequence.
	   * @returns {Observable} An observable sequence containing a single array with the specified number of elements from the end of the source sequence.
	   */
	  observableProto.takeLastBuffer = function (count) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        q.push(x);
	        q.length > count && q.shift();
	      }, function (e) { o.onError(e); }, function () {
	        o.onNext(q);
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on element count information.
	   *
	   *  var res = xs.windowWithCount(10);
	   *  var res = xs.windowWithCount(10, 1);
	   * @param {Number} count Length of each window.
	   * @param {Number} [skip] Number of elements to skip between creation of consecutive windows. If not specified, defaults to the count.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithCount = function (count, skip) {
	    var source = this;
	    +count || (count = 0);
	    Math.abs(count) === Infinity && (count = 0);
	    if (count <= 0) { throw new ArgumentOutOfRangeError(); }
	    skip == null && (skip = count);
	    +skip || (skip = 0);
	    Math.abs(skip) === Infinity && (skip = 0);
	
	    if (skip <= 0) { throw new ArgumentOutOfRangeError(); }
	    return new AnonymousObservable(function (observer) {
	      var m = new SingleAssignmentDisposable(),
	        refCountDisposable = new RefCountDisposable(m),
	        n = 0,
	        q = [];
	
	      function createWindow () {
	        var s = new Subject();
	        q.push(s);
	        observer.onNext(addRef(s, refCountDisposable));
	      }
	
	      createWindow();
	
	      m.setDisposable(source.subscribe(
	        function (x) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
	          var c = n - count + 1;
	          c >= 0 && c % skip === 0 && q.shift().onCompleted();
	          ++n % skip === 0 && createWindow();
	        },
	        function (e) {
	          while (q.length > 0) { q.shift().onError(e); }
	          observer.onError(e);
	        },
	        function () {
	          while (q.length > 0) { q.shift().onCompleted(); }
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };
	
	  function concatMap(source, selector, thisArg) {
	    var selectorFunc = bindCallback(selector, thisArg, 3);
	    return source.map(function (x, i) {
	      var result = selectorFunc(x, i, source);
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
	      return result;
	    }).concatAll();
	  }
	
	  /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.concatMap(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.concatMap(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the
	   * source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */
	  observableProto.selectConcat = observableProto.concatMap = function (selector, resultSelector, thisArg) {
	    if (isFunction(selector) && isFunction(resultSelector)) {
	      return this.concatMap(function (x, i) {
	        var selectorResult = selector(x, i);
	        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
	        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
	
	        return selectorResult.map(function (y, i2) {
	          return resultSelector(x, y, i, i2);
	        });
	      });
	    }
	    return isFunction(selector) ?
	      concatMap(this, selector, thisArg) :
	      concatMap(this, function () { return selector; });
	  };
	
	  /**
	   * Projects each notification of an observable sequence to an observable sequence and concats the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.concatMapObserver = observableProto.selectConcatObserver = function(onNext, onError, onCompleted, thisArg) {
	    var source = this,
	        onNextFunc = bindCallback(onNext, thisArg, 2),
	        onErrorFunc = bindCallback(onError, thisArg, 1),
	        onCompletedFunc = bindCallback(onCompleted, thisArg, 0);
	    return new AnonymousObservable(function (observer) {
	      var index = 0;
	      return source.subscribe(
	        function (x) {
	          var result;
	          try {
	            result = onNextFunc(x, index++);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	        },
	        function (err) {
	          var result;
	          try {
	            result = onErrorFunc(err);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        },
	        function () {
	          var result;
	          try {
	            result = onCompletedFunc();
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        });
	    }, this).concatAll();
	  };
	
	    /**
	     *  Returns the elements of the specified sequence or the specified value in a singleton sequence if the sequence is empty.
	     *
	     *  var res = obs = xs.defaultIfEmpty();
	     *  2 - obs = xs.defaultIfEmpty(false);
	     *
	     * @memberOf Observable#
	     * @param defaultValue The value to return if the sequence is empty. If not provided, this defaults to null.
	     * @returns {Observable} An observable sequence that contains the specified default value if the source is empty; otherwise, the elements of the source itself.
	     */
	    observableProto.defaultIfEmpty = function (defaultValue) {
	      var source = this;
	      defaultValue === undefined && (defaultValue = null);
	      return new AnonymousObservable(function (observer) {
	        var found = false;
	        return source.subscribe(function (x) {
	          found = true;
	          observer.onNext(x);
	        },
	        function (e) { observer.onError(e); }, 
	        function () {
	          !found && observer.onNext(defaultValue);
	          observer.onCompleted();
	        });
	      }, source);
	    };
	
	  // Swap out for Array.findIndex
	  function arrayIndexOfComparer(array, item, comparer) {
	    for (var i = 0, len = array.length; i < len; i++) {
	      if (comparer(array[i], item)) { return i; }
	    }
	    return -1;
	  }
	
	  function HashSet(comparer) {
	    this.comparer = comparer;
	    this.set = [];
	  }
	  HashSet.prototype.push = function(value) {
	    var retValue = arrayIndexOfComparer(this.set, value, this.comparer) === -1;
	    retValue && this.set.push(value);
	    return retValue;
	  };
	
	  /**
	   *  Returns an observable sequence that contains only distinct elements according to the keySelector and the comparer.
	   *  Usage of this operator should be considered carefully due to the maintenance of an internal lookup structure which can grow large.
	   *
	   * @example
	   *  var res = obs = xs.distinct();
	   *  2 - obs = xs.distinct(function (x) { return x.id; });
	   *  2 - obs = xs.distinct(function (x) { return x.id; }, function (a,b) { return a === b; });
	   * @param {Function} [keySelector]  A function to compute the comparison key for each element.
	   * @param {Function} [comparer]  Used to compare items in the collection.
	   * @returns {Observable} An observable sequence only containing the distinct elements, based on a computed key value, from the source sequence.
	   */
	  observableProto.distinct = function (keySelector, comparer) {
	    var source = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var hashSet = new HashSet(comparer);
	      return source.subscribe(function (x) {
	        var key = x;
	
	        if (keySelector) {
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        hashSet.push(key) && o.onNext(x);
	      },
	      function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, this);
	  };
	
	  /**
	   *  Groups the elements of an observable sequence according to a specified key selector function and comparer and selects the resulting elements by using a specified function.
	   *
	   * @example
	   *  var res = observable.groupBy(function (x) { return x.id; });
	   *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; });
	   *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; }, function (x) { return x.toString(); });
	   * @param {Function} keySelector A function to extract the key for each element.
	   * @param {Function} [elementSelector]  A function to map each source element to an element in an observable group.
	   * @param {Function} [comparer] Used to determine whether the objects are equal.
	   * @returns {Observable} A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	   */
	  observableProto.groupBy = function (keySelector, elementSelector, comparer) {
	    return this.groupByUntil(keySelector, elementSelector, observableNever, comparer);
	  };
	
	    /**
	     *  Groups the elements of an observable sequence according to a specified key selector function.
	     *  A duration selector function is used to control the lifetime of groups. When a group expires, it receives an OnCompleted notification. When a new element with the same
	     *  key value as a reclaimed group occurs, the group will be reborn with a new lifetime request.
	     *
	     * @example
	     *  var res = observable.groupByUntil(function (x) { return x.id; }, null,  function () { return Rx.Observable.never(); });
	     *  2 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); });
	     *  3 - observable.groupBy(function (x) { return x.id; }), function (x) { return x.name; },  function () { return Rx.Observable.never(); }, function (x) { return x.toString(); });
	     * @param {Function} keySelector A function to extract the key for each element.
	     * @param {Function} durationSelector A function to signal the expiration of a group.
	     * @param {Function} [comparer] Used to compare objects. When not specified, the default comparer is used.
	     * @returns {Observable}
	     *  A sequence of observable groups, each of which corresponds to a unique key value, containing all elements that share that same key value.
	     *  If a group's lifetime expires, a new group with the same key value can be created once an element with such a key value is encoutered.
	     *
	     */
	    observableProto.groupByUntil = function (keySelector, elementSelector, durationSelector, comparer) {
	      var source = this;
	      elementSelector || (elementSelector = identity);
	      comparer || (comparer = defaultComparer);
	      return new AnonymousObservable(function (observer) {
	        function handleError(e) { return function (item) { item.onError(e); }; }
	        var map = new Dictionary(0, comparer),
	          groupDisposable = new CompositeDisposable(),
	          refCountDisposable = new RefCountDisposable(groupDisposable);
	
	        groupDisposable.add(source.subscribe(function (x) {
	          var key;
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            map.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	
	          var fireNewMapEntry = false,
	            writer = map.tryGetValue(key);
	          if (!writer) {
	            writer = new Subject();
	            map.set(key, writer);
	            fireNewMapEntry = true;
	          }
	
	          if (fireNewMapEntry) {
	            var group = new GroupedObservable(key, writer, refCountDisposable),
	              durationGroup = new GroupedObservable(key, writer);
	            try {
	              duration = durationSelector(durationGroup);
	            } catch (e) {
	              map.getValues().forEach(handleError(e));
	              observer.onError(e);
	              return;
	            }
	
	            observer.onNext(group);
	
	            var md = new SingleAssignmentDisposable();
	            groupDisposable.add(md);
	
	            var expire = function () {
	              map.remove(key) && writer.onCompleted();
	              groupDisposable.remove(md);
	            };
	
	            md.setDisposable(duration.take(1).subscribe(
	              noop,
	              function (exn) {
	                map.getValues().forEach(handleError(exn));
	                observer.onError(exn);
	              },
	              expire)
	            );
	          }
	
	          var element;
	          try {
	            element = elementSelector(x);
	          } catch (e) {
	            map.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	
	          writer.onNext(element);
	      }, function (ex) {
	        map.getValues().forEach(handleError(ex));
	        observer.onError(ex);
	      }, function () {
	        map.getValues().forEach(function (item) { item.onCompleted(); });
	        observer.onCompleted();
	      }));
	
	      return refCountDisposable;
	    }, source);
	  };
	
	  var MapObservable = (function (__super__) {
	    inherits(MapObservable, __super__);
	
	    function MapObservable(source, selector, thisArg) {
	      this.source = source;
	      this.selector = bindCallback(selector, thisArg, 3);
	      __super__.call(this);
	    }
	
	    MapObservable.prototype.internalMap = function (selector, thisArg) {
	      var self = this;
	      return new MapObservable(this.source, function (x, i, o) { return selector.call(this, self.selector(x, i, o), i, o); }, thisArg)
	    };
	
	    MapObservable.prototype.subscribeCore = function (observer) {
	      return this.source.subscribe(new MapObserver(observer, this.selector, this));
	    };
	
	    return MapObservable;
	
	  }(ObservableBase));
	
	  function MapObserver(observer, selector, source) {
	    this.observer = observer;
	    this.selector = selector;
	    this.source = source;
	    this.i = 0;
	    this.isStopped = false;
	  }
	
	  MapObserver.prototype.onNext = function(x) {
	    if (this.isStopped) { return; }
	    var result = tryCatch(this.selector).call(this, x, this.i++, this.source);
	    if (result === errorObj) {
	      return this.observer.onError(result.e);
	    }
	    this.observer.onNext(result);
	  };
	  MapObserver.prototype.onError = function (e) {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onError(e); }
	  };
	  MapObserver.prototype.onCompleted = function () {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onCompleted(); }
	  };
	  MapObserver.prototype.dispose = function() { this.isStopped = true; };
	  MapObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }
	
	    return false;
	  };
	
	  /**
	  * Projects each element of an observable sequence into a new form by incorporating the element's index.
	  * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source.
	  */
	  observableProto.map = observableProto.select = function (selector, thisArg) {
	    var selectorFn = typeof selector === 'function' ? selector : function () { return selector; };
	    return this instanceof MapObservable ?
	      this.internalMap(selectorFn, thisArg) :
	      new MapObservable(this, selectorFn, thisArg);
	  };
	
	  /**
	   * Retrieves the value of a specified nested property from all elements in
	   * the Observable sequence.
	   * @param {Arguments} arguments The nested properties to pluck.
	   * @returns {Observable} Returns a new Observable sequence of property values.
	   */
	  observableProto.pluck = function () {
	    var args = arguments, len = arguments.length;
	    if (len === 0) { throw new Error('List of properties cannot be empty.'); }
	    return this.map(function (x) {
	      var currentProp = x;
	      for (var i = 0; i < len; i++) {
	        var p = currentProp[args[i]];
	        if (typeof p !== 'undefined') {
	          currentProp = p;
	        } else {
	          return undefined;
	        }
	      }
	      return currentProp;
	    });
	  };
	
	  function flatMap(source, selector, thisArg) {
	    var selectorFunc = bindCallback(selector, thisArg, 3);
	    return source.map(function (x, i) {
	      var result = selectorFunc(x, i, source);
	      isPromise(result) && (result = observableFromPromise(result));
	      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
	      return result;
	    }).mergeAll();
	  }
	
	  /**
	   *  One of the Following:
	   *  Projects each element of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   * @example
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); });
	   *  Or:
	   *  Projects each element of an observable sequence to an observable sequence, invokes the result selector for the source element and each of the corresponding inner sequence's elements, and merges the results into one observable sequence.
	   *
	   *  var res = source.selectMany(function (x) { return Rx.Observable.range(0, x); }, function (x, y) { return x + y; });
	   *  Or:
	   *  Projects each element of the source observable sequence to the other observable sequence and merges the resulting observable sequences into one observable sequence.
	   *
	   *  var res = source.selectMany(Rx.Observable.fromArray([1,2,3]));
	   * @param {Function} selector A transform function to apply to each element or an observable sequence to project each element from the source sequence onto which could be either an observable or Promise.
	   * @param {Function} [resultSelector]  A transform function to apply to each element of the intermediate sequence.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function collectionSelector on each element of the input sequence and then mapping each of those sequence elements and their corresponding source element to a result element.
	   */
	  observableProto.selectMany = observableProto.flatMap = function (selector, resultSelector, thisArg) {
	    if (isFunction(selector) && isFunction(resultSelector)) {
	      return this.flatMap(function (x, i) {
	        var selectorResult = selector(x, i);
	        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
	        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
	
	        return selectorResult.map(function (y, i2) {
	          return resultSelector(x, y, i, i2);
	        });
	      }, thisArg);
	    }
	    return isFunction(selector) ?
	      flatMap(this, selector, thisArg) :
	      flatMap(this, function () { return selector; });
	  };
	
	  /**
	   * Projects each notification of an observable sequence to an observable sequence and merges the resulting observable sequences into one observable sequence.
	   * @param {Function} onNext A transform function to apply to each element; the second parameter of the function represents the index of the source element.
	   * @param {Function} onError A transform function to apply when an error occurs in the source sequence.
	   * @param {Function} onCompleted A transform function to apply when the end of the source sequence is reached.
	   * @param {Any} [thisArg] An optional "this" to use to invoke each transform.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the one-to-many transform function corresponding to each notification in the input sequence.
	   */
	  observableProto.flatMapObserver = observableProto.selectManyObserver = function (onNext, onError, onCompleted, thisArg) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var index = 0;
	
	      return source.subscribe(
	        function (x) {
	          var result;
	          try {
	            result = onNext.call(thisArg, x, index++);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	        },
	        function (err) {
	          var result;
	          try {
	            result = onError.call(thisArg, err);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        },
	        function () {
	          var result;
	          try {
	            result = onCompleted.call(thisArg);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	          isPromise(result) && (result = observableFromPromise(result));
	          observer.onNext(result);
	          observer.onCompleted();
	        });
	    }, source).mergeAll();
	  };
	
	  /**
	   *  Projects each element of an observable sequence into a new sequence of observable sequences by incorporating the element's index and then
	   *  transforms an observable sequence of observable sequences into an observable sequence producing values only from the most recent observable sequence.
	   * @param {Function} selector A transform function to apply to each source element; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence whose elements are the result of invoking the transform function on each element of source producing an Observable of Observable sequences
	   *  and that at any point in time produces the elements of the most recent inner observable sequence that has been received.
	   */
	  observableProto.selectSwitch = observableProto.flatMapLatest = observableProto.switchMap = function (selector, thisArg) {
	    return this.select(selector, thisArg).switchLatest();
	  };
	
	  /**
	   * Bypasses a specified number of elements in an observable sequence and then returns the remaining elements.
	   * @param {Number} count The number of elements to skip before returning the remaining elements.
	   * @returns {Observable} An observable sequence that contains the elements that occur after the specified index in the input sequence.
	   */
	  observableProto.skip = function (count) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var remaining = count;
	      return source.subscribe(function (x) {
	        if (remaining <= 0) {
	          o.onNext(x);
	        } else {
	          remaining--;
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Bypasses elements in an observable sequence as long as a specified condition is true and then returns the remaining elements.
	   *  The element's index is used in the logic of the predicate function.
	   *
	   *  var res = source.skipWhile(function (value) { return value < 10; });
	   *  var res = source.skipWhile(function (value, index) { return value < 10 || index < 10; });
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.
	   */
	  observableProto.skipWhile = function (predicate, thisArg) {
	    var source = this,
	        callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0, running = false;
	      return source.subscribe(function (x) {
	        if (!running) {
	          try {
	            running = !callback(x, i++, source);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	        }
	        running && o.onNext(x);
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Returns a specified number of contiguous elements from the start of an observable sequence, using the specified scheduler for the edge case of take(0).
	   *
	   *  var res = source.take(5);
	   *  var res = source.take(0, Rx.Scheduler.timeout);
	   * @param {Number} count The number of elements to return.
	   * @param {Scheduler} [scheduler] Scheduler used to produce an OnCompleted message in case <paramref name="count count</paramref> is set to 0.
	   * @returns {Observable} An observable sequence that contains the specified number of elements from the start of the input sequence.
	   */
	  observableProto.take = function (count, scheduler) {
	    if (count < 0) { throw new ArgumentOutOfRangeError(); }
	    if (count === 0) { return observableEmpty(scheduler); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var remaining = count;
	      return source.subscribe(function (x) {
	        if (remaining-- > 0) {
	          o.onNext(x);
	          remaining === 0 && o.onCompleted();
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  /**
	   *  Returns elements from an observable sequence as long as a specified condition is true.
	   *  The element's index is used in the logic of the predicate function.
	   * @param {Function} predicate A function to test each element for a condition; the second parameter of the function represents the index of the source element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.
	   */
	  observableProto.takeWhile = function (predicate, thisArg) {
	    var source = this,
	        callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0, running = true;
	      return source.subscribe(function (x) {
	        if (running) {
	          try {
	            running = callback(x, i++, source);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	          if (running) {
	            o.onNext(x);
	          } else {
	            o.onCompleted();
	          }
	        }
	      }, function (e) { o.onError(e); }, function () { o.onCompleted(); });
	    }, source);
	  };
	
	  var FilterObservable = (function (__super__) {
	    inherits(FilterObservable, __super__);
	
	    function FilterObservable(source, predicate, thisArg) {
	      this.source = source;
	      this.predicate = bindCallback(predicate, thisArg, 3);
	      __super__.call(this);
	    }
	
	    FilterObservable.prototype.subscribeCore = function (observer) {
	      return this.source.subscribe(new FilterObserver(observer, this.predicate, this));
	    };
	
	    FilterObservable.prototype.internalFilter = function(predicate, thisArg) {
	      var self = this;
	      return new FilterObservable(this.source, function(x, i, o) { return self.predicate(x, i, o) && predicate.call(this, x, i, o); }, thisArg);
	    };
	
	    return FilterObservable;
	
	  }(ObservableBase));
	
	  function FilterObserver(observer, predicate, source) {
	    this.observer = observer;
	    this.predicate = predicate;
	    this.source = source;
	    this.i = 0;
	    this.isStopped = false;
	  }
	
	  FilterObserver.prototype.onNext = function(x) {
	    if (this.isStopped) { return; }
	    var shouldYield = tryCatch(this.predicate).call(this, x, this.i++, this.source);
	    if (shouldYield === errorObj) {
	      return this.observer.onError(shouldYield.e);
	    }
	    shouldYield && this.observer.onNext(x);
	  };
	  FilterObserver.prototype.onError = function (e) {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onError(e); }
	  };
	  FilterObserver.prototype.onCompleted = function () {
	    if(!this.isStopped) { this.isStopped = true; this.observer.onCompleted(); }
	  };
	  FilterObserver.prototype.dispose = function() { this.isStopped = true; };
	  FilterObserver.prototype.fail = function (e) {
	    if (!this.isStopped) {
	      this.isStopped = true;
	      this.observer.onError(e);
	      return true;
	    }
	    return false;
	  };
	
	  /**
	  *  Filters the elements of an observable sequence based on a predicate by incorporating the element's index.
	  * @param {Function} predicate A function to test each source element for a condition; the second parameter of the function represents the index of the source element.
	  * @param {Any} [thisArg] Object to use as this when executing callback.
	  * @returns {Observable} An observable sequence that contains elements from the input sequence that satisfy the condition.
	  */
	  observableProto.filter = observableProto.where = function (predicate, thisArg) {
	    return this instanceof FilterObservable ? this.internalFilter(predicate, thisArg) :
	      new FilterObservable(this, predicate, thisArg);
	  };
	
	  function extremaBy(source, keySelector, comparer) {
	    return new AnonymousObservable(function (o) {
	      var hasValue = false, lastKey = null, list = [];
	      return source.subscribe(function (x) {
	        var comparison, key;
	        try {
	          key = keySelector(x);
	        } catch (ex) {
	          o.onError(ex);
	          return;
	        }
	        comparison = 0;
	        if (!hasValue) {
	          hasValue = true;
	          lastKey = key;
	        } else {
	          try {
	            comparison = comparer(key, lastKey);
	          } catch (ex1) {
	            o.onError(ex1);
	            return;
	          }
	        }
	        if (comparison > 0) {
	          lastKey = key;
	          list = [];
	        }
	        if (comparison >= 0) { list.push(x); }
	      }, function (e) { o.onError(e); }, function () {
	        o.onNext(list);
	        o.onCompleted();
	      });
	    }, source);
	  }
	
	  function firstOnly(x) {
	    if (x.length === 0) { throw new EmptyError(); }
	    return x[0];
	  }
	
	  /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @deprecated Use #reduce instead
	   * @param {Mixed} [seed] The initial accumulator value.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */
	  observableProto.aggregate = function () {
	    var hasSeed = false, accumulator, seed, source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[0];
	      accumulator = arguments[1];
	    } else {
	      accumulator = arguments[0];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe (
	        function (x) {
	          !hasValue && (hasValue = true);
	          try {
	            if (hasAccumulation) {
	              accumulation = accumulator(accumulation, x);
	            } else {
	              accumulation = hasSeed ? accumulator(seed, x) : x;
	              hasAccumulation = true;
	            }
	          } catch (e) {
	            return o.onError(e);
	          }
	        },
	        function (e) { o.onError(e); },
	        function () {
	          hasValue && o.onNext(accumulation);
	          !hasValue && hasSeed && o.onNext(seed);
	          !hasValue && !hasSeed && o.onError(new EmptyError());
	          o.onCompleted();
	        }
	      );
	    }, source);
	  };
	
	  /**
	   * Applies an accumulator function over an observable sequence, returning the result of the aggregation as a single element in the result sequence. The specified seed value is used as the initial accumulator value.
	   * For aggregation behavior with incremental intermediate results, see Observable.scan.
	   * @param {Function} accumulator An accumulator function to be invoked on each element.
	   * @param {Any} [seed] The initial accumulator value.
	   * @returns {Observable} An observable sequence containing a single element with the final accumulator value.
	   */
	  observableProto.reduce = function (accumulator) {
	    var hasSeed = false, seed, source = this;
	    if (arguments.length === 2) {
	      hasSeed = true;
	      seed = arguments[1];
	    }
	    return new AnonymousObservable(function (o) {
	      var hasAccumulation, accumulation, hasValue;
	      return source.subscribe (
	        function (x) {
	          !hasValue && (hasValue = true);
	          try {
	            if (hasAccumulation) {
	              accumulation = accumulator(accumulation, x);
	            } else {
	              accumulation = hasSeed ? accumulator(seed, x) : x;
	              hasAccumulation = true;
	            }
	          } catch (e) {
	            return o.onError(e);
	          }
	        },
	        function (e) { o.onError(e); },
	        function () {
	          hasValue && o.onNext(accumulation);
	          !hasValue && hasSeed && o.onNext(seed);
	          !hasValue && !hasSeed && o.onError(new EmptyError());
	          o.onCompleted();
	        }
	      );
	    }, source);
	  };
	
	  /**
	   * Determines whether any element of an observable sequence satisfies a condition if present, else if any items are in the sequence.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @returns {Observable} An observable sequence containing a single element determining whether any elements in the source sequence pass the test in the specified predicate if given, else if any items are in the sequence.
	   */
	  observableProto.some = function (predicate, thisArg) {
	    var source = this;
	    return predicate ?
	      source.filter(predicate, thisArg).some() :
	      new AnonymousObservable(function (observer) {
	        return source.subscribe(function () {
	          observer.onNext(true);
	          observer.onCompleted();
	        }, function (e) { observer.onError(e); }, function () {
	          observer.onNext(false);
	          observer.onCompleted();
	        });
	      }, source);
	  };
	
	  /** @deprecated use #some instead */
	  observableProto.any = function () {
	    //deprecate('any', 'some');
	    return this.some.apply(this, arguments);
	  };
	
	  /**
	   * Determines whether an observable sequence is empty.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence is empty.
	   */
	  observableProto.isEmpty = function () {
	    return this.any().map(not);
	  };
	
	  /**
	   * Determines whether all elements of an observable sequence satisfy a condition.
	   * @param {Function} [predicate] A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element determining whether all elements in the source sequence pass the test in the specified predicate.
	   */
	  observableProto.every = function (predicate, thisArg) {
	    return this.filter(function (v) { return !predicate(v); }, thisArg).some().map(not);
	  };
	
	  /** @deprecated use #every instead */
	  observableProto.all = function () {
	    //deprecate('all', 'every');
	    return this.every.apply(this, arguments);
	  };
	
	  /**
	   * Determines whether an observable sequence includes a specified element with an optional equality comparer.
	   * @param searchElement The value to locate in the source sequence.
	   * @param {Number} [fromIndex] An equality comparer to compare elements.
	   * @returns {Observable} An observable sequence containing a single element determining whether the source sequence includes an element that has the specified value from the given index.
	   */
	  observableProto.includes = function (searchElement, fromIndex) {
	    var source = this;
	    function comparer(a, b) {
	      return (a === 0 && b === 0) || (a === b || (isNaN(a) && isNaN(b)));
	    }
	    return new AnonymousObservable(function (o) {
	      var i = 0, n = +fromIndex || 0;
	      Math.abs(n) === Infinity && (n = 0);
	      if (n < 0) {
	        o.onNext(false);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	      return source.subscribe(
	        function (x) {
	          if (i++ >= n && comparer(x, searchElement)) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(false);
	          o.onCompleted();
	        });
	    }, this);
	  };
	
	  /**
	   * @deprecated use #includes instead.
	   */
	  observableProto.contains = function (searchElement, fromIndex) {
	    //deprecate('contains', 'includes');
	    observableProto.includes(searchElement, fromIndex);
	  };
	  /**
	   * Returns an observable sequence containing a value that represents how many elements in the specified observable sequence satisfy a condition if provided, else the count of items.
	   * @example
	   * res = source.count();
	   * res = source.count(function (x) { return x > 3; });
	   * @param {Function} [predicate]A function to test each element for a condition.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with a number that represents how many elements in the input sequence satisfy the condition in the predicate function if provided, else the count of items in the sequence.
	   */
	  observableProto.count = function (predicate, thisArg) {
	    return predicate ?
	      this.filter(predicate, thisArg).count() :
	      this.reduce(function (count) { return count + 1; }, 0);
	  };
	
	  /**
	   * Returns the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   * @param {Any} searchElement Element to locate in the array.
	   * @param {Number} [fromIndex] The index to start the search.  If not specified, defaults to 0.
	   * @returns {Observable} And observable sequence containing the first index at which a given element can be found in the observable sequence, or -1 if it is not present.
	   */
	  observableProto.indexOf = function(searchElement, fromIndex) {
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var i = 0, n = +fromIndex || 0;
	      Math.abs(n) === Infinity && (n = 0);
	      if (n < 0) {
	        o.onNext(-1);
	        o.onCompleted();
	        return disposableEmpty;
	      }
	      return source.subscribe(
	        function (x) {
	          if (i >= n && x === searchElement) {
	            o.onNext(i);
	            o.onCompleted();
	          }
	          i++;
	        },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(-1);
	          o.onCompleted();
	        });
	    }, source);
	  };
	
	  /**
	   * Computes the sum of a sequence of values that are obtained by invoking an optional transform function on each element of the input sequence, else if not specified computes the sum on each item in the sequence.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the sum of the values in the source sequence.
	   */
	  observableProto.sum = function (keySelector, thisArg) {
	    return keySelector && isFunction(keySelector) ?
	      this.map(keySelector, thisArg).sum() :
	      this.reduce(function (prev, curr) { return prev + curr; }, 0);
	  };
	
	  /**
	   * Returns the elements in an observable sequence with the minimum key value according to the specified comparer.
	   * @example
	   * var res = source.minBy(function (x) { return x.value; });
	   * var res = source.minBy(function (x) { return x.value; }, function (x, y) { return x - y; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer] Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a minimum key value.
	   */
	  observableProto.minBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return extremaBy(this, keySelector, function (x, y) { return comparer(x, y) * -1; });
	  };
	
	  /**
	   * Returns the minimum element in an observable sequence according to the optional comparer else a default greater than less than check.
	   * @example
	   * var res = source.min();
	   * var res = source.min(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the minimum element in the source sequence.
	   */
	  observableProto.min = function (comparer) {
	    return this.minBy(identity, comparer).map(function (x) { return firstOnly(x); });
	  };
	
	  /**
	   * Returns the elements in an observable sequence with the maximum  key value according to the specified comparer.
	   * @example
	   * var res = source.maxBy(function (x) { return x.value; });
	   * var res = source.maxBy(function (x) { return x.value; }, function (x, y) { return x - y;; });
	   * @param {Function} keySelector Key selector function.
	   * @param {Function} [comparer]  Comparer used to compare key values.
	   * @returns {Observable} An observable sequence containing a list of zero or more elements that have a maximum key value.
	   */
	  observableProto.maxBy = function (keySelector, comparer) {
	    comparer || (comparer = defaultSubComparer);
	    return extremaBy(this, keySelector, comparer);
	  };
	
	  /**
	   * Returns the maximum value in an observable sequence according to the specified comparer.
	   * @example
	   * var res = source.max();
	   * var res = source.max(function (x, y) { return x.value - y.value; });
	   * @param {Function} [comparer] Comparer used to compare elements.
	   * @returns {Observable} An observable sequence containing a single element with the maximum element in the source sequence.
	   */
	  observableProto.max = function (comparer) {
	    return this.maxBy(identity, comparer).map(function (x) { return firstOnly(x); });
	  };
	
	  /**
	   * Computes the average of an observable sequence of values that are in the sequence or obtained by invoking a transform function on each element of the input sequence if present.
	   * @param {Function} [selector] A transform function to apply to each element.
	   * @param {Any} [thisArg] Object to use as this when executing callback.
	   * @returns {Observable} An observable sequence containing a single element with the average of the sequence of values.
	   */
	  observableProto.average = function (keySelector, thisArg) {
	    return keySelector && isFunction(keySelector) ?
	      this.map(keySelector, thisArg).average() :
	      this.reduce(function (prev, cur) {
	        return {
	          sum: prev.sum + cur,
	          count: prev.count + 1
	        };
	      }, {sum: 0, count: 0 }).map(function (s) {
	        if (s.count === 0) { throw new EmptyError(); }
	        return s.sum / s.count;
	      });
	  };
	
	  /**
	   *  Determines whether two sequences are equal by comparing the elements pairwise using a specified equality comparer.
	   *
	   * @example
	   * var res = res = source.sequenceEqual([1,2,3]);
	   * var res = res = source.sequenceEqual([{ value: 42 }], function (x, y) { return x.value === y.value; });
	   * 3 - res = source.sequenceEqual(Rx.Observable.returnValue(42));
	   * 4 - res = source.sequenceEqual(Rx.Observable.returnValue({ value: 42 }), function (x, y) { return x.value === y.value; });
	   * @param {Observable} second Second observable sequence or array to compare.
	   * @param {Function} [comparer] Comparer used to compare elements of both sequences.
	   * @returns {Observable} An observable sequence that contains a single element which indicates whether both sequences are of equal length and their corresponding elements are equal according to the specified equality comparer.
	   */
	  observableProto.sequenceEqual = function (second, comparer) {
	    var first = this;
	    comparer || (comparer = defaultComparer);
	    return new AnonymousObservable(function (o) {
	      var donel = false, doner = false, ql = [], qr = [];
	      var subscription1 = first.subscribe(function (x) {
	        var equal, v;
	        if (qr.length > 0) {
	          v = qr.shift();
	          try {
	            equal = comparer(v, x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (doner) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          ql.push(x);
	        }
	      }, function(e) { o.onError(e); }, function () {
	        donel = true;
	        if (ql.length === 0) {
	          if (qr.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (doner) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });
	
	      (isArrayLike(second) || isIterable(second)) && (second = observableFrom(second));
	      isPromise(second) && (second = observableFromPromise(second));
	      var subscription2 = second.subscribe(function (x) {
	        var equal;
	        if (ql.length > 0) {
	          var v = ql.shift();
	          try {
	            equal = comparer(v, x);
	          } catch (exception) {
	            o.onError(exception);
	            return;
	          }
	          if (!equal) {
	            o.onNext(false);
	            o.onCompleted();
	          }
	        } else if (donel) {
	          o.onNext(false);
	          o.onCompleted();
	        } else {
	          qr.push(x);
	        }
	      }, function(e) { o.onError(e); }, function () {
	        doner = true;
	        if (qr.length === 0) {
	          if (ql.length > 0) {
	            o.onNext(false);
	            o.onCompleted();
	          } else if (donel) {
	            o.onNext(true);
	            o.onCompleted();
	          }
	        }
	      });
	      return new CompositeDisposable(subscription1, subscription2);
	    }, first);
	  };
	
	  function elementAtOrDefault(source, index, hasDefault, defaultValue) {
	    if (index < 0) { throw new ArgumentOutOfRangeError(); }
	    return new AnonymousObservable(function (o) {
	      var i = index;
	      return source.subscribe(function (x) {
	        if (i-- === 0) {
	          o.onNext(x);
	          o.onCompleted();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        if (!hasDefault) {
	          o.onError(new ArgumentOutOfRangeError());
	        } else {
	          o.onNext(defaultValue);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }
	
	  /**
	   * Returns the element at a specified index in a sequence.
	   * @example
	   * var res = source.elementAt(5);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence.
	   */
	  observableProto.elementAt =  function (index) {
	    return elementAtOrDefault(this, index, false);
	  };
	
	  /**
	   * Returns the element at a specified index in a sequence or a default value if the index is out of range.
	   * @example
	   * var res = source.elementAtOrDefault(5);
	   * var res = source.elementAtOrDefault(5, 0);
	   * @param {Number} index The zero-based index of the element to retrieve.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @returns {Observable} An observable sequence that produces the element at the specified position in the source sequence, or a default value if the index is outside the bounds of the source sequence.
	   */
	  observableProto.elementAtOrDefault = function (index, defaultValue) {
	    return elementAtOrDefault(this, index, true, defaultValue);
	  };
	
	  function singleOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      var value = defaultValue, seenValue = false;
	      return source.subscribe(function (x) {
	        if (seenValue) {
	          o.onError(new Error('Sequence contains more than one element'));
	        } else {
	          value = x;
	          seenValue = true;
	        }
	      }, function (e) { o.onError(e); }, function () {
	        if (!seenValue && !hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(value);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }
	
	  /**
	   * Returns the only element of an observable sequence that satisfies the condition in the optional predicate, and reports an exception if there is not exactly one element in the observable sequence.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate.
	   */
	  observableProto.single = function (predicate, thisArg) {
	    return predicate && isFunction(predicate) ?
	      this.where(predicate, thisArg).single() :
	      singleOrDefaultAsync(this, false);
	  };
	
	  /**
	   * Returns the only element of an observable sequence that matches the predicate, or a default value if no such element exists; this method reports an exception if there is more than one element in the observable sequence.
	   * @example
	   * var res = res = source.singleOrDefault();
	   * var res = res = source.singleOrDefault(function (x) { return x === 42; });
	   * res = source.singleOrDefault(function (x) { return x === 42; }, 0);
	   * res = source.singleOrDefault(null, 0);
	   * @memberOf Observable#
	   * @param {Function} predicate A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if the index is outside the bounds of the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the single element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.singleOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate && isFunction(predicate) ?
	      this.filter(predicate, thisArg).singleOrDefault(null, defaultValue) :
	      singleOrDefaultAsync(this, true, defaultValue);
	  };
	
	  function firstOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      return source.subscribe(function (x) {
	        o.onNext(x);
	        o.onCompleted();
	      }, function (e) { o.onError(e); }, function () {
	        if (!hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(defaultValue);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }
	
	  /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate if present else the first item in the sequence.
	   * @example
	   * var res = res = source.first();
	   * var res = res = source.first(function (x) { return x > 3; });
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate if provided, else the first item in the sequence.
	   */
	  observableProto.first = function (predicate, thisArg) {
	    return predicate ?
	      this.where(predicate, thisArg).first() :
	      firstOrDefaultAsync(this, false);
	  };
	
	  /**
	   * Returns the first element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the first element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.firstOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate ?
	      this.where(predicate).firstOrDefault(null, defaultValue) :
	      firstOrDefaultAsync(this, true, defaultValue);
	  };
	
	  function lastOrDefaultAsync(source, hasDefault, defaultValue) {
	    return new AnonymousObservable(function (o) {
	      var value = defaultValue, seenValue = false;
	      return source.subscribe(function (x) {
	        value = x;
	        seenValue = true;
	      }, function (e) { o.onError(e); }, function () {
	        if (!seenValue && !hasDefault) {
	          o.onError(new EmptyError());
	        } else {
	          o.onNext(value);
	          o.onCompleted();
	        }
	      });
	    }, source);
	  }
	
	  /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate if specified, else the last element.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate.
	   */
	  observableProto.last = function (predicate, thisArg) {
	    return predicate ?
	      this.where(predicate, thisArg).last() :
	      lastOrDefaultAsync(this, false);
	  };
	
	  /**
	   * Returns the last element of an observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   * @param {Function} [predicate] A predicate function to evaluate for elements in the source sequence.
	   * @param [defaultValue] The default value if no such element exists.  If not specified, defaults to null.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} Sequence containing the last element in the observable sequence that satisfies the condition in the predicate, or a default value if no such element exists.
	   */
	  observableProto.lastOrDefault = function (predicate, defaultValue, thisArg) {
	    return predicate ?
	      this.where(predicate, thisArg).lastOrDefault(null, defaultValue) :
	      lastOrDefaultAsync(this, true, defaultValue);
	  };
	
	  function findValue (source, predicate, thisArg, yieldIndex) {
	    var callback = bindCallback(predicate, thisArg, 3);
	    return new AnonymousObservable(function (o) {
	      var i = 0;
	      return source.subscribe(function (x) {
	        var shouldRun;
	        try {
	          shouldRun = callback(x, i, source);
	        } catch (e) {
	          o.onError(e);
	          return;
	        }
	        if (shouldRun) {
	          o.onNext(yieldIndex ? i : x);
	          o.onCompleted();
	        } else {
	          i++;
	        }
	      }, function (e) { o.onError(e); }, function () {
	        o.onNext(yieldIndex ? -1 : undefined);
	        o.onCompleted();
	      });
	    }, source);
	  }
	
	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the first element that matches the conditions defined by the specified predicate, if found; otherwise, undefined.
	   */
	  observableProto.find = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, false);
	  };
	
	  /**
	   * Searches for an element that matches the conditions defined by the specified predicate, and returns
	   * an Observable sequence with the zero-based index of the first occurrence within the entire Observable sequence.
	   * @param {Function} predicate The predicate that defines the conditions of the element to search for.
	   * @param {Any} [thisArg] Object to use as `this` when executing the predicate.
	   * @returns {Observable} An Observable sequence with the zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, –1.
	  */
	  observableProto.findIndex = function (predicate, thisArg) {
	    return findValue(this, predicate, thisArg, true);
	  };
	
	  /**
	   * Converts the observable sequence to a Set if it exists.
	   * @returns {Observable} An observable sequence with a single value of a Set containing the values from the observable sequence.
	   */
	  observableProto.toSet = function () {
	    if (typeof root.Set === 'undefined') { throw new TypeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var s = new root.Set();
	      return source.subscribe(
	        function (x) { s.add(x); },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(s);
	          o.onCompleted();
	        });
	    }, source);
	  };
	
	  /**
	  * Converts the observable sequence to a Map if it exists.
	  * @param {Function} keySelector A function which produces the key for the Map.
	  * @param {Function} [elementSelector] An optional function which produces the element for the Map. If not present, defaults to the value from the observable sequence.
	  * @returns {Observable} An observable sequence with a single value of a Map containing the values from the observable sequence.
	  */
	  observableProto.toMap = function (keySelector, elementSelector) {
	    if (typeof root.Map === 'undefined') { throw new TypeError(); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var m = new root.Map();
	      return source.subscribe(
	        function (x) {
	          var key;
	          try {
	            key = keySelector(x);
	          } catch (e) {
	            o.onError(e);
	            return;
	          }
	
	          var element = x;
	          if (elementSelector) {
	            try {
	              element = elementSelector(x);
	            } catch (e) {
	              o.onError(e);
	              return;
	            }
	          }
	
	          m.set(key, element);
	        },
	        function (e) { o.onError(e); },
	        function () {
	          o.onNext(m);
	          o.onCompleted();
	        });
	    }, source);
	  };
	
	  var fnString = 'function',
	      throwString = 'throw',
	      isObject = Rx.internals.isObject;
	
	  function toThunk(obj, ctx) {
	    if (Array.isArray(obj)) {  return objectToThunk.call(ctx, obj); }
	    if (isGeneratorFunction(obj)) { return observableSpawn(obj.call(ctx)); }
	    if (isGenerator(obj)) {  return observableSpawn(obj); }
	    if (isObservable(obj)) { return observableToThunk(obj); }
	    if (isPromise(obj)) { return promiseToThunk(obj); }
	    if (typeof obj === fnString) { return obj; }
	    if (isObject(obj) || Array.isArray(obj)) { return objectToThunk.call(ctx, obj); }
	
	    return obj;
	  }
	
	  function objectToThunk(obj) {
	    var ctx = this;
	
	    return function (done) {
	      var keys = Object.keys(obj),
	          pending = keys.length,
	          results = new obj.constructor(),
	          finished;
	
	      if (!pending) {
	        timeoutScheduler.schedule(function () { done(null, results); });
	        return;
	      }
	
	      for (var i = 0, len = keys.length; i < len; i++) {
	        run(obj[keys[i]], keys[i]);
	      }
	
	      function run(fn, key) {
	        if (finished) { return; }
	        try {
	          fn = toThunk(fn, ctx);
	
	          if (typeof fn !== fnString) {
	            results[key] = fn;
	            return --pending || done(null, results);
	          }
	
	          fn.call(ctx, function(err, res) {
	            if (finished) { return; }
	
	            if (err) {
	              finished = true;
	              return done(err);
	            }
	
	            results[key] = res;
	            --pending || done(null, results);
	          });
	        } catch (e) {
	          finished = true;
	          done(e);
	        }
	      }
	    }
	  }
	
	  function observableToThunk(observable) {
	    return function (fn) {
	      var value, hasValue = false;
	      observable.subscribe(
	        function (v) {
	          value = v;
	          hasValue = true;
	        },
	        fn,
	        function () {
	          hasValue && fn(null, value);
	        });
	    }
	  }
	
	  function promiseToThunk(promise) {
	    return function(fn) {
	      promise.then(function(res) {
	        fn(null, res);
	      }, fn);
	    }
	  }
	
	  function isObservable(obj) {
	    return obj && typeof obj.subscribe === fnString;
	  }
	
	  function isGeneratorFunction(obj) {
	    return obj && obj.constructor && obj.constructor.name === 'GeneratorFunction';
	  }
	
	  function isGenerator(obj) {
	    return obj && typeof obj.next === fnString && typeof obj[throwString] === fnString;
	  }
	
	  /*
	   * Spawns a generator function which allows for Promises, Observable sequences, Arrays, Objects, Generators and functions.
	   * @param {Function} The spawning function.
	   * @returns {Function} a function which has a done continuation.
	   */
	  var observableSpawn = Rx.spawn = function (fn) {
	    var isGenFun = isGeneratorFunction(fn);
	
	    return function (done) {
	      var ctx = this,
	        gen = fn;
	
	      if (isGenFun) {
	        for(var args = [], i = 0, len = arguments.length; i < len; i++) { args.push(arguments[i]); }
	        var len = args.length,
	          hasCallback = len && typeof args[len - 1] === fnString;
	
	        done = hasCallback ? args.pop() : handleError;
	        gen = fn.apply(this, args);
	      } else {
	        done = done || handleError;
	      }
	
	      next();
	
	      function exit(err, res) {
	        timeoutScheduler.schedule(done.bind(ctx, err, res));
	      }
	
	      function next(err, res) {
	        var ret;
	
	        // multiple args
	        if (arguments.length > 2) {
	          for(var res = [], i = 1, len = arguments.length; i < len; i++) { res.push(arguments[i]); }
	        }
	
	        if (err) {
	          try {
	            ret = gen[throwString](err);
	          } catch (e) {
	            return exit(e);
	          }
	        }
	
	        if (!err) {
	          try {
	            ret = gen.next(res);
	          } catch (e) {
	            return exit(e);
	          }
	        }
	
	        if (ret.done)  {
	          return exit(null, ret.value);
	        }
	
	        ret.value = toThunk(ret.value, ctx);
	
	        if (typeof ret.value === fnString) {
	          var called = false;
	          try {
	            ret.value.call(ctx, function() {
	              if (called) {
	                return;
	              }
	
	              called = true;
	              next.apply(ctx, arguments);
	            });
	          } catch (e) {
	            timeoutScheduler.schedule(function () {
	              if (called) {
	                return;
	              }
	
	              called = true;
	              next.call(ctx, e);
	            });
	          }
	          return;
	        }
	
	        // Not supported
	        next(new TypeError('Rx.spawn only supports a function, Promise, Observable, Object or Array.'));
	      }
	    }
	  };
	
	  function handleError(err) {
	    if (!err) { return; }
	    timeoutScheduler.schedule(function() {
	      throw err;
	    });
	  }
	
	  /**
	   * Invokes the specified function asynchronously on the specified scheduler, surfacing the result through an observable sequence.
	   *
	   * @example
	   * var res = Rx.Observable.start(function () { console.log('hello'); });
	   * var res = Rx.Observable.start(function () { console.log('hello'); }, Rx.Scheduler.timeout);
	   * var res = Rx.Observable.start(function () { this.log('hello'); }, Rx.Scheduler.timeout, console);
	   *
	   * @param {Function} func Function to run asynchronously.
	   * @param {Scheduler} [scheduler]  Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param [context]  The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   *
	   * Remarks
	   * * The function is called immediately, not during the subscription of the resulting sequence.
	   * * Multiple subscriptions to the resulting sequence can observe the function's result.
	   */
	  Observable.start = function (func, context, scheduler) {
	    return observableToAsync(func, context, scheduler)();
	  };
	
	  /**
	   * Converts the function into an asynchronous function. Each invocation of the resulting asynchronous function causes an invocation of the original synchronous function on the specified scheduler.
	   * @param {Function} function Function to convert to an asynchronous function.
	   * @param {Scheduler} [scheduler] Scheduler to run the function on. If not specified, defaults to Scheduler.timeout.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @returns {Function} Asynchronous function.
	   */
	  var observableToAsync = Observable.toAsync = function (func, context, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return function () {
	      var args = arguments,
	        subject = new AsyncSubject();
	
	      scheduler.schedule(function () {
	        var result;
	        try {
	          result = func.apply(context, args);
	        } catch (e) {
	          subject.onError(e);
	          return;
	        }
	        subject.onNext(result);
	        subject.onCompleted();
	      });
	      return subject.asObservable();
	    };
	  };
	
	  /**
	   * Converts a callback function to an observable sequence.
	   *
	   * @param {Function} function Function with a callback as the last parameter to convert to an Observable sequence.
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback to produce a single item to yield on next.
	   * @returns {Function} A function, when executed with the required parameters minus the callback, produces an Observable sequence with a single value of the arguments to the callback as an array.
	   */
	  Observable.fromCallback = function (func, context, selector) {
	    return function () {
	      var len = arguments.length, args = new Array(len)
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	
	      return new AnonymousObservable(function (observer) {
	        function handler() {
	          var len = arguments.length, results = new Array(len);
	          for(var i = 0; i < len; i++) { results[i] = arguments[i]; }
	
	          if (selector) {
	            try {
	              results = selector.apply(context, results);
	            } catch (e) {
	              return observer.onError(e);
	            }
	
	            observer.onNext(results);
	          } else {
	            if (results.length <= 1) {
	              observer.onNext.apply(observer, results);
	            } else {
	              observer.onNext(results);
	            }
	          }
	
	          observer.onCompleted();
	        }
	
	        args.push(handler);
	        func.apply(context, args);
	      }).publishLast().refCount();
	    };
	  };
	
	  /**
	   * Converts a Node.js callback style function to an observable sequence.  This must be in function (err, ...) format.
	   * @param {Function} func The function to call
	   * @param {Mixed} [context] The context for the func parameter to be executed.  If not specified, defaults to undefined.
	   * @param {Function} [selector] A selector which takes the arguments from the callback minus the error to produce a single item to yield on next.
	   * @returns {Function} An async function which when applied, returns an observable sequence with the callback arguments as an array.
	   */
	  Observable.fromNodeCallback = function (func, context, selector) {
	    return function () {
	      var len = arguments.length, args = new Array(len);
	      for(var i = 0; i < len; i++) { args[i] = arguments[i]; }
	
	      return new AnonymousObservable(function (observer) {
	        function handler(err) {
	          if (err) {
	            observer.onError(err);
	            return;
	          }
	
	          var len = arguments.length, results = [];
	          for(var i = 1; i < len; i++) { results[i - 1] = arguments[i]; }
	
	          if (selector) {
	            try {
	              results = selector.apply(context, results);
	            } catch (e) {
	              return observer.onError(e);
	            }
	            observer.onNext(results);
	          } else {
	            if (results.length <= 1) {
	              observer.onNext.apply(observer, results);
	            } else {
	              observer.onNext(results);
	            }
	          }
	
	          observer.onCompleted();
	        }
	
	        args.push(handler);
	        func.apply(context, args);
	      }).publishLast().refCount();
	    };
	  };
	
	  function createListener (element, name, handler) {
	    if (element.addEventListener) {
	      element.addEventListener(name, handler, false);
	      return disposableCreate(function () {
	        element.removeEventListener(name, handler, false);
	      });
	    }
	    throw new Error('No listener found');
	  }
	
	  function createEventListener (el, eventName, handler) {
	    var disposables = new CompositeDisposable();
	
	    // Asume NodeList
	    if (Object.prototype.toString.call(el) === '[object NodeList]') {
	      for (var i = 0, len = el.length; i < len; i++) {
	        disposables.add(createEventListener(el.item(i), eventName, handler));
	      }
	    } else if (el) {
	      disposables.add(createListener(el, eventName, handler));
	    }
	
	    return disposables;
	  }
	
	  /**
	   * Configuration option to determine whether to use native events only
	   */
	  Rx.config.useNativeEvents = false;
	
	  /**
	   * Creates an observable sequence by adding an event listener to the matching DOMElement or each item in the NodeList.
	   *
	   * @example
	   *   var source = Rx.Observable.fromEvent(element, 'mouseup');
	   *
	   * @param {Object} element The DOMElement or NodeList to attach a listener.
	   * @param {String} eventName The event name to attach the observable sequence.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence of events from the specified element and the specified event.
	   */
	  Observable.fromEvent = function (element, eventName, selector) {
	    // Node.js specific
	    if (element.addListener) {
	      return fromEventPattern(
	        function (h) { element.addListener(eventName, h); },
	        function (h) { element.removeListener(eventName, h); },
	        selector);
	    }
	
	    // Use only if non-native events are allowed
	    if (!Rx.config.useNativeEvents) {
	      // Handles jq, Angular.js, Zepto, Marionette, Ember.js
	      if (typeof element.on === 'function' && typeof element.off === 'function') {
	        return fromEventPattern(
	          function (h) { element.on(eventName, h); },
	          function (h) { element.off(eventName, h); },
	          selector);
	      }
	    }
	    return new AnonymousObservable(function (observer) {
	      return createEventListener(
	        element,
	        eventName,
	        function handler (e) {
	          var results = e;
	
	          if (selector) {
	            try {
	              results = selector(arguments);
	            } catch (err) {
	              return observer.onError(err);
	            }
	          }
	
	          observer.onNext(results);
	        });
	    }).publish().refCount();
	  };
	
	  /**
	   * Creates an observable sequence from an event emitter via an addHandler/removeHandler pair.
	   * @param {Function} addHandler The function to add a handler to the emitter.
	   * @param {Function} [removeHandler] The optional function to remove a handler from an emitter.
	   * @param {Function} [selector] A selector which takes the arguments from the event handler to produce a single item to yield on next.
	   * @returns {Observable} An observable sequence which wraps an event from an event emitter
	   */
	  var fromEventPattern = Observable.fromEventPattern = function (addHandler, removeHandler, selector) {
	    return new AnonymousObservable(function (observer) {
	      function innerHandler (e) {
	        var result = e;
	        if (selector) {
	          try {
	            result = selector(arguments);
	          } catch (err) {
	            return observer.onError(err);
	          }
	        }
	        observer.onNext(result);
	      }
	
	      var returnValue = addHandler(innerHandler);
	      return disposableCreate(function () {
	        if (removeHandler) {
	          removeHandler(innerHandler, returnValue);
	        }
	      });
	    }).publish().refCount();
	  };
	
	  /**
	   * Invokes the asynchronous function, surfacing the result through an observable sequence.
	   * @param {Function} functionAsync Asynchronous function which returns a Promise to run.
	   * @returns {Observable} An observable sequence exposing the function's result value, or an exception.
	   */
	  Observable.startAsync = function (functionAsync) {
	    var promise;
	    try {
	      promise = functionAsync();
	    } catch (e) {
	      return observableThrow(e);
	    }
	    return observableFromPromise(promise);
	  }
	
	  var PausableObservable = (function (__super__) {
	
	    inherits(PausableObservable, __super__);
	
	    function subscribe(observer) {
	      var conn = this.source.publish(),
	        subscription = conn.subscribe(observer),
	        connection = disposableEmpty;
	
	      var pausable = this.pauser.distinctUntilChanged().subscribe(function (b) {
	        if (b) {
	          connection = conn.connect();
	        } else {
	          connection.dispose();
	          connection = disposableEmpty;
	        }
	      });
	
	      return new CompositeDisposable(subscription, connection, pausable);
	    }
	
	    function PausableObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();
	
	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }
	
	      __super__.call(this, subscribe, source);
	    }
	
	    PausableObservable.prototype.pause = function () {
	      this.controller.onNext(false);
	    };
	
	    PausableObservable.prototype.resume = function () {
	      this.controller.onNext(true);
	    };
	
	    return PausableObservable;
	
	  }(Observable));
	
	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausable(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausable = function (pauser) {
	    return new PausableObservable(this, pauser);
	  };
	
	  function combineLatestSource(source, subject, resultSelector) {
	    return new AnonymousObservable(function (o) {
	      var hasValue = [false, false],
	        hasValueAll = false,
	        isDone = false,
	        values = new Array(2),
	        err;
	
	      function next(x, i) {
	        values[i] = x
	        var res;
	        hasValue[i] = true;
	        if (hasValueAll || (hasValueAll = hasValue.every(identity))) {
	          if (err) {
	            o.onError(err);
	            return;
	          }
	
	          try {
	            res = resultSelector.apply(null, values);
	          } catch (ex) {
	            o.onError(ex);
	            return;
	          }
	          o.onNext(res);
	        }
	        if (isDone && values[1]) {
	          o.onCompleted();
	        }
	      }
	
	      return new CompositeDisposable(
	        source.subscribe(
	          function (x) {
	            next(x, 0);
	          },
	          function (e) {
	            if (values[1]) {
	              o.onError(e);
	            } else {
	              err = e;
	            }
	          },
	          function () {
	            isDone = true;
	            values[1] && o.onCompleted();
	          }),
	        subject.subscribe(
	          function (x) {
	            next(x, 1);
	          },
	          function (e) { o.onError(e); },
	          function () {
	            isDone = true;
	            next(true, 1);
	          })
	        );
	    }, source);
	  }
	
	  var PausableBufferedObservable = (function (__super__) {
	
	    inherits(PausableBufferedObservable, __super__);
	
	    function subscribe(o) {
	      var q = [], previousShouldFire;
	
	      var subscription =
	        combineLatestSource(
	          this.source,
	          this.pauser.distinctUntilChanged().startWith(false),
	          function (data, shouldFire) {
	            return { data: data, shouldFire: shouldFire };
	          })
	          .subscribe(
	            function (results) {
	              if (previousShouldFire !== undefined && results.shouldFire != previousShouldFire) {
	                previousShouldFire = results.shouldFire;
	                // change in shouldFire
	                if (results.shouldFire) {
	                  while (q.length > 0) {
	                    o.onNext(q.shift());
	                  }
	                }
	              } else {
	                previousShouldFire = results.shouldFire;
	                // new data
	                if (results.shouldFire) {
	                  o.onNext(results.data);
	                } else {
	                  q.push(results.data);
	                }
	              }
	            },
	            function (err) {
	              // Empty buffer before sending error
	              while (q.length > 0) {
	                o.onNext(q.shift());
	              }
	              o.onError(err);
	            },
	            function () {
	              // Empty buffer before sending completion
	              while (q.length > 0) {
	                o.onNext(q.shift());
	              }
	              o.onCompleted();
	            }
	          );
	      return subscription;
	    }
	
	    function PausableBufferedObservable(source, pauser) {
	      this.source = source;
	      this.controller = new Subject();
	
	      if (pauser && pauser.subscribe) {
	        this.pauser = this.controller.merge(pauser);
	      } else {
	        this.pauser = this.controller;
	      }
	
	      __super__.call(this, subscribe, source);
	    }
	
	    PausableBufferedObservable.prototype.pause = function () {
	      this.controller.onNext(false);
	    };
	
	    PausableBufferedObservable.prototype.resume = function () {
	      this.controller.onNext(true);
	    };
	
	    return PausableBufferedObservable;
	
	  }(Observable));
	
	  /**
	   * Pauses the underlying observable sequence based upon the observable sequence which yields true/false,
	   * and yields the values that were buffered while paused.
	   * @example
	   * var pauser = new Rx.Subject();
	   * var source = Rx.Observable.interval(100).pausableBuffered(pauser);
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.pausableBuffered = function (subject) {
	    return new PausableBufferedObservable(this, subject);
	  };
	
	  var ControlledObservable = (function (__super__) {
	
	    inherits(ControlledObservable, __super__);
	
	    function subscribe (observer) {
	      return this.source.subscribe(observer);
	    }
	
	    function ControlledObservable (source, enableQueue) {
	      __super__.call(this, subscribe, source);
	      this.subject = new ControlledSubject(enableQueue);
	      this.source = source.multicast(this.subject).refCount();
	    }
	
	    ControlledObservable.prototype.request = function (numberOfItems) {
	      if (numberOfItems == null) { numberOfItems = -1; }
	      return this.subject.request(numberOfItems);
	    };
	
	    return ControlledObservable;
	
	  }(Observable));
	
	  var ControlledSubject = (function (__super__) {
	
	    function subscribe (observer) {
	      return this.subject.subscribe(observer);
	    }
	
	    inherits(ControlledSubject, __super__);
	
	    function ControlledSubject(enableQueue) {
	      enableQueue == null && (enableQueue = true);
	
	      __super__.call(this, subscribe);
	      this.subject = new Subject();
	      this.enableQueue = enableQueue;
	      this.queue = enableQueue ? [] : null;
	      this.requestedCount = 0;
	      this.requestedDisposable = disposableEmpty;
	      this.error = null;
	      this.hasFailed = false;
	      this.hasCompleted = false;
	    }
	
	    addProperties(ControlledSubject.prototype, Observer, {
	      onCompleted: function () {
	        this.hasCompleted = true;
	        if (!this.enableQueue || this.queue.length === 0)
	          this.subject.onCompleted();
	        else
	          this.queue.push(Rx.Notification.createOnCompleted());
	      },
	      onError: function (error) {
	        this.hasFailed = true;
	        this.error = error;
	        if (!this.enableQueue || this.queue.length === 0)
	          this.subject.onError(error);
	        else
	          this.queue.push(Rx.Notification.createOnError(error));
	      },
	      onNext: function (value) {
	        var hasRequested = false;
	
	        if (this.requestedCount === 0) {
	          this.enableQueue && this.queue.push(Rx.Notification.createOnNext(value));
	        } else {
	          (this.requestedCount !== -1 && this.requestedCount-- === 0) && this.disposeCurrentRequest();
	          hasRequested = true;
	        }
	        hasRequested && this.subject.onNext(value);
	      },
	      _processRequest: function (numberOfItems) {
	        if (this.enableQueue) {
	          while ((this.queue.length >= numberOfItems && numberOfItems > 0) ||
	          (this.queue.length > 0 && this.queue[0].kind !== 'N')) {
	            var first = this.queue.shift();
	            first.accept(this.subject);
	            if (first.kind === 'N') numberOfItems--;
	            else { this.disposeCurrentRequest(); this.queue = []; }
	          }
	
	          return { numberOfItems : numberOfItems, returnValue: this.queue.length !== 0};
	        }
	
	        //TODO I don't think this is ever necessary, since termination of a sequence without a queue occurs in the onCompletion or onError function
	        //if (this.hasFailed) {
	        //  this.subject.onError(this.error);
	        //} else if (this.hasCompleted) {
	        //  this.subject.onCompleted();
	        //}
	
	        return { numberOfItems: numberOfItems, returnValue: false };
	      },
	      request: function (number) {
	        this.disposeCurrentRequest();
	        var self = this, r = this._processRequest(number);
	
	        var number = r.numberOfItems;
	        if (!r.returnValue) {
	          this.requestedCount = number;
	          this.requestedDisposable = disposableCreate(function () {
	            self.requestedCount = 0;
	          });
	
	          return this.requestedDisposable;
	        } else {
	          return disposableEmpty;
	        }
	      },
	      disposeCurrentRequest: function () {
	        this.requestedDisposable.dispose();
	        this.requestedDisposable = disposableEmpty;
	      }
	    });
	
	    return ControlledSubject;
	  }(Observable));
	
	  /**
	   * Attaches a controller to the observable sequence with the ability to queue.
	   * @example
	   * var source = Rx.Observable.interval(100).controlled();
	   * source.request(3); // Reads 3 values
	   * @param {Observable} pauser The observable sequence used to pause the underlying sequence.
	   * @returns {Observable} The observable sequence which is paused based upon the pauser.
	   */
	  observableProto.controlled = function (enableQueue) {
	    if (enableQueue == null) {  enableQueue = true; }
	    return new ControlledObservable(this, enableQueue);
	  };
	
	  var StopAndWaitObservable = (function (__super__) {
	
	    function subscribe (observer) {
	      this.subscription = this.source.subscribe(new StopAndWaitObserver(observer, this, this.subscription));
	
	      var self = this;
	      timeoutScheduler.schedule(function () { self.source.request(1); });
	
	      return this.subscription;
	    }
	
	    inherits(StopAndWaitObservable, __super__);
	
	    function StopAndWaitObservable (source) {
	      __super__.call(this, subscribe, source);
	      this.source = source;
	    }
	
	    var StopAndWaitObserver = (function (__sub__) {
	
	      inherits(StopAndWaitObserver, __sub__);
	
	      function StopAndWaitObserver (observer, observable, cancel) {
	        __sub__.call(this);
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	      }
	
	      var stopAndWaitObserverProto = StopAndWaitObserver.prototype;
	
	      stopAndWaitObserverProto.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };
	
	      stopAndWaitObserverProto.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      }
	
	      stopAndWaitObserverProto.next = function (value) {
	        this.observer.onNext(value);
	
	        var self = this;
	        timeoutScheduler.schedule(function () {
	          self.observable.source.request(1);
	        });
	      };
	
	      stopAndWaitObserverProto.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };
	
	      return StopAndWaitObserver;
	    }(AbstractObserver));
	
	    return StopAndWaitObservable;
	  }(Observable));
	
	
	  /**
	   * Attaches a stop and wait observable to the current observable.
	   * @returns {Observable} A stop and wait observable.
	   */
	  ControlledObservable.prototype.stopAndWait = function () {
	    return new StopAndWaitObservable(this);
	  };
	
	  var WindowedObservable = (function (__super__) {
	
	    function subscribe (observer) {
	      this.subscription = this.source.subscribe(new WindowedObserver(observer, this, this.subscription));
	
	      var self = this;
	      timeoutScheduler.schedule(function () {
	        self.source.request(self.windowSize);
	      });
	
	      return this.subscription;
	    }
	
	    inherits(WindowedObservable, __super__);
	
	    function WindowedObservable(source, windowSize) {
	      __super__.call(this, subscribe, source);
	      this.source = source;
	      this.windowSize = windowSize;
	    }
	
	    var WindowedObserver = (function (__sub__) {
	
	      inherits(WindowedObserver, __sub__);
	
	      function WindowedObserver(observer, observable, cancel) {
	        this.observer = observer;
	        this.observable = observable;
	        this.cancel = cancel;
	        this.received = 0;
	      }
	
	      var windowedObserverPrototype = WindowedObserver.prototype;
	
	      windowedObserverPrototype.completed = function () {
	        this.observer.onCompleted();
	        this.dispose();
	      };
	
	      windowedObserverPrototype.error = function (error) {
	        this.observer.onError(error);
	        this.dispose();
	      };
	
	      windowedObserverPrototype.next = function (value) {
	        this.observer.onNext(value);
	
	        this.received = ++this.received % this.observable.windowSize;
	        if (this.received === 0) {
	          var self = this;
	          timeoutScheduler.schedule(function () {
	            self.observable.source.request(self.observable.windowSize);
	          });
	        }
	      };
	
	      windowedObserverPrototype.dispose = function () {
	        this.observer = null;
	        if (this.cancel) {
	          this.cancel.dispose();
	          this.cancel = null;
	        }
	        __sub__.prototype.dispose.call(this);
	      };
	
	      return WindowedObserver;
	    }(AbstractObserver));
	
	    return WindowedObservable;
	  }(Observable));
	
	  /**
	   * Creates a sliding windowed observable based upon the window size.
	   * @param {Number} windowSize The number of items in the window
	   * @returns {Observable} A windowed observable based upon the window size.
	   */
	  ControlledObservable.prototype.windowed = function (windowSize) {
	    return new WindowedObservable(this, windowSize);
	  };
	
	  /**
	   * Pipes the existing Observable sequence into a Node.js Stream.
	   * @param {Stream} dest The destination Node.js stream.
	   * @returns {Stream} The destination stream.
	   */
	  observableProto.pipe = function (dest) {
	    var source = this.pausableBuffered();
	
	    function onDrain() {
	      source.resume();
	    }
	
	    dest.addListener('drain', onDrain);
	
	    source.subscribe(
	      function (x) {
	        !dest.write(String(x)) && source.pause();
	      },
	      function (err) {
	        dest.emit('error', err);
	      },
	      function () {
	        // Hack check because STDIO is not closable
	        !dest._isStdio && dest.end();
	        dest.removeListener('drain', onDrain);
	      });
	
	    source.resume();
	
	    return dest;
	  };
	
	  /**
	   * Multicasts the source sequence notifications through an instantiated subject into all uses of the sequence within a selector function. Each
	   * subscription to the resulting sequence causes a separate multicast invocation, exposing the sequence resulting from the selector function's
	   * invocation. For specializations with fixed subject types, see Publish, PublishLast, and Replay.
	   *
	   * @example
	   * 1 - res = source.multicast(observable);
	   * 2 - res = source.multicast(function () { return new Subject(); }, function (x) { return x; });
	   *
	   * @param {Function|Subject} subjectOrSubjectSelector
	   * Factory function to create an intermediate subject through which the source sequence's elements will be multicast to the selector function.
	   * Or:
	   * Subject to push source elements into.
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence subject to the policies enforced by the created subject. Specified only if <paramref name="subjectOrSubjectSelector" is a factory function.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.multicast = function (subjectOrSubjectSelector, selector) {
	    var source = this;
	    return typeof subjectOrSubjectSelector === 'function' ?
	      new AnonymousObservable(function (observer) {
	        var connectable = source.multicast(subjectOrSubjectSelector());
	        return new CompositeDisposable(selector(connectable).subscribe(observer), connectable.connect());
	      }, source) :
	      new ConnectableObservable(source, subjectOrSubjectSelector);
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of Multicast using a regular Subject.
	   *
	   * @example
	   * var resres = source.publish();
	   * var res = source.publish(function (x) { return x; });
	   *
	   * @param {Function} [selector] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all notifications of the source from the time of the subscription on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publish = function (selector) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new Subject(); }, selector) :
	      this.multicast(new Subject());
	  };
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence.
	   * This operator is a specialization of publish which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.share = function () {
	    return this.publish().refCount();
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence containing only the last notification.
	   * This operator is a specialization of Multicast using a AsyncSubject.
	   *
	   * @example
	   * var res = source.publishLast();
	   * var res = source.publishLast(function (x) { return x; });
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will only receive the last notification of the source.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishLast = function (selector) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new AsyncSubject(); }, selector) :
	      this.multicast(new AsyncSubject());
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence and starts with initialValue.
	   * This operator is a specialization of Multicast using a BehaviorSubject.
	   *
	   * @example
	   * var res = source.publishValue(42);
	   * var res = source.publishValue(function (x) { return x.select(function (y) { return y * y; }) }, 42);
	   *
	   * @param {Function} [selector] Optional selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive immediately receive the initial value, followed by all notifications of the source from the time of the subscription on.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.publishValue = function (initialValueOrSelector, initialValue) {
	    return arguments.length === 2 ?
	      this.multicast(function () {
	        return new BehaviorSubject(initialValue);
	      }, initialValueOrSelector) :
	      this.multicast(new BehaviorSubject(initialValueOrSelector));
	  };
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence and starts with an initialValue.
	   * This operator is a specialization of publishValue which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   * @param {Mixed} initialValue Initial value received by observers upon subscription.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareValue = function (initialValue) {
	    return this.publishValue(initialValue).refCount();
	  };
	
	  /**
	   * Returns an observable sequence that is the result of invoking the selector on a connectable observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of Multicast using a ReplaySubject.
	   *
	   * @example
	   * var res = source.replay(null, 3);
	   * var res = source.replay(null, 3, 500);
	   * var res = source.replay(null, 3, 500, scheduler);
	   * var res = source.replay(function (x) { return x.take(6).repeat(); }, 3, 500, scheduler);
	   *
	   * @param selector [Optional] Selector function which can use the multicasted source sequence as many times as needed, without causing multiple subscriptions to the source sequence. Subscribers to the given source will receive all the notifications of the source subject to the specified replay buffer trimming policy.
	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param windowSize [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.replay = function (selector, bufferSize, windowSize, scheduler) {
	    return selector && isFunction(selector) ?
	      this.multicast(function () { return new ReplaySubject(bufferSize, windowSize, scheduler); }, selector) :
	      this.multicast(new ReplaySubject(bufferSize, windowSize, scheduler));
	  };
	
	  /**
	   * Returns an observable sequence that shares a single subscription to the underlying sequence replaying notifications subject to a maximum time length for the replay buffer.
	   * This operator is a specialization of replay which creates a subscription when the number of observers goes from zero to one, then shares that subscription with all subsequent observers until the number of observers returns to zero, at which point the subscription is disposed.
	   *
	   * @example
	   * var res = source.shareReplay(3);
	   * var res = source.shareReplay(3, 500);
	   * var res = source.shareReplay(3, 500, scheduler);
	   *
	
	   * @param bufferSize [Optional] Maximum element count of the replay buffer.
	   * @param window [Optional] Maximum time length of the replay buffer.
	   * @param scheduler [Optional] Scheduler where connected observers within the selector function will be invoked on.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence.
	   */
	  observableProto.shareReplay = function (bufferSize, windowSize, scheduler) {
	    return this.replay(null, bufferSize, windowSize, scheduler).refCount();
	  };
	
	  var InnerSubscription = function (subject, observer) {
	    this.subject = subject;
	    this.observer = observer;
	  };
	
	  InnerSubscription.prototype.dispose = function () {
	    if (!this.subject.isDisposed && this.observer !== null) {
	      var idx = this.subject.observers.indexOf(this.observer);
	      this.subject.observers.splice(idx, 1);
	      this.observer = null;
	    }
	  };
	
	  /**
	   *  Represents a value that changes over time.
	   *  Observers can subscribe to the subject to receive the last (or initial) value and all subsequent notifications.
	   */
	  var BehaviorSubject = Rx.BehaviorSubject = (function (__super__) {
	    function subscribe(observer) {
	      checkDisposed(this);
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        observer.onNext(this.value);
	        return new InnerSubscription(this, observer);
	      }
	      if (this.hasError) {
	        observer.onError(this.error);
	      } else {
	        observer.onCompleted();
	      }
	      return disposableEmpty;
	    }
	
	    inherits(BehaviorSubject, __super__);
	
	    /**
	     *  Initializes a new instance of the BehaviorSubject class which creates a subject that caches its last value and starts with the specified value.
	     *  @param {Mixed} value Initial value sent to observers when no other value has been received by the subject yet.
	     */
	    function BehaviorSubject(value) {
	      __super__.call(this, subscribe);
	      this.value = value,
	      this.observers = [],
	      this.isDisposed = false,
	      this.isStopped = false,
	      this.hasError = false;
	    }
	
	    addProperties(BehaviorSubject.prototype, Observer, {
	      /**
	       * Gets the current value or throws an exception.
	       * Value is frozen after onCompleted is called.
	       * After onError is called always throws the specified exception.
	       * An exception is always thrown after dispose is called.
	       * @returns {Mixed} The initial value passed to the constructor until onNext is called; after which, the last value passed to onNext.
	       */
	      getValue: function () {
	          checkDisposed(this);
	          if (this.hasError) {
	              throw this.error;
	          }
	          return this.value;
	      },
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { return this.observers.length > 0; },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onCompleted();
	        }
	
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        this.hasError = true;
	        this.error = error;
	
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onError(error);
	        }
	
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.value = value;
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          os[i].onNext(value);
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	        this.value = null;
	        this.exception = null;
	      }
	    });
	
	    return BehaviorSubject;
	  }(Observable));
	
	  /**
	   * Represents an object that is both an observable sequence as well as an observer.
	   * Each notification is broadcasted to all subscribed and future observers, subject to buffer trimming policies.
	   */
	  var ReplaySubject = Rx.ReplaySubject = (function (__super__) {
	
	    var maxSafeInteger = Math.pow(2, 53) - 1;
	
	    function createRemovableDisposable(subject, observer) {
	      return disposableCreate(function () {
	        observer.dispose();
	        !subject.isDisposed && subject.observers.splice(subject.observers.indexOf(observer), 1);
	      });
	    }
	
	    function subscribe(observer) {
	      var so = new ScheduledObserver(this.scheduler, observer),
	        subscription = createRemovableDisposable(this, so);
	      checkDisposed(this);
	      this._trim(this.scheduler.now());
	      this.observers.push(so);
	
	      for (var i = 0, len = this.q.length; i < len; i++) {
	        so.onNext(this.q[i].value);
	      }
	
	      if (this.hasError) {
	        so.onError(this.error);
	      } else if (this.isStopped) {
	        so.onCompleted();
	      }
	
	      so.ensureActive();
	      return subscription;
	    }
	
	    inherits(ReplaySubject, __super__);
	
	    /**
	     *  Initializes a new instance of the ReplaySubject class with the specified buffer size, window size and scheduler.
	     *  @param {Number} [bufferSize] Maximum element count of the replay buffer.
	     *  @param {Number} [windowSize] Maximum time length of the replay buffer.
	     *  @param {Scheduler} [scheduler] Scheduler the observers are invoked on.
	     */
	    function ReplaySubject(bufferSize, windowSize, scheduler) {
	      this.bufferSize = bufferSize == null ? maxSafeInteger : bufferSize;
	      this.windowSize = windowSize == null ? maxSafeInteger : windowSize;
	      this.scheduler = scheduler || currentThreadScheduler;
	      this.q = [];
	      this.observers = [];
	      this.isStopped = false;
	      this.isDisposed = false;
	      this.hasError = false;
	      this.error = null;
	      __super__.call(this, subscribe);
	    }
	
	    addProperties(ReplaySubject.prototype, Observer.prototype, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () {
	        return this.observers.length > 0;
	      },
	      _trim: function (now) {
	        while (this.q.length > this.bufferSize) {
	          this.q.shift();
	        }
	        while (this.q.length > 0 && (now - this.q[0].interval) > this.windowSize) {
	          this.q.shift();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        var now = this.scheduler.now();
	        this.q.push({ interval: now, value: value });
	        this._trim(now);
	
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onNext(value);
	          observer.ensureActive();
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        this.error = error;
	        this.hasError = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onError(error);
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.isStopped = true;
	        var now = this.scheduler.now();
	        this._trim(now);
	        for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	          var observer = os[i];
	          observer.onCompleted();
	          observer.ensureActive();
	        }
	        this.observers.length = 0;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });
	
	    return ReplaySubject;
	  }(Observable));
	
	  var ConnectableObservable = Rx.ConnectableObservable = (function (__super__) {
	    inherits(ConnectableObservable, __super__);
	
	    function ConnectableObservable(source, subject) {
	      var hasSubscription = false,
	        subscription,
	        sourceObservable = source.asObservable();
	
	      this.connect = function () {
	        if (!hasSubscription) {
	          hasSubscription = true;
	          subscription = new CompositeDisposable(sourceObservable.subscribe(subject), disposableCreate(function () {
	            hasSubscription = false;
	          }));
	        }
	        return subscription;
	      };
	
	      __super__.call(this, function (o) { return subject.subscribe(o); });
	    }
	
	    ConnectableObservable.prototype.refCount = function () {
	      var connectableSubscription, count = 0, source = this;
	      return new AnonymousObservable(function (observer) {
	          var shouldConnect = ++count === 1,
	            subscription = source.subscribe(observer);
	          shouldConnect && (connectableSubscription = source.connect());
	          return function () {
	            subscription.dispose();
	            --count === 0 && connectableSubscription.dispose();
	          };
	      });
	    };
	
	    return ConnectableObservable;
	  }(Observable));
	
	  var Dictionary = (function () {
	
	    var primes = [1, 3, 7, 13, 31, 61, 127, 251, 509, 1021, 2039, 4093, 8191, 16381, 32749, 65521, 131071, 262139, 524287, 1048573, 2097143, 4194301, 8388593, 16777213, 33554393, 67108859, 134217689, 268435399, 536870909, 1073741789, 2147483647],
	      noSuchkey = "no such key",
	      duplicatekey = "duplicate key";
	
	    function isPrime(candidate) {
	      if ((candidate & 1) === 0) { return candidate === 2; }
	      var num1 = Math.sqrt(candidate),
	        num2 = 3;
	      while (num2 <= num1) {
	        if (candidate % num2 === 0) { return false; }
	        num2 += 2;
	      }
	      return true;
	    }
	
	    function getPrime(min) {
	      var index, num, candidate;
	      for (index = 0; index < primes.length; ++index) {
	        num = primes[index];
	        if (num >= min) { return num; }
	      }
	      candidate = min | 1;
	      while (candidate < primes[primes.length - 1]) {
	        if (isPrime(candidate)) { return candidate; }
	        candidate += 2;
	      }
	      return min;
	    }
	
	    function stringHashFn(str) {
	      var hash = 757602046;
	      if (!str.length) { return hash; }
	      for (var i = 0, len = str.length; i < len; i++) {
	        var character = str.charCodeAt(i);
	        hash = ((hash << 5) - hash) + character;
	        hash = hash & hash;
	      }
	      return hash;
	    }
	
	    function numberHashFn(key) {
	      var c2 = 0x27d4eb2d;
	      key = (key ^ 61) ^ (key >>> 16);
	      key = key + (key << 3);
	      key = key ^ (key >>> 4);
	      key = key * c2;
	      key = key ^ (key >>> 15);
	      return key;
	    }
	
	    var getHashCode = (function () {
	      var uniqueIdCounter = 0;
	
	      return function (obj) {
	        if (obj == null) { throw new Error(noSuchkey); }
	
	        // Check for built-ins before tacking on our own for any object
	        if (typeof obj === 'string') { return stringHashFn(obj); }
	        if (typeof obj === 'number') { return numberHashFn(obj); }
	        if (typeof obj === 'boolean') { return obj === true ? 1 : 0; }
	        if (obj instanceof Date) { return numberHashFn(obj.valueOf()); }
	        if (obj instanceof RegExp) { return stringHashFn(obj.toString()); }
	        if (typeof obj.valueOf === 'function') {
	          // Hack check for valueOf
	          var valueOf = obj.valueOf();
	          if (typeof valueOf === 'number') { return numberHashFn(valueOf); }
	          if (typeof valueOf === 'string') { return stringHashFn(valueOf); }
	        }
	        if (obj.hashCode) { return obj.hashCode(); }
	
	        var id = 17 * uniqueIdCounter++;
	        obj.hashCode = function () { return id; };
	        return id;
	      };
	    }());
	
	    function newEntry() {
	      return { key: null, value: null, next: 0, hashCode: 0 };
	    }
	
	    function Dictionary(capacity, comparer) {
	      if (capacity < 0) { throw new ArgumentOutOfRangeError(); }
	      if (capacity > 0) { this._initialize(capacity); }
	
	      this.comparer = comparer || defaultComparer;
	      this.freeCount = 0;
	      this.size = 0;
	      this.freeList = -1;
	    }
	
	    var dictionaryProto = Dictionary.prototype;
	
	    dictionaryProto._initialize = function (capacity) {
	      var prime = getPrime(capacity), i;
	      this.buckets = new Array(prime);
	      this.entries = new Array(prime);
	      for (i = 0; i < prime; i++) {
	        this.buckets[i] = -1;
	        this.entries[i] = newEntry();
	      }
	      this.freeList = -1;
	    };
	
	    dictionaryProto.add = function (key, value) {
	      this._insert(key, value, true);
	    };
	
	    dictionaryProto._insert = function (key, value, add) {
	      if (!this.buckets) { this._initialize(0); }
	      var index3,
	        num = getHashCode(key) & 2147483647,
	        index1 = num % this.buckets.length;
	      for (var index2 = this.buckets[index1]; index2 >= 0; index2 = this.entries[index2].next) {
	        if (this.entries[index2].hashCode === num && this.comparer(this.entries[index2].key, key)) {
	          if (add) { throw new Error(duplicatekey); }
	          this.entries[index2].value = value;
	          return;
	        }
	      }
	      if (this.freeCount > 0) {
	        index3 = this.freeList;
	        this.freeList = this.entries[index3].next;
	        --this.freeCount;
	      } else {
	        if (this.size === this.entries.length) {
	          this._resize();
	          index1 = num % this.buckets.length;
	        }
	        index3 = this.size;
	        ++this.size;
	      }
	      this.entries[index3].hashCode = num;
	      this.entries[index3].next = this.buckets[index1];
	      this.entries[index3].key = key;
	      this.entries[index3].value = value;
	      this.buckets[index1] = index3;
	    };
	
	    dictionaryProto._resize = function () {
	      var prime = getPrime(this.size * 2),
	        numArray = new Array(prime);
	      for (index = 0; index < numArray.length; ++index) {  numArray[index] = -1; }
	      var entryArray = new Array(prime);
	      for (index = 0; index < this.size; ++index) { entryArray[index] = this.entries[index]; }
	      for (var index = this.size; index < prime; ++index) { entryArray[index] = newEntry(); }
	      for (var index1 = 0; index1 < this.size; ++index1) {
	        var index2 = entryArray[index1].hashCode % prime;
	        entryArray[index1].next = numArray[index2];
	        numArray[index2] = index1;
	      }
	      this.buckets = numArray;
	      this.entries = entryArray;
	    };
	
	    dictionaryProto.remove = function (key) {
	      if (this.buckets) {
	        var num = getHashCode(key) & 2147483647,
	          index1 = num % this.buckets.length,
	          index2 = -1;
	        for (var index3 = this.buckets[index1]; index3 >= 0; index3 = this.entries[index3].next) {
	          if (this.entries[index3].hashCode === num && this.comparer(this.entries[index3].key, key)) {
	            if (index2 < 0) {
	              this.buckets[index1] = this.entries[index3].next;
	            } else {
	              this.entries[index2].next = this.entries[index3].next;
	            }
	            this.entries[index3].hashCode = -1;
	            this.entries[index3].next = this.freeList;
	            this.entries[index3].key = null;
	            this.entries[index3].value = null;
	            this.freeList = index3;
	            ++this.freeCount;
	            return true;
	          } else {
	            index2 = index3;
	          }
	        }
	      }
	      return false;
	    };
	
	    dictionaryProto.clear = function () {
	      var index, len;
	      if (this.size <= 0) { return; }
	      for (index = 0, len = this.buckets.length; index < len; ++index) {
	        this.buckets[index] = -1;
	      }
	      for (index = 0; index < this.size; ++index) {
	        this.entries[index] = newEntry();
	      }
	      this.freeList = -1;
	      this.size = 0;
	    };
	
	    dictionaryProto._findEntry = function (key) {
	      if (this.buckets) {
	        var num = getHashCode(key) & 2147483647;
	        for (var index = this.buckets[num % this.buckets.length]; index >= 0; index = this.entries[index].next) {
	          if (this.entries[index].hashCode === num && this.comparer(this.entries[index].key, key)) {
	            return index;
	          }
	        }
	      }
	      return -1;
	    };
	
	    dictionaryProto.count = function () {
	      return this.size - this.freeCount;
	    };
	
	    dictionaryProto.tryGetValue = function (key) {
	      var entry = this._findEntry(key);
	      return entry >= 0 ?
	        this.entries[entry].value :
	        undefined;
	    };
	
	    dictionaryProto.getValues = function () {
	      var index = 0, results = [];
	      if (this.entries) {
	        for (var index1 = 0; index1 < this.size; index1++) {
	          if (this.entries[index1].hashCode >= 0) {
	            results[index++] = this.entries[index1].value;
	          }
	        }
	      }
	      return results;
	    };
	
	    dictionaryProto.get = function (key) {
	      var entry = this._findEntry(key);
	      if (entry >= 0) { return this.entries[entry].value; }
	      throw new Error(noSuchkey);
	    };
	
	    dictionaryProto.set = function (key, value) {
	      this._insert(key, value, false);
	    };
	
	    dictionaryProto.containskey = function (key) {
	      return this._findEntry(key) >= 0;
	    };
	
	    return Dictionary;
	  }());
	
	  /**
	   *  Correlates the elements of two sequences based on overlapping durations.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any two overlapping elements of the left and right observable sequences. The parameters passed to the function correspond with the elements from the left and right source sequences for which overlap occurs.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.join = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (observer) {
	      var group = new CompositeDisposable();
	      var leftDone = false, rightDone = false;
	      var leftId = 0, rightId = 0;
	      var leftMap = new Dictionary(), rightMap = new Dictionary();
	
	      group.add(left.subscribe(
	        function (value) {
	          var id = leftId++;
	          var md = new SingleAssignmentDisposable();
	
	          leftMap.add(id, value);
	          group.add(md);
	
	          var expire = function () {
	            leftMap.remove(id) && leftMap.count() === 0 && leftDone && observer.onCompleted();
	            group.remove(md);
	          };
	
	          var duration;
	          try {
	            duration = leftDurationSelector(value);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	
	          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
	
	          rightMap.getValues().forEach(function (v) {
	            var result;
	            try {
	              result = resultSelector(value, v);
	            } catch (exn) {
	              observer.onError(exn);
	              return;
	            }
	
	            observer.onNext(result);
	          });
	        },
	        observer.onError.bind(observer),
	        function () {
	          leftDone = true;
	          (rightDone || leftMap.count() === 0) && observer.onCompleted();
	        })
	      );
	
	      group.add(right.subscribe(
	        function (value) {
	          var id = rightId++;
	          var md = new SingleAssignmentDisposable();
	
	          rightMap.add(id, value);
	          group.add(md);
	
	          var expire = function () {
	            rightMap.remove(id) && rightMap.count() === 0 && rightDone && observer.onCompleted();
	            group.remove(md);
	          };
	
	          var duration;
	          try {
	            duration = rightDurationSelector(value);
	          } catch (e) {
	            observer.onError(e);
	            return;
	          }
	
	          md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
	
	          leftMap.getValues().forEach(function (v) {
	            var result;
	            try {
	              result = resultSelector(v, value);
	            } catch (exn) {
	              observer.onError(exn);
	              return;
	            }
	
	            observer.onNext(result);
	          });
	        },
	        observer.onError.bind(observer),
	        function () {
	          rightDone = true;
	          (leftDone || rightMap.count() === 0) && observer.onCompleted();
	        })
	      );
	      return group;
	    }, left);
	  };
	
	  /**
	   *  Correlates the elements of two sequences based on overlapping durations, and groups the results.
	   *
	   *  @param {Observable} right The right observable sequence to join elements for.
	   *  @param {Function} leftDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the left observable sequence, used to determine overlap.
	   *  @param {Function} rightDurationSelector A function to select the duration (expressed as an observable sequence) of each element of the right observable sequence, used to determine overlap.
	   *  @param {Function} resultSelector A function invoked to compute a result element for any element of the left sequence with overlapping elements from the right observable sequence. The first parameter passed to the function is an element of the left sequence. The second parameter passed to the function is an observable sequence with elements from the right sequence that overlap with the left sequence's element.
	   *  @returns {Observable} An observable sequence that contains result elements computed from source elements that have an overlapping duration.
	   */
	  observableProto.groupJoin = function (right, leftDurationSelector, rightDurationSelector, resultSelector) {
	    var left = this;
	    return new AnonymousObservable(function (observer) {
	      var group = new CompositeDisposable();
	      var r = new RefCountDisposable(group);
	      var leftMap = new Dictionary(), rightMap = new Dictionary();
	      var leftId = 0, rightId = 0;
	
	      function handleError(e) { return function (v) { v.onError(e); }; };
	
	      group.add(left.subscribe(
	        function (value) {
	          var s = new Subject();
	          var id = leftId++;
	          leftMap.add(id, s);
	
	          var result;
	          try {
	            result = resultSelector(value, addRef(s, r));
	          } catch (e) {
	            leftMap.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	          observer.onNext(result);
	
	          rightMap.getValues().forEach(function (v) { s.onNext(v); });
	
	          var md = new SingleAssignmentDisposable();
	          group.add(md);
	
	          var expire = function () {
	            leftMap.remove(id) && s.onCompleted();
	            group.remove(md);
	          };
	
	          var duration;
	          try {
	            duration = leftDurationSelector(value);
	          } catch (e) {
	            leftMap.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	
	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            function (e) {
	              leftMap.getValues().forEach(handleError(e));
	              observer.onError(e);
	            },
	            expire)
	          );
	        },
	        function (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	        },
	        observer.onCompleted.bind(observer))
	      );
	
	      group.add(right.subscribe(
	        function (value) {
	          var id = rightId++;
	          rightMap.add(id, value);
	
	          var md = new SingleAssignmentDisposable();
	          group.add(md);
	
	          var expire = function () {
	            rightMap.remove(id);
	            group.remove(md);
	          };
	
	          var duration;
	          try {
	            duration = rightDurationSelector(value);
	          } catch (e) {
	            leftMap.getValues().forEach(handleError(e));
	            observer.onError(e);
	            return;
	          }
	          md.setDisposable(duration.take(1).subscribe(
	            noop,
	            function (e) {
	              leftMap.getValues().forEach(handleError(e));
	              observer.onError(e);
	            },
	            expire)
	          );
	
	          leftMap.getValues().forEach(function (v) { v.onNext(value); });
	        },
	        function (e) {
	          leftMap.getValues().forEach(handleError(e));
	          observer.onError(e);
	        })
	      );
	
	      return r;
	    }, left);
	  };
	
	    /**
	     *  Projects each element of an observable sequence into zero or more buffers.
	     *
	     *  @param {Mixed} bufferOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	     *  @param {Function} [bufferClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	     *  @returns {Observable} An observable sequence of windows.
	     */
	    observableProto.buffer = function (bufferOpeningsOrClosingSelector, bufferClosingSelector) {
	        return this.window.apply(this, arguments).selectMany(function (x) { return x.toArray(); });
	    };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more windows.
	   *
	   *  @param {Mixed} windowOpeningsOrClosingSelector Observable sequence whose elements denote the creation of new windows, or, a function invoked to define the boundaries of the produced windows (a new window is started when the previous one is closed, resulting in non-overlapping windows).
	   *  @param {Function} [windowClosingSelector] A function invoked to define the closing of each produced window. If a closing selector function is specified for the first parameter, this parameter is ignored.
	   *  @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.window = function (windowOpeningsOrClosingSelector, windowClosingSelector) {
	    if (arguments.length === 1 && typeof arguments[0] !== 'function') {
	      return observableWindowWithBoundaries.call(this, windowOpeningsOrClosingSelector);
	    }
	    return typeof windowOpeningsOrClosingSelector === 'function' ?
	      observableWindowWithClosingSelector.call(this, windowOpeningsOrClosingSelector) :
	      observableWindowWithOpenings.call(this, windowOpeningsOrClosingSelector, windowClosingSelector);
	  };
	
	  function observableWindowWithOpenings(windowOpenings, windowClosingSelector) {
	    return windowOpenings.groupJoin(this, windowClosingSelector, observableEmpty, function (_, win) {
	      return win;
	    });
	  }
	
	  function observableWindowWithBoundaries(windowBoundaries) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var win = new Subject(),
	        d = new CompositeDisposable(),
	        r = new RefCountDisposable(d);
	
	      observer.onNext(addRef(win, r));
	
	      d.add(source.subscribe(function (x) {
	        win.onNext(x);
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));
	
	      isPromise(windowBoundaries) && (windowBoundaries = observableFromPromise(windowBoundaries));
	
	      d.add(windowBoundaries.subscribe(function (w) {
	        win.onCompleted();
	        win = new Subject();
	        observer.onNext(addRef(win, r));
	      }, function (err) {
	        win.onError(err);
	        observer.onError(err);
	      }, function () {
	        win.onCompleted();
	        observer.onCompleted();
	      }));
	
	      return r;
	    }, source);
	  }
	
	  function observableWindowWithClosingSelector(windowClosingSelector) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var m = new SerialDisposable(),
	        d = new CompositeDisposable(m),
	        r = new RefCountDisposable(d),
	        win = new Subject();
	      observer.onNext(addRef(win, r));
	      d.add(source.subscribe(function (x) {
	          win.onNext(x);
	      }, function (err) {
	          win.onError(err);
	          observer.onError(err);
	      }, function () {
	          win.onCompleted();
	          observer.onCompleted();
	      }));
	
	      function createWindowClose () {
	        var windowClose;
	        try {
	          windowClose = windowClosingSelector();
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	
	        isPromise(windowClose) && (windowClose = observableFromPromise(windowClose));
	
	        var m1 = new SingleAssignmentDisposable();
	        m.setDisposable(m1);
	        m1.setDisposable(windowClose.take(1).subscribe(noop, function (err) {
	          win.onError(err);
	          observer.onError(err);
	        }, function () {
	          win.onCompleted();
	          win = new Subject();
	          observer.onNext(addRef(win, r));
	          createWindowClose();
	        }));
	      }
	
	      createWindowClose();
	      return r;
	    }, source);
	  }
	
	  /**
	   * Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
	   * The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as a pair.
	   * The argument passed to the N-1th triggering is held in hidden internal state until the Nth triggering occurs.
	   * @returns {Observable} An observable that triggers on successive pairs of observations from the input observable as an array.
	   */
	  observableProto.pairwise = function () {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var previous, hasPrevious = false;
	      return source.subscribe(
	        function (x) {
	          if (hasPrevious) {
	            observer.onNext([previous, x]);
	          } else {
	            hasPrevious = true;
	          }
	          previous = x;
	        },
	        observer.onError.bind(observer),
	        observer.onCompleted.bind(observer));
	    }, source);
	  };
	
	  /**
	   * Returns two observables which partition the observations of the source by the given function.
	   * The first will trigger observations for those values for which the predicate returns true.
	   * The second will trigger observations for those values where the predicate returns false.
	   * The predicate is executed once for each subscribed observer.
	   * Both also propagate all error observations arising from the source and each completes
	   * when the source completes.
	   * @param {Function} predicate
	   *    The function to determine which output Observable will trigger a particular observation.
	   * @returns {Array}
	   *    An array of observables. The first triggers when the predicate returns true,
	   *    and the second triggers when the predicate returns false.
	  */
	  observableProto.partition = function(predicate, thisArg) {
	    return [
	      this.filter(predicate, thisArg),
	      this.filter(function (x, i, o) { return !predicate.call(thisArg, x, i, o); })
	    ];
	  };
	
	  function enumerableWhile(condition, source) {
	    return new Enumerable(function () {
	      return new Enumerator(function () {
	        return condition() ?
	          { done: false, value: source } :
	          { done: true, value: undefined };
	      });
	    });
	  }
	
	   /**
	   *  Returns an observable sequence that is the result of invoking the selector on the source sequence, without sharing subscriptions.
	   *  This operator allows for a fluent style of writing queries that use the same sequence multiple times.
	   *
	   * @param {Function} selector Selector function which can use the source sequence as many times as needed, without sharing subscriptions to the source sequence.
	   * @returns {Observable} An observable sequence that contains the elements of a sequence produced by multicasting the source sequence within a selector function.
	   */
	  observableProto.letBind = observableProto['let'] = function (func) {
	    return func(this);
	  };
	
	   /**
	   *  Determines whether an observable collection contains values. There is an alias for this method called 'ifThen' for browsers <IE9
	   *
	   * @example
	   *  1 - res = Rx.Observable.if(condition, obs1);
	   *  2 - res = Rx.Observable.if(condition, obs1, obs2);
	   *  3 - res = Rx.Observable.if(condition, obs1, scheduler);
	   * @param {Function} condition The condition which determines if the thenSource or elseSource will be run.
	   * @param {Observable} thenSource The observable sequence or Promise that will be run if the condition function returns true.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the condition function returns false. If this is not provided, it defaults to Rx.Observabe.Empty with the specified scheduler.
	   * @returns {Observable} An observable sequence which is either the thenSource or elseSource.
	   */
	  Observable['if'] = Observable.ifThen = function (condition, thenSource, elseSourceOrScheduler) {
	    return observableDefer(function () {
	      elseSourceOrScheduler || (elseSourceOrScheduler = observableEmpty());
	
	      isPromise(thenSource) && (thenSource = observableFromPromise(thenSource));
	      isPromise(elseSourceOrScheduler) && (elseSourceOrScheduler = observableFromPromise(elseSourceOrScheduler));
	
	      // Assume a scheduler for empty only
	      typeof elseSourceOrScheduler.now === 'function' && (elseSourceOrScheduler = observableEmpty(elseSourceOrScheduler));
	      return condition() ? thenSource : elseSourceOrScheduler;
	    });
	  };
	
	   /**
	   *  Concatenates the observable sequences obtained by running the specified result selector for each element in source.
	   * There is an alias for this method called 'forIn' for browsers <IE9
	   * @param {Array} sources An array of values to turn into an observable sequence.
	   * @param {Function} resultSelector A function to apply to each item in the sources array to turn it into an observable sequence.
	   * @returns {Observable} An observable sequence from the concatenated observable sequences.
	   */
	  Observable['for'] = Observable.forIn = function (sources, resultSelector, thisArg) {
	    return enumerableOf(sources, resultSelector, thisArg).concat();
	  };
	
	   /**
	   *  Repeats source as long as condition holds emulating a while loop.
	   * There is an alias for this method called 'whileDo' for browsers <IE9
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */
	  var observableWhileDo = Observable['while'] = Observable.whileDo = function (condition, source) {
	    isPromise(source) && (source = observableFromPromise(source));
	    return enumerableWhile(condition, source).concat();
	  };
	
	   /**
	   *  Repeats source as long as condition holds emulating a do while loop.
	   *
	   * @param {Function} condition The condition which determines if the source will be repeated.
	   * @param {Observable} source The observable sequence that will be run if the condition function returns true.
	   * @returns {Observable} An observable sequence which is repeated as long as the condition holds.
	   */
	  observableProto.doWhile = function (condition) {
	    return observableConcat([this, observableWhileDo(condition, this)]);
	  };
	
	   /**
	   *  Uses selector to determine which source in sources to use.
	   *  There is an alias 'switchCase' for browsers <IE9.
	   *
	   * @example
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 });
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, obs0);
	   *  1 - res = Rx.Observable.case(selector, { '1': obs1, '2': obs2 }, scheduler);
	   *
	   * @param {Function} selector The function which extracts the value for to test in a case statement.
	   * @param {Array} sources A object which has keys which correspond to the case statement labels.
	   * @param {Observable} [elseSource] The observable sequence or Promise that will be run if the sources are not matched. If this is not provided, it defaults to Rx.Observabe.empty with the specified scheduler.
	   *
	   * @returns {Observable} An observable sequence which is determined by a case statement.
	   */
	  Observable['case'] = Observable.switchCase = function (selector, sources, defaultSourceOrScheduler) {
	    return observableDefer(function () {
	      isPromise(defaultSourceOrScheduler) && (defaultSourceOrScheduler = observableFromPromise(defaultSourceOrScheduler));
	      defaultSourceOrScheduler || (defaultSourceOrScheduler = observableEmpty());
	
	      typeof defaultSourceOrScheduler.now === 'function' && (defaultSourceOrScheduler = observableEmpty(defaultSourceOrScheduler));
	
	      var result = sources[selector()];
	      isPromise(result) && (result = observableFromPromise(result));
	
	      return result || defaultSourceOrScheduler;
	    });
	  };
	
	   /**
	   *  Expands an observable sequence by recursively invoking selector.
	   *
	   * @param {Function} selector Selector function to invoke for each produced element, resulting in another sequence to which the selector will be invoked recursively again.
	   * @param {Scheduler} [scheduler] Scheduler on which to perform the expansion. If not provided, this defaults to the current thread scheduler.
	   * @returns {Observable} An observable sequence containing all the elements produced by the recursive expansion.
	   */
	  observableProto.expand = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var q = [],
	        m = new SerialDisposable(),
	        d = new CompositeDisposable(m),
	        activeCount = 0,
	        isAcquired = false;
	
	      var ensureActive = function () {
	        var isOwner = false;
	        if (q.length > 0) {
	          isOwner = !isAcquired;
	          isAcquired = true;
	        }
	        if (isOwner) {
	          m.setDisposable(scheduler.scheduleRecursive(function (self) {
	            var work;
	            if (q.length > 0) {
	              work = q.shift();
	            } else {
	              isAcquired = false;
	              return;
	            }
	            var m1 = new SingleAssignmentDisposable();
	            d.add(m1);
	            m1.setDisposable(work.subscribe(function (x) {
	              observer.onNext(x);
	              var result = null;
	              try {
	                result = selector(x);
	              } catch (e) {
	                observer.onError(e);
	              }
	              q.push(result);
	              activeCount++;
	              ensureActive();
	            }, observer.onError.bind(observer), function () {
	              d.remove(m1);
	              activeCount--;
	              if (activeCount === 0) {
	                observer.onCompleted();
	              }
	            }));
	            self();
	          }));
	        }
	      };
	
	      q.push(source);
	      activeCount++;
	      ensureActive();
	      return d;
	    }, this);
	  };
	
	   /**
	   *  Runs all observable sequences in parallel and collect their last elements.
	   *
	   * @example
	   *  1 - res = Rx.Observable.forkJoin([obs1, obs2]);
	   *  1 - res = Rx.Observable.forkJoin(obs1, obs2, ...);
	   * @returns {Observable} An observable sequence with an array collecting the last elements of all the input sequences.
	   */
	  Observable.forkJoin = function () {
	    var allSources = [];
	    if (Array.isArray(arguments[0])) {
	      allSources = arguments[0];
	    } else {
	      for(var i = 0, len = arguments.length; i < len; i++) { allSources.push(arguments[i]); }
	    }
	    return new AnonymousObservable(function (subscriber) {
	      var count = allSources.length;
	      if (count === 0) {
	        subscriber.onCompleted();
	        return disposableEmpty;
	      }
	      var group = new CompositeDisposable(),
	        finished = false,
	        hasResults = new Array(count),
	        hasCompleted = new Array(count),
	        results = new Array(count);
	
	      for (var idx = 0; idx < count; idx++) {
	        (function (i) {
	          var source = allSources[i];
	          isPromise(source) && (source = observableFromPromise(source));
	          group.add(
	            source.subscribe(
	              function (value) {
	              if (!finished) {
	                hasResults[i] = true;
	                results[i] = value;
	              }
	            },
	            function (e) {
	              finished = true;
	              subscriber.onError(e);
	              group.dispose();
	            },
	            function () {
	              if (!finished) {
	                if (!hasResults[i]) {
	                    subscriber.onCompleted();
	                    return;
	                }
	                hasCompleted[i] = true;
	                for (var ix = 0; ix < count; ix++) {
	                  if (!hasCompleted[ix]) { return; }
	                }
	                finished = true;
	                subscriber.onNext(results);
	                subscriber.onCompleted();
	              }
	            }));
	        })(idx);
	      }
	
	      return group;
	    });
	  };
	
	   /**
	   *  Runs two observable sequences in parallel and combines their last elemenets.
	   *
	   * @param {Observable} second Second observable sequence.
	   * @param {Function} resultSelector Result selector function to invoke with the last elements of both sequences.
	   * @returns {Observable} An observable sequence with the result of calling the selector function with the last elements of both input sequences.
	   */
	  observableProto.forkJoin = function (second, resultSelector) {
	    var first = this;
	    return new AnonymousObservable(function (observer) {
	      var leftStopped = false, rightStopped = false,
	        hasLeft = false, hasRight = false,
	        lastLeft, lastRight,
	        leftSubscription = new SingleAssignmentDisposable(), rightSubscription = new SingleAssignmentDisposable();
	
	      isPromise(second) && (second = observableFromPromise(second));
	
	      leftSubscription.setDisposable(
	          first.subscribe(function (left) {
	            hasLeft = true;
	            lastLeft = left;
	          }, function (err) {
	            rightSubscription.dispose();
	            observer.onError(err);
	          }, function () {
	            leftStopped = true;
	            if (rightStopped) {
	              if (!hasLeft) {
	                  observer.onCompleted();
	              } else if (!hasRight) {
	                  observer.onCompleted();
	              } else {
	                var result;
	                try {
	                  result = resultSelector(lastLeft, lastRight);
	                } catch (e) {
	                  observer.onError(e);
	                  return;
	                }
	                observer.onNext(result);
	                observer.onCompleted();
	              }
	            }
	          })
	      );
	
	      rightSubscription.setDisposable(
	        second.subscribe(function (right) {
	          hasRight = true;
	          lastRight = right;
	        }, function (err) {
	          leftSubscription.dispose();
	          observer.onError(err);
	        }, function () {
	          rightStopped = true;
	          if (leftStopped) {
	            if (!hasLeft) {
	              observer.onCompleted();
	            } else if (!hasRight) {
	              observer.onCompleted();
	            } else {
	              var result;
	              try {
	                result = resultSelector(lastLeft, lastRight);
	              } catch (e) {
	                observer.onError(e);
	                return;
	              }
	              observer.onNext(result);
	              observer.onCompleted();
	            }
	          }
	        })
	      );
	
	      return new CompositeDisposable(leftSubscription, rightSubscription);
	    }, first);
	  };
	
	  /**
	   * Comonadic bind operator.
	   * @param {Function} selector A transform function to apply to each element.
	   * @param {Object} scheduler Scheduler used to execute the operation. If not specified, defaults to the ImmediateScheduler.
	   * @returns {Observable} An observable sequence which results from the comonadic bind operation.
	   */
	  observableProto.manySelect = function (selector, scheduler) {
	    isScheduler(scheduler) || (scheduler = immediateScheduler);
	    var source = this;
	    return observableDefer(function () {
	      var chain;
	
	      return source
	        .map(function (x) {
	          var curr = new ChainObservable(x);
	
	          chain && chain.onNext(x);
	          chain = curr;
	
	          return curr;
	        })
	        .tap(
	          noop,
	          function (e) { chain && chain.onError(e); },
	          function () { chain && chain.onCompleted(); }
	        )
	        .observeOn(scheduler)
	        .map(selector);
	    }, source);
	  };
	
	  var ChainObservable = (function (__super__) {
	
	    function subscribe (observer) {
	      var self = this, g = new CompositeDisposable();
	      g.add(currentThreadScheduler.schedule(function () {
	        observer.onNext(self.head);
	        g.add(self.tail.mergeAll().subscribe(observer));
	      }));
	
	      return g;
	    }
	
	    inherits(ChainObservable, __super__);
	
	    function ChainObservable(head) {
	      __super__.call(this, subscribe);
	      this.head = head;
	      this.tail = new AsyncSubject();
	    }
	
	    addProperties(ChainObservable.prototype, Observer, {
	      onCompleted: function () {
	        this.onNext(Observable.empty());
	      },
	      onError: function (e) {
	        this.onNext(Observable.throwError(e));
	      },
	      onNext: function (v) {
	        this.tail.onNext(v);
	        this.tail.onCompleted();
	      }
	    });
	
	    return ChainObservable;
	
	  }(Observable));
	
	  /** @private */
	  var Map = root.Map || (function () {
	
	    function Map() {
	      this._keys = [];
	      this._values = [];
	    }
	
	    Map.prototype.get = function (key) {
	      var i = this._keys.indexOf(key);
	      return i !== -1 ? this._values[i] : undefined;
	    };
	
	    Map.prototype.set = function (key, value) {
	      var i = this._keys.indexOf(key);
	      i !== -1 && (this._values[i] = value);
	      this._values[this._keys.push(key) - 1] = value;
	    };
	
	    Map.prototype.forEach = function (callback, thisArg) {
	      for (var i = 0, len = this._keys.length; i < len; i++) {
	        callback.call(thisArg, this._values[i], this._keys[i]);
	      }
	    };
	
	    return Map;
	  }());
	
	  /**
	   * @constructor
	   * Represents a join pattern over observable sequences.
	   */
	  function Pattern(patterns) {
	    this.patterns = patterns;
	  }
	
	  /**
	   *  Creates a pattern that matches the current plan matches and when the specified observable sequences has an available value.
	   *  @param other Observable sequence to match in addition to the current pattern.
	   *  @return {Pattern} Pattern object that matches when all observable sequences in the pattern have an available value.
	   */
	  Pattern.prototype.and = function (other) {
	    return new Pattern(this.patterns.concat(other));
	  };
	
	  /**
	   *  Matches when all observable sequences in the pattern (specified using a chain of and operators) have an available value and projects the values.
	   *  @param {Function} selector Selector that will be invoked with available values from the source sequences, in the same order of the sequences in the pattern.
	   *  @return {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  Pattern.prototype.thenDo = function (selector) {
	    return new Plan(this, selector);
	  };
	
	  function Plan(expression, selector) {
	      this.expression = expression;
	      this.selector = selector;
	  }
	
	  Plan.prototype.activate = function (externalSubscriptions, observer, deactivate) {
	    var self = this;
	    var joinObservers = [];
	    for (var i = 0, len = this.expression.patterns.length; i < len; i++) {
	      joinObservers.push(planCreateObserver(externalSubscriptions, this.expression.patterns[i], observer.onError.bind(observer)));
	    }
	    var activePlan = new ActivePlan(joinObservers, function () {
	      var result;
	      try {
	        result = self.selector.apply(self, arguments);
	      } catch (e) {
	        observer.onError(e);
	        return;
	      }
	      observer.onNext(result);
	    }, function () {
	      for (var j = 0, jlen = joinObservers.length; j < jlen; j++) {
	        joinObservers[j].removeActivePlan(activePlan);
	      }
	      deactivate(activePlan);
	    });
	    for (i = 0, len = joinObservers.length; i < len; i++) {
	      joinObservers[i].addActivePlan(activePlan);
	    }
	    return activePlan;
	  };
	
	  function planCreateObserver(externalSubscriptions, observable, onError) {
	    var entry = externalSubscriptions.get(observable);
	    if (!entry) {
	      var observer = new JoinObserver(observable, onError);
	      externalSubscriptions.set(observable, observer);
	      return observer;
	    }
	    return entry;
	  }
	
	  function ActivePlan(joinObserverArray, onNext, onCompleted) {
	    this.joinObserverArray = joinObserverArray;
	    this.onNext = onNext;
	    this.onCompleted = onCompleted;
	    this.joinObservers = new Map();
	    for (var i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      var joinObserver = this.joinObserverArray[i];
	      this.joinObservers.set(joinObserver, joinObserver);
	    }
	  }
	
	  ActivePlan.prototype.dequeue = function () {
	    this.joinObservers.forEach(function (v) { v.queue.shift(); });
	  };
	
	  ActivePlan.prototype.match = function () {
	    var i, len, hasValues = true;
	    for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	      if (this.joinObserverArray[i].queue.length === 0) {
	        hasValues = false;
	        break;
	      }
	    }
	    if (hasValues) {
	      var firstValues = [],
	          isCompleted = false;
	      for (i = 0, len = this.joinObserverArray.length; i < len; i++) {
	        firstValues.push(this.joinObserverArray[i].queue[0]);
	        this.joinObserverArray[i].queue[0].kind === 'C' && (isCompleted = true);
	      }
	      if (isCompleted) {
	        this.onCompleted();
	      } else {
	        this.dequeue();
	        var values = [];
	        for (i = 0, len = firstValues.length; i < firstValues.length; i++) {
	          values.push(firstValues[i].value);
	        }
	        this.onNext.apply(this, values);
	      }
	    }
	  };
	
	  var JoinObserver = (function (__super__) {
	    inherits(JoinObserver, __super__);
	
	    function JoinObserver(source, onError) {
	      __super__.call(this);
	      this.source = source;
	      this.onError = onError;
	      this.queue = [];
	      this.activePlans = [];
	      this.subscription = new SingleAssignmentDisposable();
	      this.isDisposed = false;
	    }
	
	    var JoinObserverPrototype = JoinObserver.prototype;
	
	    JoinObserverPrototype.next = function (notification) {
	      if (!this.isDisposed) {
	        if (notification.kind === 'E') {
	          return this.onError(notification.exception);
	        }
	        this.queue.push(notification);
	        var activePlans = this.activePlans.slice(0);
	        for (var i = 0, len = activePlans.length; i < len; i++) {
	          activePlans[i].match();
	        }
	      }
	    };
	
	    JoinObserverPrototype.error = noop;
	    JoinObserverPrototype.completed = noop;
	
	    JoinObserverPrototype.addActivePlan = function (activePlan) {
	      this.activePlans.push(activePlan);
	    };
	
	    JoinObserverPrototype.subscribe = function () {
	      this.subscription.setDisposable(this.source.materialize().subscribe(this));
	    };
	
	    JoinObserverPrototype.removeActivePlan = function (activePlan) {
	      this.activePlans.splice(this.activePlans.indexOf(activePlan), 1);
	      this.activePlans.length === 0 && this.dispose();
	    };
	
	    JoinObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      if (!this.isDisposed) {
	        this.isDisposed = true;
	        this.subscription.dispose();
	      }
	    };
	
	    return JoinObserver;
	  } (AbstractObserver));
	
	  /**
	   *  Creates a pattern that matches when both observable sequences have an available value.
	   *
	   *  @param right Observable sequence to match with the current sequence.
	   *  @return {Pattern} Pattern object that matches when both observable sequences have an available value.
	   */
	  observableProto.and = function (right) {
	    return new Pattern([this, right]);
	  };
	
	  /**
	   *  Matches when the observable sequence has an available value and projects the value.
	   *
	   *  @param {Function} selector Selector that will be invoked for values in the source sequence.
	   *  @returns {Plan} Plan that produces the projected values, to be fed (with other plans) to the when operator.
	   */
	  observableProto.thenDo = function (selector) {
	    return new Pattern([this]).thenDo(selector);
	  };
	
	  /**
	   *  Joins together the results from several patterns.
	   *
	   *  @param plans A series of plans (specified as an Array of as a series of arguments) created by use of the Then operator on patterns.
	   *  @returns {Observable} Observable sequence with the results form matching several patterns.
	   */
	  Observable.when = function () {
	    var len = arguments.length, plans;
	    if (Array.isArray(arguments[0])) {
	      plans = arguments[0];
	    } else {
	      plans = new Array(len);
	      for(var i = 0; i < len; i++) { plans[i] = arguments[i]; }
	    }
	    return new AnonymousObservable(function (o) {
	      var activePlans = [],
	          externalSubscriptions = new Map();
	      var outObserver = observerCreate(
	        function (x) { o.onNext(x); },
	        function (err) {
	          externalSubscriptions.forEach(function (v) { v.onError(err); });
	          o.onError(err);
	        },
	        function (x) { o.onCompleted(); }
	      );
	      try {
	        for (var i = 0, len = plans.length; i < len; i++) {
	          activePlans.push(plans[i].activate(externalSubscriptions, outObserver, function (activePlan) {
	            var idx = activePlans.indexOf(activePlan);
	            activePlans.splice(idx, 1);
	            activePlans.length === 0 && o.onCompleted();
	          }));
	        }
	      } catch (e) {
	        observableThrow(e).subscribe(o);
	      }
	      var group = new CompositeDisposable();
	      externalSubscriptions.forEach(function (joinObserver) {
	        joinObserver.subscribe();
	        group.add(joinObserver);
	      });
	
	      return group;
	    });
	  };
	
	  function observableTimerDate(dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithAbsolute(dueTime, function () {
	        observer.onNext(0);
	        observer.onCompleted();
	      });
	    });
	  }
	
	  function observableTimerDateAndPeriod(dueTime, period, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      var d = dueTime, p = normalizeTime(period);
	      return scheduler.scheduleRecursiveWithAbsoluteAndState(0, d, function (count, self) {
	        if (p > 0) {
	          var now = scheduler.now();
	          d = d + p;
	          d <= now && (d = now + p);
	        }
	        observer.onNext(count);
	        self(count + 1, d);
	      });
	    });
	  }
	
	  function observableTimerTimeSpan(dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      return scheduler.scheduleWithRelative(normalizeTime(dueTime), function () {
	        observer.onNext(0);
	        observer.onCompleted();
	      });
	    });
	  }
	
	  function observableTimerTimeSpanAndPeriod(dueTime, period, scheduler) {
	    return dueTime === period ?
	      new AnonymousObservable(function (observer) {
	        return scheduler.schedulePeriodicWithState(0, period, function (count) {
	          observer.onNext(count);
	          return count + 1;
	        });
	      }) :
	      observableDefer(function () {
	        return observableTimerDateAndPeriod(scheduler.now() + dueTime, period, scheduler);
	      });
	  }
	
	  /**
	   *  Returns an observable sequence that produces a value after each period.
	   *
	   * @example
	   *  1 - res = Rx.Observable.interval(1000);
	   *  2 - res = Rx.Observable.interval(1000, Rx.Scheduler.timeout);
	   *
	   * @param {Number} period Period for producing the values in the resulting sequence (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, Rx.Scheduler.timeout is used.
	   * @returns {Observable} An observable sequence that produces a value after each period.
	   */
	  var observableinterval = Observable.interval = function (period, scheduler) {
	    return observableTimerTimeSpanAndPeriod(period, period, isScheduler(scheduler) ? scheduler : timeoutScheduler);
	  };
	
	  /**
	   *  Returns an observable sequence that produces a value after dueTime has elapsed and then after each period.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) at which to produce the first value.
	   * @param {Mixed} [periodOrScheduler]  Period to produce subsequent values (specified as an integer denoting milliseconds), or the scheduler to run the timer on. If not specified, the resulting timer is not recurring.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence that produces a value after due time has elapsed and then each period.
	   */
	  var observableTimer = Observable.timer = function (dueTime, periodOrScheduler, scheduler) {
	    var period;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    if (periodOrScheduler !== undefined && typeof periodOrScheduler === 'number') {
	      period = periodOrScheduler;
	    } else if (isScheduler(periodOrScheduler)) {
	      scheduler = periodOrScheduler;
	    }
	    if (dueTime instanceof Date && period === undefined) {
	      return observableTimerDate(dueTime.getTime(), scheduler);
	    }
	    if (dueTime instanceof Date && period !== undefined) {
	      period = periodOrScheduler;
	      return observableTimerDateAndPeriod(dueTime.getTime(), period, scheduler);
	    }
	    return period === undefined ?
	      observableTimerTimeSpan(dueTime, scheduler) :
	      observableTimerTimeSpanAndPeriod(dueTime, period, scheduler);
	  };
	
	  function observableDelayTimeSpan(source, dueTime, scheduler) {
	    return new AnonymousObservable(function (observer) {
	      var active = false,
	        cancelable = new SerialDisposable(),
	        exception = null,
	        q = [],
	        running = false,
	        subscription;
	      subscription = source.materialize().timestamp(scheduler).subscribe(function (notification) {
	        var d, shouldRun;
	        if (notification.value.kind === 'E') {
	          q = [];
	          q.push(notification);
	          exception = notification.value.exception;
	          shouldRun = !running;
	        } else {
	          q.push({ value: notification.value, timestamp: notification.timestamp + dueTime });
	          shouldRun = !active;
	          active = true;
	        }
	        if (shouldRun) {
	          if (exception !== null) {
	            observer.onError(exception);
	          } else {
	            d = new SingleAssignmentDisposable();
	            cancelable.setDisposable(d);
	            d.setDisposable(scheduler.scheduleRecursiveWithRelative(dueTime, function (self) {
	              var e, recurseDueTime, result, shouldRecurse;
	              if (exception !== null) {
	                return;
	              }
	              running = true;
	              do {
	                result = null;
	                if (q.length > 0 && q[0].timestamp - scheduler.now() <= 0) {
	                  result = q.shift().value;
	                }
	                if (result !== null) {
	                  result.accept(observer);
	                }
	              } while (result !== null);
	              shouldRecurse = false;
	              recurseDueTime = 0;
	              if (q.length > 0) {
	                shouldRecurse = true;
	                recurseDueTime = Math.max(0, q[0].timestamp - scheduler.now());
	              } else {
	                active = false;
	              }
	              e = exception;
	              running = false;
	              if (e !== null) {
	                observer.onError(e);
	              } else if (shouldRecurse) {
	                self(recurseDueTime);
	              }
	            }));
	          }
	        }
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    }, source);
	  }
	
	  function observableDelayDate(source, dueTime, scheduler) {
	    return observableDefer(function () {
	      return observableDelayTimeSpan(source, dueTime - scheduler.now(), scheduler);
	    });
	  }
	
	  /**
	   *  Time shifts the observable sequence by dueTime. The relative time intervals between the values are preserved.
	   *
	   * @example
	   *  1 - res = Rx.Observable.delay(new Date());
	   *  2 - res = Rx.Observable.delay(new Date(), Rx.Scheduler.timeout);
	   *
	   *  3 - res = Rx.Observable.delay(5000);
	   *  4 - res = Rx.Observable.delay(5000, 1000, Rx.Scheduler.timeout);
	   * @memberOf Observable#
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) by which to shift the observable sequence.
	   * @param {Scheduler} [scheduler] Scheduler to run the delay timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delay = function (dueTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return dueTime instanceof Date ?
	      observableDelayDate(this, dueTime.getTime(), scheduler) :
	      observableDelayTimeSpan(this, dueTime, scheduler);
	  };
	
	  /**
	   *  Ignores values from an observable sequence which are followed by another value before dueTime.
	   * @param {Number} dueTime Duration of the debounce period for each value (specified as an integer denoting milliseconds).
	   * @param {Scheduler} [scheduler]  Scheduler to run the debounce timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The debounced sequence.
	   */
	  observableProto.debounce = observableProto.throttleWithTimeout = function (dueTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var cancelable = new SerialDisposable(), hasvalue = false, value, id = 0;
	      var subscription = source.subscribe(
	        function (x) {
	          hasvalue = true;
	          value = x;
	          id++;
	          var currentId = id,
	            d = new SingleAssignmentDisposable();
	          cancelable.setDisposable(d);
	          d.setDisposable(scheduler.scheduleWithRelative(dueTime, function () {
	            hasvalue && id === currentId && observer.onNext(value);
	            hasvalue = false;
	          }));
	        },
	        function (e) {
	          cancelable.dispose();
	          observer.onError(e);
	          hasvalue = false;
	          id++;
	        },
	        function () {
	          cancelable.dispose();
	          hasvalue && observer.onNext(value);
	          observer.onCompleted();
	          hasvalue = false;
	          id++;
	        });
	      return new CompositeDisposable(subscription, cancelable);
	    }, this);
	  };
	
	  /**
	   * @deprecated use #debounce or #throttleWithTimeout instead.
	   */
	  observableProto.throttle = function(dueTime, scheduler) {
	    //deprecate('throttle', 'debounce or throttleWithTimeout');
	    return this.debounce(dueTime, scheduler);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into zero or more windows which are produced based on timing information.
	   * @param {Number} timeSpan Length of each window (specified as an integer denoting milliseconds).
	   * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive windows (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent windows.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	    var source = this, timeShift;
	    timeShiftOrScheduler == null && (timeShift = timeSpan);
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    if (typeof timeShiftOrScheduler === 'number') {
	      timeShift = timeShiftOrScheduler;
	    } else if (isScheduler(timeShiftOrScheduler)) {
	      timeShift = timeSpan;
	      scheduler = timeShiftOrScheduler;
	    }
	    return new AnonymousObservable(function (observer) {
	      var groupDisposable,
	        nextShift = timeShift,
	        nextSpan = timeSpan,
	        q = [],
	        refCountDisposable,
	        timerD = new SerialDisposable(),
	        totalTime = 0;
	        groupDisposable = new CompositeDisposable(timerD),
	        refCountDisposable = new RefCountDisposable(groupDisposable);
	
	       function createTimer () {
	        var m = new SingleAssignmentDisposable(),
	          isSpan = false,
	          isShift = false;
	        timerD.setDisposable(m);
	        if (nextSpan === nextShift) {
	          isSpan = true;
	          isShift = true;
	        } else if (nextSpan < nextShift) {
	            isSpan = true;
	        } else {
	          isShift = true;
	        }
	        var newTotalTime = isSpan ? nextSpan : nextShift,
	          ts = newTotalTime - totalTime;
	        totalTime = newTotalTime;
	        if (isSpan) {
	          nextSpan += timeShift;
	        }
	        if (isShift) {
	          nextShift += timeShift;
	        }
	        m.setDisposable(scheduler.scheduleWithRelative(ts, function () {
	          if (isShift) {
	            var s = new Subject();
	            q.push(s);
	            observer.onNext(addRef(s, refCountDisposable));
	          }
	          isSpan && q.shift().onCompleted();
	          createTimer();
	        }));
	      };
	      q.push(new Subject());
	      observer.onNext(addRef(q[0], refCountDisposable));
	      createTimer();
	      groupDisposable.add(source.subscribe(
	        function (x) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onNext(x); }
	        },
	        function (e) {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onError(e); }
	          observer.onError(e);
	        },
	        function () {
	          for (var i = 0, len = q.length; i < len; i++) { q[i].onCompleted(); }
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };
	
	  /**
	   *  Projects each element of an observable sequence into a window that is completed when either it's full or a given amount of time has elapsed.
	   * @param {Number} timeSpan Maximum time length of a window.
	   * @param {Number} count Maximum element count of a window.
	   * @param {Scheduler} [scheduler]  Scheduler to run windowing timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence of windows.
	   */
	  observableProto.windowWithTimeOrCount = function (timeSpan, count, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var timerD = new SerialDisposable(),
	          groupDisposable = new CompositeDisposable(timerD),
	          refCountDisposable = new RefCountDisposable(groupDisposable),
	          n = 0,
	          windowId = 0,
	          s = new Subject();
	
	      function createTimer(id) {
	        var m = new SingleAssignmentDisposable();
	        timerD.setDisposable(m);
	        m.setDisposable(scheduler.scheduleWithRelative(timeSpan, function () {
	          if (id !== windowId) { return; }
	          n = 0;
	          var newId = ++windowId;
	          s.onCompleted();
	          s = new Subject();
	          observer.onNext(addRef(s, refCountDisposable));
	          createTimer(newId);
	        }));
	      }
	
	      observer.onNext(addRef(s, refCountDisposable));
	      createTimer(0);
	
	      groupDisposable.add(source.subscribe(
	        function (x) {
	          var newId = 0, newWindow = false;
	          s.onNext(x);
	          if (++n === count) {
	            newWindow = true;
	            n = 0;
	            newId = ++windowId;
	            s.onCompleted();
	            s = new Subject();
	            observer.onNext(addRef(s, refCountDisposable));
	          }
	          newWindow && createTimer(newId);
	        },
	        function (e) {
	          s.onError(e);
	          observer.onError(e);
	        }, function () {
	          s.onCompleted();
	          observer.onCompleted();
	        }
	      ));
	      return refCountDisposable;
	    }, source);
	  };
	
	    /**
	     *  Projects each element of an observable sequence into zero or more buffers which are produced based on timing information.
	     *
	     * @example
	     *  1 - res = xs.bufferWithTime(1000, scheduler); // non-overlapping segments of 1 second
	     *  2 - res = xs.bufferWithTime(1000, 500, scheduler; // segments of 1 second with time shift 0.5 seconds
	     *
	     * @param {Number} timeSpan Length of each buffer (specified as an integer denoting milliseconds).
	     * @param {Mixed} [timeShiftOrScheduler]  Interval between creation of consecutive buffers (specified as an integer denoting milliseconds), or an optional scheduler parameter. If not specified, the time shift corresponds to the timeSpan parameter, resulting in non-overlapping adjacent buffers.
	     * @param {Scheduler} [scheduler]  Scheduler to run buffer timers on. If not specified, the timeout scheduler is used.
	     * @returns {Observable} An observable sequence of buffers.
	     */
	    observableProto.bufferWithTime = function (timeSpan, timeShiftOrScheduler, scheduler) {
	        return this.windowWithTime.apply(this, arguments).selectMany(function (x) { return x.toArray(); });
	    };
	
	    /**
	     *  Projects each element of an observable sequence into a buffer that is completed when either it's full or a given amount of time has elapsed.
	     *
	     * @example
	     *  1 - res = source.bufferWithTimeOrCount(5000, 50); // 5s or 50 items in an array
	     *  2 - res = source.bufferWithTimeOrCount(5000, 50, scheduler); // 5s or 50 items in an array
	     *
	     * @param {Number} timeSpan Maximum time length of a buffer.
	     * @param {Number} count Maximum element count of a buffer.
	     * @param {Scheduler} [scheduler]  Scheduler to run bufferin timers on. If not specified, the timeout scheduler is used.
	     * @returns {Observable} An observable sequence of buffers.
	     */
	    observableProto.bufferWithTimeOrCount = function (timeSpan, count, scheduler) {
	        return this.windowWithTimeOrCount(timeSpan, count, scheduler).selectMany(function (x) {
	            return x.toArray();
	        });
	    };
	
	  /**
	   *  Records the time interval between consecutive values in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timeInterval();
	   *  2 - res = source.timeInterval(Rx.Scheduler.timeout);
	   *
	   * @param [scheduler]  Scheduler used to compute time intervals. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with time interval information on values.
	   */
	  observableProto.timeInterval = function (scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return observableDefer(function () {
	      var last = scheduler.now();
	      return source.map(function (x) {
	        var now = scheduler.now(), span = now - last;
	        last = now;
	        return { value: x, interval: span };
	      });
	    });
	  };
	
	  /**
	   *  Records the timestamp for each value in an observable sequence.
	   *
	   * @example
	   *  1 - res = source.timestamp(); // produces { value: x, timestamp: ts }
	   *  2 - res = source.timestamp(Rx.Scheduler.timeout);
	   *
	   * @param {Scheduler} [scheduler]  Scheduler used to compute timestamps. If not specified, the timeout scheduler is used.
	   * @returns {Observable} An observable sequence with timestamp information on values.
	   */
	  observableProto.timestamp = function (scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return this.map(function (x) {
	      return { value: x, timestamp: scheduler.now() };
	    });
	  };
	
	  function sampleObservable(source, sampler) {
	    return new AnonymousObservable(function (observer) {
	      var atEnd, value, hasValue;
	
	      function sampleSubscribe() {
	        if (hasValue) {
	          hasValue = false;
	          observer.onNext(value);
	        }
	        atEnd && observer.onCompleted();
	      }
	
	      return new CompositeDisposable(
	        source.subscribe(function (newValue) {
	          hasValue = true;
	          value = newValue;
	        }, observer.onError.bind(observer), function () {
	          atEnd = true;
	        }),
	        sampler.subscribe(sampleSubscribe, observer.onError.bind(observer), sampleSubscribe)
	      );
	    }, source);
	  }
	
	  /**
	   *  Samples the observable sequence at each interval.
	   *
	   * @example
	   *  1 - res = source.sample(sampleObservable); // Sampler tick sequence
	   *  2 - res = source.sample(5000); // 5 seconds
	   *  2 - res = source.sample(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Mixed} intervalOrSampler Interval at which to sample (specified as an integer denoting milliseconds) or Sampler Observable.
	   * @param {Scheduler} [scheduler]  Scheduler to run the sampling timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Sampled observable sequence.
	   */
	  observableProto.sample = observableProto.throttleLatest = function (intervalOrSampler, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return typeof intervalOrSampler === 'number' ?
	      sampleObservable(this, observableinterval(intervalOrSampler, scheduler)) :
	      sampleObservable(this, intervalOrSampler);
	  };
	
	  /**
	   *  Returns the source observable sequence or the other observable sequence if dueTime elapses.
	   * @param {Number} dueTime Absolute (specified as a Date object) or relative time (specified as an integer denoting milliseconds) when a timeout occurs.
	   * @param {Observable} [other]  Sequence to return in case of a timeout. If not specified, a timeout error throwing sequence will be used.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timeout timers on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	   */
	  observableProto.timeout = function (dueTime, other, scheduler) {
	    (other == null || typeof other === 'string') && (other = observableThrow(new Error(other || 'Timeout')));
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	
	    var source = this, schedulerMethod = dueTime instanceof Date ?
	      'scheduleWithAbsolute' :
	      'scheduleWithRelative';
	
	    return new AnonymousObservable(function (observer) {
	      var id = 0,
	        original = new SingleAssignmentDisposable(),
	        subscription = new SerialDisposable(),
	        switched = false,
	        timer = new SerialDisposable();
	
	      subscription.setDisposable(original);
	
	      function createTimer() {
	        var myId = id;
	        timer.setDisposable(scheduler[schedulerMethod](dueTime, function () {
	          if (id === myId) {
	            isPromise(other) && (other = observableFromPromise(other));
	            subscription.setDisposable(other.subscribe(observer));
	          }
	        }));
	      }
	
	      createTimer();
	
	      original.setDisposable(source.subscribe(function (x) {
	        if (!switched) {
	          id++;
	          observer.onNext(x);
	          createTimer();
	        }
	      }, function (e) {
	        if (!switched) {
	          id++;
	          observer.onError(e);
	        }
	      }, function () {
	        if (!switched) {
	          id++;
	          observer.onCompleted();
	        }
	      }));
	      return new CompositeDisposable(subscription, timer);
	    }, source);
	  };
	
	  /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithAbsoluteTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return new Date(); }
	   *  });
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning Date values.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithAbsoluteTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var first = true,
	        hasResult = false,
	        result,
	        state = initialState,
	        time;
	      return scheduler.scheduleRecursiveWithAbsolute(scheduler.now(), function (self) {
	        hasResult && observer.onNext(result);
	
	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          if (hasResult) {
	            result = resultSelector(state);
	            time = timeSelector(state);
	          }
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        if (hasResult) {
	          self(time);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };
	
	  /**
	   *  Generates an observable sequence by iterating a state from an initial state until the condition fails.
	   *
	   * @example
	   *  res = source.generateWithRelativeTime(0,
	   *      function (x) { return return true; },
	   *      function (x) { return x + 1; },
	   *      function (x) { return x; },
	   *      function (x) { return 500; }
	   *  );
	   *
	   * @param {Mixed} initialState Initial state.
	   * @param {Function} condition Condition to terminate generation (upon returning false).
	   * @param {Function} iterate Iteration step function.
	   * @param {Function} resultSelector Selector function for results produced in the sequence.
	   * @param {Function} timeSelector Time selector function to control the speed of values being produced each iteration, returning integer values denoting milliseconds.
	   * @param {Scheduler} [scheduler]  Scheduler on which to run the generator loop. If not specified, the timeout scheduler is used.
	   * @returns {Observable} The generated sequence.
	   */
	  Observable.generateWithRelativeTime = function (initialState, condition, iterate, resultSelector, timeSelector, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var first = true,
	        hasResult = false,
	        result,
	        state = initialState,
	        time;
	      return scheduler.scheduleRecursiveWithRelative(0, function (self) {
	        hasResult && observer.onNext(result);
	
	        try {
	          if (first) {
	            first = false;
	          } else {
	            state = iterate(state);
	          }
	          hasResult = condition(state);
	          if (hasResult) {
	            result = resultSelector(state);
	            time = timeSelector(state);
	          }
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	        if (hasResult) {
	          self(time);
	        } else {
	          observer.onCompleted();
	        }
	      });
	    });
	  };
	
	  /**
	   *  Time shifts the observable sequence by delaying the subscription.
	   *
	   * @example
	   *  1 - res = source.delaySubscription(5000); // 5s
	   *  2 - res = source.delaySubscription(5000, Rx.Scheduler.timeout); // 5 seconds
	   *
	   * @param {Number} dueTime Absolute or relative time to perform the subscription at.
	   * @param {Scheduler} [scheduler]  Scheduler to run the subscription delay timer on. If not specified, the timeout scheduler is used.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delaySubscription = function (dueTime, scheduler) {
	    return this.delayWithSelector(observableTimer(dueTime, isScheduler(scheduler) ? scheduler : timeoutScheduler), observableEmpty);
	  };
	
	  /**
	   *  Time shifts the observable sequence based on a subscription delay and a delay selector function for each element.
	   *
	   * @example
	   *  1 - res = source.delayWithSelector(function (x) { return Rx.Scheduler.timer(5000); }); // with selector only
	   *  1 - res = source.delayWithSelector(Rx.Observable.timer(2000), function (x) { return Rx.Observable.timer(x); }); // with delay and selector
	   *
	   * @param {Observable} [subscriptionDelay]  Sequence indicating the delay for the subscription to the source.
	   * @param {Function} delayDurationSelector Selector function to retrieve a sequence indicating the delay for each given element.
	   * @returns {Observable} Time-shifted sequence.
	   */
	  observableProto.delayWithSelector = function (subscriptionDelay, delayDurationSelector) {
	      var source = this, subDelay, selector;
	      if (typeof subscriptionDelay === 'function') {
	        selector = subscriptionDelay;
	      } else {
	        subDelay = subscriptionDelay;
	        selector = delayDurationSelector;
	      }
	      return new AnonymousObservable(function (observer) {
	        var delays = new CompositeDisposable(), atEnd = false, done = function () {
	            if (atEnd && delays.length === 0) { observer.onCompleted(); }
	        }, subscription = new SerialDisposable(), start = function () {
	          subscription.setDisposable(source.subscribe(function (x) {
	              var delay;
	              try {
	                delay = selector(x);
	              } catch (error) {
	                observer.onError(error);
	                return;
	              }
	              var d = new SingleAssignmentDisposable();
	              delays.add(d);
	              d.setDisposable(delay.subscribe(function () {
	                observer.onNext(x);
	                delays.remove(d);
	                done();
	              }, observer.onError.bind(observer), function () {
	                observer.onNext(x);
	                delays.remove(d);
	                done();
	              }));
	          }, observer.onError.bind(observer), function () {
	            atEnd = true;
	            subscription.dispose();
	            done();
	          }));
	      };
	
	      if (!subDelay) {
	        start();
	      } else {
	        subscription.setDisposable(subDelay.subscribe(start, observer.onError.bind(observer), start));
	      }
	
	      return new CompositeDisposable(subscription, delays);
	    }, this);
	  };
	
	    /**
	     *  Returns the source observable sequence, switching to the other observable sequence if a timeout is signaled.
	     * @param {Observable} [firstTimeout]  Observable sequence that represents the timeout for the first element. If not provided, this defaults to Observable.never().
	     * @param {Function} timeoutDurationSelector Selector to retrieve an observable sequence that represents the timeout between the current element and the next element.
	     * @param {Observable} [other]  Sequence to return in case of a timeout. If not provided, this is set to Observable.throwException().
	     * @returns {Observable} The source sequence switching to the other sequence in case of a timeout.
	     */
	    observableProto.timeoutWithSelector = function (firstTimeout, timeoutdurationSelector, other) {
	      if (arguments.length === 1) {
	          timeoutdurationSelector = firstTimeout;
	          firstTimeout = observableNever();
	      }
	      other || (other = observableThrow(new Error('Timeout')));
	      var source = this;
	      return new AnonymousObservable(function (observer) {
	        var subscription = new SerialDisposable(), timer = new SerialDisposable(), original = new SingleAssignmentDisposable();
	
	        subscription.setDisposable(original);
	
	        var id = 0, switched = false;
	
	        function setTimer(timeout) {
	          var myId = id;
	
	          function timerWins () {
	            return id === myId;
	          }
	
	          var d = new SingleAssignmentDisposable();
	          timer.setDisposable(d);
	          d.setDisposable(timeout.subscribe(function () {
	            timerWins() && subscription.setDisposable(other.subscribe(observer));
	            d.dispose();
	          }, function (e) {
	            timerWins() && observer.onError(e);
	          }, function () {
	            timerWins() && subscription.setDisposable(other.subscribe(observer));
	          }));
	        };
	
	        setTimer(firstTimeout);
	
	        function observerWins() {
	          var res = !switched;
	          if (res) { id++; }
	          return res;
	        }
	
	        original.setDisposable(source.subscribe(function (x) {
	          if (observerWins()) {
	            observer.onNext(x);
	            var timeout;
	            try {
	              timeout = timeoutdurationSelector(x);
	            } catch (e) {
	              observer.onError(e);
	              return;
	            }
	            setTimer(isPromise(timeout) ? observableFromPromise(timeout) : timeout);
	          }
	        }, function (e) {
	          observerWins() && observer.onError(e);
	        }, function () {
	          observerWins() && observer.onCompleted();
	        }));
	        return new CompositeDisposable(subscription, timer);
	      }, source);
	    };
	
	  /**
	   * Ignores values from an observable sequence which are followed by another value within a computed throttle duration.
	   * @param {Function} durationSelector Selector function to retrieve a sequence indicating the throttle duration for each given element.
	   * @returns {Observable} The debounced sequence.
	   */
	  observableProto.debounceWithSelector = function (durationSelector) {
	    var source = this;
	    return new AnonymousObservable(function (observer) {
	      var value, hasValue = false, cancelable = new SerialDisposable(), id = 0;
	      var subscription = source.subscribe(function (x) {
	        var throttle;
	        try {
	          throttle = durationSelector(x);
	        } catch (e) {
	          observer.onError(e);
	          return;
	        }
	
	        isPromise(throttle) && (throttle = observableFromPromise(throttle));
	
	        hasValue = true;
	        value = x;
	        id++;
	        var currentid = id, d = new SingleAssignmentDisposable();
	        cancelable.setDisposable(d);
	        d.setDisposable(throttle.subscribe(function () {
	          hasValue && id === currentid && observer.onNext(value);
	          hasValue = false;
	          d.dispose();
	        }, observer.onError.bind(observer), function () {
	          hasValue && id === currentid && observer.onNext(value);
	          hasValue = false;
	          d.dispose();
	        }));
	      }, function (e) {
	        cancelable.dispose();
	        observer.onError(e);
	        hasValue = false;
	        id++;
	      }, function () {
	        cancelable.dispose();
	        hasValue && observer.onNext(value);
	        observer.onCompleted();
	        hasValue = false;
	        id++;
	      });
	      return new CompositeDisposable(subscription, cancelable);
	    }, source);
	  };
	
	  /**
	   * @deprecated use #debounceWithSelector instead.
	   */
	  observableProto.throttleWithSelector = function (durationSelector) {
	    //deprecate('throttleWithSelector', 'debounceWithSelector');
	    return this.debounceWithSelector(durationSelector);
	  };
	
	  /**
	   *  Skips elements for the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   *
	   *  1 - res = source.skipLastWithTime(5000);
	   *  2 - res = source.skipLastWithTime(5000, scheduler);
	   *
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for skipping elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the end of the source sequence.
	   */
	  observableProto.skipLastWithTime = function (duration, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          o.onNext(q.shift().value);
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now();
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          o.onNext(q.shift().value);
	        }
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Returns elements within the specified duration from the end of the observable source sequence, using the specified schedulers to run timers and to drain the collected elements.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} [scheduler]  Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          q.shift();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now();
	        while (q.length > 0) {
	          var next = q.shift();
	          if (now - next.interval <= duration) { o.onNext(next.value); }
	        }
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Returns an array with the elements within the specified duration from the end of the observable source sequence, using the specified scheduler to run timers.
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the end of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence containing a single array with the elements taken during the specified duration from the end of the source sequence.
	   */
	  observableProto.takeLastBufferWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      var q = [];
	      return source.subscribe(function (x) {
	        var now = scheduler.now();
	        q.push({ interval: now, value: x });
	        while (q.length > 0 && now - q[0].interval >= duration) {
	          q.shift();
	        }
	      }, function (e) { o.onError(e); }, function () {
	        var now = scheduler.now(), res = [];
	        while (q.length > 0) {
	          var next = q.shift();
	          now - next.interval <= duration && res.push(next.value);
	        }
	        o.onNext(res);
	        o.onCompleted();
	      });
	    }, source);
	  };
	
	  /**
	   *  Takes elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.takeWithTime(5000,  [optional scheduler]);
	   * @description
	   *  This operator accumulates a queue with a length enough to store elements received during the initial duration window.
	   *  As more elements are received, elements older than the specified duration are taken from the queue and produced on the
	   *  result sequence. This causes elements to be delayed with duration.
	   * @param {Number} duration Duration for taking elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements taken during the specified duration from the start of the source sequence.
	   */
	  observableProto.takeWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (o) {
	      return new CompositeDisposable(scheduler.scheduleWithRelative(duration, function () { o.onCompleted(); }), source.subscribe(o));
	    }, source);
	  };
	
	  /**
	   *  Skips elements for the specified duration from the start of the observable source sequence, using the specified scheduler to run timers.
	   *
	   * @example
	   *  1 - res = source.skipWithTime(5000, [optional scheduler]);
	   *
	   * @description
	   *  Specifying a zero value for duration doesn't guarantee no elements will be dropped from the start of the source sequence.
	   *  This is a side-effect of the asynchrony introduced by the scheduler, where the action that causes callbacks from the source sequence to be forwarded
	   *  may not execute immediately, despite the zero due time.
	   *
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the duration.
	   * @param {Number} duration Duration for skipping elements from the start of the sequence.
	   * @param {Scheduler} scheduler Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped during the specified duration from the start of the source sequence.
	   */
	  observableProto.skipWithTime = function (duration, scheduler) {
	    var source = this;
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    return new AnonymousObservable(function (observer) {
	      var open = false;
	      return new CompositeDisposable(
	        scheduler.scheduleWithRelative(duration, function () { open = true; }),
	        source.subscribe(function (x) { open && observer.onNext(x); }, observer.onError.bind(observer), observer.onCompleted.bind(observer)));
	    }, source);
	  };
	
	  /**
	   *  Skips elements from the observable source sequence until the specified start time, using the specified scheduler to run timers.
	   *  Errors produced by the source sequence are always forwarded to the result sequence, even if the error occurs before the start time.
	   *
	   * @examples
	   *  1 - res = source.skipUntilWithTime(new Date(), [scheduler]);
	   *  2 - res = source.skipUntilWithTime(5000, [scheduler]);
	   * @param {Date|Number} startTime Time to start taking elements from the source sequence. If this value is less than or equal to Date(), no elements will be skipped.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on. If not specified, defaults to Rx.Scheduler.timeout.
	   * @returns {Observable} An observable sequence with the elements skipped until the specified start time.
	   */
	  observableProto.skipUntilWithTime = function (startTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this, schedulerMethod = startTime instanceof Date ?
	      'scheduleWithAbsolute' :
	      'scheduleWithRelative';
	    return new AnonymousObservable(function (o) {
	      var open = false;
	
	      return new CompositeDisposable(
	        scheduler[schedulerMethod](startTime, function () { open = true; }),
	        source.subscribe(
	          function (x) { open && o.onNext(x); },
	          function (e) { o.onError(e); }, function () { o.onCompleted(); }));
	    }, source);
	  };
	
	  /**
	   *  Takes elements for the specified duration until the specified end time, using the specified scheduler to run timers.
	   * @param {Number | Date} endTime Time to stop taking elements from the source sequence. If this value is less than or equal to new Date(), the result stream will complete immediately.
	   * @param {Scheduler} [scheduler] Scheduler to run the timer on.
	   * @returns {Observable} An observable sequence with the elements taken until the specified end time.
	   */
	  observableProto.takeUntilWithTime = function (endTime, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var source = this, schedulerMethod = endTime instanceof Date ?
	      'scheduleWithAbsolute' :
	      'scheduleWithRelative';
	    return new AnonymousObservable(function (o) {
	      return new CompositeDisposable(
	        scheduler[schedulerMethod](endTime, function () { o.onCompleted(); }),
	        source.subscribe(o));
	    }, source);
	  };
	
	  /**
	   * Returns an Observable that emits only the first item emitted by the source Observable during sequential time windows of a specified duration.
	   * @param {Number} windowDuration time to wait before emitting another item after emitting the last item
	   * @param {Scheduler} [scheduler] the Scheduler to use internally to manage the timers that handle timeout for each item. If not provided, defaults to Scheduler.timeout.
	   * @returns {Observable} An Observable that performs the throttle operation.
	   */
	  observableProto.throttleFirst = function (windowDuration, scheduler) {
	    isScheduler(scheduler) || (scheduler = timeoutScheduler);
	    var duration = +windowDuration || 0;
	    if (duration <= 0) { throw new RangeError('windowDuration cannot be less or equal zero.'); }
	    var source = this;
	    return new AnonymousObservable(function (o) {
	      var lastOnNext = 0;
	      return source.subscribe(
	        function (x) {
	          var now = scheduler.now();
	          if (lastOnNext === 0 || now - lastOnNext >= duration) {
	            lastOnNext = now;
	            o.onNext(x);
	          }
	        },function (e) { o.onError(e); }, function () { o.onCompleted(); }
	      );
	    }, source);
	  };
	
	  /**
	   * Executes a transducer to transform the observable sequence
	   * @param {Transducer} transducer A transducer to execute
	   * @returns {Observable} An Observable sequence containing the results from the transducer.
	   */
	  observableProto.transduce = function(transducer) {
	    var source = this;
	
	    function transformForObserver(o) {
	      return {
	        '@@transducer/init': function() {
	          return o;
	        },
	        '@@transducer/step': function(obs, input) {
	          return obs.onNext(input);
	        },
	        '@@transducer/result': function(obs) {
	          return obs.onCompleted();
	        }
	      };
	    }
	
	    return new AnonymousObservable(function(o) {
	      var xform = transducer(transformForObserver(o));
	      return source.subscribe(
	        function(v) {
	          try {
	            xform['@@transducer/step'](o, v);
	          } catch (e) {
	            o.onError(e);
	          }
	        },
	        function (e) { o.onError(e); },
	        function() { xform['@@transducer/result'](o); }
	      );
	    }, source);
	  };
	
	  /*
	   * Performs a exclusive waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @returns {Observable} A exclusive observable with only the results that happen when subscribed.
	   */
	  observableProto.exclusive = function () {
	    var sources = this;
	    return new AnonymousObservable(function (observer) {
	      var hasCurrent = false,
	        isStopped = false,
	        m = new SingleAssignmentDisposable(),
	        g = new CompositeDisposable();
	
	      g.add(m);
	
	      m.setDisposable(sources.subscribe(
	        function (innerSource) {
	          if (!hasCurrent) {
	            hasCurrent = true;
	
	            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	            var innerSubscription = new SingleAssignmentDisposable();
	            g.add(innerSubscription);
	
	            innerSubscription.setDisposable(innerSource.subscribe(
	              observer.onNext.bind(observer),
	              observer.onError.bind(observer),
	              function () {
	                g.remove(innerSubscription);
	                hasCurrent = false;
	                if (isStopped && g.length === 1) {
	                  observer.onCompleted();
	                }
	            }));
	          }
	        },
	        observer.onError.bind(observer),
	        function () {
	          isStopped = true;
	          if (!hasCurrent && g.length === 1) {
	            observer.onCompleted();
	          }
	        }));
	
	      return g;
	    }, this);
	  };
	
	  /*
	   * Performs a exclusive map waiting for the first to finish before subscribing to another observable.
	   * Observables that come in between subscriptions will be dropped on the floor.
	   * @param {Function} selector Selector to invoke for every item in the current subscription.
	   * @param {Any} [thisArg] An optional context to invoke with the selector parameter.
	   * @returns {Observable} An exclusive observable with only the results that happen when subscribed.
	   */
	  observableProto.exclusiveMap = function (selector, thisArg) {
	    var sources = this,
	        selectorFunc = bindCallback(selector, thisArg, 3);
	    return new AnonymousObservable(function (observer) {
	      var index = 0,
	        hasCurrent = false,
	        isStopped = true,
	        m = new SingleAssignmentDisposable(),
	        g = new CompositeDisposable();
	
	      g.add(m);
	
	      m.setDisposable(sources.subscribe(
	        function (innerSource) {
	
	          if (!hasCurrent) {
	            hasCurrent = true;
	
	            innerSubscription = new SingleAssignmentDisposable();
	            g.add(innerSubscription);
	
	            isPromise(innerSource) && (innerSource = observableFromPromise(innerSource));
	
	            innerSubscription.setDisposable(innerSource.subscribe(
	              function (x) {
	                var result;
	                try {
	                  result = selectorFunc(x, index++, innerSource);
	                } catch (e) {
	                  observer.onError(e);
	                  return;
	                }
	
	                observer.onNext(result);
	              },
	              function (e) { observer.onError(e); },
	              function () {
	                g.remove(innerSubscription);
	                hasCurrent = false;
	
	                if (isStopped && g.length === 1) {
	                  observer.onCompleted();
	                }
	              }));
	          }
	        },
	        function (e) { observer.onError(e); },
	        function () {
	          isStopped = true;
	          if (g.length === 1 && !hasCurrent) {
	            observer.onCompleted();
	          }
	        }));
	      return g;
	    }, this);
	  };
	
	  /** Provides a set of extension methods for virtual time scheduling. */
	  Rx.VirtualTimeScheduler = (function (__super__) {
	
	    function localNow() {
	      return this.toDateTimeOffset(this.clock);
	    }
	
	    function scheduleNow(state, action) {
	      return this.scheduleAbsoluteWithState(state, this.clock, action);
	    }
	
	    function scheduleRelative(state, dueTime, action) {
	      return this.scheduleRelativeWithState(state, this.toRelative(dueTime), action);
	    }
	
	    function scheduleAbsolute(state, dueTime, action) {
	      return this.scheduleRelativeWithState(state, this.toRelative(dueTime - this.now()), action);
	    }
	
	    function invokeAction(scheduler, action) {
	      action();
	      return disposableEmpty;
	    }
	
	    inherits(VirtualTimeScheduler, __super__);
	
	    /**
	     * Creates a new virtual time scheduler with the specified initial clock value and absolute time comparer.
	     *
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function VirtualTimeScheduler(initialClock, comparer) {
	      this.clock = initialClock;
	      this.comparer = comparer;
	      this.isEnabled = false;
	      this.queue = new PriorityQueue(1024);
	      __super__.call(this, localNow, scheduleNow, scheduleRelative, scheduleAbsolute);
	    }
	
	    var VirtualTimeSchedulerPrototype = VirtualTimeScheduler.prototype;
	
	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    VirtualTimeSchedulerPrototype.add = notImplemented;
	
	    /**
	     * Converts an absolute time to a number
	     * @param {Any} The absolute time.
	     * @returns {Number} The absolute time in ms
	     */
	    VirtualTimeSchedulerPrototype.toDateTimeOffset = notImplemented;
	
	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    VirtualTimeSchedulerPrototype.toRelative = notImplemented;
	
	    /**
	     * Schedules a periodic piece of work by dynamically discovering the scheduler's capabilities. The periodic task will be emulated using recursive scheduling.
	     * @param {Mixed} state Initial state passed to the action upon the first iteration.
	     * @param {Number} period Period for running the work periodically.
	     * @param {Function} action Action to be executed, potentially updating the state.
	     * @returns {Disposable} The disposable object used to cancel the scheduled recurring action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.schedulePeriodicWithState = function (state, period, action) {
	      var s = new SchedulePeriodicRecursive(this, state, period, action);
	      return s.start();
	    };
	
	    /**
	     * Schedules an action to be executed after dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleRelativeWithState = function (state, dueTime, action) {
	      var runAt = this.add(this.clock, dueTime);
	      return this.scheduleAbsoluteWithState(state, runAt, action);
	    };
	
	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Number} dueTime Relative time after which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleRelative = function (dueTime, action) {
	      return this.scheduleRelativeWithState(action, dueTime, invokeAction);
	    };
	
	    /**
	     * Starts the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.start = function () {
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	      }
	    };
	
	    /**
	     * Stops the virtual time scheduler.
	     */
	    VirtualTimeSchedulerPrototype.stop = function () {
	      this.isEnabled = false;
	    };
	
	    /**
	     * Advances the scheduler's clock to the specified time, running all work till that point.
	     * @param {Number} time Absolute time to advance the scheduler's clock to.
	     */
	    VirtualTimeSchedulerPrototype.advanceTo = function (time) {
	      var dueToClock = this.comparer(this.clock, time);
	      if (this.comparer(this.clock, time) > 0) { throw new ArgumentOutOfRangeError(); }
	      if (dueToClock === 0) { return; }
	      if (!this.isEnabled) {
	        this.isEnabled = true;
	        do {
	          var next = this.getNext();
	          if (next !== null && this.comparer(next.dueTime, time) <= 0) {
	            this.comparer(next.dueTime, this.clock) > 0 && (this.clock = next.dueTime);
	            next.invoke();
	          } else {
	            this.isEnabled = false;
	          }
	        } while (this.isEnabled);
	        this.clock = time;
	      }
	    };
	
	    /**
	     * Advances the scheduler's clock by the specified relative time, running all work scheduled for that timespan.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.advanceBy = function (time) {
	      var dt = this.add(this.clock, time),
	          dueToClock = this.comparer(this.clock, dt);
	      if (dueToClock > 0) { throw new ArgumentOutOfRangeError(); }
	      if (dueToClock === 0) {  return; }
	
	      this.advanceTo(dt);
	    };
	
	    /**
	     * Advances the scheduler's clock by the specified relative time.
	     * @param {Number} time Relative time to advance the scheduler's clock by.
	     */
	    VirtualTimeSchedulerPrototype.sleep = function (time) {
	      var dt = this.add(this.clock, time);
	      if (this.comparer(this.clock, dt) >= 0) { throw new ArgumentOutOfRangeError(); }
	
	      this.clock = dt;
	    };
	
	    /**
	     * Gets the next scheduled item to be executed.
	     * @returns {ScheduledItem} The next scheduled item.
	     */
	    VirtualTimeSchedulerPrototype.getNext = function () {
	      while (this.queue.length > 0) {
	        var next = this.queue.peek();
	        if (next.isCancelled()) {
	          this.queue.dequeue();
	        } else {
	          return next;
	        }
	      }
	      return null;
	    };
	
	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Scheduler} scheduler Scheduler to execute the action on.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleAbsolute = function (dueTime, action) {
	      return this.scheduleAbsoluteWithState(action, dueTime, invokeAction);
	    };
	
	    /**
	     * Schedules an action to be executed at dueTime.
	     * @param {Mixed} state State passed to the action to be executed.
	     * @param {Number} dueTime Absolute time at which to execute the action.
	     * @param {Function} action Action to be executed.
	     * @returns {Disposable} The disposable object used to cancel the scheduled action (best effort).
	     */
	    VirtualTimeSchedulerPrototype.scheduleAbsoluteWithState = function (state, dueTime, action) {
	      var self = this;
	
	      function run(scheduler, state1) {
	        self.queue.remove(si);
	        return action(scheduler, state1);
	      }
	
	      var si = new ScheduledItem(this, state, run, dueTime, this.comparer);
	      this.queue.enqueue(si);
	
	      return si.disposable;
	    };
	
	    return VirtualTimeScheduler;
	  }(Scheduler));
	
	  /** Provides a virtual time scheduler that uses Date for absolute time and number for relative time. */
	  Rx.HistoricalScheduler = (function (__super__) {
	    inherits(HistoricalScheduler, __super__);
	
	    /**
	     * Creates a new historical scheduler with the specified initial clock value.
	     * @constructor
	     * @param {Number} initialClock Initial value for the clock.
	     * @param {Function} comparer Comparer to determine causality of events based on absolute time.
	     */
	    function HistoricalScheduler(initialClock, comparer) {
	      var clock = initialClock == null ? 0 : initialClock;
	      var cmp = comparer || defaultSubComparer;
	      __super__.call(this, clock, cmp);
	    }
	
	    var HistoricalSchedulerProto = HistoricalScheduler.prototype;
	
	    /**
	     * Adds a relative time value to an absolute time value.
	     * @param {Number} absolute Absolute virtual time value.
	     * @param {Number} relative Relative virtual time value to add.
	     * @return {Number} Resulting absolute virtual time sum value.
	     */
	    HistoricalSchedulerProto.add = function (absolute, relative) {
	      return absolute + relative;
	    };
	
	    HistoricalSchedulerProto.toDateTimeOffset = function (absolute) {
	      return new Date(absolute).getTime();
	    };
	
	    /**
	     * Converts the TimeSpan value to a relative virtual time value.
	     * @memberOf HistoricalScheduler
	     * @param {Number} timeSpan TimeSpan value to convert.
	     * @return {Number} Corresponding relative virtual time value.
	     */
	    HistoricalSchedulerProto.toRelative = function (timeSpan) {
	      return timeSpan;
	    };
	
	    return HistoricalScheduler;
	  }(Rx.VirtualTimeScheduler));
	
	  var AnonymousObservable = Rx.AnonymousObservable = (function (__super__) {
	    inherits(AnonymousObservable, __super__);
	
	    // Fix subscriber to check for undefined or function returned to decorate as Disposable
	    function fixSubscriber(subscriber) {
	      return subscriber && isFunction(subscriber.dispose) ? subscriber :
	        isFunction(subscriber) ? disposableCreate(subscriber) : disposableEmpty;
	    }
	
	    function setDisposable(s, state) {
	      var ado = state[0], subscribe = state[1];
	      var sub = tryCatch(subscribe)(ado);
	
	      if (sub === errorObj) {
	        if(!ado.fail(errorObj.e)) { return thrower(errorObj.e); }
	      }
	      ado.setDisposable(fixSubscriber(sub));
	    }
	
	    function AnonymousObservable(subscribe, parent) {
	      this.source = parent;
	
	      function s(observer) {
	        var ado = new AutoDetachObserver(observer), state = [ado, subscribe];
	
	        if (currentThreadScheduler.scheduleRequired()) {
	          currentThreadScheduler.scheduleWithState(state, setDisposable);
	        } else {
	          setDisposable(null, state);
	        }
	        return ado;
	      }
	
	      __super__.call(this, s);
	    }
	
	    return AnonymousObservable;
	
	  }(Observable));
	
	  var AutoDetachObserver = (function (__super__) {
	    inherits(AutoDetachObserver, __super__);
	
	    function AutoDetachObserver(observer) {
	      __super__.call(this);
	      this.observer = observer;
	      this.m = new SingleAssignmentDisposable();
	    }
	
	    var AutoDetachObserverPrototype = AutoDetachObserver.prototype;
	
	    AutoDetachObserverPrototype.next = function (value) {
	      var result = tryCatch(this.observer.onNext).call(this.observer, value);
	      if (result === errorObj) {
	        this.dispose();
	        thrower(result.e);
	      }
	    };
	
	    AutoDetachObserverPrototype.error = function (err) {
	      var result = tryCatch(this.observer.onError).call(this.observer, err);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };
	
	    AutoDetachObserverPrototype.completed = function () {
	      var result = tryCatch(this.observer.onCompleted).call(this.observer);
	      this.dispose();
	      result === errorObj && thrower(result.e);
	    };
	
	    AutoDetachObserverPrototype.setDisposable = function (value) { this.m.setDisposable(value); };
	    AutoDetachObserverPrototype.getDisposable = function () { return this.m.getDisposable(); };
	
	    AutoDetachObserverPrototype.dispose = function () {
	      __super__.prototype.dispose.call(this);
	      this.m.dispose();
	    };
	
	    return AutoDetachObserver;
	  }(AbstractObserver));
	
	  var GroupedObservable = (function (__super__) {
	    inherits(GroupedObservable, __super__);
	
	    function subscribe(observer) {
	      return this.underlyingObservable.subscribe(observer);
	    }
	
	    function GroupedObservable(key, underlyingObservable, mergedDisposable) {
	      __super__.call(this, subscribe);
	      this.key = key;
	      this.underlyingObservable = !mergedDisposable ?
	        underlyingObservable :
	        new AnonymousObservable(function (observer) {
	          return new CompositeDisposable(mergedDisposable.getDisposable(), underlyingObservable.subscribe(observer));
	        });
	    }
	
	    return GroupedObservable;
	  }(Observable));
	
	  /**
	   *  Represents an object that is both an observable sequence as well as an observer.
	   *  Each notification is broadcasted to all subscribed observers.
	   */
	  var Subject = Rx.Subject = (function (__super__) {
	    function subscribe(observer) {
	      checkDisposed(this);
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        return new InnerSubscription(this, observer);
	      }
	      if (this.hasError) {
	        observer.onError(this.error);
	        return disposableEmpty;
	      }
	      observer.onCompleted();
	      return disposableEmpty;
	    }
	
	    inherits(Subject, __super__);
	
	    /**
	     * Creates a subject.
	     */
	    function Subject() {
	      __super__.call(this, subscribe);
	      this.isDisposed = false,
	      this.isStopped = false,
	      this.observers = [];
	      this.hasError = false;
	    }
	
	    addProperties(Subject.prototype, Observer.prototype, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () { return this.observers.length > 0; },
	      /**
	       * Notifies all subscribed observers about the end of the sequence.
	       */
	      onCompleted: function () {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onCompleted();
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the exception.
	       * @param {Mixed} error The exception to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.error = error;
	          this.hasError = true;
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the arrival of the specified element in the sequence.
	       * @param {Mixed} value The value to send to all observers.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onNext(value);
	          }
	        }
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	      }
	    });
	
	    /**
	     * Creates a subject from the specified observer and observable.
	     * @param {Observer} observer The observer used to send messages to the subject.
	     * @param {Observable} observable The observable used to subscribe to messages sent from the subject.
	     * @returns {Subject} Subject implemented using the given observer and observable.
	     */
	    Subject.create = function (observer, observable) {
	      return new AnonymousSubject(observer, observable);
	    };
	
	    return Subject;
	  }(Observable));
	
	  /**
	   *  Represents the result of an asynchronous operation.
	   *  The last value before the OnCompleted notification, or the error received through OnError, is sent to all subscribed observers.
	   */
	  var AsyncSubject = Rx.AsyncSubject = (function (__super__) {
	
	    function subscribe(observer) {
	      checkDisposed(this);
	
	      if (!this.isStopped) {
	        this.observers.push(observer);
	        return new InnerSubscription(this, observer);
	      }
	
	      if (this.hasError) {
	        observer.onError(this.error);
	      } else if (this.hasValue) {
	        observer.onNext(this.value);
	        observer.onCompleted();
	      } else {
	        observer.onCompleted();
	      }
	
	      return disposableEmpty;
	    }
	
	    inherits(AsyncSubject, __super__);
	
	    /**
	     * Creates a subject that can only receive one value and that value is cached for all future observations.
	     * @constructor
	     */
	    function AsyncSubject() {
	      __super__.call(this, subscribe);
	
	      this.isDisposed = false;
	      this.isStopped = false;
	      this.hasValue = false;
	      this.observers = [];
	      this.hasError = false;
	    }
	
	    addProperties(AsyncSubject.prototype, Observer, {
	      /**
	       * Indicates whether the subject has observers subscribed to it.
	       * @returns {Boolean} Indicates whether the subject has observers subscribed to it.
	       */
	      hasObservers: function () {
	        checkDisposed(this);
	        return this.observers.length > 0;
	      },
	      /**
	       * Notifies all subscribed observers about the end of the sequence, also causing the last received value to be sent out (if any).
	       */
	      onCompleted: function () {
	        var i, len;
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          var os = cloneArray(this.observers), len = os.length;
	
	          if (this.hasValue) {
	            for (i = 0; i < len; i++) {
	              var o = os[i];
	              o.onNext(this.value);
	              o.onCompleted();
	            }
	          } else {
	            for (i = 0; i < len; i++) {
	              os[i].onCompleted();
	            }
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Notifies all subscribed observers about the error.
	       * @param {Mixed} error The Error to send to all observers.
	       */
	      onError: function (error) {
	        checkDisposed(this);
	        if (!this.isStopped) {
	          this.isStopped = true;
	          this.hasError = true;
	          this.error = error;
	
	          for (var i = 0, os = cloneArray(this.observers), len = os.length; i < len; i++) {
	            os[i].onError(error);
	          }
	
	          this.observers.length = 0;
	        }
	      },
	      /**
	       * Sends a value to the subject. The last value received before successful termination will be sent to all subscribed and future observers.
	       * @param {Mixed} value The value to store in the subject.
	       */
	      onNext: function (value) {
	        checkDisposed(this);
	        if (this.isStopped) { return; }
	        this.value = value;
	        this.hasValue = true;
	      },
	      /**
	       * Unsubscribe all observers and release resources.
	       */
	      dispose: function () {
	        this.isDisposed = true;
	        this.observers = null;
	        this.exception = null;
	        this.value = null;
	      }
	    });
	
	    return AsyncSubject;
	  }(Observable));
	
	  var AnonymousSubject = Rx.AnonymousSubject = (function (__super__) {
	    inherits(AnonymousSubject, __super__);
	
	    function subscribe(observer) {
	      return this.observable.subscribe(observer);
	    }
	
	    function AnonymousSubject(observer, observable) {
	      this.observer = observer;
	      this.observable = observable;
	      __super__.call(this, subscribe);
	    }
	
	    addProperties(AnonymousSubject.prototype, Observer.prototype, {
	      onCompleted: function () {
	        this.observer.onCompleted();
	      },
	      onError: function (error) {
	        this.observer.onError(error);
	      },
	      onNext: function (value) {
	        this.observer.onNext(value);
	      }
	    });
	
	    return AnonymousSubject;
	  }(Observable));
	
	  /**
	  * Used to pause and resume streams.
	  */
	  Rx.Pauser = (function (__super__) {
	    inherits(Pauser, __super__);
	
	    function Pauser() {
	      __super__.call(this);
	    }
	
	    /**
	     * Pauses the underlying sequence.
	     */
	    Pauser.prototype.pause = function () { this.onNext(false); };
	
	    /**
	    * Resumes the underlying sequence.
	    */
	    Pauser.prototype.resume = function () { this.onNext(true); };
	
	    return Pauser;
	  }(Subject));
	
	  if (true) {
	    root.Rx = Rx;
	
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Rx;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (freeExports && freeModule) {
	    // in Node.js or RingoJS
	    if (moduleExports) {
	      (freeModule.exports = Rx).Rx = Rx;
	    } else {
	      freeExports.Rx = Rx;
	    }
	  } else {
	    // in a browser or Rhino
	    root.Rx = Rx;
	  }
	
	  // All code before this point will be filtered from stack traces.
	  var rEndingLine = captureLine();
	
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! (webpack)/buildin/module.js */ 101)(module), (function() { return this; }()), __webpack_require__(/*! ./~/node-libs-browser/~/process/browser.js */ 92)))

/***/ },
/* 101 */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 102 */
/*!*****************************************************!*\
  !*** ./~/angular2/es6/dev/src/forms/validators.es6 ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _model = __webpack_require__(/*! ./model */ 95);
	
	var modelModule = _interopRequireWildcard(_model);
	
	var Validators = (function () {
	  function Validators() {
	    _classCallCheck(this, Validators);
	  }
	
	  _createClass(Validators, null, [{
	    key: 'required',
	    value: function required(c) {
	      _rtts_assertRtts_assert.assert.argumentTypes(c, modelModule.Control);
	      return (0, _angular2SrcFacadeLang.isBlank)(c.value) || c.value == '' ? { 'required': true } : null;
	    }
	  }, {
	    key: 'nullValidator',
	    value: function nullValidator(c) {
	      _rtts_assertRtts_assert.assert.argumentTypes(c, _rtts_assertRtts_assert.assert.type.any);
	      return null;
	    }
	  }, {
	    key: 'compose',
	    value: function compose(validators) {
	      _rtts_assertRtts_assert.assert.argumentTypes(validators, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, Function));
	      return _rtts_assertRtts_assert.assert.returnType(function (c) {
	        _rtts_assertRtts_assert.assert.argumentTypes(c, modelModule.Control);
	        var res = _angular2SrcFacadeCollection.ListWrapper.reduce(validators, function (res, validator) {
	          var errors = validator(c);
	          return (0, _angular2SrcFacadeLang.isPresent)(errors) ? _angular2SrcFacadeCollection.StringMapWrapper.merge(res, errors) : res;
	        }, {});
	        return _angular2SrcFacadeCollection.StringMapWrapper.isEmpty(res) ? null : res;
	      }, Function);
	    }
	  }, {
	    key: 'group',
	    value: function group(c) {
	      _rtts_assertRtts_assert.assert.argumentTypes(c, modelModule.ControlGroup);
	      var res = {};
	      _angular2SrcFacadeCollection.StringMapWrapper.forEach(c.controls, function (control, name) {
	        if (c.contains(name) && (0, _angular2SrcFacadeLang.isPresent)(control.errors)) {
	          Validators._mergeErrors(control, res);
	        }
	      });
	      return _angular2SrcFacadeCollection.StringMapWrapper.isEmpty(res) ? null : res;
	    }
	  }, {
	    key: 'array',
	    value: function array(c) {
	      _rtts_assertRtts_assert.assert.argumentTypes(c, modelModule.ControlArray);
	      var res = {};
	      _angular2SrcFacadeCollection.ListWrapper.forEach(c.controls, function (control) {
	        if ((0, _angular2SrcFacadeLang.isPresent)(control.errors)) {
	          Validators._mergeErrors(control, res);
	        }
	      });
	      return _angular2SrcFacadeCollection.StringMapWrapper.isEmpty(res) ? null : res;
	    }
	  }, {
	    key: '_mergeErrors',
	    value: function _mergeErrors(control, res) {
	      _angular2SrcFacadeCollection.StringMapWrapper.forEach(control.errors, function (value, error) {
	        if (!_angular2SrcFacadeCollection.StringMapWrapper.contains(res, error)) {
	          res[error] = [];
	        }
	        _angular2SrcFacadeCollection.ListWrapper.push(res[error], control);
	      });
	    }
	  }]);
	
	  return Validators;
	})();
	
	exports.Validators = Validators;
	
	Object.defineProperty(Validators.required, 'parameters', { get: function get() {
	    return [[modelModule.Control]];
	  } });
	Object.defineProperty(Validators.nullValidator, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(Validators.compose, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, Function)]];
	  } });
	Object.defineProperty(Validators.group, 'parameters', { get: function get() {
	    return [[modelModule.ControlGroup]];
	  } });
	Object.defineProperty(Validators.array, 'parameters', { get: function get() {
	    return [[modelModule.ControlArray]];
	  } });
	//# sourceMappingURL=validators.js.map

	//# sourceMappingURL=./validators.map

/***/ },
/* 103 */
/*!*****************************************************!*\
  !*** ./~/angular2/es6/dev/src/forms/directives.es6 ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Angular2 = __webpack_require__(/*! angular2/angular2 */ 93);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcRenderApi = __webpack_require__(/*! angular2/src/render/api */ 115);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _model = __webpack_require__(/*! ./model */ 95);
	
	var _validators = __webpack_require__(/*! ./validators */ 102);
	
	var DefaultValueAccessor = (function () {
	  function DefaultValueAccessor() {
	    _classCallCheck(this, DefaultValueAccessor);
	
	    this.onChange = function (_) {};
	  }
	
	  _createClass(DefaultValueAccessor, [{
	    key: 'writeValue',
	    value: function writeValue(value) {
	      this.value = value;
	    }
	  }]);
	
	  return DefaultValueAccessor;
	})();
	
	exports.DefaultValueAccessor = DefaultValueAccessor;
	
	Object.defineProperty(DefaultValueAccessor, 'annotations', { get: function get() {
	    return [new _angular2Angular2.Decorator({
	      selector: '[control]',
	      hostListeners: {
	        'change': 'onChange($event.target.value)',
	        'input': 'onChange($event.target.value)'
	      },
	      hostProperties: { 'value': 'value' }
	    })];
	  } });
	
	var CheckboxControlValueAccessor = (function () {
	  function CheckboxControlValueAccessor(cd, elementRef, renderer) {
	    _classCallCheck(this, CheckboxControlValueAccessor);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(cd, ControlDirective, elementRef, _angular2Angular2.ElementRef, renderer, _angular2SrcRenderApi.Renderer);
	    this.onChange = function (_) {};
	    this._elementRef = elementRef;
	    this._renderer = renderer;
	    cd.valueAccessor = this;
	  }
	
	  _createClass(CheckboxControlValueAccessor, [{
	    key: 'writeValue',
	    value: function writeValue(value) {
	      this._renderer.setElementProperty(this._elementRef.hostView.render, this._elementRef.boundElementIndex, 'checked', value);
	    }
	  }]);
	
	  return CheckboxControlValueAccessor;
	})();
	
	exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
	
	Object.defineProperty(CheckboxControlValueAccessor, 'annotations', { get: function get() {
	    return [new _angular2Angular2.Decorator({
	      selector: 'input[type=checkbox][control]',
	      hostListeners: { 'change': 'onChange($event.target.checked)' },
	      hostProperties: { 'checked': 'checked' }
	    })];
	  } });
	Object.defineProperty(CheckboxControlValueAccessor, 'parameters', { get: function get() {
	    return [[ControlDirective], [_angular2Angular2.ElementRef], [_angular2SrcRenderApi.Renderer]];
	  } });
	
	var ControlDirective = (function () {
	  function ControlDirective(groupDirective, valueAccessor) {
	    _classCallCheck(this, ControlDirective);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(groupDirective, ControlGroupDirective, valueAccessor, DefaultValueAccessor);
	    this._groupDirective = groupDirective;
	    this.controlOrName = null;
	    this.valueAccessor = valueAccessor;
	    this.validator = _validators.Validators.nullValidator;
	  }
	
	  _createClass(ControlDirective, [{
	    key: 'onChange',
	    value: function onChange(_) {
	      this._initialize();
	    }
	  }, {
	    key: '_initialize',
	    value: function _initialize() {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._groupDirective)) {
	        this._groupDirective.addDirective(this);
	      }
	      var c = this._control();
	      c.validator = _validators.Validators.compose([c.validator, this.validator]);
	      this._updateDomValue();
	      this._setUpUpdateControlValue();
	    }
	  }, {
	    key: '_updateDomValue',
	    value: function _updateDomValue() {
	      this.valueAccessor.writeValue(this._control().value);
	    }
	  }, {
	    key: '_setUpUpdateControlValue',
	    value: function _setUpUpdateControlValue() {
	      var _this = this;
	
	      this.valueAccessor.onChange = function (newValue) {
	        return _this._control().updateValue(newValue);
	      };
	    }
	  }, {
	    key: '_control',
	    value: function _control() {
	      if ((0, _angular2SrcFacadeLang.isString)(this.controlOrName)) {
	        return this._groupDirective.findControl(this.controlOrName);
	      } else {
	        return this.controlOrName;
	      }
	    }
	  }]);
	
	  return ControlDirective;
	})();
	
	exports.ControlDirective = ControlDirective;
	
	Object.defineProperty(ControlDirective, 'annotations', { get: function get() {
	    return [new _angular2Angular2.Decorator({
	      lifecycle: [_angular2Angular2.onChange],
	      selector: '[control]',
	      properties: { 'controlOrName': 'control' }
	    })];
	  } });
	Object.defineProperty(ControlDirective, 'parameters', { get: function get() {
	    return [[ControlGroupDirective, new _angular2Di.Optional(), new _angular2Angular2.Ancestor()], [DefaultValueAccessor]];
	  } });
	
	var ControlGroupDirective = (function () {
	  function ControlGroupDirective(groupDirective) {
	    _classCallCheck(this, ControlGroupDirective);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(groupDirective, ControlGroupDirective);
	    this._groupDirective = groupDirective;
	    this._directives = _angular2SrcFacadeCollection.ListWrapper.create();
	  }
	
	  _createClass(ControlGroupDirective, [{
	    key: 'controlGroup',
	    set: function (controlGroup) {
	      if ((0, _angular2SrcFacadeLang.isString)(controlGroup)) {
	        this._controlGroupName = controlGroup;
	      } else {
	        this._controlGroup = controlGroup;
	      }
	      this._updateDomValue();
	    }
	  }, {
	    key: '_updateDomValue',
	    value: function _updateDomValue() {
	      _angular2SrcFacadeCollection.ListWrapper.forEach(this._directives, function (cd) {
	        return cd._updateDomValue();
	      });
	    }
	  }, {
	    key: 'addDirective',
	    value: function addDirective(c) {
	      _rtts_assertRtts_assert.assert.argumentTypes(c, ControlDirective);
	      _angular2SrcFacadeCollection.ListWrapper.push(this._directives, c);
	    }
	  }, {
	    key: 'findControl',
	    value: function findControl(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(this._getControlGroup().controls[name], _rtts_assertRtts_assert.assert.type.any);
	    }
	  }, {
	    key: '_getControlGroup',
	    value: function _getControlGroup() {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._controlGroupName)) {
	        return _rtts_assertRtts_assert.assert.returnType(this._groupDirective.findControl(this._controlGroupName), _model.ControlGroup);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(this._controlGroup, _model.ControlGroup);
	      }
	    }
	  }]);
	
	  return ControlGroupDirective;
	})();
	
	exports.ControlGroupDirective = ControlGroupDirective;
	
	Object.defineProperty(ControlGroupDirective, 'annotations', { get: function get() {
	    return [new _angular2Angular2.Decorator({
	      selector: '[control-group]',
	      properties: { 'controlGroup': 'control-group' }
	    })];
	  } });
	Object.defineProperty(ControlGroupDirective, 'parameters', { get: function get() {
	    return [[ControlGroupDirective, new _angular2Di.Optional(), new _angular2Angular2.Ancestor()]];
	  } });
	Object.defineProperty(ControlGroupDirective.prototype.addDirective, 'parameters', { get: function get() {
	    return [[ControlDirective]];
	  } });
	Object.defineProperty(ControlGroupDirective.prototype.findControl, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var FormDirectives = [ControlGroupDirective, ControlDirective, CheckboxControlValueAccessor, DefaultValueAccessor];
	//# sourceMappingURL=directives.js.map
	
	//# sourceMappingURL=./directives.map
	exports.FormDirectives = FormDirectives;

/***/ },
/* 104 */
/*!***********************************!*\
  !*** ./~/angular2/es6/dev/di.es6 ***!
  \***********************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _srcDiAnnotations = __webpack_require__(/*! ./src/di/annotations */ 106);
	
	Object.defineProperty(exports, 'Inject', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiAnnotations.Inject;
	  }
	});
	Object.defineProperty(exports, 'InjectPromise', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiAnnotations.InjectPromise;
	  }
	});
	Object.defineProperty(exports, 'InjectLazy', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiAnnotations.InjectLazy;
	  }
	});
	Object.defineProperty(exports, 'Injectable', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiAnnotations.Injectable;
	  }
	});
	Object.defineProperty(exports, 'Optional', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiAnnotations.Optional;
	  }
	});
	Object.defineProperty(exports, 'DependencyAnnotation', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiAnnotations.DependencyAnnotation;
	  }
	});
	
	var _srcDiInjector = __webpack_require__(/*! ./src/di/injector */ 107);
	
	Object.defineProperty(exports, 'Injector', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiInjector.Injector;
	  }
	});
	
	var _srcDiBinding = __webpack_require__(/*! ./src/di/binding */ 108);
	
	Object.defineProperty(exports, 'Binding', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiBinding.Binding;
	  }
	});
	Object.defineProperty(exports, 'ResolvedBinding', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiBinding.ResolvedBinding;
	  }
	});
	Object.defineProperty(exports, 'Dependency', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiBinding.Dependency;
	  }
	});
	Object.defineProperty(exports, 'bind', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiBinding.bind;
	  }
	});
	
	var _srcDiKey = __webpack_require__(/*! ./src/di/key */ 105);
	
	Object.defineProperty(exports, 'Key', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiKey.Key;
	  }
	});
	Object.defineProperty(exports, 'KeyRegistry', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiKey.KeyRegistry;
	  }
	});
	
	var _srcDiExceptions = __webpack_require__(/*! ./src/di/exceptions */ 113);
	
	Object.defineProperty(exports, 'KeyMetadataError', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiExceptions.KeyMetadataError;
	  }
	});
	Object.defineProperty(exports, 'NoBindingError', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiExceptions.NoBindingError;
	  }
	});
	Object.defineProperty(exports, 'AbstractBindingError', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiExceptions.AbstractBindingError;
	  }
	});
	Object.defineProperty(exports, 'AsyncBindingError', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiExceptions.AsyncBindingError;
	  }
	});
	Object.defineProperty(exports, 'CyclicDependencyError', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiExceptions.CyclicDependencyError;
	  }
	});
	Object.defineProperty(exports, 'InstantiationError', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiExceptions.InstantiationError;
	  }
	});
	Object.defineProperty(exports, 'InvalidBindingError', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiExceptions.InvalidBindingError;
	  }
	});
	Object.defineProperty(exports, 'NoAnnotationError', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiExceptions.NoAnnotationError;
	  }
	});
	
	var _srcDiOpaque_token = __webpack_require__(/*! ./src/di/opaque_token */ 114);
	
	//# sourceMappingURL=di.js.map
	
	//# sourceMappingURL=./di.map
	Object.defineProperty(exports, 'OpaqueToken', {
	  enumerable: true,
	  get: function get() {
	    return _srcDiOpaque_token.OpaqueToken;
	  }
	});

/***/ },
/* 105 */
/*!*******************************************!*\
  !*** ./~/angular2/es6/dev/src/di/key.es6 ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var Key = (function () {
	  function Key(token, id) {
	    _classCallCheck(this, Key);
	
	    this.token = token;
	    this.id = id;
	  }
	
	  _createClass(Key, [{
	    key: 'displayName',
	    get: function () {
	      return (0, _angular2SrcFacadeLang.stringify)(this.token);
	    }
	  }], [{
	    key: 'get',
	    value: function get(token) {
	      return _rtts_assertRtts_assert.assert.returnType(_globalKeyRegistry.get(token), Key);
	    }
	  }, {
	    key: 'numberOfKeys',
	    get: function () {
	      return _globalKeyRegistry.numberOfKeys;
	    }
	  }]);
	
	  return Key;
	})();
	
	exports.Key = Key;
	
	var KeyRegistry = (function () {
	  function KeyRegistry() {
	    _classCallCheck(this, KeyRegistry);
	
	    this._allKeys = _angular2SrcFacadeCollection.MapWrapper.create();
	  }
	
	  _createClass(KeyRegistry, [{
	    key: 'get',
	    value: function get(token) {
	      if (token instanceof Key) return _rtts_assertRtts_assert.assert.returnType(token, Key);
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._allKeys, token)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(this._allKeys, token), Key);
	      }
	      var newKey = new Key(token, Key.numberOfKeys);
	      _angular2SrcFacadeCollection.MapWrapper.set(this._allKeys, token, newKey);
	      return _rtts_assertRtts_assert.assert.returnType(newKey, Key);
	    }
	  }, {
	    key: 'numberOfKeys',
	    get: function () {
	      return _angular2SrcFacadeCollection.MapWrapper.size(this._allKeys);
	    }
	  }]);
	
	  return KeyRegistry;
	})();
	
	exports.KeyRegistry = KeyRegistry;
	
	var _globalKeyRegistry = new KeyRegistry();
	//# sourceMappingURL=key.js.map

	//# sourceMappingURL=./key.map

/***/ },
/* 106 */
/*!***************************************************!*\
  !*** ./~/angular2/es6/dev/src/di/annotations.es6 ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var Inject = function Inject(token) {
	  _classCallCheck(this, Inject);
	
	  this.token = token;
	};
	
	exports.Inject = Inject;
	
	Object.defineProperty(Inject, "annotations", { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var InjectPromise = function InjectPromise(token) {
	  _classCallCheck(this, InjectPromise);
	
	  this.token = token;
	};
	
	exports.InjectPromise = InjectPromise;
	
	Object.defineProperty(InjectPromise, "annotations", { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var InjectLazy = function InjectLazy(token) {
	  _classCallCheck(this, InjectLazy);
	
	  this.token = token;
	};
	
	exports.InjectLazy = InjectLazy;
	
	Object.defineProperty(InjectLazy, "annotations", { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var Optional = function Optional() {
	  _classCallCheck(this, Optional);
	};
	
	exports.Optional = Optional;
	
	Object.defineProperty(Optional, "annotations", { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var DependencyAnnotation = (function () {
	  function DependencyAnnotation() {
	    _classCallCheck(this, DependencyAnnotation);
	  }
	
	  _createClass(DependencyAnnotation, [{
	    key: "token",
	    get: function () {
	      return null;
	    }
	  }]);
	
	  return DependencyAnnotation;
	})();
	
	exports.DependencyAnnotation = DependencyAnnotation;
	
	Object.defineProperty(DependencyAnnotation, "annotations", { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var Injectable = function Injectable() {
	  _classCallCheck(this, Injectable);
	};
	
	exports.Injectable = Injectable;
	
	Object.defineProperty(Injectable, "annotations", { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	//# sourceMappingURL=annotations.js.map

	//# sourceMappingURL=./annotations.map

/***/ },
/* 107 */
/*!************************************************!*\
  !*** ./~/angular2/es6/dev/src/di/injector.es6 ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _binding = __webpack_require__(/*! ./binding */ 108);
	
	var _exceptions = __webpack_require__(/*! ./exceptions */ 113);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _key = __webpack_require__(/*! ./key */ 105);
	
	var _constructing = new Object();
	var _notFound = new Object();
	
	var _Waiting = function _Waiting(promise) {
	  _classCallCheck(this, _Waiting);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(promise, _angular2SrcFacadeAsync.Promise);
	  this.promise = promise;
	};
	
	Object.defineProperty(_Waiting, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeAsync.Promise]];
	  } });
	function _isWaiting(obj) {
	  return _rtts_assertRtts_assert.assert.returnType(obj instanceof _Waiting, _rtts_assertRtts_assert.assert.type.boolean);
	}
	
	var Injector = (function () {
	  function Injector(bindings, parent, defaultBindings) {
	    _classCallCheck(this, Injector);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(bindings, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _binding.ResolvedBinding), parent, Injector, defaultBindings, _rtts_assertRtts_assert.assert.type.boolean);
	    this._bindings = bindings;
	    this._instances = this._createInstances();
	    this._parent = parent;
	    this._defaultBindings = defaultBindings;
	    this._asyncStrategy = new _AsyncInjectorStrategy(this);
	    this._syncStrategy = new _SyncInjectorStrategy(this);
	  }
	
	  _createClass(Injector, [{
	    key: 'get',
	    value: function get(token) {
	      return this._getByKey(_key.Key.get(token), false, false, false);
	    }
	  }, {
	    key: 'getOptional',
	    value: function getOptional(token) {
	      return this._getByKey(_key.Key.get(token), false, false, true);
	    }
	  }, {
	    key: 'asyncGet',
	    value: function asyncGet(token) {
	      return _rtts_assertRtts_assert.assert.returnType(this._getByKey(_key.Key.get(token), true, false, false), _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: 'resolveAndCreateChild',
	    value: function resolveAndCreateChild(bindings) {
	      _rtts_assertRtts_assert.assert.argumentTypes(bindings, _angular2SrcFacadeCollection.List);
	      return _rtts_assertRtts_assert.assert.returnType(new Injector(Injector.resolve(bindings), this, false), Injector);
	    }
	  }, {
	    key: 'createChildFromResolved',
	    value: function createChildFromResolved(bindings) {
	      _rtts_assertRtts_assert.assert.argumentTypes(bindings, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _binding.ResolvedBinding));
	      return _rtts_assertRtts_assert.assert.returnType(new Injector(bindings, this, false), Injector);
	    }
	  }, {
	    key: '_createInstances',
	    value: function _createInstances() {
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.ListWrapper.createFixedSize(_key.Key.numberOfKeys + 1), _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: '_getByKey',
	    value: function _getByKey(key, returnPromise, returnLazy, optional) {
	      var _this = this;
	
	      if (returnLazy) {
	        return function () {
	          return _this._getByKey(key, returnPromise, false, optional);
	        };
	      }
	      var strategy = returnPromise ? this._asyncStrategy : this._syncStrategy;
	      var instance = strategy.readFromCache(key);
	      if (instance !== _notFound) return instance;
	      instance = strategy.instantiate(key);
	      if (instance !== _notFound) return instance;
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._parent)) {
	        return this._parent._getByKey(key, returnPromise, returnLazy, optional);
	      }
	      if (optional) {
	        return null;
	      } else {
	        throw new _exceptions.NoBindingError(key);
	      }
	    }
	  }, {
	    key: '_resolveDependencies',
	    value: function _resolveDependencies(key, binding, forceAsync) {
	      var _this2 = this;
	
	      try {
	        var getDependency = function getDependency(d) {
	          return _this2._getByKey(d.key, forceAsync || d.asPromise, d.lazy, d.optional);
	        };
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.ListWrapper.map(binding.dependencies, getDependency), _angular2SrcFacadeCollection.List);
	      } catch (e) {
	        this._clear(key);
	        if (e instanceof _exceptions.AbstractBindingError) e.addKey(key);
	        throw e;
	      }
	    }
	  }, {
	    key: '_getInstance',
	    value: function _getInstance(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key);
	      if (this._instances.length <= key.id) return null;
	      return _angular2SrcFacadeCollection.ListWrapper.get(this._instances, key.id);
	    }
	  }, {
	    key: '_setInstance',
	    value: function _setInstance(key, obj) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key, obj, _rtts_assertRtts_assert.assert.type.any);
	      _angular2SrcFacadeCollection.ListWrapper.set(this._instances, key.id, obj);
	    }
	  }, {
	    key: '_getBinding',
	    value: function _getBinding(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key);
	      var binding = this._bindings.length <= key.id ? null : _angular2SrcFacadeCollection.ListWrapper.get(this._bindings, key.id);
	      if ((0, _angular2SrcFacadeLang.isBlank)(binding) && this._defaultBindings) {
	        return (0, _binding.bind)(key.token).toClass(key.token).resolve();
	      } else {
	        return binding;
	      }
	    }
	  }, {
	    key: '_markAsConstructing',
	    value: function _markAsConstructing(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key);
	      this._setInstance(key, _constructing);
	    }
	  }, {
	    key: '_clear',
	    value: function _clear(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key);
	      this._setInstance(key, null);
	    }
	  }], [{
	    key: 'resolve',
	    value: function resolve(bindings) {
	      _rtts_assertRtts_assert.assert.argumentTypes(bindings, _angular2SrcFacadeCollection.List);
	      var resolvedBindings = _resolveBindings(bindings);
	      var flatten = _flattenBindings(resolvedBindings, _angular2SrcFacadeCollection.MapWrapper.create());
	      return _rtts_assertRtts_assert.assert.returnType(_createListOfBindings(flatten), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _binding.ResolvedBinding));
	    }
	  }, {
	    key: 'resolveAndCreate',
	    value: function resolveAndCreate(bindings) {
	      var _ref = arguments[1] === undefined ? {} : arguments[1];
	
	      var _ref$defaultBindings = _ref.defaultBindings;
	      var defaultBindings = _ref$defaultBindings === undefined ? false : _ref$defaultBindings;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(bindings, _angular2SrcFacadeCollection.List);
	      return _rtts_assertRtts_assert.assert.returnType(new Injector(Injector.resolve(bindings), null, defaultBindings), Injector);
	    }
	  }, {
	    key: 'fromResolvedBindings',
	    value: function fromResolvedBindings(bindings) {
	      var _ref2 = arguments[1] === undefined ? {} : arguments[1];
	
	      var _ref2$defaultBindings = _ref2.defaultBindings;
	      var defaultBindings = _ref2$defaultBindings === undefined ? false : _ref2$defaultBindings;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(bindings, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _binding.ResolvedBinding));
	      return _rtts_assertRtts_assert.assert.returnType(new Injector(bindings, null, defaultBindings), Injector);
	    }
	  }]);
	
	  return Injector;
	})();
	
	exports.Injector = Injector;
	
	Object.defineProperty(Injector, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _binding.ResolvedBinding)], [Injector], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(Injector.resolve, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(Injector.resolveAndCreate, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List], []];
	  } });
	Object.defineProperty(Injector.fromResolvedBindings, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _binding.ResolvedBinding)], []];
	  } });
	Object.defineProperty(Injector.prototype.resolveAndCreateChild, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(Injector.prototype.createChildFromResolved, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _binding.ResolvedBinding)]];
	  } });
	Object.defineProperty(Injector.prototype._getByKey, 'parameters', { get: function get() {
	    return [[_key.Key], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(Injector.prototype._resolveDependencies, 'parameters', { get: function get() {
	    return [[_key.Key], [_binding.ResolvedBinding], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(Injector.prototype._getInstance, 'parameters', { get: function get() {
	    return [[_key.Key]];
	  } });
	Object.defineProperty(Injector.prototype._setInstance, 'parameters', { get: function get() {
	    return [[_key.Key], []];
	  } });
	Object.defineProperty(Injector.prototype._getBinding, 'parameters', { get: function get() {
	    return [[_key.Key]];
	  } });
	Object.defineProperty(Injector.prototype._markAsConstructing, 'parameters', { get: function get() {
	    return [[_key.Key]];
	  } });
	Object.defineProperty(Injector.prototype._clear, 'parameters', { get: function get() {
	    return [[_key.Key]];
	  } });
	
	var _SyncInjectorStrategy = (function () {
	  function _SyncInjectorStrategy(injector) {
	    _classCallCheck(this, _SyncInjectorStrategy);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(injector, Injector);
	    this.injector = injector;
	  }
	
	  _createClass(_SyncInjectorStrategy, [{
	    key: 'readFromCache',
	    value: function readFromCache(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key);
	      if (key.token === Injector) {
	        return this.injector;
	      }
	      var instance = this.injector._getInstance(key);
	      if (instance === _constructing) {
	        throw new _exceptions.CyclicDependencyError(key);
	      } else if ((0, _angular2SrcFacadeLang.isPresent)(instance) && !_isWaiting(instance)) {
	        return instance;
	      } else {
	        return _notFound;
	      }
	    }
	  }, {
	    key: 'instantiate',
	    value: function instantiate(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key);
	      var binding = this.injector._getBinding(key);
	      if ((0, _angular2SrcFacadeLang.isBlank)(binding)) return _notFound;
	      if (binding.providedAsPromise) throw new _exceptions.AsyncBindingError(key);
	      this.injector._markAsConstructing(key);
	      var deps = this.injector._resolveDependencies(key, binding, false);
	      return this._createInstance(key, binding, deps);
	    }
	  }, {
	    key: '_createInstance',
	    value: function _createInstance(key, binding, deps) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key, binding, _binding.ResolvedBinding, deps, _angular2SrcFacadeCollection.List);
	      try {
	        var instance = _angular2SrcFacadeLang.FunctionWrapper.apply(binding.factory, deps);
	        this.injector._setInstance(key, instance);
	        return instance;
	      } catch (e) {
	        this.injector._clear(key);
	        throw new _exceptions.InstantiationError(e, key);
	      }
	    }
	  }]);
	
	  return _SyncInjectorStrategy;
	})();
	
	Object.defineProperty(_SyncInjectorStrategy, 'parameters', { get: function get() {
	    return [[Injector]];
	  } });
	Object.defineProperty(_SyncInjectorStrategy.prototype.readFromCache, 'parameters', { get: function get() {
	    return [[_key.Key]];
	  } });
	Object.defineProperty(_SyncInjectorStrategy.prototype.instantiate, 'parameters', { get: function get() {
	    return [[_key.Key]];
	  } });
	Object.defineProperty(_SyncInjectorStrategy.prototype._createInstance, 'parameters', { get: function get() {
	    return [[_key.Key], [_binding.ResolvedBinding], [_angular2SrcFacadeCollection.List]];
	  } });
	
	var _AsyncInjectorStrategy = (function () {
	  function _AsyncInjectorStrategy(injector) {
	    _classCallCheck(this, _AsyncInjectorStrategy);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(injector, Injector);
	    this.injector = injector;
	  }
	
	  _createClass(_AsyncInjectorStrategy, [{
	    key: 'readFromCache',
	    value: function readFromCache(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key);
	      if (key.token === Injector) {
	        return _angular2SrcFacadeAsync.PromiseWrapper.resolve(this.injector);
	      }
	      var instance = this.injector._getInstance(key);
	      if (instance === _constructing) {
	        throw new _exceptions.CyclicDependencyError(key);
	      } else if (_isWaiting(instance)) {
	        return instance.promise;
	      } else if ((0, _angular2SrcFacadeLang.isPresent)(instance)) {
	        return _angular2SrcFacadeAsync.PromiseWrapper.resolve(instance);
	      } else {
	        return _notFound;
	      }
	    }
	  }, {
	    key: 'instantiate',
	    value: function instantiate(key) {
	      var _this3 = this;
	
	      var binding = this.injector._getBinding(key);
	      if ((0, _angular2SrcFacadeLang.isBlank)(binding)) return _notFound;
	      this.injector._markAsConstructing(key);
	      var deps = this.injector._resolveDependencies(key, binding, true);
	      var depsPromise = _angular2SrcFacadeAsync.PromiseWrapper.all(deps);
	      var promise = _angular2SrcFacadeAsync.PromiseWrapper.then(depsPromise, null, function (e) {
	        return _this3._errorHandler(key, e);
	      }).then(function (deps) {
	        return _this3._findOrCreate(key, binding, deps);
	      }).then(function (instance) {
	        return _this3._cacheInstance(key, instance);
	      });
	      this.injector._setInstance(key, new _Waiting(promise));
	      return promise;
	    }
	  }, {
	    key: '_errorHandler',
	    value: function _errorHandler(key, e) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key, e, _rtts_assertRtts_assert.assert.type.any);
	      if (e instanceof _exceptions.AbstractBindingError) e.addKey(key);
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.reject(e), _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: '_findOrCreate',
	    value: function _findOrCreate(key, binding, deps) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key, binding, _binding.ResolvedBinding, deps, _angular2SrcFacadeCollection.List);
	      try {
	        var instance = this.injector._getInstance(key);
	        if (!_isWaiting(instance)) return instance;
	        return _angular2SrcFacadeLang.FunctionWrapper.apply(binding.factory, deps);
	      } catch (e) {
	        this.injector._clear(key);
	        throw new _exceptions.InstantiationError(e, key);
	      }
	    }
	  }, {
	    key: '_cacheInstance',
	    value: function _cacheInstance(key, instance) {
	      this.injector._setInstance(key, instance);
	      return instance;
	    }
	  }]);
	
	  return _AsyncInjectorStrategy;
	})();
	
	Object.defineProperty(_AsyncInjectorStrategy, 'parameters', { get: function get() {
	    return [[Injector]];
	  } });
	Object.defineProperty(_AsyncInjectorStrategy.prototype.readFromCache, 'parameters', { get: function get() {
	    return [[_key.Key]];
	  } });
	Object.defineProperty(_AsyncInjectorStrategy.prototype.instantiate, 'parameters', { get: function get() {
	    return [[_key.Key]];
	  } });
	Object.defineProperty(_AsyncInjectorStrategy.prototype._errorHandler, 'parameters', { get: function get() {
	    return [[_key.Key], []];
	  } });
	Object.defineProperty(_AsyncInjectorStrategy.prototype._findOrCreate, 'parameters', { get: function get() {
	    return [[_key.Key], [_binding.ResolvedBinding], [_angular2SrcFacadeCollection.List]];
	  } });
	function _resolveBindings(bindings) {
	  _rtts_assertRtts_assert.assert.argumentTypes(bindings, _angular2SrcFacadeCollection.List);
	  var resolvedList = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(bindings.length);
	  for (var i = 0; i < bindings.length; i++) {
	    var unresolved = bindings[i];
	    var resolved;
	    if (unresolved instanceof _binding.ResolvedBinding) {
	      resolved = unresolved;
	    } else if (unresolved instanceof _angular2SrcFacadeLang.Type) {
	      resolved = (0, _binding.bind)(unresolved).toClass(unresolved).resolve();
	    } else if (unresolved instanceof _binding.Binding) {
	      resolved = unresolved.resolve();
	    } else if (unresolved instanceof _angular2SrcFacadeCollection.List) {
	      resolved = _resolveBindings(unresolved);
	    } else if (unresolved instanceof _binding.BindingBuilder) {
	      throw new _exceptions.InvalidBindingError(unresolved.token);
	    } else {
	      throw new _exceptions.InvalidBindingError(unresolved);
	    }
	    resolvedList[i] = resolved;
	  }
	  return _rtts_assertRtts_assert.assert.returnType(resolvedList, _angular2SrcFacadeCollection.List);
	}
	Object.defineProperty(_resolveBindings, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	function _createListOfBindings(flattenedBindings) {
	  var bindings = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(_key.Key.numberOfKeys + 1);
	  _angular2SrcFacadeCollection.MapWrapper.forEach(flattenedBindings, function (v, keyId) {
	    return bindings[keyId] = v;
	  });
	  return _rtts_assertRtts_assert.assert.returnType(bindings, _angular2SrcFacadeCollection.List);
	}
	function _flattenBindings(bindings, res) {
	  _rtts_assertRtts_assert.assert.argumentTypes(bindings, _angular2SrcFacadeCollection.List, res, _angular2SrcFacadeCollection.Map);
	  _angular2SrcFacadeCollection.ListWrapper.forEach(bindings, function (b) {
	    if (b instanceof _binding.ResolvedBinding) {
	      _angular2SrcFacadeCollection.MapWrapper.set(res, b.key.id, b);
	    } else if (b instanceof _angular2SrcFacadeCollection.List) {
	      _flattenBindings(b, res);
	    }
	  });
	  return _rtts_assertRtts_assert.assert.returnType(res, _angular2SrcFacadeCollection.Map);
	}
	Object.defineProperty(_flattenBindings, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.Map]];
	  } });
	//# sourceMappingURL=injector.js.map

	//# sourceMappingURL=./injector.map

/***/ },
/* 108 */
/*!***********************************************!*\
  !*** ./~/angular2/es6/dev/src/di/binding.es6 ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	exports.bind = bind;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcReflectionReflection = __webpack_require__(/*! angular2/src/reflection/reflection */ 109);
	
	var _key = __webpack_require__(/*! ./key */ 105);
	
	var _annotations = __webpack_require__(/*! ./annotations */ 106);
	
	var _exceptions = __webpack_require__(/*! ./exceptions */ 113);
	
	var Dependency = (function () {
	  function Dependency(key, asPromise, lazy, optional, properties) {
	    _classCallCheck(this, Dependency);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key, asPromise, _rtts_assertRtts_assert.assert.type.boolean, lazy, _rtts_assertRtts_assert.assert.type.boolean, optional, _rtts_assertRtts_assert.assert.type.boolean, properties, _angular2SrcFacadeCollection.List);
	    this.key = key;
	    this.asPromise = asPromise;
	    this.lazy = lazy;
	    this.optional = optional;
	    this.properties = properties;
	  }
	
	  _createClass(Dependency, null, [{
	    key: 'fromKey',
	    value: function fromKey(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key);
	      return new Dependency(key, false, false, false, []);
	    }
	  }]);
	
	  return Dependency;
	})();
	
	exports.Dependency = Dependency;
	
	Object.defineProperty(Dependency, 'parameters', { get: function get() {
	    return [[_key.Key], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.boolean], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(Dependency.fromKey, 'parameters', { get: function get() {
	    return [[_key.Key]];
	  } });
	var _EMPTY_LIST = [];
	
	var Binding = (function () {
	  function Binding(token, _ref) {
	    var toClass = _ref.toClass;
	    var toValue = _ref.toValue;
	    var toAlias = _ref.toAlias;
	    var toFactory = _ref.toFactory;
	    var toAsyncFactory = _ref.toAsyncFactory;
	    var deps = _ref.deps;
	
	    _classCallCheck(this, Binding);
	
	    this.token = token;
	    this.toClass = toClass;
	    this.toValue = toValue;
	    this.toAlias = toAlias;
	    this.toFactory = toFactory;
	    this.toAsyncFactory = toAsyncFactory;
	    this.dependencies = deps;
	  }
	
	  _createClass(Binding, [{
	    key: 'resolve',
	    value: function resolve() {
	      var _this = this;
	
	      var factoryFn;
	      var resolvedDeps;
	      var isAsync = false;
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.toClass)) {
	        factoryFn = _angular2SrcReflectionReflection.reflector.factory(this.toClass);
	        resolvedDeps = _dependenciesFor(this.toClass);
	      } else if ((0, _angular2SrcFacadeLang.isPresent)(this.toAlias)) {
	        factoryFn = function (aliasInstance) {
	          return aliasInstance;
	        };
	        resolvedDeps = [Dependency.fromKey(_key.Key.get(this.toAlias))];
	      } else if ((0, _angular2SrcFacadeLang.isPresent)(this.toFactory)) {
	        factoryFn = this.toFactory;
	        resolvedDeps = _constructDependencies(this.toFactory, this.dependencies);
	      } else if ((0, _angular2SrcFacadeLang.isPresent)(this.toAsyncFactory)) {
	        factoryFn = this.toAsyncFactory;
	        resolvedDeps = _constructDependencies(this.toAsyncFactory, this.dependencies);
	        isAsync = true;
	      } else {
	        factoryFn = function () {
	          return _this.toValue;
	        };
	        resolvedDeps = _EMPTY_LIST;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(new ResolvedBinding(_key.Key.get(this.token), factoryFn, resolvedDeps, isAsync), ResolvedBinding);
	    }
	  }]);
	
	  return Binding;
	})();
	
	exports.Binding = Binding;
	
	Object.defineProperty(Binding, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var ResolvedBinding = function ResolvedBinding(key, factory, dependencies, providedAsPromise) {
	  _classCallCheck(this, ResolvedBinding);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(key, _key.Key, factory, Function, dependencies, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, Dependency), providedAsPromise, _rtts_assertRtts_assert.assert.type.boolean);
	  this.key = key;
	  this.factory = factory;
	  this.dependencies = dependencies;
	  this.providedAsPromise = providedAsPromise;
	};
	
	exports.ResolvedBinding = ResolvedBinding;
	
	Object.defineProperty(ResolvedBinding, 'parameters', { get: function get() {
	    return [[_key.Key], [Function], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, Dependency)], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	
	function bind(token) {
	  return _rtts_assertRtts_assert.assert.returnType(new BindingBuilder(token), BindingBuilder);
	}
	
	var BindingBuilder = (function () {
	  function BindingBuilder(token) {
	    _classCallCheck(this, BindingBuilder);
	
	    this.token = token;
	  }
	
	  _createClass(BindingBuilder, [{
	    key: 'toClass',
	    value: function toClass(type) {
	      _rtts_assertRtts_assert.assert.argumentTypes(type, _angular2SrcFacadeLang.Type);
	      return _rtts_assertRtts_assert.assert.returnType(new Binding(this.token, { toClass: type }), Binding);
	    }
	  }, {
	    key: 'toValue',
	    value: function toValue(value) {
	      return _rtts_assertRtts_assert.assert.returnType(new Binding(this.token, { toValue: value }), Binding);
	    }
	  }, {
	    key: 'toAlias',
	    value: function toAlias(aliasToken) {
	      return _rtts_assertRtts_assert.assert.returnType(new Binding(this.token, { toAlias: aliasToken }), Binding);
	    }
	  }, {
	    key: 'toFactory',
	    value: function toFactory(factoryFunction) {
	      var dependencies = arguments[1] === undefined ? null : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(factoryFunction, Function, dependencies, _angular2SrcFacadeCollection.List);
	      return _rtts_assertRtts_assert.assert.returnType(new Binding(this.token, {
	        toFactory: factoryFunction,
	        deps: dependencies
	      }), Binding);
	    }
	  }, {
	    key: 'toAsyncFactory',
	    value: function toAsyncFactory(factoryFunction) {
	      var dependencies = arguments[1] === undefined ? null : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(factoryFunction, Function, dependencies, _angular2SrcFacadeCollection.List);
	      return _rtts_assertRtts_assert.assert.returnType(new Binding(this.token, {
	        toAsyncFactory: factoryFunction,
	        deps: dependencies
	      }), Binding);
	    }
	  }]);
	
	  return BindingBuilder;
	})();
	
	exports.BindingBuilder = BindingBuilder;
	
	Object.defineProperty(BindingBuilder.prototype.toClass, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	Object.defineProperty(BindingBuilder.prototype.toFactory, 'parameters', { get: function get() {
	    return [[Function], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(BindingBuilder.prototype.toAsyncFactory, 'parameters', { get: function get() {
	    return [[Function], [_angular2SrcFacadeCollection.List]];
	  } });
	function _constructDependencies(factoryFunction, dependencies) {
	  return (0, _angular2SrcFacadeLang.isBlank)(dependencies) ? _dependenciesFor(factoryFunction) : _angular2SrcFacadeCollection.ListWrapper.map(dependencies, function (t) {
	    return Dependency.fromKey(_key.Key.get(t));
	  });
	}
	Object.defineProperty(_constructDependencies, 'parameters', { get: function get() {
	    return [[Function], [_angular2SrcFacadeCollection.List]];
	  } });
	function _dependenciesFor(typeOrFunc) {
	  var params = _angular2SrcReflectionReflection.reflector.parameters(typeOrFunc);
	  if ((0, _angular2SrcFacadeLang.isBlank)(params)) return _rtts_assertRtts_assert.assert.returnType([], _angular2SrcFacadeCollection.List);
	  if (_angular2SrcFacadeCollection.ListWrapper.any(params, function (p) {
	    return (0, _angular2SrcFacadeLang.isBlank)(p);
	  })) throw new _exceptions.NoAnnotationError(typeOrFunc);
	  return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.ListWrapper.map(params, function (p) {
	    return _extractToken(typeOrFunc, p);
	  }), _angular2SrcFacadeCollection.List);
	}
	function _extractToken(typeOrFunc, annotations) {
	  var depProps = [];
	  var token = null;
	  var optional = false;
	  var lazy = false;
	  var asPromise = false;
	  for (var i = 0; i < annotations.length; ++i) {
	    var paramAnnotation = annotations[i];
	    if (paramAnnotation instanceof _angular2SrcFacadeLang.Type) {
	      token = paramAnnotation;
	    } else if (paramAnnotation instanceof _annotations.Inject) {
	      token = paramAnnotation.token;
	    } else if (paramAnnotation instanceof _annotations.InjectPromise) {
	      token = paramAnnotation.token;
	      asPromise = true;
	    } else if (paramAnnotation instanceof _annotations.InjectLazy) {
	      token = paramAnnotation.token;
	      lazy = true;
	    } else if (paramAnnotation instanceof _annotations.Optional) {
	      optional = true;
	    } else if (paramAnnotation instanceof _annotations.DependencyAnnotation) {
	      if ((0, _angular2SrcFacadeLang.isPresent)(paramAnnotation.token)) {
	        token = paramAnnotation.token;
	      }
	      _angular2SrcFacadeCollection.ListWrapper.push(depProps, paramAnnotation);
	    }
	  }
	  if ((0, _angular2SrcFacadeLang.isPresent)(token)) {
	    return _createDependency(token, asPromise, lazy, optional, depProps);
	  } else {
	    throw new _exceptions.NoAnnotationError(typeOrFunc);
	  }
	}
	function _createDependency(token, asPromise, lazy, optional, depProps) {
	  return _rtts_assertRtts_assert.assert.returnType(new Dependency(_key.Key.get(token), asPromise, lazy, optional, depProps), Dependency);
	}
	//# sourceMappingURL=binding.js.map
	
	//# sourceMappingURL=./binding.map

/***/ },
/* 109 */
/*!**********************************************************!*\
  !*** ./~/angular2/es6/dev/src/reflection/reflection.es6 ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _reflector = __webpack_require__(/*! ./reflector */ 110);
	
	var _reflection_capabilities = __webpack_require__(/*! ./reflection_capabilities */ 112);
	
	Object.defineProperty(exports, 'Reflector', {
	  enumerable: true,
	  get: function get() {
	    return _reflector.Reflector;
	  }
	});
	var reflector = new _reflector.Reflector(new _reflection_capabilities.ReflectionCapabilities());
	//# sourceMappingURL=reflection.es6.map
	
	//# sourceMappingURL=./reflection.map
	exports.reflector = reflector;

/***/ },
/* 110 */
/*!*********************************************************!*\
  !*** ./~/angular2/es6/dev/src/reflection/reflector.es6 ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _types = __webpack_require__(/*! ./types */ 111);
	
	Object.defineProperty(exports, 'SetterFn', {
	  enumerable: true,
	  get: function get() {
	    return _types.SetterFn;
	  }
	});
	Object.defineProperty(exports, 'GetterFn', {
	  enumerable: true,
	  get: function get() {
	    return _types.GetterFn;
	  }
	});
	Object.defineProperty(exports, 'MethodFn', {
	  enumerable: true,
	  get: function get() {
	    return _types.MethodFn;
	  }
	});
	
	var Reflector = (function () {
	  function Reflector(reflectionCapabilities) {
	    _classCallCheck(this, Reflector);
	
	    this._typeInfo = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._getters = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._setters = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._methods = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.reflectionCapabilities = reflectionCapabilities;
	  }
	
	  _createClass(Reflector, [{
	    key: 'registerType',
	    value: function registerType(type, typeInfo) {
	      _angular2SrcFacadeCollection.MapWrapper.set(this._typeInfo, type, typeInfo);
	    }
	  }, {
	    key: 'registerGetters',
	    value: function registerGetters(getters) {
	      _mergeMaps(this._getters, getters);
	    }
	  }, {
	    key: 'registerSetters',
	    value: function registerSetters(setters) {
	      _mergeMaps(this._setters, setters);
	    }
	  }, {
	    key: 'registerMethods',
	    value: function registerMethods(methods) {
	      _mergeMaps(this._methods, methods);
	    }
	  }, {
	    key: 'factory',
	    value: function factory(type) {
	      _rtts_assertRtts_assert.assert.argumentTypes(type, _angular2SrcFacadeLang.Type);
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._typeInfo, type)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(this._typeInfo, type)['factory'], Function);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(this.reflectionCapabilities.factory(type), Function);
	      }
	    }
	  }, {
	    key: 'parameters',
	    value: function parameters(typeOfFunc) {
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._typeInfo, typeOfFunc)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(this._typeInfo, typeOfFunc)['parameters'], _angular2SrcFacadeCollection.List);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(this.reflectionCapabilities.parameters(typeOfFunc), _angular2SrcFacadeCollection.List);
	      }
	    }
	  }, {
	    key: 'annotations',
	    value: function annotations(typeOfFunc) {
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._typeInfo, typeOfFunc)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(this._typeInfo, typeOfFunc)['annotations'], _angular2SrcFacadeCollection.List);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(this.reflectionCapabilities.annotations(typeOfFunc), _angular2SrcFacadeCollection.List);
	      }
	    }
	  }, {
	    key: 'getter',
	    value: function getter(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._getters, name)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(this._getters, name), _types.GetterFn);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(this.reflectionCapabilities.getter(name), _types.GetterFn);
	      }
	    }
	  }, {
	    key: 'setter',
	    value: function setter(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._setters, name)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(this._setters, name), _types.SetterFn);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(this.reflectionCapabilities.setter(name), _types.SetterFn);
	      }
	    }
	  }, {
	    key: 'method',
	    value: function method(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._methods, name)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(this._methods, name), _types.MethodFn);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(this.reflectionCapabilities.method(name), _types.MethodFn);
	      }
	    }
	  }]);
	
	  return Reflector;
	})();
	
	exports.Reflector = Reflector;
	
	Object.defineProperty(Reflector.prototype.factory, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	Object.defineProperty(Reflector.prototype.getter, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Reflector.prototype.setter, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Reflector.prototype.method, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function _mergeMaps(target, config) {
	  _angular2SrcFacadeCollection.StringMapWrapper.forEach(config, function (v, k) {
	    return _angular2SrcFacadeCollection.MapWrapper.set(target, k, v);
	  });
	}
	Object.defineProperty(_mergeMaps, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.Map], []];
	  } });
	//# sourceMappingURL=reflector.js.map

	//# sourceMappingURL=./reflector.map

/***/ },
/* 111 */
/*!*****************************************************!*\
  !*** ./~/angular2/es6/dev/src/reflection/types.es6 ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var SetterFn = Function;
	exports.SetterFn = SetterFn;
	var GetterFn = Function;
	exports.GetterFn = GetterFn;
	var MethodFn = Function;
	//# sourceMappingURL=types.es6.map
	
	//# sourceMappingURL=./types.map
	exports.MethodFn = MethodFn;

/***/ },
/* 112 */
/*!***********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/reflection/reflection_capabilities.es6 ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _types = __webpack_require__(/*! ./types */ 111);
	
	var ReflectionCapabilities = (function () {
	  function ReflectionCapabilities() {
	    _classCallCheck(this, ReflectionCapabilities);
	  }
	
	  _createClass(ReflectionCapabilities, [{
	    key: 'factory',
	    value: function factory(type) {
	      _rtts_assertRtts_assert.assert.argumentTypes(type, _angular2SrcFacadeLang.Type);
	      switch (type.length) {
	        case 0:
	          return _rtts_assertRtts_assert.assert.returnType(function () {
	            return new type();
	          }, Function);
	        case 1:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1) {
	            return new type(a1);
	          }, Function);
	        case 2:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1, a2) {
	            return new type(a1, a2);
	          }, Function);
	        case 3:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1, a2, a3) {
	            return new type(a1, a2, a3);
	          }, Function);
	        case 4:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1, a2, a3, a4) {
	            return new type(a1, a2, a3, a4);
	          }, Function);
	        case 5:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1, a2, a3, a4, a5) {
	            return new type(a1, a2, a3, a4, a5);
	          }, Function);
	        case 6:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1, a2, a3, a4, a5, a6) {
	            return new type(a1, a2, a3, a4, a5, a6);
	          }, Function);
	        case 7:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1, a2, a3, a4, a5, a6, a7) {
	            return new type(a1, a2, a3, a4, a5, a6, a7);
	          }, Function);
	        case 8:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1, a2, a3, a4, a5, a6, a7, a8) {
	            return new type(a1, a2, a3, a4, a5, a6, a7, a8);
	          }, Function);
	        case 9:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	            return new type(a1, a2, a3, a4, a5, a6, a7, a8, a9);
	          }, Function);
	        case 10:
	          return _rtts_assertRtts_assert.assert.returnType(function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) {
	            return new type(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	          }, Function);
	      }
	      ;
	      throw new Error('Factory cannot take more than 10 arguments');
	    }
	  }, {
	    key: 'parameters',
	    value: function parameters(typeOfFunc) {
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(typeOfFunc.parameters) ? typeOfFunc.parameters : _angular2SrcFacadeCollection.ListWrapper.createFixedSize(typeOfFunc.length), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeCollection.List));
	    }
	  }, {
	    key: 'annotations',
	    value: function annotations(typeOfFunc) {
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(typeOfFunc.annotations) ? typeOfFunc.annotations : [], _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: 'getter',
	    value: function getter(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(new Function('o', 'return o.' + name + ';'), _types.GetterFn);
	    }
	  }, {
	    key: 'setter',
	    value: function setter(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(new Function('o', 'v', 'return o.' + name + ' = v;'), _types.SetterFn);
	    }
	  }, {
	    key: 'method',
	    value: function method(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      var method = 'o.' + name;
	      return _rtts_assertRtts_assert.assert.returnType(new Function('o', 'args', 'if (!' + method + ') throw new Error(\'"' + name + '" is undefined\');' + ('return ' + method + '.apply(o, args);')), _types.MethodFn);
	    }
	  }]);
	
	  return ReflectionCapabilities;
	})();
	
	exports.ReflectionCapabilities = ReflectionCapabilities;
	
	Object.defineProperty(ReflectionCapabilities.prototype.factory, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	Object.defineProperty(ReflectionCapabilities.prototype.getter, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ReflectionCapabilities.prototype.setter, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ReflectionCapabilities.prototype.method, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=reflection_capabilities.es6.map

	//# sourceMappingURL=./reflection_capabilities.map

/***/ },
/* 113 */
/*!**************************************************!*\
  !*** ./~/angular2/es6/dev/src/di/exceptions.es6 ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	function findFirstClosedCycle(keys) {
	  _rtts_assertRtts_assert.assert.argumentTypes(keys, _angular2SrcFacadeCollection.List);
	  var res = [];
	  for (var i = 0; i < keys.length; ++i) {
	    if (_angular2SrcFacadeCollection.ListWrapper.contains(res, keys[i])) {
	      _angular2SrcFacadeCollection.ListWrapper.push(res, keys[i]);
	      return _rtts_assertRtts_assert.assert.returnType(res, _angular2SrcFacadeCollection.List);
	    } else {
	      _angular2SrcFacadeCollection.ListWrapper.push(res, keys[i]);
	    }
	  }
	  return _rtts_assertRtts_assert.assert.returnType(res, _angular2SrcFacadeCollection.List);
	}
	Object.defineProperty(findFirstClosedCycle, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	function constructResolvingPath(keys) {
	  if (keys.length > 1) {
	    var reversed = findFirstClosedCycle(_angular2SrcFacadeCollection.ListWrapper.reversed(keys));
	    var tokenStrs = _angular2SrcFacadeCollection.ListWrapper.map(reversed, function (k) {
	      return (0, _angular2SrcFacadeLang.stringify)(k.token);
	    });
	    return _rtts_assertRtts_assert.assert.returnType(' (' + tokenStrs.join(' -> ') + ')', _rtts_assertRtts_assert.assert.type.string);
	  } else {
	    return _rtts_assertRtts_assert.assert.returnType('', _rtts_assertRtts_assert.assert.type.string);
	  }
	}
	Object.defineProperty(constructResolvingPath, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	
	var AbstractBindingError = (function (_Error) {
	  function AbstractBindingError(key, constructResolvingMessage) {
	    _classCallCheck(this, AbstractBindingError);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(key, _rtts_assertRtts_assert.assert.type.any, constructResolvingMessage, Function);
	    _get(Object.getPrototypeOf(AbstractBindingError.prototype), 'constructor', this).call(this);
	    this.keys = [key];
	    this.constructResolvingMessage = constructResolvingMessage;
	    this.message = this.constructResolvingMessage(this.keys);
	  }
	
	  _inherits(AbstractBindingError, _Error);
	
	  _createClass(AbstractBindingError, [{
	    key: 'addKey',
	    value: function addKey(key) {
	      _angular2SrcFacadeCollection.ListWrapper.push(this.keys, key);
	      this.message = this.constructResolvingMessage(this.keys);
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType(this.message, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return AbstractBindingError;
	})(Error);
	
	exports.AbstractBindingError = AbstractBindingError;
	
	Object.defineProperty(AbstractBindingError, 'parameters', { get: function get() {
	    return [[], [Function]];
	  } });
	
	var NoBindingError = (function (_AbstractBindingError) {
	  function NoBindingError(key) {
	    _classCallCheck(this, NoBindingError);
	
	    _get(Object.getPrototypeOf(NoBindingError.prototype), 'constructor', this).call(this, key, function (keys) {
	      _rtts_assertRtts_assert.assert.argumentTypes(keys, _angular2SrcFacadeCollection.List);
	      var first = (0, _angular2SrcFacadeLang.stringify)(_angular2SrcFacadeCollection.ListWrapper.first(keys).token);
	      return 'No provider for ' + first + '!' + constructResolvingPath(keys);
	    });
	  }
	
	  _inherits(NoBindingError, _AbstractBindingError);
	
	  return NoBindingError;
	})(AbstractBindingError);
	
	exports.NoBindingError = NoBindingError;
	
	var AsyncBindingError = (function (_AbstractBindingError2) {
	  function AsyncBindingError(key) {
	    _classCallCheck(this, AsyncBindingError);
	
	    _get(Object.getPrototypeOf(AsyncBindingError.prototype), 'constructor', this).call(this, key, function (keys) {
	      _rtts_assertRtts_assert.assert.argumentTypes(keys, _angular2SrcFacadeCollection.List);
	      var first = (0, _angular2SrcFacadeLang.stringify)(_angular2SrcFacadeCollection.ListWrapper.first(keys).token);
	      return 'Cannot instantiate ' + first + ' synchronously. ' + ('It is provided as a promise!' + constructResolvingPath(keys));
	    });
	  }
	
	  _inherits(AsyncBindingError, _AbstractBindingError2);
	
	  return AsyncBindingError;
	})(AbstractBindingError);
	
	exports.AsyncBindingError = AsyncBindingError;
	
	var CyclicDependencyError = (function (_AbstractBindingError3) {
	  function CyclicDependencyError(key) {
	    _classCallCheck(this, CyclicDependencyError);
	
	    _get(Object.getPrototypeOf(CyclicDependencyError.prototype), 'constructor', this).call(this, key, function (keys) {
	      _rtts_assertRtts_assert.assert.argumentTypes(keys, _angular2SrcFacadeCollection.List);
	      return 'Cannot instantiate cyclic dependency!' + constructResolvingPath(keys);
	    });
	  }
	
	  _inherits(CyclicDependencyError, _AbstractBindingError3);
	
	  return CyclicDependencyError;
	})(AbstractBindingError);
	
	exports.CyclicDependencyError = CyclicDependencyError;
	
	var InstantiationError = (function (_AbstractBindingError4) {
	  function InstantiationError(cause, key) {
	    _classCallCheck(this, InstantiationError);
	
	    _get(Object.getPrototypeOf(InstantiationError.prototype), 'constructor', this).call(this, key, function (keys) {
	      _rtts_assertRtts_assert.assert.argumentTypes(keys, _angular2SrcFacadeCollection.List);
	      var first = (0, _angular2SrcFacadeLang.stringify)(_angular2SrcFacadeCollection.ListWrapper.first(keys).token);
	      return 'Error during instantiation of ' + first + '!' + constructResolvingPath(keys) + '.' + (' ORIGINAL ERROR: ' + cause);
	    });
	    this.cause = cause;
	    this.causeKey = key;
	  }
	
	  _inherits(InstantiationError, _AbstractBindingError4);
	
	  return InstantiationError;
	})(AbstractBindingError);
	
	exports.InstantiationError = InstantiationError;
	
	var InvalidBindingError = (function (_Error2) {
	  function InvalidBindingError(binding) {
	    _classCallCheck(this, InvalidBindingError);
	
	    _get(Object.getPrototypeOf(InvalidBindingError.prototype), 'constructor', this).call(this);
	    this.message = 'Invalid binding ' + binding;
	  }
	
	  _inherits(InvalidBindingError, _Error2);
	
	  _createClass(InvalidBindingError, [{
	    key: 'toString',
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType(this.message, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return InvalidBindingError;
	})(Error);
	
	exports.InvalidBindingError = InvalidBindingError;
	
	var NoAnnotationError = (function (_Error3) {
	  function NoAnnotationError(typeOrFunc) {
	    _classCallCheck(this, NoAnnotationError);
	
	    _get(Object.getPrototypeOf(NoAnnotationError.prototype), 'constructor', this).call(this);
	    this.message = 'Cannot resolve all parameters for ' + (0, _angular2SrcFacadeLang.stringify)(typeOrFunc) + '.' + ' Make sure they all have valid type or annotations.';
	  }
	
	  _inherits(NoAnnotationError, _Error3);
	
	  _createClass(NoAnnotationError, [{
	    key: 'toString',
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType(this.message, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return NoAnnotationError;
	})(Error);
	
	exports.NoAnnotationError = NoAnnotationError;
	
	//# sourceMappingURL=exceptions.js.map

	//# sourceMappingURL=./exceptions.map

/***/ },
/* 114 */
/*!****************************************************!*\
  !*** ./~/angular2/es6/dev/src/di/opaque_token.es6 ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var OpaqueToken = (function () {
	  function OpaqueToken(desc) {
	    _classCallCheck(this, OpaqueToken);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(desc, _rtts_assertRtts_assert.assert.type.string);
	    this._desc = "Token(" + desc + ")";
	  }
	
	  _createClass(OpaqueToken, [{
	    key: "toString",
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType(this._desc, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return OpaqueToken;
	})();
	
	exports.OpaqueToken = OpaqueToken;
	
	Object.defineProperty(OpaqueToken, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=opaque_token.js.map

	//# sourceMappingURL=./opaque_token.map

/***/ },
/* 115 */
/*!***********************************************!*\
  !*** ./~/angular2/es6/dev/src/render/api.es6 ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var EventBinding = function EventBinding(fullName, source) {
	  _classCallCheck(this, EventBinding);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(fullName, _rtts_assertRtts_assert.assert.type.string, source, _angular2Change_detection.ASTWithSource);
	  this.fullName = fullName;
	  this.source = source;
	};
	
	exports.EventBinding = EventBinding;
	
	Object.defineProperty(EventBinding, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_angular2Change_detection.ASTWithSource]];
	  } });
	
	var ElementBinder = function ElementBinder(_ref) {
	  var index = _ref.index;
	  var parentIndex = _ref.parentIndex;
	  var distanceToParent = _ref.distanceToParent;
	  var directives = _ref.directives;
	  var nestedProtoView = _ref.nestedProtoView;
	  var propertyBindings = _ref.propertyBindings;
	  var variableBindings = _ref.variableBindings;
	  var eventBindings = _ref.eventBindings;
	  var textBindings = _ref.textBindings;
	  var readAttributes = _ref.readAttributes;
	
	  _classCallCheck(this, ElementBinder);
	
	  this.index = index;
	  this.parentIndex = parentIndex;
	  this.distanceToParent = distanceToParent;
	  this.directives = directives;
	  this.nestedProtoView = nestedProtoView;
	  this.propertyBindings = propertyBindings;
	  this.variableBindings = variableBindings;
	  this.eventBindings = eventBindings;
	  this.textBindings = textBindings;
	  this.readAttributes = readAttributes;
	};
	
	exports.ElementBinder = ElementBinder;
	
	var DirectiveBinder = function DirectiveBinder(_ref2) {
	  var directiveIndex = _ref2.directiveIndex;
	  var propertyBindings = _ref2.propertyBindings;
	  var eventBindings = _ref2.eventBindings;
	  var hostPropertyBindings = _ref2.hostPropertyBindings;
	
	  _classCallCheck(this, DirectiveBinder);
	
	  this.directiveIndex = directiveIndex;
	  this.propertyBindings = propertyBindings;
	  this.eventBindings = eventBindings;
	  this.hostPropertyBindings = hostPropertyBindings;
	};
	
	exports.DirectiveBinder = DirectiveBinder;
	
	var ProtoViewDto = (function () {
	  function ProtoViewDto() {
	    var _ref3 = arguments[0] === undefined ? {} : arguments[0];
	
	    var render = _ref3.render;
	    var elementBinders = _ref3.elementBinders;
	    var variableBindings = _ref3.variableBindings;
	    var type = _ref3.type;
	
	    _classCallCheck(this, ProtoViewDto);
	
	    this.render = render;
	    this.elementBinders = elementBinders;
	    this.variableBindings = variableBindings;
	    this.type = type;
	  }
	
	  _createClass(ProtoViewDto, null, [{
	    key: 'HOST_VIEW_TYPE',
	    get: function () {
	      return 0;
	    }
	  }, {
	    key: 'COMPONENT_VIEW_TYPE',
	    get: function () {
	      return 1;
	    }
	  }, {
	    key: 'EMBEDDED_VIEW_TYPE',
	    get: function () {
	      return 1;
	    }
	  }]);
	
	  return ProtoViewDto;
	})();
	
	exports.ProtoViewDto = ProtoViewDto;
	
	var DirectiveMetadata = (function () {
	  function DirectiveMetadata(_ref4) {
	    var id = _ref4.id;
	    var selector = _ref4.selector;
	    var compileChildren = _ref4.compileChildren;
	    var hostListeners = _ref4.hostListeners;
	    var hostProperties = _ref4.hostProperties;
	    var properties = _ref4.properties;
	    var readAttributes = _ref4.readAttributes;
	    var type = _ref4.type;
	
	    _classCallCheck(this, DirectiveMetadata);
	
	    this.id = id;
	    this.selector = selector;
	    this.compileChildren = (0, _angular2SrcFacadeLang.isPresent)(compileChildren) ? compileChildren : true;
	    this.hostListeners = hostListeners;
	    this.hostProperties = hostProperties;
	    this.properties = properties;
	    this.readAttributes = readAttributes;
	    this.type = type;
	  }
	
	  _createClass(DirectiveMetadata, null, [{
	    key: 'DECORATOR_TYPE',
	    get: function () {
	      return 0;
	    }
	  }, {
	    key: 'COMPONENT_TYPE',
	    get: function () {
	      return 1;
	    }
	  }, {
	    key: 'VIEWPORT_TYPE',
	    get: function () {
	      return 2;
	    }
	  }]);
	
	  return DirectiveMetadata;
	})();
	
	exports.DirectiveMetadata = DirectiveMetadata;
	
	var ProtoViewRef = function ProtoViewRef() {
	  _classCallCheck(this, ProtoViewRef);
	};
	
	exports.ProtoViewRef = ProtoViewRef;
	
	var ViewRef = function ViewRef() {
	  _classCallCheck(this, ViewRef);
	};
	
	exports.ViewRef = ViewRef;
	
	var RenderViewContainerRef = function RenderViewContainerRef(view, elementIndex) {
	  _classCallCheck(this, RenderViewContainerRef);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(view, ViewRef, elementIndex, _rtts_assertRtts_assert.assert.type.number);
	  this.view = view;
	  this.elementIndex = elementIndex;
	};
	
	exports.RenderViewContainerRef = RenderViewContainerRef;
	
	Object.defineProperty(RenderViewContainerRef, 'parameters', { get: function get() {
	    return [[ViewRef], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	
	var ViewDefinition = function ViewDefinition(_ref5) {
	  var componentId = _ref5.componentId;
	  var absUrl = _ref5.absUrl;
	  var template = _ref5.template;
	  var directives = _ref5.directives;
	
	  _classCallCheck(this, ViewDefinition);
	
	  this.componentId = componentId;
	  this.absUrl = absUrl;
	  this.template = template;
	  this.directives = directives;
	};
	
	exports.ViewDefinition = ViewDefinition;
	
	var Renderer = (function () {
	  function Renderer() {
	    _classCallCheck(this, Renderer);
	  }
	
	  _createClass(Renderer, [{
	    key: 'createHostProtoView',
	    value: function createHostProtoView(componentId) {
	      return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, ProtoViewDto));
	    }
	  }, {
	    key: 'createImperativeComponentProtoView',
	    value: function createImperativeComponentProtoView(rendererId) {
	      return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, ProtoViewDto));
	    }
	  }, {
	    key: 'compile',
	    value: function compile(template) {
	      _rtts_assertRtts_assert.assert.argumentTypes(template, ViewDefinition);
	      return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, ProtoViewDto));
	    }
	  }, {
	    key: 'mergeChildComponentProtoViews',
	    value: function mergeChildComponentProtoViews(protoViewRef, componentProtoViewRefs) {
	      _rtts_assertRtts_assert.assert.argumentTypes(protoViewRef, ProtoViewRef, componentProtoViewRefs, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, ProtoViewRef));
	      return null;
	    }
	  }, {
	    key: 'createViewInContainer',
	    value: function createViewInContainer(vcRef, atIndex, protoViewRef) {
	      _rtts_assertRtts_assert.assert.argumentTypes(vcRef, RenderViewContainerRef, atIndex, _rtts_assertRtts_assert.assert.type.number, protoViewRef, ProtoViewRef);
	      return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, ViewRef));
	    }
	  }, {
	    key: 'destroyViewInContainer',
	    value: function destroyViewInContainer(vcRef, atIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(vcRef, RenderViewContainerRef, atIndex, _rtts_assertRtts_assert.assert.type.number);
	    }
	  }, {
	    key: 'insertViewIntoContainer',
	    value: function insertViewIntoContainer(vcRef, atIndex, view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(vcRef, RenderViewContainerRef, atIndex, _rtts_assertRtts_assert.assert.type.number, view, ViewRef);
	    }
	  }, {
	    key: 'detachViewFromContainer',
	    value: function detachViewFromContainer(vcRef, atIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(vcRef, RenderViewContainerRef, atIndex, _rtts_assertRtts_assert.assert.type.number);
	    }
	  }, {
	    key: 'createDynamicComponentView',
	    value: function createDynamicComponentView(hostViewRef, elementIndex, componentProtoViewRef) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostViewRef, ViewRef, elementIndex, _rtts_assertRtts_assert.assert.type.number, componentProtoViewRef, ProtoViewRef);
	      return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, ViewRef));
	    }
	  }, {
	    key: 'destroyDynamicComponentView',
	    value: function destroyDynamicComponentView(hostViewRef, elementIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostViewRef, ViewRef, elementIndex, _rtts_assertRtts_assert.assert.type.number);
	    }
	  }, {
	    key: 'createInPlaceHostView',
	    value: function createInPlaceHostView(parentViewRef, hostElementSelector, hostProtoViewRef) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentViewRef, ViewRef, hostElementSelector, _rtts_assertRtts_assert.assert.type.any, hostProtoViewRef, ProtoViewRef);
	      return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, ViewRef));
	    }
	  }, {
	    key: 'destroyInPlaceHostView',
	    value: function destroyInPlaceHostView(parentViewRef, hostViewRef) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentViewRef, ViewRef, hostViewRef, ViewRef);
	    }
	  }, {
	    key: 'setElementProperty',
	    value: function setElementProperty(view, elementIndex, propertyName, propertyValue) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, ViewRef, elementIndex, _rtts_assertRtts_assert.assert.type.number, propertyName, _rtts_assertRtts_assert.assert.type.string, propertyValue, _rtts_assertRtts_assert.assert.type.any);
	    }
	  }, {
	    key: 'setText',
	    value: function setText(view, textNodeIndex, text) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, ViewRef, textNodeIndex, _rtts_assertRtts_assert.assert.type.number, text, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'setEventDispatcher',
	    value: function setEventDispatcher(viewRef, dispatcher) {
	      _rtts_assertRtts_assert.assert.argumentTypes(viewRef, ViewRef, dispatcher, _rtts_assertRtts_assert.assert.type.any);
	    }
	  }, {
	    key: 'flush',
	    value: function flush() {}
	  }]);
	
	  return Renderer;
	})();
	
	exports.Renderer = Renderer;
	
	Object.defineProperty(Renderer.prototype.compile, 'parameters', { get: function get() {
	    return [[ViewDefinition]];
	  } });
	Object.defineProperty(Renderer.prototype.mergeChildComponentProtoViews, 'parameters', { get: function get() {
	    return [[ProtoViewRef], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, ProtoViewRef)]];
	  } });
	Object.defineProperty(Renderer.prototype.createViewInContainer, 'parameters', { get: function get() {
	    return [[RenderViewContainerRef], [_rtts_assertRtts_assert.assert.type.number], [ProtoViewRef]];
	  } });
	Object.defineProperty(Renderer.prototype.destroyViewInContainer, 'parameters', { get: function get() {
	    return [[RenderViewContainerRef], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(Renderer.prototype.insertViewIntoContainer, 'parameters', { get: function get() {
	    return [[RenderViewContainerRef], [_rtts_assertRtts_assert.assert.type.number], [ViewRef]];
	  } });
	Object.defineProperty(Renderer.prototype.detachViewFromContainer, 'parameters', { get: function get() {
	    return [[RenderViewContainerRef], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(Renderer.prototype.createDynamicComponentView, 'parameters', { get: function get() {
	    return [[ViewRef], [_rtts_assertRtts_assert.assert.type.number], [ProtoViewRef]];
	  } });
	Object.defineProperty(Renderer.prototype.destroyDynamicComponentView, 'parameters', { get: function get() {
	    return [[ViewRef], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(Renderer.prototype.createInPlaceHostView, 'parameters', { get: function get() {
	    return [[ViewRef], [], [ProtoViewRef]];
	  } });
	Object.defineProperty(Renderer.prototype.destroyInPlaceHostView, 'parameters', { get: function get() {
	    return [[ViewRef], [ViewRef]];
	  } });
	Object.defineProperty(Renderer.prototype.setElementProperty, 'parameters', { get: function get() {
	    return [[ViewRef], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(Renderer.prototype.setText, 'parameters', { get: function get() {
	    return [[ViewRef], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Renderer.prototype.setEventDispatcher, 'parameters', { get: function get() {
	    return [[ViewRef], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	
	var EventDispatcher = (function () {
	  function EventDispatcher() {
	    _classCallCheck(this, EventDispatcher);
	  }
	
	  _createClass(EventDispatcher, [{
	    key: 'dispatchEvent',
	    value: function dispatchEvent(elementIndex, eventName, locals) {
	      _rtts_assertRtts_assert.assert.argumentTypes(elementIndex, _rtts_assertRtts_assert.assert.type.number, eventName, _rtts_assertRtts_assert.assert.type.string, locals, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.any));
	    }
	  }]);
	
	  return EventDispatcher;
	})();
	
	exports.EventDispatcher = EventDispatcher;
	
	Object.defineProperty(EventDispatcher.prototype.dispatchEvent, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.any)]];
	  } });
	//# sourceMappingURL=api.js.map

	//# sourceMappingURL=./api.map

/***/ },
/* 116 */
/*!*************************************************!*\
  !*** ./~/angular2/es6/dev/change_detection.es6 ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _srcChange_detectionParserAst = __webpack_require__(/*! ./src/change_detection/parser/ast */ 118);
	
	Object.defineProperty(exports, 'ASTWithSource', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionParserAst.ASTWithSource;
	  }
	});
	Object.defineProperty(exports, 'AST', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionParserAst.AST;
	  }
	});
	Object.defineProperty(exports, 'AstTransformer', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionParserAst.AstTransformer;
	  }
	});
	Object.defineProperty(exports, 'AccessMember', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionParserAst.AccessMember;
	  }
	});
	Object.defineProperty(exports, 'LiteralArray', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionParserAst.LiteralArray;
	  }
	});
	Object.defineProperty(exports, 'ImplicitReceiver', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionParserAst.ImplicitReceiver;
	  }
	});
	
	var _srcChange_detectionParserLexer = __webpack_require__(/*! ./src/change_detection/parser/lexer */ 121);
	
	Object.defineProperty(exports, 'Lexer', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionParserLexer.Lexer;
	  }
	});
	
	var _srcChange_detectionParserParser = __webpack_require__(/*! ./src/change_detection/parser/parser */ 122);
	
	Object.defineProperty(exports, 'Parser', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionParserParser.Parser;
	  }
	});
	
	var _srcChange_detectionParserLocals = __webpack_require__(/*! ./src/change_detection/parser/locals */ 123);
	
	Object.defineProperty(exports, 'Locals', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionParserLocals.Locals;
	  }
	});
	
	var _srcChange_detectionExceptions = __webpack_require__(/*! ./src/change_detection/exceptions */ 124);
	
	Object.defineProperty(exports, 'ExpressionChangedAfterItHasBeenChecked', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionExceptions.ExpressionChangedAfterItHasBeenChecked;
	  }
	});
	Object.defineProperty(exports, 'ChangeDetectionError', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionExceptions.ChangeDetectionError;
	  }
	});
	
	var _srcChange_detectionInterfaces = __webpack_require__(/*! ./src/change_detection/interfaces */ 126);
	
	Object.defineProperty(exports, 'ProtoChangeDetector', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionInterfaces.ProtoChangeDetector;
	  }
	});
	Object.defineProperty(exports, 'ChangeDispatcher', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionInterfaces.ChangeDispatcher;
	  }
	});
	Object.defineProperty(exports, 'ChangeDetector', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionInterfaces.ChangeDetector;
	  }
	});
	Object.defineProperty(exports, 'ChangeDetection', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionInterfaces.ChangeDetection;
	  }
	});
	
	var _srcChange_detectionConstants = __webpack_require__(/*! ./src/change_detection/constants */ 120);
	
	Object.defineProperty(exports, 'CHECK_ONCE', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionConstants.CHECK_ONCE;
	  }
	});
	Object.defineProperty(exports, 'CHECK_ALWAYS', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionConstants.CHECK_ALWAYS;
	  }
	});
	Object.defineProperty(exports, 'DETACHED', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionConstants.DETACHED;
	  }
	});
	Object.defineProperty(exports, 'CHECKED', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionConstants.CHECKED;
	  }
	});
	Object.defineProperty(exports, 'ON_PUSH', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionConstants.ON_PUSH;
	  }
	});
	Object.defineProperty(exports, 'DEFAULT', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionConstants.DEFAULT;
	  }
	});
	
	var _srcChange_detectionProto_change_detector = __webpack_require__(/*! ./src/change_detection/proto_change_detector */ 127);
	
	Object.defineProperty(exports, 'DynamicProtoChangeDetector', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionProto_change_detector.DynamicProtoChangeDetector;
	  }
	});
	Object.defineProperty(exports, 'JitProtoChangeDetector', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionProto_change_detector.JitProtoChangeDetector;
	  }
	});
	
	var _srcChange_detectionBinding_record = __webpack_require__(/*! ./src/change_detection/binding_record */ 117);
	
	Object.defineProperty(exports, 'BindingRecord', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionBinding_record.BindingRecord;
	  }
	});
	
	var _srcChange_detectionDirective_record = __webpack_require__(/*! ./src/change_detection/directive_record */ 119);
	
	Object.defineProperty(exports, 'DirectiveIndex', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionDirective_record.DirectiveIndex;
	  }
	});
	Object.defineProperty(exports, 'DirectiveRecord', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionDirective_record.DirectiveRecord;
	  }
	});
	
	var _srcChange_detectionDynamic_change_detector = __webpack_require__(/*! ./src/change_detection/dynamic_change_detector */ 130);
	
	Object.defineProperty(exports, 'DynamicChangeDetector', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionDynamic_change_detector.DynamicChangeDetector;
	  }
	});
	
	var _srcChange_detectionChange_detector_ref = __webpack_require__(/*! ./src/change_detection/change_detector_ref */ 132);
	
	Object.defineProperty(exports, 'ChangeDetectorRef', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionChange_detector_ref.ChangeDetectorRef;
	  }
	});
	
	var _srcChange_detectionPipesPipe_registry = __webpack_require__(/*! ./src/change_detection/pipes/pipe_registry */ 133);
	
	Object.defineProperty(exports, 'PipeRegistry', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionPipesPipe_registry.PipeRegistry;
	  }
	});
	
	var _srcChange_detectionChange_detection_util = __webpack_require__(/*! ./src/change_detection/change_detection_util */ 128);
	
	Object.defineProperty(exports, 'uninitialized', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionChange_detection_util.uninitialized;
	  }
	});
	
	var _srcChange_detectionPipesPipe = __webpack_require__(/*! ./src/change_detection/pipes/pipe */ 129);
	
	Object.defineProperty(exports, 'NO_CHANGE', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionPipesPipe.NO_CHANGE;
	  }
	});
	Object.defineProperty(exports, 'Pipe', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionPipesPipe.Pipe;
	  }
	});
	
	var _srcChange_detectionChange_detection = __webpack_require__(/*! ./src/change_detection/change_detection */ 136);
	
	//# sourceMappingURL=change_detection.js.map
	
	//# sourceMappingURL=./change_detection.map
	Object.defineProperty(exports, 'defaultPipes', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionChange_detection.defaultPipes;
	  }
	});
	Object.defineProperty(exports, 'DynamicChangeDetection', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionChange_detection.DynamicChangeDetection;
	  }
	});
	Object.defineProperty(exports, 'JitChangeDetection', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionChange_detection.JitChangeDetection;
	  }
	});
	Object.defineProperty(exports, 'defaultPipeRegistry', {
	  enumerable: true,
	  get: function get() {
	    return _srcChange_detectionChange_detection.defaultPipeRegistry;
	  }
	});

/***/ },
/* 117 */
/*!********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/binding_record.es6 ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcReflectionTypes = __webpack_require__(/*! angular2/src/reflection/types */ 111);
	
	var _parserAst = __webpack_require__(/*! ./parser/ast */ 118);
	
	var _directive_record = __webpack_require__(/*! ./directive_record */ 119);
	
	var DIRECTIVE = 'directive';
	var ELEMENT = 'element';
	var TEXT_NODE = 'textNode';
	
	var BindingRecord = (function () {
	  function BindingRecord(mode, implicitReceiver, ast, elementIndex, propertyName, setter, directiveRecord) {
	    _classCallCheck(this, BindingRecord);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(mode, _rtts_assertRtts_assert.assert.type.string, implicitReceiver, _rtts_assertRtts_assert.assert.type.any, ast, _parserAst.AST, elementIndex, _rtts_assertRtts_assert.assert.type.number, propertyName, _rtts_assertRtts_assert.assert.type.string, setter, _angular2SrcReflectionTypes.SetterFn, directiveRecord, _directive_record.DirectiveRecord);
	    this.mode = mode;
	    this.implicitReceiver = implicitReceiver;
	    this.ast = ast;
	    this.elementIndex = elementIndex;
	    this.propertyName = propertyName;
	    this.setter = setter;
	    this.directiveRecord = directiveRecord;
	  }
	
	  _createClass(BindingRecord, [{
	    key: 'callOnChange',
	    value: function callOnChange() {
	      return (0, _angular2SrcFacadeLang.isPresent)(this.directiveRecord) && this.directiveRecord.callOnChange;
	    }
	  }, {
	    key: 'isOnPushChangeDetection',
	    value: function isOnPushChangeDetection() {
	      return (0, _angular2SrcFacadeLang.isPresent)(this.directiveRecord) && this.directiveRecord.isOnPushChangeDetection();
	    }
	  }, {
	    key: 'isDirective',
	    value: function isDirective() {
	      return this.mode === DIRECTIVE;
	    }
	  }, {
	    key: 'isElement',
	    value: function isElement() {
	      return this.mode === ELEMENT;
	    }
	  }, {
	    key: 'isTextNode',
	    value: function isTextNode() {
	      return this.mode === TEXT_NODE;
	    }
	  }], [{
	    key: 'createForDirective',
	    value: function createForDirective(ast, propertyName, setter, directiveRecord) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.AST, propertyName, _rtts_assertRtts_assert.assert.type.string, setter, _angular2SrcReflectionTypes.SetterFn, directiveRecord, _directive_record.DirectiveRecord);
	      return new BindingRecord(DIRECTIVE, 0, ast, 0, propertyName, setter, directiveRecord);
	    }
	  }, {
	    key: 'createForElement',
	    value: function createForElement(ast, elementIndex, propertyName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.AST, elementIndex, _rtts_assertRtts_assert.assert.type.number, propertyName, _rtts_assertRtts_assert.assert.type.string);
	      return new BindingRecord(ELEMENT, 0, ast, elementIndex, propertyName, null, null);
	    }
	  }, {
	    key: 'createForHostProperty',
	    value: function createForHostProperty(directiveIndex, ast, propertyName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(directiveIndex, _directive_record.DirectiveIndex, ast, _parserAst.AST, propertyName, _rtts_assertRtts_assert.assert.type.string);
	      return new BindingRecord(ELEMENT, directiveIndex, ast, directiveIndex.elementIndex, propertyName, null, null);
	    }
	  }, {
	    key: 'createForTextNode',
	    value: function createForTextNode(ast, elementIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.AST, elementIndex, _rtts_assertRtts_assert.assert.type.number);
	      return new BindingRecord(TEXT_NODE, 0, ast, elementIndex, null, null, null);
	    }
	  }]);
	
	  return BindingRecord;
	})();
	
	exports.BindingRecord = BindingRecord;
	
	Object.defineProperty(BindingRecord, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any], [_parserAst.AST], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [_angular2SrcReflectionTypes.SetterFn], [_directive_record.DirectiveRecord]];
	  } });
	Object.defineProperty(BindingRecord.createForDirective, 'parameters', { get: function get() {
	    return [[_parserAst.AST], [_rtts_assertRtts_assert.assert.type.string], [_angular2SrcReflectionTypes.SetterFn], [_directive_record.DirectiveRecord]];
	  } });
	Object.defineProperty(BindingRecord.createForElement, 'parameters', { get: function get() {
	    return [[_parserAst.AST], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BindingRecord.createForHostProperty, 'parameters', { get: function get() {
	    return [[_directive_record.DirectiveIndex], [_parserAst.AST], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BindingRecord.createForTextNode, 'parameters', { get: function get() {
	    return [[_parserAst.AST], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	//# sourceMappingURL=binding_record.js.map

	//# sourceMappingURL=./binding_record.map

/***/ },
/* 118 */
/*!****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/parser/ast.es6 ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var AST = (function () {
	  function AST() {
	    _classCallCheck(this, AST);
	  }
	
	  _createClass(AST, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      throw new _angular2SrcFacadeLang.BaseException("Not supported");
	    }
	  }, {
	    key: "isAssignable",
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "assign",
	    value: function assign(context, locals, value) {
	      throw new _angular2SrcFacadeLang.BaseException("Not supported");
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {}
	  }, {
	    key: "toString",
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType("AST", _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return AST;
	})();
	
	exports.AST = AST;
	
	var EmptyExpr = (function (_AST) {
	  function EmptyExpr() {
	    _classCallCheck(this, EmptyExpr);
	
	    if (_AST != null) {
	      _AST.apply(this, arguments);
	    }
	  }
	
	  _inherits(EmptyExpr, _AST);
	
	  _createClass(EmptyExpr, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      return null;
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {}
	  }]);
	
	  return EmptyExpr;
	})(AST);
	
	exports.EmptyExpr = EmptyExpr;
	
	var ImplicitReceiver = (function (_AST2) {
	  function ImplicitReceiver() {
	    _classCallCheck(this, ImplicitReceiver);
	
	    if (_AST2 != null) {
	      _AST2.apply(this, arguments);
	    }
	  }
	
	  _inherits(ImplicitReceiver, _AST2);
	
	  _createClass(ImplicitReceiver, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      return context;
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitImplicitReceiver(this);
	    }
	  }]);
	
	  return ImplicitReceiver;
	})(AST);
	
	exports.ImplicitReceiver = ImplicitReceiver;
	
	var Chain = (function (_AST3) {
	  function Chain(expressions) {
	    _classCallCheck(this, Chain);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(expressions, _angular2SrcFacadeCollection.List);
	    _get(Object.getPrototypeOf(Chain.prototype), "constructor", this).call(this);
	    this.expressions = expressions;
	  }
	
	  _inherits(Chain, _AST3);
	
	  _createClass(Chain, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      var result;
	      for (var i = 0; i < this.expressions.length; i++) {
	        var last = this.expressions[i].eval(context, locals);
	        if ((0, _angular2SrcFacadeLang.isPresent)(last)) result = last;
	      }
	      return result;
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitChain(this);
	    }
	  }]);
	
	  return Chain;
	})(AST);
	
	exports.Chain = Chain;
	
	Object.defineProperty(Chain, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	
	var Conditional = (function (_AST4) {
	  function Conditional(condition, trueExp, falseExp) {
	    _classCallCheck(this, Conditional);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(condition, AST, trueExp, AST, falseExp, AST);
	    _get(Object.getPrototypeOf(Conditional.prototype), "constructor", this).call(this);
	    this.condition = condition;
	    this.trueExp = trueExp;
	    this.falseExp = falseExp;
	  }
	
	  _inherits(Conditional, _AST4);
	
	  _createClass(Conditional, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      if (this.condition.eval(context, locals)) {
	        return this.trueExp.eval(context, locals);
	      } else {
	        return this.falseExp.eval(context, locals);
	      }
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitConditional(this);
	    }
	  }]);
	
	  return Conditional;
	})(AST);
	
	exports.Conditional = Conditional;
	
	Object.defineProperty(Conditional, "parameters", { get: function get() {
	    return [[AST], [AST], [AST]];
	  } });
	
	var AccessMember = (function (_AST5) {
	  function AccessMember(receiver, name, getter, setter) {
	    _classCallCheck(this, AccessMember);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(receiver, AST, name, _rtts_assertRtts_assert.assert.type.string, getter, Function, setter, Function);
	    _get(Object.getPrototypeOf(AccessMember.prototype), "constructor", this).call(this);
	    this.receiver = receiver;
	    this.name = name;
	    this.getter = getter;
	    this.setter = setter;
	  }
	
	  _inherits(AccessMember, _AST5);
	
	  _createClass(AccessMember, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      if (this.receiver instanceof ImplicitReceiver && (0, _angular2SrcFacadeLang.isPresent)(locals) && locals.contains(this.name)) {
	        return locals.get(this.name);
	      } else {
	        var evaluatedReceiver = this.receiver.eval(context, locals);
	        return this.getter(evaluatedReceiver);
	      }
	    }
	  }, {
	    key: "isAssignable",
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "assign",
	    value: function assign(context, locals, value) {
	      var evaluatedContext = this.receiver.eval(context, locals);
	      if (this.receiver instanceof ImplicitReceiver && (0, _angular2SrcFacadeLang.isPresent)(locals) && locals.contains(this.name)) {
	        throw new _angular2SrcFacadeLang.BaseException("Cannot reassign a variable binding " + this.name);
	      } else {
	        return this.setter(evaluatedContext, value);
	      }
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitAccessMember(this);
	    }
	  }]);
	
	  return AccessMember;
	})(AST);
	
	exports.AccessMember = AccessMember;
	
	Object.defineProperty(AccessMember, "parameters", { get: function get() {
	    return [[AST], [_rtts_assertRtts_assert.assert.type.string], [Function], [Function]];
	  } });
	
	var KeyedAccess = (function (_AST6) {
	  function KeyedAccess(obj, key) {
	    _classCallCheck(this, KeyedAccess);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(obj, AST, key, AST);
	    _get(Object.getPrototypeOf(KeyedAccess.prototype), "constructor", this).call(this);
	    this.obj = obj;
	    this.key = key;
	  }
	
	  _inherits(KeyedAccess, _AST6);
	
	  _createClass(KeyedAccess, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      var obj = this.obj.eval(context, locals);
	      var key = this.key.eval(context, locals);
	      return obj[key];
	    }
	  }, {
	    key: "isAssignable",
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "assign",
	    value: function assign(context, locals, value) {
	      var obj = this.obj.eval(context, locals);
	      var key = this.key.eval(context, locals);
	      obj[key] = value;
	      return value;
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitKeyedAccess(this);
	    }
	  }]);
	
	  return KeyedAccess;
	})(AST);
	
	exports.KeyedAccess = KeyedAccess;
	
	Object.defineProperty(KeyedAccess, "parameters", { get: function get() {
	    return [[AST], [AST]];
	  } });
	
	var Pipe = (function (_AST7) {
	  function Pipe(exp, name, args, inBinding) {
	    _classCallCheck(this, Pipe);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(exp, AST, name, _rtts_assertRtts_assert.assert.type.string, args, _angular2SrcFacadeCollection.List, inBinding, _rtts_assertRtts_assert.assert.type.boolean);
	    _get(Object.getPrototypeOf(Pipe.prototype), "constructor", this).call(this);
	    this.exp = exp;
	    this.name = name;
	    this.args = args;
	    this.inBinding = inBinding;
	  }
	
	  _inherits(Pipe, _AST7);
	
	  _createClass(Pipe, [{
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitPipe(this);
	    }
	  }]);
	
	  return Pipe;
	})(AST);
	
	exports.Pipe = Pipe;
	
	Object.defineProperty(Pipe, "parameters", { get: function get() {
	    return [[AST], [_rtts_assertRtts_assert.assert.type.string], [_angular2SrcFacadeCollection.List], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	
	var LiteralPrimitive = (function (_AST8) {
	  function LiteralPrimitive(value) {
	    _classCallCheck(this, LiteralPrimitive);
	
	    _get(Object.getPrototypeOf(LiteralPrimitive.prototype), "constructor", this).call(this);
	    this.value = value;
	  }
	
	  _inherits(LiteralPrimitive, _AST8);
	
	  _createClass(LiteralPrimitive, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      return this.value;
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitLiteralPrimitive(this);
	    }
	  }]);
	
	  return LiteralPrimitive;
	})(AST);
	
	exports.LiteralPrimitive = LiteralPrimitive;
	
	var LiteralArray = (function (_AST9) {
	  function LiteralArray(expressions) {
	    _classCallCheck(this, LiteralArray);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(expressions, _angular2SrcFacadeCollection.List);
	    _get(Object.getPrototypeOf(LiteralArray.prototype), "constructor", this).call(this);
	    this.expressions = expressions;
	  }
	
	  _inherits(LiteralArray, _AST9);
	
	  _createClass(LiteralArray, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      return _angular2SrcFacadeCollection.ListWrapper.map(this.expressions, function (e) {
	        return e.eval(context, locals);
	      });
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitLiteralArray(this);
	    }
	  }]);
	
	  return LiteralArray;
	})(AST);
	
	exports.LiteralArray = LiteralArray;
	
	Object.defineProperty(LiteralArray, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	
	var LiteralMap = (function (_AST10) {
	  function LiteralMap(keys, values) {
	    _classCallCheck(this, LiteralMap);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(keys, _angular2SrcFacadeCollection.List, values, _angular2SrcFacadeCollection.List);
	    _get(Object.getPrototypeOf(LiteralMap.prototype), "constructor", this).call(this);
	    this.keys = keys;
	    this.values = values;
	  }
	
	  _inherits(LiteralMap, _AST10);
	
	  _createClass(LiteralMap, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      var res = _angular2SrcFacadeCollection.StringMapWrapper.create();
	      for (var i = 0; i < this.keys.length; ++i) {
	        _angular2SrcFacadeCollection.StringMapWrapper.set(res, this.keys[i], this.values[i].eval(context, locals));
	      }
	      return res;
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitLiteralMap(this);
	    }
	  }]);
	
	  return LiteralMap;
	})(AST);
	
	exports.LiteralMap = LiteralMap;
	
	Object.defineProperty(LiteralMap, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List]];
	  } });
	
	var Interpolation = (function (_AST11) {
	  function Interpolation(strings, expressions) {
	    _classCallCheck(this, Interpolation);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(strings, _angular2SrcFacadeCollection.List, expressions, _angular2SrcFacadeCollection.List);
	    _get(Object.getPrototypeOf(Interpolation.prototype), "constructor", this).call(this);
	    this.strings = strings;
	    this.expressions = expressions;
	  }
	
	  _inherits(Interpolation, _AST11);
	
	  _createClass(Interpolation, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      throw new _angular2SrcFacadeLang.BaseException("evaluating an Interpolation is not supported");
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      visitor.visitInterpolation(this);
	    }
	  }]);
	
	  return Interpolation;
	})(AST);
	
	exports.Interpolation = Interpolation;
	
	Object.defineProperty(Interpolation, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List]];
	  } });
	
	var Binary = (function (_AST12) {
	  function Binary(operation, left, right) {
	    _classCallCheck(this, Binary);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(operation, _rtts_assertRtts_assert.assert.type.string, left, AST, right, AST);
	    _get(Object.getPrototypeOf(Binary.prototype), "constructor", this).call(this);
	    this.operation = operation;
	    this.left = left;
	    this.right = right;
	  }
	
	  _inherits(Binary, _AST12);
	
	  _createClass(Binary, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      var left = this.left.eval(context, locals);
	      switch (this.operation) {
	        case "&&":
	          return left && this.right.eval(context, locals);
	        case "||":
	          return left || this.right.eval(context, locals);
	      }
	      var right = this.right.eval(context, locals);
	      switch (this.operation) {
	        case "+":
	          return left + right;
	        case "-":
	          return left - right;
	        case "*":
	          return left * right;
	        case "/":
	          return left / right;
	        case "%":
	          return left % right;
	        case "==":
	          return left == right;
	        case "!=":
	          return left != right;
	        case "===":
	          return left === right;
	        case "!==":
	          return left !== right;
	        case "<":
	          return left < right;
	        case ">":
	          return left > right;
	        case "<=":
	          return left <= right;
	        case ">=":
	          return left >= right;
	        case "^":
	          return left ^ right;
	        case "&":
	          return left & right;
	      }
	      throw "Internal error [$operation] not handled";
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitBinary(this);
	    }
	  }]);
	
	  return Binary;
	})(AST);
	
	exports.Binary = Binary;
	
	Object.defineProperty(Binary, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [AST], [AST]];
	  } });
	
	var PrefixNot = (function (_AST13) {
	  function PrefixNot(expression) {
	    _classCallCheck(this, PrefixNot);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(expression, AST);
	    _get(Object.getPrototypeOf(PrefixNot.prototype), "constructor", this).call(this);
	    this.expression = expression;
	  }
	
	  _inherits(PrefixNot, _AST13);
	
	  _createClass(PrefixNot, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      return !this.expression.eval(context, locals);
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitPrefixNot(this);
	    }
	  }]);
	
	  return PrefixNot;
	})(AST);
	
	exports.PrefixNot = PrefixNot;
	
	Object.defineProperty(PrefixNot, "parameters", { get: function get() {
	    return [[AST]];
	  } });
	
	var Assignment = (function (_AST14) {
	  function Assignment(target, value) {
	    _classCallCheck(this, Assignment);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(target, AST, value, AST);
	    _get(Object.getPrototypeOf(Assignment.prototype), "constructor", this).call(this);
	    this.target = target;
	    this.value = value;
	  }
	
	  _inherits(Assignment, _AST14);
	
	  _createClass(Assignment, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      return this.target.assign(context, locals, this.value.eval(context, locals));
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitAssignment(this);
	    }
	  }]);
	
	  return Assignment;
	})(AST);
	
	exports.Assignment = Assignment;
	
	Object.defineProperty(Assignment, "parameters", { get: function get() {
	    return [[AST], [AST]];
	  } });
	
	var MethodCall = (function (_AST15) {
	  function MethodCall(receiver, name, fn, args) {
	    _classCallCheck(this, MethodCall);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(receiver, AST, name, _rtts_assertRtts_assert.assert.type.string, fn, Function, args, _angular2SrcFacadeCollection.List);
	    _get(Object.getPrototypeOf(MethodCall.prototype), "constructor", this).call(this);
	    this.receiver = receiver;
	    this.fn = fn;
	    this.args = args;
	    this.name = name;
	  }
	
	  _inherits(MethodCall, _AST15);
	
	  _createClass(MethodCall, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      var evaluatedArgs = evalList(context, locals, this.args);
	      if (this.receiver instanceof ImplicitReceiver && (0, _angular2SrcFacadeLang.isPresent)(locals) && locals.contains(this.name)) {
	        var fn = locals.get(this.name);
	        return _angular2SrcFacadeLang.FunctionWrapper.apply(fn, evaluatedArgs);
	      } else {
	        var evaluatedReceiver = this.receiver.eval(context, locals);
	        return this.fn(evaluatedReceiver, evaluatedArgs);
	      }
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitMethodCall(this);
	    }
	  }]);
	
	  return MethodCall;
	})(AST);
	
	exports.MethodCall = MethodCall;
	
	Object.defineProperty(MethodCall, "parameters", { get: function get() {
	    return [[AST], [_rtts_assertRtts_assert.assert.type.string], [Function], [_angular2SrcFacadeCollection.List]];
	  } });
	
	var FunctionCall = (function (_AST16) {
	  function FunctionCall(target, args) {
	    _classCallCheck(this, FunctionCall);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(target, AST, args, _angular2SrcFacadeCollection.List);
	    _get(Object.getPrototypeOf(FunctionCall.prototype), "constructor", this).call(this);
	    this.target = target;
	    this.args = args;
	  }
	
	  _inherits(FunctionCall, _AST16);
	
	  _createClass(FunctionCall, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      var obj = this.target.eval(context, locals);
	      if (!(obj instanceof Function)) {
	        throw new _angular2SrcFacadeLang.BaseException("" + obj + " is not a function");
	      }
	      return _angular2SrcFacadeLang.FunctionWrapper.apply(obj, evalList(context, locals, this.args));
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return visitor.visitFunctionCall(this);
	    }
	  }]);
	
	  return FunctionCall;
	})(AST);
	
	exports.FunctionCall = FunctionCall;
	
	Object.defineProperty(FunctionCall, "parameters", { get: function get() {
	    return [[AST], [_angular2SrcFacadeCollection.List]];
	  } });
	
	var ASTWithSource = (function (_AST17) {
	  function ASTWithSource(ast, source, location) {
	    _classCallCheck(this, ASTWithSource);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(ast, AST, source, _rtts_assertRtts_assert.assert.type.string, location, _rtts_assertRtts_assert.assert.type.string);
	    _get(Object.getPrototypeOf(ASTWithSource.prototype), "constructor", this).call(this);
	    this.source = source;
	    this.location = location;
	    this.ast = ast;
	  }
	
	  _inherits(ASTWithSource, _AST17);
	
	  _createClass(ASTWithSource, [{
	    key: "eval",
	    value: function _eval(context, locals) {
	      return this.ast.eval(context, locals);
	    }
	  }, {
	    key: "isAssignable",
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this.ast.isAssignable, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "assign",
	    value: function assign(context, locals, value) {
	      return this.ast.assign(context, locals, value);
	    }
	  }, {
	    key: "visit",
	    value: function visit(visitor) {
	      return this.ast.visit(visitor);
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType("" + this.source + " in " + this.location, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return ASTWithSource;
	})(AST);
	
	exports.ASTWithSource = ASTWithSource;
	
	Object.defineProperty(ASTWithSource, "parameters", { get: function get() {
	    return [[AST], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var TemplateBinding = function TemplateBinding(key, keyIsVar, name, expression) {
	  _classCallCheck(this, TemplateBinding);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(key, _rtts_assertRtts_assert.assert.type.string, keyIsVar, _rtts_assertRtts_assert.assert.type.boolean, name, _rtts_assertRtts_assert.assert.type.string, expression, ASTWithSource);
	  this.key = key;
	  this.keyIsVar = keyIsVar;
	  this.name = name;
	  this.expression = expression;
	};
	
	exports.TemplateBinding = TemplateBinding;
	
	Object.defineProperty(TemplateBinding, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.string], [ASTWithSource]];
	  } });
	
	var AstVisitor = (function () {
	  function AstVisitor() {
	    _classCallCheck(this, AstVisitor);
	  }
	
	  _createClass(AstVisitor, [{
	    key: "visitAccessMember",
	    value: function visitAccessMember(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, AccessMember);
	    }
	  }, {
	    key: "visitAssignment",
	    value: function visitAssignment(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, Assignment);
	    }
	  }, {
	    key: "visitBinary",
	    value: function visitBinary(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, Binary);
	    }
	  }, {
	    key: "visitChain",
	    value: function visitChain(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, Chain);
	    }
	  }, {
	    key: "visitConditional",
	    value: function visitConditional(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, Conditional);
	    }
	  }, {
	    key: "visitPipe",
	    value: function visitPipe(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, Pipe);
	    }
	  }, {
	    key: "visitFunctionCall",
	    value: function visitFunctionCall(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, FunctionCall);
	    }
	  }, {
	    key: "visitImplicitReceiver",
	    value: function visitImplicitReceiver(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, ImplicitReceiver);
	    }
	  }, {
	    key: "visitKeyedAccess",
	    value: function visitKeyedAccess(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, KeyedAccess);
	    }
	  }, {
	    key: "visitLiteralArray",
	    value: function visitLiteralArray(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, LiteralArray);
	    }
	  }, {
	    key: "visitLiteralMap",
	    value: function visitLiteralMap(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, LiteralMap);
	    }
	  }, {
	    key: "visitLiteralPrimitive",
	    value: function visitLiteralPrimitive(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, LiteralPrimitive);
	    }
	  }, {
	    key: "visitMethodCall",
	    value: function visitMethodCall(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, MethodCall);
	    }
	  }, {
	    key: "visitPrefixNot",
	    value: function visitPrefixNot(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, PrefixNot);
	    }
	  }]);
	
	  return AstVisitor;
	})();
	
	exports.AstVisitor = AstVisitor;
	
	Object.defineProperty(AstVisitor.prototype.visitAccessMember, "parameters", { get: function get() {
	    return [[AccessMember]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitAssignment, "parameters", { get: function get() {
	    return [[Assignment]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitBinary, "parameters", { get: function get() {
	    return [[Binary]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitChain, "parameters", { get: function get() {
	    return [[Chain]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitConditional, "parameters", { get: function get() {
	    return [[Conditional]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitPipe, "parameters", { get: function get() {
	    return [[Pipe]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitFunctionCall, "parameters", { get: function get() {
	    return [[FunctionCall]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitImplicitReceiver, "parameters", { get: function get() {
	    return [[ImplicitReceiver]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitKeyedAccess, "parameters", { get: function get() {
	    return [[KeyedAccess]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitLiteralArray, "parameters", { get: function get() {
	    return [[LiteralArray]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitLiteralMap, "parameters", { get: function get() {
	    return [[LiteralMap]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitLiteralPrimitive, "parameters", { get: function get() {
	    return [[LiteralPrimitive]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitMethodCall, "parameters", { get: function get() {
	    return [[MethodCall]];
	  } });
	Object.defineProperty(AstVisitor.prototype.visitPrefixNot, "parameters", { get: function get() {
	    return [[PrefixNot]];
	  } });
	
	var AstTransformer = (function () {
	  function AstTransformer() {
	    _classCallCheck(this, AstTransformer);
	  }
	
	  _createClass(AstTransformer, [{
	    key: "visitImplicitReceiver",
	    value: function visitImplicitReceiver(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, ImplicitReceiver);
	      return ast;
	    }
	  }, {
	    key: "visitInterpolation",
	    value: function visitInterpolation(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, Interpolation);
	      return new Interpolation(ast.strings, this.visitAll(ast.expressions));
	    }
	  }, {
	    key: "visitLiteralPrimitive",
	    value: function visitLiteralPrimitive(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, LiteralPrimitive);
	      return new LiteralPrimitive(ast.value);
	    }
	  }, {
	    key: "visitAccessMember",
	    value: function visitAccessMember(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, AccessMember);
	      return new AccessMember(ast.receiver.visit(this), ast.name, ast.getter, ast.setter);
	    }
	  }, {
	    key: "visitMethodCall",
	    value: function visitMethodCall(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, MethodCall);
	      return new MethodCall(ast.receiver.visit(this), ast.name, ast.fn, this.visitAll(ast.args));
	    }
	  }, {
	    key: "visitFunctionCall",
	    value: function visitFunctionCall(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, FunctionCall);
	      return new FunctionCall(ast.target.visit(this), this.visitAll(ast.args));
	    }
	  }, {
	    key: "visitLiteralArray",
	    value: function visitLiteralArray(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, LiteralArray);
	      return new LiteralArray(this.visitAll(ast.expressions));
	    }
	  }, {
	    key: "visitLiteralMap",
	    value: function visitLiteralMap(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, LiteralMap);
	      return new LiteralMap(ast.keys, this.visitAll(ast.values));
	    }
	  }, {
	    key: "visitBinary",
	    value: function visitBinary(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, Binary);
	      return new Binary(ast.operation, ast.left.visit(this), ast.right.visit(this));
	    }
	  }, {
	    key: "visitPrefixNot",
	    value: function visitPrefixNot(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, PrefixNot);
	      return new PrefixNot(ast.expression.visit(this));
	    }
	  }, {
	    key: "visitConditional",
	    value: function visitConditional(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, Conditional);
	      return new Conditional(ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));
	    }
	  }, {
	    key: "visitPipe",
	    value: function visitPipe(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, Pipe);
	      return new Pipe(ast.exp.visit(this), ast.name, this.visitAll(ast.args), ast.inBinding);
	    }
	  }, {
	    key: "visitKeyedAccess",
	    value: function visitKeyedAccess(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, KeyedAccess);
	      return new KeyedAccess(ast.obj.visit(this), ast.key.visit(this));
	    }
	  }, {
	    key: "visitAll",
	    value: function visitAll(asts) {
	      _rtts_assertRtts_assert.assert.argumentTypes(asts, _angular2SrcFacadeCollection.List);
	      var res = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(asts.length);
	      for (var i = 0; i < asts.length; ++i) {
	        res[i] = asts[i].visit(this);
	      }
	      return res;
	    }
	  }]);
	
	  return AstTransformer;
	})();
	
	exports.AstTransformer = AstTransformer;
	
	Object.defineProperty(AstTransformer.prototype.visitImplicitReceiver, "parameters", { get: function get() {
	    return [[ImplicitReceiver]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitInterpolation, "parameters", { get: function get() {
	    return [[Interpolation]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitLiteralPrimitive, "parameters", { get: function get() {
	    return [[LiteralPrimitive]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitAccessMember, "parameters", { get: function get() {
	    return [[AccessMember]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitMethodCall, "parameters", { get: function get() {
	    return [[MethodCall]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitFunctionCall, "parameters", { get: function get() {
	    return [[FunctionCall]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitLiteralArray, "parameters", { get: function get() {
	    return [[LiteralArray]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitLiteralMap, "parameters", { get: function get() {
	    return [[LiteralMap]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitBinary, "parameters", { get: function get() {
	    return [[Binary]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitPrefixNot, "parameters", { get: function get() {
	    return [[PrefixNot]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitConditional, "parameters", { get: function get() {
	    return [[Conditional]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitPipe, "parameters", { get: function get() {
	    return [[Pipe]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitKeyedAccess, "parameters", { get: function get() {
	    return [[KeyedAccess]];
	  } });
	Object.defineProperty(AstTransformer.prototype.visitAll, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	var _evalListCache = [[], [0], [0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];
	function evalList(context, locals, exps) {
	  _rtts_assertRtts_assert.assert.argumentTypes(context, _rtts_assertRtts_assert.assert.type.any, locals, _rtts_assertRtts_assert.assert.type.any, exps, _angular2SrcFacadeCollection.List);
	  var length = exps.length;
	  if (length > 10) {
	    throw new _angular2SrcFacadeLang.BaseException("Cannot have more than 10 argument");
	  }
	  var result = _evalListCache[length];
	  for (var i = 0; i < length; i++) {
	    result[i] = exps[i].eval(context, locals);
	  }
	  return result;
	}
	Object.defineProperty(evalList, "parameters", { get: function get() {
	    return [[], [], [_angular2SrcFacadeCollection.List]];
	  } });
	//# sourceMappingURL=ast.js.map

	//# sourceMappingURL=./ast.map

/***/ },
/* 119 */
/*!**********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/directive_record.es6 ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _constants = __webpack_require__(/*! ./constants */ 120);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var DirectiveIndex = (function () {
	  function DirectiveIndex(elementIndex, directiveIndex) {
	    _classCallCheck(this, DirectiveIndex);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(elementIndex, _rtts_assertRtts_assert.assert.type.number, directiveIndex, _rtts_assertRtts_assert.assert.type.number);
	    this.elementIndex = elementIndex;
	    this.directiveIndex = directiveIndex;
	  }
	
	  _createClass(DirectiveIndex, [{
	    key: 'name',
	    get: function () {
	      return '' + this.elementIndex + '_' + this.directiveIndex;
	    }
	  }]);
	
	  return DirectiveIndex;
	})();
	
	exports.DirectiveIndex = DirectiveIndex;
	
	Object.defineProperty(DirectiveIndex, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	
	var DirectiveRecord = (function () {
	  function DirectiveRecord(directiveIndex, callOnAllChangesDone, callOnChange, changeDetection) {
	    _classCallCheck(this, DirectiveRecord);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(directiveIndex, DirectiveIndex, callOnAllChangesDone, _rtts_assertRtts_assert.assert.type.boolean, callOnChange, _rtts_assertRtts_assert.assert.type.boolean, changeDetection, _rtts_assertRtts_assert.assert.type.string);
	    this.directiveIndex = directiveIndex;
	    this.callOnAllChangesDone = callOnAllChangesDone;
	    this.callOnChange = callOnChange;
	    this.changeDetection = changeDetection;
	  }
	
	  _createClass(DirectiveRecord, [{
	    key: 'isOnPushChangeDetection',
	    value: function isOnPushChangeDetection() {
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeLang.StringWrapper.equals(this.changeDetection, _constants.ON_PUSH), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return DirectiveRecord;
	})();
	
	exports.DirectiveRecord = DirectiveRecord;
	
	Object.defineProperty(DirectiveRecord, 'parameters', { get: function get() {
	    return [[DirectiveIndex], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=directive_record.js.map

	//# sourceMappingURL=./directive_record.map

/***/ },
/* 120 */
/*!***************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/constants.es6 ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var CHECK_ONCE = "CHECK_ONCE";
	exports.CHECK_ONCE = CHECK_ONCE;
	var CHECKED = "CHECKED";
	exports.CHECKED = CHECKED;
	var CHECK_ALWAYS = "ALWAYS_CHECK";
	exports.CHECK_ALWAYS = CHECK_ALWAYS;
	var DETACHED = "DETACHED";
	exports.DETACHED = DETACHED;
	var ON_PUSH = "ON_PUSH";
	exports.ON_PUSH = ON_PUSH;
	var DEFAULT = "DEFAULT";
	//# sourceMappingURL=constants.js.map
	
	//# sourceMappingURL=./constants.map
	exports.DEFAULT = DEFAULT;

/***/ },
/* 121 */
/*!******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/parser/lexer.es6 ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var TOKEN_TYPE_CHARACTER = 1;
	exports.TOKEN_TYPE_CHARACTER = TOKEN_TYPE_CHARACTER;
	var TOKEN_TYPE_IDENTIFIER = 2;
	exports.TOKEN_TYPE_IDENTIFIER = TOKEN_TYPE_IDENTIFIER;
	var TOKEN_TYPE_KEYWORD = 3;
	exports.TOKEN_TYPE_KEYWORD = TOKEN_TYPE_KEYWORD;
	var TOKEN_TYPE_STRING = 4;
	exports.TOKEN_TYPE_STRING = TOKEN_TYPE_STRING;
	var TOKEN_TYPE_OPERATOR = 5;
	exports.TOKEN_TYPE_OPERATOR = TOKEN_TYPE_OPERATOR;
	var TOKEN_TYPE_NUMBER = 6;
	exports.TOKEN_TYPE_NUMBER = TOKEN_TYPE_NUMBER;
	
	var Lexer = (function () {
	  function Lexer() {
	    _classCallCheck(this, Lexer);
	  }
	
	  _createClass(Lexer, [{
	    key: "tokenize",
	    value: function tokenize(text) {
	      _rtts_assertRtts_assert.assert.argumentTypes(text, _rtts_assertRtts_assert.assert.type.string);
	      var scanner = new _Scanner(text);
	      var tokens = [];
	      var token = scanner.scanToken();
	      while (token != null) {
	        _angular2SrcFacadeCollection.ListWrapper.push(tokens, token);
	        token = scanner.scanToken();
	      }
	      return _rtts_assertRtts_assert.assert.returnType(tokens, _angular2SrcFacadeCollection.List);
	    }
	  }]);
	
	  return Lexer;
	})();
	
	exports.Lexer = Lexer;
	
	Object.defineProperty(Lexer, "annotations", { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(Lexer.prototype.tokenize, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var Token = (function () {
	  function Token(index, type, numValue, strValue) {
	    _classCallCheck(this, Token);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int, type, _angular2SrcFacadeLang.int, numValue, _rtts_assertRtts_assert.assert.type.number, strValue, _rtts_assertRtts_assert.assert.type.string);
	    this.index = index;
	    this.type = type;
	    this._numValue = numValue;
	    this._strValue = strValue;
	  }
	
	  _createClass(Token, [{
	    key: "isCharacter",
	    value: function isCharacter(code) {
	      _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_CHARACTER && this._numValue == code, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isNumber",
	    value: function isNumber() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_NUMBER, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isString",
	    value: function isString() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_STRING, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isOperator",
	    value: function isOperator(operater) {
	      _rtts_assertRtts_assert.assert.argumentTypes(operater, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_OPERATOR && this._strValue == operater, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isIdentifier",
	    value: function isIdentifier() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_IDENTIFIER, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isKeyword",
	    value: function isKeyword() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_KEYWORD, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isKeywordVar",
	    value: function isKeywordVar() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "var", _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isKeywordNull",
	    value: function isKeywordNull() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "null", _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isKeywordUndefined",
	    value: function isKeywordUndefined() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "undefined", _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isKeywordTrue",
	    value: function isKeywordTrue() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "true", _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "isKeywordFalse",
	    value: function isKeywordFalse() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_KEYWORD && this._strValue == "false", _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "toNumber",
	    value: function toNumber() {
	      return _rtts_assertRtts_assert.assert.returnType(this.type == TOKEN_TYPE_NUMBER ? this._numValue : -1, _rtts_assertRtts_assert.assert.type.number);
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      var type = _rtts_assertRtts_assert.assert.type(this.type, _angular2SrcFacadeLang.int);
	      if (type >= TOKEN_TYPE_CHARACTER && type <= TOKEN_TYPE_STRING) {
	        return _rtts_assertRtts_assert.assert.returnType(this._strValue, _rtts_assertRtts_assert.assert.type.string);
	      } else if (type == TOKEN_TYPE_NUMBER) {
	        return _rtts_assertRtts_assert.assert.returnType(this._numValue.toString(), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }]);
	
	  return Token;
	})();
	
	exports.Token = Token;
	
	Object.defineProperty(Token, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_angular2SrcFacadeLang.int], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Token.prototype.isCharacter, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(Token.prototype.isOperator, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function newCharacterToken(index, code) {
	  _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int, code, _angular2SrcFacadeLang.int);
	  return _rtts_assertRtts_assert.assert.returnType(new Token(index, TOKEN_TYPE_CHARACTER, code, _angular2SrcFacadeLang.StringWrapper.fromCharCode(code)), Token);
	}
	Object.defineProperty(newCharacterToken, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_angular2SrcFacadeLang.int]];
	  } });
	function newIdentifierToken(index, text) {
	  _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int, text, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType(new Token(index, TOKEN_TYPE_IDENTIFIER, 0, text), Token);
	}
	Object.defineProperty(newIdentifierToken, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function newKeywordToken(index, text) {
	  _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int, text, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType(new Token(index, TOKEN_TYPE_KEYWORD, 0, text), Token);
	}
	Object.defineProperty(newKeywordToken, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function newOperatorToken(index, text) {
	  _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int, text, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType(new Token(index, TOKEN_TYPE_OPERATOR, 0, text), Token);
	}
	Object.defineProperty(newOperatorToken, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function newStringToken(index, text) {
	  _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int, text, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType(new Token(index, TOKEN_TYPE_STRING, 0, text), Token);
	}
	Object.defineProperty(newStringToken, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function newNumberToken(index, n) {
	  _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int, n, _rtts_assertRtts_assert.assert.type.number);
	  return _rtts_assertRtts_assert.assert.returnType(new Token(index, TOKEN_TYPE_NUMBER, n, ""), Token);
	}
	Object.defineProperty(newNumberToken, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	var EOF = _rtts_assertRtts_assert.assert.type(new Token(-1, 0, 0, ""), Token);
	exports.EOF = EOF;
	var $EOF = 0;
	exports.$EOF = $EOF;
	var $TAB = 9;
	exports.$TAB = $TAB;
	var $LF = 10;
	exports.$LF = $LF;
	var $VTAB = 11;
	exports.$VTAB = $VTAB;
	var $FF = 12;
	exports.$FF = $FF;
	var $CR = 13;
	exports.$CR = $CR;
	var $SPACE = 32;
	exports.$SPACE = $SPACE;
	var $BANG = 33;
	exports.$BANG = $BANG;
	var $DQ = 34;
	exports.$DQ = $DQ;
	var $HASH = 35;
	exports.$HASH = $HASH;
	var $$ = 36;
	exports.$$ = $$;
	var $PERCENT = 37;
	exports.$PERCENT = $PERCENT;
	var $AMPERSAND = 38;
	exports.$AMPERSAND = $AMPERSAND;
	var $SQ = 39;
	exports.$SQ = $SQ;
	var $LPAREN = 40;
	exports.$LPAREN = $LPAREN;
	var $RPAREN = 41;
	exports.$RPAREN = $RPAREN;
	var $STAR = 42;
	exports.$STAR = $STAR;
	var $PLUS = 43;
	exports.$PLUS = $PLUS;
	var $COMMA = 44;
	exports.$COMMA = $COMMA;
	var $MINUS = 45;
	exports.$MINUS = $MINUS;
	var $PERIOD = 46;
	exports.$PERIOD = $PERIOD;
	var $SLASH = 47;
	exports.$SLASH = $SLASH;
	var $COLON = 58;
	exports.$COLON = $COLON;
	var $SEMICOLON = 59;
	exports.$SEMICOLON = $SEMICOLON;
	var $LT = 60;
	exports.$LT = $LT;
	var $EQ = 61;
	exports.$EQ = $EQ;
	var $GT = 62;
	exports.$GT = $GT;
	var $QUESTION = 63;
	exports.$QUESTION = $QUESTION;
	var $0 = 48;
	var $9 = 57;
	var $A = 65,
	    $B = 66,
	    $C = 67,
	    $D = 68,
	    $E = 69,
	    $F = 70,
	    $G = 71,
	    $H = 72,
	    $I = 73,
	    $J = 74,
	    $K = 75,
	    $L = 76,
	    $M = 77,
	    $N = 78,
	    $O = 79,
	    $P = 80,
	    $Q = 81,
	    $R = 82,
	    $S = 83,
	    $T = 84,
	    $U = 85,
	    $V = 86,
	    $W = 87,
	    $X = 88,
	    $Y = 89,
	    $Z = 90;
	var $LBRACKET = 91;
	exports.$LBRACKET = $LBRACKET;
	var $BACKSLASH = 92;
	exports.$BACKSLASH = $BACKSLASH;
	var $RBRACKET = 93;
	exports.$RBRACKET = $RBRACKET;
	var $CARET = 94;
	var $_ = 95;
	var $a = 97,
	    $b = 98,
	    $c = 99,
	    $d = 100,
	    $e = 101,
	    $f = 102,
	    $g = 103,
	    $h = 104,
	    $i = 105,
	    $j = 106,
	    $k = 107,
	    $l = 108,
	    $m = 109,
	    $n = 110,
	    $o = 111,
	    $p = 112,
	    $q = 113,
	    $r = 114,
	    $s = 115,
	    $t = 116,
	    $u = 117,
	    $v = 118,
	    $w = 119,
	    $x = 120,
	    $y = 121,
	    $z = 122;
	var $LBRACE = 123;
	exports.$LBRACE = $LBRACE;
	var $BAR = 124;
	exports.$BAR = $BAR;
	var $RBRACE = 125;
	exports.$RBRACE = $RBRACE;
	var $NBSP = 160;
	
	var ScannerError = (function (_Error) {
	  function ScannerError(message) {
	    _classCallCheck(this, ScannerError);
	
	    _get(Object.getPrototypeOf(ScannerError.prototype), "constructor", this).call(this);
	    this.message = message;
	  }
	
	  _inherits(ScannerError, _Error);
	
	  _createClass(ScannerError, [{
	    key: "toString",
	    value: function toString() {
	      return this.message;
	    }
	  }]);
	
	  return ScannerError;
	})(Error);
	
	exports.ScannerError = ScannerError;
	
	var _Scanner = (function () {
	  function _Scanner(input) {
	    _classCallCheck(this, _Scanner);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(input, _rtts_assertRtts_assert.assert.type.string);
	    this.input = input;
	    this.length = input.length;
	    this.peek = 0;
	    this.index = -1;
	    this.advance();
	  }
	
	  _createClass(_Scanner, [{
	    key: "advance",
	    value: function advance() {
	      this.peek = ++this.index >= this.length ? $EOF : _angular2SrcFacadeLang.StringWrapper.charCodeAt(this.input, this.index);
	    }
	  }, {
	    key: "scanToken",
	    value: function scanToken() {
	      var input = this.input,
	          length = this.length,
	          peek = this.peek,
	          index = this.index;
	      while (peek <= $SPACE) {
	        if (++index >= length) {
	          peek = $EOF;
	          break;
	        } else {
	          peek = _angular2SrcFacadeLang.StringWrapper.charCodeAt(input, index);
	        }
	      }
	      this.peek = peek;
	      this.index = index;
	      if (index >= length) {
	        return _rtts_assertRtts_assert.assert.returnType(null, Token);
	      }
	      if (isIdentifierStart(peek)) return _rtts_assertRtts_assert.assert.returnType(this.scanIdentifier(), Token);
	      if (isDigit(peek)) return _rtts_assertRtts_assert.assert.returnType(this.scanNumber(index), Token);
	      var start = _rtts_assertRtts_assert.assert.type(index, _angular2SrcFacadeLang.int);
	      switch (peek) {
	        case $PERIOD:
	          this.advance();
	          return _rtts_assertRtts_assert.assert.returnType(isDigit(this.peek) ? this.scanNumber(start) : newCharacterToken(start, $PERIOD), Token);
	        case $LPAREN:
	        case $RPAREN:
	        case $LBRACE:
	        case $RBRACE:
	        case $LBRACKET:
	        case $RBRACKET:
	        case $COMMA:
	        case $COLON:
	        case $SEMICOLON:
	          return _rtts_assertRtts_assert.assert.returnType(this.scanCharacter(start, peek), Token);
	        case $SQ:
	        case $DQ:
	          return _rtts_assertRtts_assert.assert.returnType(this.scanString(), Token);
	        case $HASH:
	          return _rtts_assertRtts_assert.assert.returnType(this.scanOperator(start, _angular2SrcFacadeLang.StringWrapper.fromCharCode(peek)), Token);
	        case $PLUS:
	        case $MINUS:
	        case $STAR:
	        case $SLASH:
	        case $PERCENT:
	        case $CARET:
	        case $QUESTION:
	          return _rtts_assertRtts_assert.assert.returnType(this.scanOperator(start, _angular2SrcFacadeLang.StringWrapper.fromCharCode(peek)), Token);
	        case $LT:
	        case $GT:
	        case $BANG:
	        case $EQ:
	          return _rtts_assertRtts_assert.assert.returnType(this.scanComplexOperator(start, $EQ, _angular2SrcFacadeLang.StringWrapper.fromCharCode(peek), "="), Token);
	        case $AMPERSAND:
	          return _rtts_assertRtts_assert.assert.returnType(this.scanComplexOperator(start, $AMPERSAND, "&", "&"), Token);
	        case $BAR:
	          return _rtts_assertRtts_assert.assert.returnType(this.scanComplexOperator(start, $BAR, "|", "|"), Token);
	        case $NBSP:
	          while (isWhitespace(this.peek)) this.advance();
	          return _rtts_assertRtts_assert.assert.returnType(this.scanToken(), Token);
	      }
	      this.error("Unexpected character [" + _angular2SrcFacadeLang.StringWrapper.fromCharCode(peek) + "]", 0);
	      return _rtts_assertRtts_assert.assert.returnType(null, Token);
	    }
	  }, {
	    key: "scanCharacter",
	    value: function scanCharacter(start, code) {
	      _rtts_assertRtts_assert.assert.argumentTypes(start, _angular2SrcFacadeLang.int, code, _angular2SrcFacadeLang.int);
	      (0, _rtts_assertRtts_assert.assert)(this.peek == code);
	      this.advance();
	      return _rtts_assertRtts_assert.assert.returnType(newCharacterToken(start, code), Token);
	    }
	  }, {
	    key: "scanOperator",
	    value: function scanOperator(start, str) {
	      _rtts_assertRtts_assert.assert.argumentTypes(start, _angular2SrcFacadeLang.int, str, _rtts_assertRtts_assert.assert.type.string);
	      (0, _rtts_assertRtts_assert.assert)(this.peek == _angular2SrcFacadeLang.StringWrapper.charCodeAt(str, 0));
	      (0, _rtts_assertRtts_assert.assert)(_angular2SrcFacadeCollection.SetWrapper.has(OPERATORS, str));
	      this.advance();
	      return _rtts_assertRtts_assert.assert.returnType(newOperatorToken(start, str), Token);
	    }
	  }, {
	    key: "scanComplexOperator",
	    value: function scanComplexOperator(start, code, one, two) {
	      _rtts_assertRtts_assert.assert.argumentTypes(start, _angular2SrcFacadeLang.int, code, _angular2SrcFacadeLang.int, one, _rtts_assertRtts_assert.assert.type.string, two, _rtts_assertRtts_assert.assert.type.string);
	      (0, _rtts_assertRtts_assert.assert)(this.peek == _angular2SrcFacadeLang.StringWrapper.charCodeAt(one, 0));
	      this.advance();
	      var str = _rtts_assertRtts_assert.assert.type(one, _rtts_assertRtts_assert.assert.type.string);
	      while (this.peek == code) {
	        this.advance();
	        str += two;
	      }
	      (0, _rtts_assertRtts_assert.assert)(_angular2SrcFacadeCollection.SetWrapper.has(OPERATORS, str));
	      return _rtts_assertRtts_assert.assert.returnType(newOperatorToken(start, str), Token);
	    }
	  }, {
	    key: "scanIdentifier",
	    value: function scanIdentifier() {
	      (0, _rtts_assertRtts_assert.assert)(isIdentifierStart(this.peek));
	      var start = _rtts_assertRtts_assert.assert.type(this.index, _angular2SrcFacadeLang.int);
	      this.advance();
	      while (isIdentifierPart(this.peek)) this.advance();
	      var str = _rtts_assertRtts_assert.assert.type(this.input.substring(start, this.index), _rtts_assertRtts_assert.assert.type.string);
	      if (_angular2SrcFacadeCollection.SetWrapper.has(KEYWORDS, str)) {
	        return _rtts_assertRtts_assert.assert.returnType(newKeywordToken(start, str), Token);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(newIdentifierToken(start, str), Token);
	      }
	    }
	  }, {
	    key: "scanNumber",
	    value: function scanNumber(start) {
	      _rtts_assertRtts_assert.assert.argumentTypes(start, _angular2SrcFacadeLang.int);
	      (0, _rtts_assertRtts_assert.assert)(isDigit(this.peek));
	      var simple = _rtts_assertRtts_assert.assert.type(this.index === start, _rtts_assertRtts_assert.assert.type.boolean);
	      this.advance();
	      while (true) {
	        if (isDigit(this.peek)) {} else if (this.peek == $PERIOD) {
	          simple = false;
	        } else if (isExponentStart(this.peek)) {
	          this.advance();
	          if (isExponentSign(this.peek)) this.advance();
	          if (!isDigit(this.peek)) this.error("Invalid exponent", -1);
	          simple = false;
	        } else {
	          break;
	        }
	        this.advance();
	      }
	      var str = _rtts_assertRtts_assert.assert.type(this.input.substring(start, this.index), _rtts_assertRtts_assert.assert.type.string);
	      var value = _rtts_assertRtts_assert.assert.type(simple ? _angular2SrcFacadeLang.NumberWrapper.parseIntAutoRadix(str) : _angular2SrcFacadeLang.NumberWrapper.parseFloat(str), _rtts_assertRtts_assert.assert.type.number);
	      return _rtts_assertRtts_assert.assert.returnType(newNumberToken(start, value), Token);
	    }
	  }, {
	    key: "scanString",
	    value: function scanString() {
	      (0, _rtts_assertRtts_assert.assert)(this.peek == $SQ || this.peek == $DQ);
	      var start = _rtts_assertRtts_assert.assert.type(this.index, _angular2SrcFacadeLang.int);
	      var quote = _rtts_assertRtts_assert.assert.type(this.peek, _angular2SrcFacadeLang.int);
	      this.advance();
	      var buffer;
	      var marker = _rtts_assertRtts_assert.assert.type(this.index, _angular2SrcFacadeLang.int);
	      var input = _rtts_assertRtts_assert.assert.type(this.input, _rtts_assertRtts_assert.assert.type.string);
	      while (this.peek != quote) {
	        if (this.peek == $BACKSLASH) {
	          if (buffer == null) buffer = new _angular2SrcFacadeLang.StringJoiner();
	          buffer.add(input.substring(marker, this.index));
	          this.advance();
	          var unescapedCode;
	          if (this.peek == $u) {
	            var hex = _rtts_assertRtts_assert.assert.type(input.substring(this.index + 1, this.index + 5), _rtts_assertRtts_assert.assert.type.string);
	            try {
	              unescapedCode = _angular2SrcFacadeLang.NumberWrapper.parseInt(hex, 16);
	            } catch (e) {
	              this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	            }
	            for (var i = _rtts_assertRtts_assert.assert.type(0, _angular2SrcFacadeLang.int); i < 5; i++) {
	              this.advance();
	            }
	          } else {
	            unescapedCode = unescape(this.peek);
	            this.advance();
	          }
	          buffer.add(_angular2SrcFacadeLang.StringWrapper.fromCharCode(unescapedCode));
	          marker = this.index;
	        } else if (this.peek == $EOF) {
	          this.error("Unterminated quote", 0);
	        } else {
	          this.advance();
	        }
	      }
	      var last = _rtts_assertRtts_assert.assert.type(input.substring(marker, this.index), _rtts_assertRtts_assert.assert.type.string);
	      this.advance();
	      var unescaped = _rtts_assertRtts_assert.assert.type(last, _rtts_assertRtts_assert.assert.type.string);
	      if (buffer != null) {
	        buffer.add(last);
	        unescaped = buffer.toString();
	      }
	      return _rtts_assertRtts_assert.assert.returnType(newStringToken(start, unescaped), Token);
	    }
	  }, {
	    key: "error",
	    value: function error(message, offset) {
	      _rtts_assertRtts_assert.assert.argumentTypes(message, _rtts_assertRtts_assert.assert.type.string, offset, _angular2SrcFacadeLang.int);
	      var position = _rtts_assertRtts_assert.assert.type(this.index + offset, _angular2SrcFacadeLang.int);
	      throw new ScannerError("Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	    }
	  }]);
	
	  return _Scanner;
	})();
	
	Object.defineProperty(_Scanner, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(_Scanner.prototype.scanCharacter, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(_Scanner.prototype.scanOperator, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(_Scanner.prototype.scanComplexOperator, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [_angular2SrcFacadeLang.int], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(_Scanner.prototype.scanNumber, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(_Scanner.prototype.error, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_angular2SrcFacadeLang.int]];
	  } });
	function isWhitespace(code) {
	  _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	  return _rtts_assertRtts_assert.assert.returnType(code >= $TAB && code <= $SPACE || code == $NBSP, _rtts_assertRtts_assert.assert.type.boolean);
	}
	Object.defineProperty(isWhitespace, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	function isIdentifierStart(code) {
	  _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	  return _rtts_assertRtts_assert.assert.returnType($a <= code && code <= $z || $A <= code && code <= $Z || code == $_ || code == $$, _rtts_assertRtts_assert.assert.type.boolean);
	}
	Object.defineProperty(isIdentifierStart, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	function isIdentifierPart(code) {
	  _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	  return _rtts_assertRtts_assert.assert.returnType($a <= code && code <= $z || $A <= code && code <= $Z || $0 <= code && code <= $9 || code == $_ || code == $$, _rtts_assertRtts_assert.assert.type.boolean);
	}
	Object.defineProperty(isIdentifierPart, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	function isDigit(code) {
	  _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	  return _rtts_assertRtts_assert.assert.returnType($0 <= code && code <= $9, _rtts_assertRtts_assert.assert.type.boolean);
	}
	Object.defineProperty(isDigit, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	function isExponentStart(code) {
	  _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	  return _rtts_assertRtts_assert.assert.returnType(code == $e || code == $E, _rtts_assertRtts_assert.assert.type.boolean);
	}
	Object.defineProperty(isExponentStart, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	function isExponentSign(code) {
	  _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	  return _rtts_assertRtts_assert.assert.returnType(code == $MINUS || code == $PLUS, _rtts_assertRtts_assert.assert.type.boolean);
	}
	Object.defineProperty(isExponentSign, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	function unescape(code) {
	  _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	  switch (code) {
	    case $n:
	      return _rtts_assertRtts_assert.assert.returnType($LF, _angular2SrcFacadeLang.int);
	    case $f:
	      return _rtts_assertRtts_assert.assert.returnType($FF, _angular2SrcFacadeLang.int);
	    case $r:
	      return _rtts_assertRtts_assert.assert.returnType($CR, _angular2SrcFacadeLang.int);
	    case $t:
	      return _rtts_assertRtts_assert.assert.returnType($TAB, _angular2SrcFacadeLang.int);
	    case $v:
	      return _rtts_assertRtts_assert.assert.returnType($VTAB, _angular2SrcFacadeLang.int);
	    default:
	      return _rtts_assertRtts_assert.assert.returnType(code, _angular2SrcFacadeLang.int);
	  }
	}
	Object.defineProperty(unescape, "parameters", { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	var OPERATORS = _angular2SrcFacadeCollection.SetWrapper.createFromList(["+", "-", "*", "/", "%", "^", "=", "==", "!=", "===", "!==", "<", ">", "<=", ">=", "&&", "||", "&", "|", "!", "?", "#"]);
	var KEYWORDS = _angular2SrcFacadeCollection.SetWrapper.createFromList(["var", "null", "undefined", "true", "false"]);
	//# sourceMappingURL=lexer.js.map

	//# sourceMappingURL=./lexer.map

/***/ },
/* 122 */
/*!*******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/parser/parser.es6 ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _lexer = __webpack_require__(/*! ./lexer */ 121);
	
	var _angular2SrcReflectionReflection = __webpack_require__(/*! angular2/src/reflection/reflection */ 109);
	
	var _ast = __webpack_require__(/*! ./ast */ 118);
	
	var _implicitReceiver = new _ast.ImplicitReceiver();
	var INTERPOLATION_REGEXP = _angular2SrcFacadeLang.RegExpWrapper.create('\\{\\{(.*?)\\}\\}');
	var QUOTE_REGEXP = _angular2SrcFacadeLang.RegExpWrapper.create('\'');
	
	var Parser = (function () {
	  function Parser(lexer) {
	    var providedReflector = arguments[1] === undefined ? null : arguments[1];
	
	    _classCallCheck(this, Parser);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(lexer, _lexer.Lexer, providedReflector, _angular2SrcReflectionReflection.Reflector);
	    this._lexer = lexer;
	    this._reflector = (0, _angular2SrcFacadeLang.isPresent)(providedReflector) ? providedReflector : _angular2SrcReflectionReflection.reflector;
	  }
	
	  _createClass(Parser, [{
	    key: 'parseAction',
	    value: function parseAction(input, location) {
	      _rtts_assertRtts_assert.assert.argumentTypes(input, _rtts_assertRtts_assert.assert.type.string, location, _rtts_assertRtts_assert.assert.type.any);
	      var tokens = this._lexer.tokenize(input);
	      var ast = new _ParseAST(input, location, tokens, this._reflector, true).parseChain();
	      return _rtts_assertRtts_assert.assert.returnType(new _ast.ASTWithSource(ast, input, location), _ast.ASTWithSource);
	    }
	  }, {
	    key: 'parseBinding',
	    value: function parseBinding(input, location) {
	      _rtts_assertRtts_assert.assert.argumentTypes(input, _rtts_assertRtts_assert.assert.type.string, location, _rtts_assertRtts_assert.assert.type.any);
	      var tokens = this._lexer.tokenize(input);
	      var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	      return _rtts_assertRtts_assert.assert.returnType(new _ast.ASTWithSource(ast, input, location), _ast.ASTWithSource);
	    }
	  }, {
	    key: 'addPipes',
	    value: function addPipes(bindingAst, pipes) {
	      if (_angular2SrcFacadeCollection.ListWrapper.isEmpty(pipes)) return _rtts_assertRtts_assert.assert.returnType(bindingAst, _ast.ASTWithSource);
	      var res = _angular2SrcFacadeCollection.ListWrapper.reduce(pipes, function (result, currentPipeName) {
	        return new _ast.Pipe(result, currentPipeName, [], false);
	      }, bindingAst.ast);
	      return _rtts_assertRtts_assert.assert.returnType(new _ast.ASTWithSource(res, bindingAst.source, bindingAst.location), _ast.ASTWithSource);
	    }
	  }, {
	    key: 'parseTemplateBindings',
	    value: function parseTemplateBindings(input, location) {
	      _rtts_assertRtts_assert.assert.argumentTypes(input, _rtts_assertRtts_assert.assert.type.string, location, _rtts_assertRtts_assert.assert.type.any);
	      var tokens = this._lexer.tokenize(input);
	      return _rtts_assertRtts_assert.assert.returnType(new _ParseAST(input, location, tokens, this._reflector, false).parseTemplateBindings(), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _ast.TemplateBinding));
	    }
	  }, {
	    key: 'parseInterpolation',
	    value: function parseInterpolation(input, location) {
	      _rtts_assertRtts_assert.assert.argumentTypes(input, _rtts_assertRtts_assert.assert.type.string, location, _rtts_assertRtts_assert.assert.type.any);
	      var parts = _angular2SrcFacadeLang.StringWrapper.split(input, INTERPOLATION_REGEXP);
	      if (parts.length <= 1) {
	        return _rtts_assertRtts_assert.assert.returnType(null, _ast.ASTWithSource);
	      }
	      var strings = [];
	      var expressions = [];
	      for (var i = 0; i < parts.length; i++) {
	        var part = parts[i];
	        if (i % 2 === 0) {
	          _angular2SrcFacadeCollection.ListWrapper.push(strings, part);
	        } else {
	          var tokens = this._lexer.tokenize(part);
	          var ast = new _ParseAST(input, location, tokens, this._reflector, false).parseChain();
	          _angular2SrcFacadeCollection.ListWrapper.push(expressions, ast);
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(new _ast.ASTWithSource(new _ast.Interpolation(strings, expressions), input, location), _ast.ASTWithSource);
	    }
	  }, {
	    key: 'wrapLiteralPrimitive',
	    value: function wrapLiteralPrimitive(input, location) {
	      _rtts_assertRtts_assert.assert.argumentTypes(input, _rtts_assertRtts_assert.assert.type.string, location, _rtts_assertRtts_assert.assert.type.any);
	      return _rtts_assertRtts_assert.assert.returnType(new _ast.ASTWithSource(new _ast.LiteralPrimitive(input), input, location), _ast.ASTWithSource);
	    }
	  }]);
	
	  return Parser;
	})();
	
	exports.Parser = Parser;
	
	Object.defineProperty(Parser, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(Parser, 'parameters', { get: function get() {
	    return [[_lexer.Lexer], [_angular2SrcReflectionReflection.Reflector]];
	  } });
	Object.defineProperty(Parser.prototype.parseAction, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(Parser.prototype.parseBinding, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(Parser.prototype.addPipes, 'parameters', { get: function get() {
	    return [[_ast.ASTWithSource], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, String)]];
	  } });
	Object.defineProperty(Parser.prototype.parseTemplateBindings, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(Parser.prototype.parseInterpolation, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(Parser.prototype.wrapLiteralPrimitive, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	
	var _ParseAST = (function () {
	  function _ParseAST(input, location, tokens, reflector, parseAction) {
	    _classCallCheck(this, _ParseAST);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(input, _rtts_assertRtts_assert.assert.type.string, location, _rtts_assertRtts_assert.assert.type.any, tokens, _angular2SrcFacadeCollection.List, reflector, _angular2SrcReflectionReflection.Reflector, parseAction, _rtts_assertRtts_assert.assert.type.boolean);
	    this.input = input;
	    this.location = location;
	    this.tokens = tokens;
	    this.index = 0;
	    this.reflector = reflector;
	    this.parseAction = parseAction;
	  }
	
	  _createClass(_ParseAST, [{
	    key: 'peek',
	    value: function peek(offset) {
	      _rtts_assertRtts_assert.assert.argumentTypes(offset, _angular2SrcFacadeLang.int);
	      var i = this.index + offset;
	      return _rtts_assertRtts_assert.assert.returnType(i < this.tokens.length ? this.tokens[i] : _lexer.EOF, _lexer.Token);
	    }
	  }, {
	    key: 'next',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this.peek(0), _lexer.Token);
	    }
	  }, {
	    key: 'inputIndex',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this.index < this.tokens.length ? this.next.index : this.input.length, _angular2SrcFacadeLang.int);
	    }
	  }, {
	    key: 'advance',
	    value: function advance() {
	      this.index++;
	    }
	  }, {
	    key: 'optionalCharacter',
	    value: function optionalCharacter(code) {
	      _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	      if (this.next.isCharacter(code)) {
	        this.advance();
	        return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	    }
	  }, {
	    key: 'optionalKeywordVar',
	    value: function optionalKeywordVar() {
	      if (this.peekKeywordVar()) {
	        this.advance();
	        return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	    }
	  }, {
	    key: 'peekKeywordVar',
	    value: function peekKeywordVar() {
	      return _rtts_assertRtts_assert.assert.returnType(this.next.isKeywordVar() || this.next.isOperator('#'), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'expectCharacter',
	    value: function expectCharacter(code) {
	      _rtts_assertRtts_assert.assert.argumentTypes(code, _angular2SrcFacadeLang.int);
	      if (this.optionalCharacter(code)) return;
	      this.error('Missing expected ' + _angular2SrcFacadeLang.StringWrapper.fromCharCode(code));
	    }
	  }, {
	    key: 'optionalOperator',
	    value: function optionalOperator(op) {
	      _rtts_assertRtts_assert.assert.argumentTypes(op, _rtts_assertRtts_assert.assert.type.string);
	      if (this.next.isOperator(op)) {
	        this.advance();
	        return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	    }
	  }, {
	    key: 'expectOperator',
	    value: function expectOperator(operator) {
	      _rtts_assertRtts_assert.assert.argumentTypes(operator, _rtts_assertRtts_assert.assert.type.string);
	      if (this.optionalOperator(operator)) return;
	      this.error('Missing expected operator ' + operator);
	    }
	  }, {
	    key: 'expectIdentifierOrKeyword',
	    value: function expectIdentifierOrKeyword() {
	      var n = this.next;
	      if (!n.isIdentifier() && !n.isKeyword()) {
	        this.error('Unexpected token ' + n + ', expected identifier or keyword');
	      }
	      this.advance();
	      return _rtts_assertRtts_assert.assert.returnType(n.toString(), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'expectIdentifierOrKeywordOrString',
	    value: function expectIdentifierOrKeywordOrString() {
	      var n = this.next;
	      if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	        this.error('Unexpected token ' + n + ', expected identifier, keyword, or string');
	      }
	      this.advance();
	      return _rtts_assertRtts_assert.assert.returnType(n.toString(), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'parseChain',
	    value: function parseChain() {
	      var exprs = [];
	      while (this.index < this.tokens.length) {
	        var expr = this.parsePipe();
	        _angular2SrcFacadeCollection.ListWrapper.push(exprs, expr);
	        if (this.optionalCharacter(_lexer.$SEMICOLON)) {
	          if (!this.parseAction) {
	            this.error('Binding expression cannot contain chained expression');
	          }
	          while (this.optionalCharacter(_lexer.$SEMICOLON)) {}
	        } else if (this.index < this.tokens.length) {
	          this.error('Unexpected token \'' + this.next + '\'');
	        }
	      }
	      if (exprs.length == 0) return _rtts_assertRtts_assert.assert.returnType(new _ast.EmptyExpr(), _ast.AST);
	      if (exprs.length == 1) return _rtts_assertRtts_assert.assert.returnType(exprs[0], _ast.AST);
	      return _rtts_assertRtts_assert.assert.returnType(new _ast.Chain(exprs), _ast.AST);
	    }
	  }, {
	    key: 'parsePipe',
	    value: function parsePipe() {
	      var result = this.parseExpression();
	      if (this.optionalOperator('|')) {
	        return this.parseInlinedPipe(result);
	      } else {
	        return result;
	      }
	    }
	  }, {
	    key: 'parseExpression',
	    value: function parseExpression() {
	      var start = this.inputIndex;
	      var result = this.parseConditional();
	      while (this.next.isOperator('=')) {
	        if (!result.isAssignable) {
	          var end = this.inputIndex;
	          var expression = this.input.substring(start, end);
	          this.error('Expression ' + expression + ' is not assignable');
	        }
	        if (!this.parseAction) {
	          this.error('Binding expression cannot contain assignments');
	        }
	        this.expectOperator('=');
	        result = new _ast.Assignment(result, this.parseConditional());
	      }
	      return result;
	    }
	  }, {
	    key: 'parseConditional',
	    value: function parseConditional() {
	      var start = this.inputIndex;
	      var result = this.parseLogicalOr();
	      if (this.optionalOperator('?')) {
	        var yes = this.parseExpression();
	        if (!this.optionalCharacter(_lexer.$COLON)) {
	          var end = this.inputIndex;
	          var expression = this.input.substring(start, end);
	          this.error('Conditional expression ' + expression + ' requires all 3 expressions');
	        }
	        var no = this.parseExpression();
	        return new _ast.Conditional(result, yes, no);
	      } else {
	        return result;
	      }
	    }
	  }, {
	    key: 'parseLogicalOr',
	    value: function parseLogicalOr() {
	      var result = this.parseLogicalAnd();
	      while (this.optionalOperator('||')) {
	        result = new _ast.Binary('||', result, this.parseLogicalAnd());
	      }
	      return result;
	    }
	  }, {
	    key: 'parseLogicalAnd',
	    value: function parseLogicalAnd() {
	      var result = this.parseEquality();
	      while (this.optionalOperator('&&')) {
	        result = new _ast.Binary('&&', result, this.parseEquality());
	      }
	      return result;
	    }
	  }, {
	    key: 'parseEquality',
	    value: function parseEquality() {
	      var result = this.parseRelational();
	      while (true) {
	        if (this.optionalOperator('==')) {
	          result = new _ast.Binary('==', result, this.parseRelational());
	        } else if (this.optionalOperator('===')) {
	          result = new _ast.Binary('===', result, this.parseRelational());
	        } else if (this.optionalOperator('!=')) {
	          result = new _ast.Binary('!=', result, this.parseRelational());
	        } else if (this.optionalOperator('!==')) {
	          result = new _ast.Binary('!==', result, this.parseRelational());
	        } else {
	          return result;
	        }
	      }
	    }
	  }, {
	    key: 'parseRelational',
	    value: function parseRelational() {
	      var result = this.parseAdditive();
	      while (true) {
	        if (this.optionalOperator('<')) {
	          result = new _ast.Binary('<', result, this.parseAdditive());
	        } else if (this.optionalOperator('>')) {
	          result = new _ast.Binary('>', result, this.parseAdditive());
	        } else if (this.optionalOperator('<=')) {
	          result = new _ast.Binary('<=', result, this.parseAdditive());
	        } else if (this.optionalOperator('>=')) {
	          result = new _ast.Binary('>=', result, this.parseAdditive());
	        } else {
	          return result;
	        }
	      }
	    }
	  }, {
	    key: 'parseAdditive',
	    value: function parseAdditive() {
	      var result = this.parseMultiplicative();
	      while (true) {
	        if (this.optionalOperator('+')) {
	          result = new _ast.Binary('+', result, this.parseMultiplicative());
	        } else if (this.optionalOperator('-')) {
	          result = new _ast.Binary('-', result, this.parseMultiplicative());
	        } else {
	          return result;
	        }
	      }
	    }
	  }, {
	    key: 'parseMultiplicative',
	    value: function parseMultiplicative() {
	      var result = this.parsePrefix();
	      while (true) {
	        if (this.optionalOperator('*')) {
	          result = new _ast.Binary('*', result, this.parsePrefix());
	        } else if (this.optionalOperator('%')) {
	          result = new _ast.Binary('%', result, this.parsePrefix());
	        } else if (this.optionalOperator('/')) {
	          result = new _ast.Binary('/', result, this.parsePrefix());
	        } else {
	          return result;
	        }
	      }
	    }
	  }, {
	    key: 'parsePrefix',
	    value: function parsePrefix() {
	      if (this.optionalOperator('+')) {
	        return this.parsePrefix();
	      } else if (this.optionalOperator('-')) {
	        return new _ast.Binary('-', new _ast.LiteralPrimitive(0), this.parsePrefix());
	      } else if (this.optionalOperator('!')) {
	        return new _ast.PrefixNot(this.parsePrefix());
	      } else {
	        return this.parseCallChain();
	      }
	    }
	  }, {
	    key: 'parseCallChain',
	    value: function parseCallChain() {
	      var result = this.parsePrimary();
	      while (true) {
	        if (this.optionalCharacter(_lexer.$PERIOD)) {
	          result = this.parseAccessMemberOrMethodCall(result);
	        } else if (this.optionalCharacter(_lexer.$LBRACKET)) {
	          var key = this.parseExpression();
	          this.expectCharacter(_lexer.$RBRACKET);
	          result = new _ast.KeyedAccess(result, key);
	        } else if (this.optionalCharacter(_lexer.$LPAREN)) {
	          var args = this.parseCallArguments();
	          this.expectCharacter(_lexer.$RPAREN);
	          result = new _ast.FunctionCall(result, args);
	        } else {
	          return _rtts_assertRtts_assert.assert.returnType(result, _ast.AST);
	        }
	      }
	    }
	  }, {
	    key: 'parsePrimary',
	    value: function parsePrimary() {
	      if (this.optionalCharacter(_lexer.$LPAREN)) {
	        var result = this.parsePipe();
	        this.expectCharacter(_lexer.$RPAREN);
	        return result;
	      } else if (this.next.isKeywordNull() || this.next.isKeywordUndefined()) {
	        this.advance();
	        return new _ast.LiteralPrimitive(null);
	      } else if (this.next.isKeywordTrue()) {
	        this.advance();
	        return new _ast.LiteralPrimitive(true);
	      } else if (this.next.isKeywordFalse()) {
	        this.advance();
	        return new _ast.LiteralPrimitive(false);
	      } else if (this.optionalCharacter(_lexer.$LBRACKET)) {
	        var elements = this.parseExpressionList(_lexer.$RBRACKET);
	        this.expectCharacter(_lexer.$RBRACKET);
	        return new _ast.LiteralArray(elements);
	      } else if (this.next.isCharacter(_lexer.$LBRACE)) {
	        return this.parseLiteralMap();
	      } else if (this.next.isIdentifier()) {
	        return this.parseAccessMemberOrMethodCall(_implicitReceiver);
	      } else if (this.next.isNumber()) {
	        var value = this.next.toNumber();
	        this.advance();
	        return new _ast.LiteralPrimitive(value);
	      } else if (this.next.isString()) {
	        var value = this.next.toString();
	        this.advance();
	        return new _ast.LiteralPrimitive(value);
	      } else if (this.index >= this.tokens.length) {
	        this.error('Unexpected end of expression: ' + this.input);
	      } else {
	        this.error('Unexpected token ' + this.next);
	      }
	    }
	  }, {
	    key: 'parseExpressionList',
	    value: function parseExpressionList(terminator) {
	      _rtts_assertRtts_assert.assert.argumentTypes(terminator, _angular2SrcFacadeLang.int);
	      var result = [];
	      if (!this.next.isCharacter(terminator)) {
	        do {
	          _angular2SrcFacadeCollection.ListWrapper.push(result, this.parseExpression());
	        } while (this.optionalCharacter(_lexer.$COMMA));
	      }
	      return _rtts_assertRtts_assert.assert.returnType(result, _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: 'parseLiteralMap',
	    value: function parseLiteralMap() {
	      var keys = [];
	      var values = [];
	      this.expectCharacter(_lexer.$LBRACE);
	      if (!this.optionalCharacter(_lexer.$RBRACE)) {
	        do {
	          var key = this.expectIdentifierOrKeywordOrString();
	          _angular2SrcFacadeCollection.ListWrapper.push(keys, key);
	          this.expectCharacter(_lexer.$COLON);
	          _angular2SrcFacadeCollection.ListWrapper.push(values, this.parseExpression());
	        } while (this.optionalCharacter(_lexer.$COMMA));
	        this.expectCharacter(_lexer.$RBRACE);
	      }
	      return new _ast.LiteralMap(keys, values);
	    }
	  }, {
	    key: 'parseAccessMemberOrMethodCall',
	    value: function parseAccessMemberOrMethodCall(receiver) {
	      var id = this.expectIdentifierOrKeyword();
	      if (this.optionalCharacter(_lexer.$LPAREN)) {
	        var args = this.parseCallArguments();
	        this.expectCharacter(_lexer.$RPAREN);
	        var fn = this.reflector.method(id);
	        return _rtts_assertRtts_assert.assert.returnType(new _ast.MethodCall(receiver, id, fn, args), _ast.AST);
	      } else {
	        var getter = this.reflector.getter(id);
	        var setter = this.reflector.setter(id);
	        var am = new _ast.AccessMember(receiver, id, getter, setter);
	        if (this.optionalOperator('|')) {
	          return _rtts_assertRtts_assert.assert.returnType(this.parseInlinedPipe(am), _ast.AST);
	        } else {
	          return _rtts_assertRtts_assert.assert.returnType(am, _ast.AST);
	        }
	      }
	    }
	  }, {
	    key: 'parseInlinedPipe',
	    value: function parseInlinedPipe(result) {
	      do {
	        if (this.parseAction) {
	          this.error('Cannot have a pipe in an action expression');
	        }
	        var name = this.expectIdentifierOrKeyword();
	        var args = _angular2SrcFacadeCollection.ListWrapper.create();
	        while (this.optionalCharacter(_lexer.$COLON)) {
	          _angular2SrcFacadeCollection.ListWrapper.push(args, this.parseExpression());
	        }
	        result = new _ast.Pipe(result, name, args, true);
	      } while (this.optionalOperator('|'));
	      return result;
	    }
	  }, {
	    key: 'parseCallArguments',
	    value: function parseCallArguments() {
	      if (this.next.isCharacter(_lexer.$RPAREN)) return [];
	      var positionals = [];
	      do {
	        _angular2SrcFacadeCollection.ListWrapper.push(positionals, this.parseExpression());
	      } while (this.optionalCharacter(_lexer.$COMMA));
	      return positionals;
	    }
	  }, {
	    key: 'expectTemplateBindingKey',
	    value: function expectTemplateBindingKey() {
	      var result = '';
	      var operatorFound = false;
	      do {
	        result += this.expectIdentifierOrKeywordOrString();
	        operatorFound = this.optionalOperator('-');
	        if (operatorFound) {
	          result += '-';
	        }
	      } while (operatorFound);
	      return result.toString();
	    }
	  }, {
	    key: 'parseTemplateBindings',
	    value: function parseTemplateBindings() {
	      var bindings = [];
	      while (this.index < this.tokens.length) {
	        var keyIsVar = _rtts_assertRtts_assert.assert.type(this.optionalKeywordVar(), _rtts_assertRtts_assert.assert.type.boolean);
	        var key = this.expectTemplateBindingKey();
	        this.optionalCharacter(_lexer.$COLON);
	        var name = null;
	        var expression = null;
	        if (this.next !== _lexer.EOF) {
	          if (keyIsVar) {
	            if (this.optionalOperator('=')) {
	              name = this.expectTemplateBindingKey();
	            } else {
	              name = '$implicit';
	            }
	          } else if (!this.peekKeywordVar()) {
	            var start = this.inputIndex;
	            var ast = this.parsePipe();
	            var source = this.input.substring(start, this.inputIndex);
	            expression = new _ast.ASTWithSource(ast, source, this.location);
	          }
	        }
	        _angular2SrcFacadeCollection.ListWrapper.push(bindings, new _ast.TemplateBinding(key, keyIsVar, name, expression));
	        if (!this.optionalCharacter(_lexer.$SEMICOLON)) {
	          this.optionalCharacter(_lexer.$COMMA);
	        }
	        ;
	      }
	      return bindings;
	    }
	  }, {
	    key: 'error',
	    value: function error(message) {
	      var index = arguments[1] === undefined ? null : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(message, _rtts_assertRtts_assert.assert.type.string, index, _angular2SrcFacadeLang.int);
	      if ((0, _angular2SrcFacadeLang.isBlank)(index)) index = this.index;
	      var location = index < this.tokens.length ? 'at column ' + (this.tokens[index].index + 1) + ' in' : 'at the end of the expression';
	      throw new _angular2SrcFacadeLang.BaseException('Parser Error: ' + message + ' ' + location + ' [' + this.input + '] in ' + this.location);
	    }
	  }]);
	
	  return _ParseAST;
	})();
	
	Object.defineProperty(_ParseAST, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any], [_angular2SrcFacadeCollection.List], [_angular2SrcReflectionReflection.Reflector], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(_ParseAST.prototype.peek, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(_ParseAST.prototype.optionalCharacter, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(_ParseAST.prototype.expectCharacter, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(_ParseAST.prototype.optionalOperator, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(_ParseAST.prototype.expectOperator, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(_ParseAST.prototype.parseExpressionList, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(_ParseAST.prototype.error, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_angular2SrcFacadeLang.int]];
	  } });
	//# sourceMappingURL=parser.js.map

	//# sourceMappingURL=./parser.map

/***/ },
/* 123 */
/*!*******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/parser/locals.es6 ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var Locals = (function () {
	  function Locals(parent, current) {
	    _classCallCheck(this, Locals);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parent, Locals, current, Map);
	    this.parent = parent;
	    this.current = current;
	  }
	
	  _createClass(Locals, [{
	    key: 'contains',
	    value: function contains(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this.current, name)) {
	        return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parent)) {
	        return _rtts_assertRtts_assert.assert.returnType(this.parent.contains(name), _rtts_assertRtts_assert.assert.type.boolean);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'get',
	    value: function get(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this.current, name)) {
	        return _angular2SrcFacadeCollection.MapWrapper.get(this.current, name);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parent)) {
	        return this.parent.get(name);
	      }
	      throw new _angular2SrcFacadeLang.BaseException('Cannot find \'' + name + '\'');
	    }
	  }, {
	    key: 'set',
	    value: function set(name, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, value, _rtts_assertRtts_assert.assert.type.any);
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this.current, name)) {
	        _angular2SrcFacadeCollection.MapWrapper.set(this.current, name, value);
	      } else {
	        throw new _angular2SrcFacadeLang.BaseException('Setting of new keys post-construction is not supported.');
	      }
	    }
	  }, {
	    key: 'clearValues',
	    value: function clearValues() {
	      _angular2SrcFacadeCollection.MapWrapper.clearValues(this.current);
	    }
	  }]);
	
	  return Locals;
	})();
	
	exports.Locals = Locals;
	
	Object.defineProperty(Locals, 'parameters', { get: function get() {
	    return [[Locals], [Map]];
	  } });
	Object.defineProperty(Locals.prototype.contains, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Locals.prototype.get, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Locals.prototype.set, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	//# sourceMappingURL=locals.js.map

	//# sourceMappingURL=./locals.map

/***/ },
/* 124 */
/*!****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/exceptions.es6 ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _proto_record = __webpack_require__(/*! ./proto_record */ 125);
	
	var ExpressionChangedAfterItHasBeenChecked = (function (_Error) {
	  function ExpressionChangedAfterItHasBeenChecked(proto, change) {
	    _classCallCheck(this, ExpressionChangedAfterItHasBeenChecked);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord, change, _rtts_assertRtts_assert.assert.type.any);
	    _get(Object.getPrototypeOf(ExpressionChangedAfterItHasBeenChecked.prototype), "constructor", this).call(this);
	    this.message = "Expression '" + proto.expressionAsString + "' has changed after it was checked. " + ("Previous value: '" + change.previousValue + "'. Current value: '" + change.currentValue + "'");
	  }
	
	  _inherits(ExpressionChangedAfterItHasBeenChecked, _Error);
	
	  _createClass(ExpressionChangedAfterItHasBeenChecked, [{
	    key: "toString",
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType(this.message, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return ExpressionChangedAfterItHasBeenChecked;
	})(Error);
	
	exports.ExpressionChangedAfterItHasBeenChecked = ExpressionChangedAfterItHasBeenChecked;
	
	Object.defineProperty(ExpressionChangedAfterItHasBeenChecked, "parameters", { get: function get() {
	    return [[_proto_record.ProtoRecord], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	
	var ChangeDetectionError = (function (_Error2) {
	  function ChangeDetectionError(proto, originalException) {
	    _classCallCheck(this, ChangeDetectionError);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord, originalException, _rtts_assertRtts_assert.assert.type.any);
	    _get(Object.getPrototypeOf(ChangeDetectionError.prototype), "constructor", this).call(this);
	    this.originalException = originalException;
	    this.location = proto.expressionAsString;
	    this.message = "" + this.originalException + " in [" + this.location + "]";
	  }
	
	  _inherits(ChangeDetectionError, _Error2);
	
	  _createClass(ChangeDetectionError, [{
	    key: "toString",
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType(this.message, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return ChangeDetectionError;
	})(Error);
	
	exports.ChangeDetectionError = ChangeDetectionError;
	
	Object.defineProperty(ChangeDetectionError, "parameters", { get: function get() {
	    return [[_proto_record.ProtoRecord], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	//# sourceMappingURL=exceptions.js.map

	//# sourceMappingURL=./exceptions.map

/***/ },
/* 125 */
/*!******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/proto_record.es6 ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _binding_record = __webpack_require__(/*! ./binding_record */ 117);
	
	var _directive_record = __webpack_require__(/*! ./directive_record */ 119);
	
	var RECORD_TYPE_SELF = 0;
	exports.RECORD_TYPE_SELF = RECORD_TYPE_SELF;
	var RECORD_TYPE_CONST = 1;
	exports.RECORD_TYPE_CONST = RECORD_TYPE_CONST;
	var RECORD_TYPE_PRIMITIVE_OP = 2;
	exports.RECORD_TYPE_PRIMITIVE_OP = RECORD_TYPE_PRIMITIVE_OP;
	var RECORD_TYPE_PROPERTY = 3;
	exports.RECORD_TYPE_PROPERTY = RECORD_TYPE_PROPERTY;
	var RECORD_TYPE_LOCAL = 4;
	exports.RECORD_TYPE_LOCAL = RECORD_TYPE_LOCAL;
	var RECORD_TYPE_INVOKE_METHOD = 5;
	exports.RECORD_TYPE_INVOKE_METHOD = RECORD_TYPE_INVOKE_METHOD;
	var RECORD_TYPE_INVOKE_CLOSURE = 6;
	exports.RECORD_TYPE_INVOKE_CLOSURE = RECORD_TYPE_INVOKE_CLOSURE;
	var RECORD_TYPE_KEYED_ACCESS = 7;
	exports.RECORD_TYPE_KEYED_ACCESS = RECORD_TYPE_KEYED_ACCESS;
	var RECORD_TYPE_PIPE = 8;
	exports.RECORD_TYPE_PIPE = RECORD_TYPE_PIPE;
	var RECORD_TYPE_BINDING_PIPE = 9;
	exports.RECORD_TYPE_BINDING_PIPE = RECORD_TYPE_BINDING_PIPE;
	var RECORD_TYPE_INTERPOLATE = 10;
	exports.RECORD_TYPE_INTERPOLATE = RECORD_TYPE_INTERPOLATE;
	
	var ProtoRecord = (function () {
	  function ProtoRecord(mode, name, funcOrValue, args, fixedArgs, contextIndex, directiveIndex, selfIndex, bindingRecord, expressionAsString, lastInBinding, lastInDirective) {
	    _classCallCheck(this, ProtoRecord);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(mode, _rtts_assertRtts_assert.assert.type.number, name, _rtts_assertRtts_assert.assert.type.string, funcOrValue, _rtts_assertRtts_assert.assert.type.any, args, _angular2SrcFacadeCollection.List, fixedArgs, _angular2SrcFacadeCollection.List, contextIndex, _rtts_assertRtts_assert.assert.type.number, directiveIndex, _directive_record.DirectiveIndex, selfIndex, _rtts_assertRtts_assert.assert.type.number, bindingRecord, _binding_record.BindingRecord, expressionAsString, _rtts_assertRtts_assert.assert.type.string, lastInBinding, _rtts_assertRtts_assert.assert.type.boolean, lastInDirective, _rtts_assertRtts_assert.assert.type.boolean);
	    this.mode = mode;
	    this.name = name;
	    this.funcOrValue = funcOrValue;
	    this.args = args;
	    this.fixedArgs = fixedArgs;
	    this.contextIndex = contextIndex;
	    this.directiveIndex = directiveIndex;
	    this.selfIndex = selfIndex;
	    this.bindingRecord = bindingRecord;
	    this.lastInBinding = lastInBinding;
	    this.lastInDirective = lastInDirective;
	    this.expressionAsString = expressionAsString;
	  }
	
	  _createClass(ProtoRecord, [{
	    key: 'isPureFunction',
	    value: function isPureFunction() {
	      return _rtts_assertRtts_assert.assert.returnType(this.mode === RECORD_TYPE_INTERPOLATE || this.mode === RECORD_TYPE_PRIMITIVE_OP, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return ProtoRecord;
	})();
	
	exports.ProtoRecord = ProtoRecord;
	
	Object.defineProperty(ProtoRecord, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List], [_rtts_assertRtts_assert.assert.type.number], [_directive_record.DirectiveIndex], [_rtts_assertRtts_assert.assert.type.number], [_binding_record.BindingRecord], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	//# sourceMappingURL=proto_record.js.map

	//# sourceMappingURL=./proto_record.map

/***/ },
/* 126 */
/*!****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/interfaces.es6 ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _parserLocals = __webpack_require__(/*! ./parser/locals */ 123);
	
	var _constants = __webpack_require__(/*! ./constants */ 120);
	
	var _binding_record = __webpack_require__(/*! ./binding_record */ 117);
	
	var ProtoChangeDetector = (function () {
	  function ProtoChangeDetector() {
	    _classCallCheck(this, ProtoChangeDetector);
	  }
	
	  _createClass(ProtoChangeDetector, [{
	    key: 'instantiate',
	    value: function instantiate(dispatcher, bindingRecords, variableBindings, directiveRecords) {
	      _rtts_assertRtts_assert.assert.argumentTypes(dispatcher, _rtts_assertRtts_assert.assert.type.any, bindingRecords, _angular2SrcFacadeCollection.List, variableBindings, _angular2SrcFacadeCollection.List, directiveRecords, _angular2SrcFacadeCollection.List);
	      return _rtts_assertRtts_assert.assert.returnType(null, ChangeDetector);
	    }
	  }]);
	
	  return ProtoChangeDetector;
	})();
	
	exports.ProtoChangeDetector = ProtoChangeDetector;
	
	Object.defineProperty(ProtoChangeDetector.prototype.instantiate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List]];
	  } });
	
	var ChangeDetection = (function () {
	  function ChangeDetection() {
	    _classCallCheck(this, ChangeDetection);
	  }
	
	  _createClass(ChangeDetection, [{
	    key: 'createProtoChangeDetector',
	    value: function createProtoChangeDetector(name) {
	      var changeControlStrategy = arguments[1] === undefined ? _constants.DEFAULT : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, changeControlStrategy, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(null, ProtoChangeDetector);
	    }
	  }]);
	
	  return ChangeDetection;
	})();
	
	exports.ChangeDetection = ChangeDetection;
	
	Object.defineProperty(ChangeDetection.prototype.createProtoChangeDetector, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var ChangeDispatcher = (function () {
	  function ChangeDispatcher() {
	    _classCallCheck(this, ChangeDispatcher);
	  }
	
	  _createClass(ChangeDispatcher, [{
	    key: 'notifyOnBinding',
	    value: function notifyOnBinding(bindingRecord, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(bindingRecord, _binding_record.BindingRecord, value, _rtts_assertRtts_assert.assert.type.any);
	    }
	  }]);
	
	  return ChangeDispatcher;
	})();
	
	exports.ChangeDispatcher = ChangeDispatcher;
	
	Object.defineProperty(ChangeDispatcher.prototype.notifyOnBinding, 'parameters', { get: function get() {
	    return [[_binding_record.BindingRecord], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	
	var ChangeDetector = (function () {
	  function ChangeDetector() {
	    _classCallCheck(this, ChangeDetector);
	  }
	
	  _createClass(ChangeDetector, [{
	    key: 'addChild',
	    value: function addChild(cd) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cd, ChangeDetector);
	    }
	  }, {
	    key: 'addShadowDomChild',
	    value: function addShadowDomChild(cd) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cd, ChangeDetector);
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild(cd) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cd, ChangeDetector);
	    }
	  }, {
	    key: 'removeShadowDomChild',
	    value: function removeShadowDomChild(cd) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cd, ChangeDetector);
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {}
	  }, {
	    key: 'hydrate',
	    value: function hydrate(context, locals, directives) {
	      _rtts_assertRtts_assert.assert.argumentTypes(context, _rtts_assertRtts_assert.assert.type.any, locals, _parserLocals.Locals, directives, _rtts_assertRtts_assert.assert.type.any);
	    }
	  }, {
	    key: 'dehydrate',
	    value: function dehydrate() {}
	  }, {
	    key: 'markPathToRootAsCheckOnce',
	    value: function markPathToRootAsCheckOnce() {}
	  }, {
	    key: 'detectChanges',
	    value: function detectChanges() {}
	  }, {
	    key: 'checkNoChanges',
	    value: function checkNoChanges() {}
	  }]);
	
	  return ChangeDetector;
	})();
	
	exports.ChangeDetector = ChangeDetector;
	
	Object.defineProperty(ChangeDetector.prototype.addChild, 'parameters', { get: function get() {
	    return [[ChangeDetector]];
	  } });
	Object.defineProperty(ChangeDetector.prototype.addShadowDomChild, 'parameters', { get: function get() {
	    return [[ChangeDetector]];
	  } });
	Object.defineProperty(ChangeDetector.prototype.removeChild, 'parameters', { get: function get() {
	    return [[ChangeDetector]];
	  } });
	Object.defineProperty(ChangeDetector.prototype.removeShadowDomChild, 'parameters', { get: function get() {
	    return [[ChangeDetector]];
	  } });
	Object.defineProperty(ChangeDetector.prototype.hydrate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any], [_parserLocals.Locals], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	//# sourceMappingURL=interfaces.js.map

	//# sourceMappingURL=./interfaces.map

/***/ },
/* 127 */
/*!***************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/proto_change_detector.es6 ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _parserAst = __webpack_require__(/*! ./parser/ast */ 118);
	
	var _interfaces = __webpack_require__(/*! ./interfaces */ 126);
	
	var _change_detection_util = __webpack_require__(/*! ./change_detection_util */ 128);
	
	var _dynamic_change_detector = __webpack_require__(/*! ./dynamic_change_detector */ 130);
	
	var _change_detection_jit_generator = __webpack_require__(/*! ./change_detection_jit_generator */ 134);
	
	var _pipesPipe_registry = __webpack_require__(/*! ./pipes/pipe_registry */ 133);
	
	var _binding_record = __webpack_require__(/*! ./binding_record */ 117);
	
	var _directive_record = __webpack_require__(/*! ./directive_record */ 119);
	
	var _coalesce = __webpack_require__(/*! ./coalesce */ 135);
	
	var _proto_record = __webpack_require__(/*! ./proto_record */ 125);
	
	var DynamicProtoChangeDetector = (function (_ProtoChangeDetector) {
	  function DynamicProtoChangeDetector(pipeRegistry, changeControlStrategy) {
	    _classCallCheck(this, DynamicProtoChangeDetector);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(pipeRegistry, _pipesPipe_registry.PipeRegistry, changeControlStrategy, _rtts_assertRtts_assert.assert.type.string);
	    _get(Object.getPrototypeOf(DynamicProtoChangeDetector.prototype), 'constructor', this).call(this);
	    this._pipeRegistry = pipeRegistry;
	    this._changeControlStrategy = changeControlStrategy;
	  }
	
	  _inherits(DynamicProtoChangeDetector, _ProtoChangeDetector);
	
	  _createClass(DynamicProtoChangeDetector, [{
	    key: 'instantiate',
	    value: function instantiate(dispatcher, bindingRecords, variableBindings, directiveRecords) {
	      _rtts_assertRtts_assert.assert.argumentTypes(dispatcher, _rtts_assertRtts_assert.assert.type.any, bindingRecords, _angular2SrcFacadeCollection.List, variableBindings, _angular2SrcFacadeCollection.List, directiveRecords, _angular2SrcFacadeCollection.List);
	      this._createRecordsIfNecessary(bindingRecords, variableBindings);
	      return new _dynamic_change_detector.DynamicChangeDetector(this._changeControlStrategy, dispatcher, this._pipeRegistry, this._records, directiveRecords);
	    }
	  }, {
	    key: '_createRecordsIfNecessary',
	    value: function _createRecordsIfNecessary(bindingRecords, variableBindings) {
	      _rtts_assertRtts_assert.assert.argumentTypes(bindingRecords, _angular2SrcFacadeCollection.List, variableBindings, _angular2SrcFacadeCollection.List);
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._records)) {
	        var recordBuilder = new ProtoRecordBuilder();
	        _angular2SrcFacadeCollection.ListWrapper.forEach(bindingRecords, function (b) {
	          recordBuilder.addAst(b, variableBindings);
	        });
	        this._records = (0, _coalesce.coalesce)(recordBuilder.records);
	      }
	    }
	  }]);
	
	  return DynamicProtoChangeDetector;
	})(_interfaces.ProtoChangeDetector);
	
	exports.DynamicProtoChangeDetector = DynamicProtoChangeDetector;
	
	Object.defineProperty(DynamicProtoChangeDetector, 'parameters', { get: function get() {
	    return [[_pipesPipe_registry.PipeRegistry], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DynamicProtoChangeDetector.prototype.instantiate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(DynamicProtoChangeDetector.prototype._createRecordsIfNecessary, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List]];
	  } });
	var _jitProtoChangeDetectorClassCounter = _rtts_assertRtts_assert.assert.type(0, _rtts_assertRtts_assert.assert.type.number);
	
	var JitProtoChangeDetector = (function (_ProtoChangeDetector2) {
	  function JitProtoChangeDetector(pipeRegistry, changeControlStrategy) {
	    _classCallCheck(this, JitProtoChangeDetector);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(pipeRegistry, _rtts_assertRtts_assert.assert.type.any, changeControlStrategy, _rtts_assertRtts_assert.assert.type.string);
	    _get(Object.getPrototypeOf(JitProtoChangeDetector.prototype), 'constructor', this).call(this);
	    this._pipeRegistry = pipeRegistry;
	    this._factory = null;
	    this._changeControlStrategy = changeControlStrategy;
	  }
	
	  _inherits(JitProtoChangeDetector, _ProtoChangeDetector2);
	
	  _createClass(JitProtoChangeDetector, [{
	    key: 'instantiate',
	    value: function instantiate(dispatcher, bindingRecords, variableBindings, directiveRecords) {
	      _rtts_assertRtts_assert.assert.argumentTypes(dispatcher, _rtts_assertRtts_assert.assert.type.any, bindingRecords, _angular2SrcFacadeCollection.List, variableBindings, _angular2SrcFacadeCollection.List, directiveRecords, _angular2SrcFacadeCollection.List);
	      this._createFactoryIfNecessary(bindingRecords, variableBindings, directiveRecords);
	      return this._factory(dispatcher, this._pipeRegistry);
	    }
	  }, {
	    key: '_createFactoryIfNecessary',
	    value: function _createFactoryIfNecessary(bindingRecords, variableBindings, directiveRecords) {
	      _rtts_assertRtts_assert.assert.argumentTypes(bindingRecords, _angular2SrcFacadeCollection.List, variableBindings, _angular2SrcFacadeCollection.List, directiveRecords, _angular2SrcFacadeCollection.List);
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._factory)) {
	        var recordBuilder = new ProtoRecordBuilder();
	        _angular2SrcFacadeCollection.ListWrapper.forEach(bindingRecords, function (b) {
	          recordBuilder.addAst(b, variableBindings);
	        });
	        var c = _jitProtoChangeDetectorClassCounter++;
	        var records = (0, _coalesce.coalesce)(recordBuilder.records);
	        var typeName = 'ChangeDetector' + c;
	        this._factory = new _change_detection_jit_generator.ChangeDetectorJITGenerator(typeName, this._changeControlStrategy, records, directiveRecords).generate();
	      }
	    }
	  }]);
	
	  return JitProtoChangeDetector;
	})(_interfaces.ProtoChangeDetector);
	
	exports.JitProtoChangeDetector = JitProtoChangeDetector;
	
	Object.defineProperty(JitProtoChangeDetector, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(JitProtoChangeDetector.prototype.instantiate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(JitProtoChangeDetector.prototype._createFactoryIfNecessary, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List]];
	  } });
	
	var ProtoRecordBuilder = (function () {
	  function ProtoRecordBuilder() {
	    _classCallCheck(this, ProtoRecordBuilder);
	
	    this.records = [];
	  }
	
	  _createClass(ProtoRecordBuilder, [{
	    key: 'addAst',
	    value: function addAst(b) {
	      var variableBindings = arguments[1] === undefined ? null : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(b, _binding_record.BindingRecord, variableBindings, _angular2SrcFacadeCollection.List);
	      var last = _angular2SrcFacadeCollection.ListWrapper.last(this.records);
	      if ((0, _angular2SrcFacadeLang.isPresent)(last) && last.bindingRecord.directiveRecord == b.directiveRecord) {
	        last.lastInDirective = false;
	      }
	      var pr = _ConvertAstIntoProtoRecords.convert(b, this.records.length, variableBindings);
	      if (!_angular2SrcFacadeCollection.ListWrapper.isEmpty(pr)) {
	        var last = _angular2SrcFacadeCollection.ListWrapper.last(pr);
	        last.lastInBinding = true;
	        last.lastInDirective = true;
	        this.records = _angular2SrcFacadeCollection.ListWrapper.concat(this.records, pr);
	      }
	    }
	  }]);
	
	  return ProtoRecordBuilder;
	})();
	
	Object.defineProperty(ProtoRecordBuilder.prototype.addAst, 'parameters', { get: function get() {
	    return [[_binding_record.BindingRecord], [_angular2SrcFacadeCollection.List]];
	  } });
	
	var _ConvertAstIntoProtoRecords = (function () {
	  function _ConvertAstIntoProtoRecords(bindingRecord, contextIndex, expressionAsString, variableBindings) {
	    _classCallCheck(this, _ConvertAstIntoProtoRecords);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(bindingRecord, _binding_record.BindingRecord, contextIndex, _rtts_assertRtts_assert.assert.type.number, expressionAsString, _rtts_assertRtts_assert.assert.type.string, variableBindings, _angular2SrcFacadeCollection.List);
	    this.protoRecords = [];
	    this.bindingRecord = bindingRecord;
	    this.contextIndex = contextIndex;
	    this.expressionAsString = expressionAsString;
	    this.variableBindings = variableBindings;
	  }
	
	  _createClass(_ConvertAstIntoProtoRecords, [{
	    key: 'visitImplicitReceiver',
	    value: function visitImplicitReceiver(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.ImplicitReceiver);
	      return this.bindingRecord.implicitReceiver;
	    }
	  }, {
	    key: 'visitInterpolation',
	    value: function visitInterpolation(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.Interpolation);
	      var args = this._visitAll(ast.expressions);
	      return this._addRecord(_proto_record.RECORD_TYPE_INTERPOLATE, 'interpolate', _interpolationFn(ast.strings), args, ast.strings, 0);
	    }
	  }, {
	    key: 'visitLiteralPrimitive',
	    value: function visitLiteralPrimitive(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.LiteralPrimitive);
	      return this._addRecord(_proto_record.RECORD_TYPE_CONST, 'literal', ast.value, [], null, 0);
	    }
	  }, {
	    key: 'visitAccessMember',
	    value: function visitAccessMember(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.AccessMember);
	      var receiver = ast.receiver.visit(this);
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.variableBindings) && _angular2SrcFacadeCollection.ListWrapper.contains(this.variableBindings, ast.name)) {
	        return this._addRecord(_proto_record.RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);
	      } else {
	        return this._addRecord(_proto_record.RECORD_TYPE_PROPERTY, ast.name, ast.getter, [], null, receiver);
	      }
	    }
	  }, {
	    key: 'visitMethodCall',
	    value: function visitMethodCall(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.MethodCall);
	      ;
	      var receiver = ast.receiver.visit(this);
	      var args = this._visitAll(ast.args);
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.variableBindings) && _angular2SrcFacadeCollection.ListWrapper.contains(this.variableBindings, ast.name)) {
	        var target = this._addRecord(_proto_record.RECORD_TYPE_LOCAL, ast.name, ast.name, [], null, receiver);
	        return this._addRecord(_proto_record.RECORD_TYPE_INVOKE_CLOSURE, 'closure', null, args, null, target);
	      } else {
	        return this._addRecord(_proto_record.RECORD_TYPE_INVOKE_METHOD, ast.name, ast.fn, args, null, receiver);
	      }
	    }
	  }, {
	    key: 'visitFunctionCall',
	    value: function visitFunctionCall(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.FunctionCall);
	      var target = ast.target.visit(this);
	      var args = this._visitAll(ast.args);
	      return this._addRecord(_proto_record.RECORD_TYPE_INVOKE_CLOSURE, 'closure', null, args, null, target);
	    }
	  }, {
	    key: 'visitLiteralArray',
	    value: function visitLiteralArray(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.LiteralArray);
	      var primitiveName = 'arrayFn' + ast.expressions.length;
	      return this._addRecord(_proto_record.RECORD_TYPE_PRIMITIVE_OP, primitiveName, _arrayFn(ast.expressions.length), this._visitAll(ast.expressions), null, 0);
	    }
	  }, {
	    key: 'visitLiteralMap',
	    value: function visitLiteralMap(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.LiteralMap);
	      return this._addRecord(_proto_record.RECORD_TYPE_PRIMITIVE_OP, _mapPrimitiveName(ast.keys), _change_detection_util.ChangeDetectionUtil.mapFn(ast.keys), this._visitAll(ast.values), null, 0);
	    }
	  }, {
	    key: 'visitBinary',
	    value: function visitBinary(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.Binary);
	      var left = ast.left.visit(this);
	      var right = ast.right.visit(this);
	      return this._addRecord(_proto_record.RECORD_TYPE_PRIMITIVE_OP, _operationToPrimitiveName(ast.operation), _operationToFunction(ast.operation), [left, right], null, 0);
	    }
	  }, {
	    key: 'visitPrefixNot',
	    value: function visitPrefixNot(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.PrefixNot);
	      var exp = ast.expression.visit(this);
	      return this._addRecord(_proto_record.RECORD_TYPE_PRIMITIVE_OP, 'operation_negate', _change_detection_util.ChangeDetectionUtil.operation_negate, [exp], null, 0);
	    }
	  }, {
	    key: 'visitConditional',
	    value: function visitConditional(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.Conditional);
	      var c = ast.condition.visit(this);
	      var t = ast.trueExp.visit(this);
	      var f = ast.falseExp.visit(this);
	      return this._addRecord(_proto_record.RECORD_TYPE_PRIMITIVE_OP, 'cond', _change_detection_util.ChangeDetectionUtil.cond, [c, t, f], null, 0);
	    }
	  }, {
	    key: 'visitPipe',
	    value: function visitPipe(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.Pipe);
	      var value = ast.exp.visit(this);
	      var type = ast.inBinding ? _proto_record.RECORD_TYPE_BINDING_PIPE : _proto_record.RECORD_TYPE_PIPE;
	      return this._addRecord(type, ast.name, ast.name, [], null, value);
	    }
	  }, {
	    key: 'visitKeyedAccess',
	    value: function visitKeyedAccess(ast) {
	      _rtts_assertRtts_assert.assert.argumentTypes(ast, _parserAst.KeyedAccess);
	      var obj = ast.obj.visit(this);
	      var key = ast.key.visit(this);
	      return this._addRecord(_proto_record.RECORD_TYPE_KEYED_ACCESS, 'keyedAccess', _change_detection_util.ChangeDetectionUtil.keyedAccess, [key], null, obj);
	    }
	  }, {
	    key: '_visitAll',
	    value: function _visitAll(asts) {
	      _rtts_assertRtts_assert.assert.argumentTypes(asts, _angular2SrcFacadeCollection.List);
	      var res = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(asts.length);
	      for (var i = 0; i < asts.length; ++i) {
	        res[i] = asts[i].visit(this);
	      }
	      return res;
	    }
	  }, {
	    key: '_addRecord',
	    value: function _addRecord(type, name, funcOrValue, args, fixedArgs, context) {
	      var selfIndex = ++this.contextIndex;
	      if (context instanceof _directive_record.DirectiveIndex) {
	        _angular2SrcFacadeCollection.ListWrapper.push(this.protoRecords, new _proto_record.ProtoRecord(type, name, funcOrValue, args, fixedArgs, -1, context, selfIndex, this.bindingRecord, this.expressionAsString, false, false));
	      } else {
	        _angular2SrcFacadeCollection.ListWrapper.push(this.protoRecords, new _proto_record.ProtoRecord(type, name, funcOrValue, args, fixedArgs, context, null, selfIndex, this.bindingRecord, this.expressionAsString, false, false));
	      }
	      return selfIndex;
	    }
	  }], [{
	    key: 'convert',
	    value: function convert(b, contextIndex, variableBindings) {
	      _rtts_assertRtts_assert.assert.argumentTypes(b, _binding_record.BindingRecord, contextIndex, _rtts_assertRtts_assert.assert.type.number, variableBindings, _angular2SrcFacadeCollection.List);
	      var c = new _ConvertAstIntoProtoRecords(b, contextIndex, b.ast.toString(), variableBindings);
	      b.ast.visit(c);
	      return c.protoRecords;
	    }
	  }]);
	
	  return _ConvertAstIntoProtoRecords;
	})();
	
	Object.defineProperty(_ConvertAstIntoProtoRecords, 'parameters', { get: function get() {
	    return [[_binding_record.BindingRecord], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.convert, 'parameters', { get: function get() {
	    return [[_binding_record.BindingRecord], [_rtts_assertRtts_assert.assert.type.number], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitImplicitReceiver, 'parameters', { get: function get() {
	    return [[_parserAst.ImplicitReceiver]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitInterpolation, 'parameters', { get: function get() {
	    return [[_parserAst.Interpolation]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitLiteralPrimitive, 'parameters', { get: function get() {
	    return [[_parserAst.LiteralPrimitive]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitAccessMember, 'parameters', { get: function get() {
	    return [[_parserAst.AccessMember]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitMethodCall, 'parameters', { get: function get() {
	    return [[_parserAst.MethodCall]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitFunctionCall, 'parameters', { get: function get() {
	    return [[_parserAst.FunctionCall]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitLiteralArray, 'parameters', { get: function get() {
	    return [[_parserAst.LiteralArray]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitLiteralMap, 'parameters', { get: function get() {
	    return [[_parserAst.LiteralMap]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitBinary, 'parameters', { get: function get() {
	    return [[_parserAst.Binary]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitPrefixNot, 'parameters', { get: function get() {
	    return [[_parserAst.PrefixNot]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitConditional, 'parameters', { get: function get() {
	    return [[_parserAst.Conditional]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitPipe, 'parameters', { get: function get() {
	    return [[_parserAst.Pipe]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype.visitKeyedAccess, 'parameters', { get: function get() {
	    return [[_parserAst.KeyedAccess]];
	  } });
	Object.defineProperty(_ConvertAstIntoProtoRecords.prototype._visitAll, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	function _arrayFn(length) {
	  _rtts_assertRtts_assert.assert.argumentTypes(length, _rtts_assertRtts_assert.assert.type.number);
	  switch (length) {
	    case 0:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn0, Function);
	    case 1:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn1, Function);
	    case 2:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn2, Function);
	    case 3:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn3, Function);
	    case 4:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn4, Function);
	    case 5:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn5, Function);
	    case 6:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn6, Function);
	    case 7:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn7, Function);
	    case 8:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn8, Function);
	    case 9:
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.arrayFn9, Function);
	    default:
	      throw new _angular2SrcFacadeLang.BaseException('Does not support literal maps with more than 9 elements');
	  }
	}
	Object.defineProperty(_arrayFn, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	function _mapPrimitiveName(keys) {
	  var stringifiedKeys = _angular2SrcFacadeCollection.ListWrapper.join(_angular2SrcFacadeCollection.ListWrapper.map(keys, function (k) {
	    return (0, _angular2SrcFacadeLang.isString)(k) ? '"' + k + '"' : '' + k;
	  }), ', ');
	  return 'mapFn([' + stringifiedKeys + '])';
	}
	Object.defineProperty(_mapPrimitiveName, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	function _operationToPrimitiveName(operation) {
	  _rtts_assertRtts_assert.assert.argumentTypes(operation, _rtts_assertRtts_assert.assert.type.string);
	  switch (operation) {
	    case '+':
	      return _rtts_assertRtts_assert.assert.returnType('operation_add', _rtts_assertRtts_assert.assert.type.string);
	    case '-':
	      return _rtts_assertRtts_assert.assert.returnType('operation_subtract', _rtts_assertRtts_assert.assert.type.string);
	    case '*':
	      return _rtts_assertRtts_assert.assert.returnType('operation_multiply', _rtts_assertRtts_assert.assert.type.string);
	    case '/':
	      return _rtts_assertRtts_assert.assert.returnType('operation_divide', _rtts_assertRtts_assert.assert.type.string);
	    case '%':
	      return _rtts_assertRtts_assert.assert.returnType('operation_remainder', _rtts_assertRtts_assert.assert.type.string);
	    case '==':
	      return _rtts_assertRtts_assert.assert.returnType('operation_equals', _rtts_assertRtts_assert.assert.type.string);
	    case '!=':
	      return _rtts_assertRtts_assert.assert.returnType('operation_not_equals', _rtts_assertRtts_assert.assert.type.string);
	    case '<':
	      return _rtts_assertRtts_assert.assert.returnType('operation_less_then', _rtts_assertRtts_assert.assert.type.string);
	    case '>':
	      return _rtts_assertRtts_assert.assert.returnType('operation_greater_then', _rtts_assertRtts_assert.assert.type.string);
	    case '<=':
	      return _rtts_assertRtts_assert.assert.returnType('operation_less_or_equals_then', _rtts_assertRtts_assert.assert.type.string);
	    case '>=':
	      return _rtts_assertRtts_assert.assert.returnType('operation_greater_or_equals_then', _rtts_assertRtts_assert.assert.type.string);
	    case '&&':
	      return _rtts_assertRtts_assert.assert.returnType('operation_logical_and', _rtts_assertRtts_assert.assert.type.string);
	    case '||':
	      return _rtts_assertRtts_assert.assert.returnType('operation_logical_or', _rtts_assertRtts_assert.assert.type.string);
	    default:
	      throw new _angular2SrcFacadeLang.BaseException('Unsupported operation ' + operation);
	  }
	}
	Object.defineProperty(_operationToPrimitiveName, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function _operationToFunction(operation) {
	  _rtts_assertRtts_assert.assert.argumentTypes(operation, _rtts_assertRtts_assert.assert.type.string);
	  switch (operation) {
	    case '+':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_add, Function);
	    case '-':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_subtract, Function);
	    case '*':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_multiply, Function);
	    case '/':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_divide, Function);
	    case '%':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_remainder, Function);
	    case '==':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_equals, Function);
	    case '!=':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_not_equals, Function);
	    case '<':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_less_then, Function);
	    case '>':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_greater_then, Function);
	    case '<=':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_less_or_equals_then, Function);
	    case '>=':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_greater_or_equals_then, Function);
	    case '&&':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_logical_and, Function);
	    case '||':
	      return _rtts_assertRtts_assert.assert.returnType(_change_detection_util.ChangeDetectionUtil.operation_logical_or, Function);
	    default:
	      throw new _angular2SrcFacadeLang.BaseException('Unsupported operation ' + operation);
	  }
	}
	Object.defineProperty(_operationToFunction, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function s(v) {
	  return (0, _angular2SrcFacadeLang.isPresent)(v) ? '' + v : '';
	}
	function _interpolationFn(strings) {
	  var length = strings.length;
	  var c0 = length > 0 ? strings[0] : null;
	  var c1 = length > 1 ? strings[1] : null;
	  var c2 = length > 2 ? strings[2] : null;
	  var c3 = length > 3 ? strings[3] : null;
	  var c4 = length > 4 ? strings[4] : null;
	  var c5 = length > 5 ? strings[5] : null;
	  var c6 = length > 6 ? strings[6] : null;
	  var c7 = length > 7 ? strings[7] : null;
	  var c8 = length > 8 ? strings[8] : null;
	  var c9 = length > 9 ? strings[9] : null;
	  switch (length - 1) {
	    case 1:
	      return function (a1) {
	        return c0 + s(a1) + c1;
	      };
	    case 2:
	      return function (a1, a2) {
	        return c0 + s(a1) + c1 + s(a2) + c2;
	      };
	    case 3:
	      return function (a1, a2, a3) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3;
	      };
	    case 4:
	      return function (a1, a2, a3, a4) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4;
	      };
	    case 5:
	      return function (a1, a2, a3, a4, a5) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5;
	      };
	    case 6:
	      return function (a1, a2, a3, a4, a5, a6) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6;
	      };
	    case 7:
	      return function (a1, a2, a3, a4, a5, a6, a7) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7;
	      };
	    case 8:
	      return function (a1, a2, a3, a4, a5, a6, a7, a8) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8;
	      };
	    case 9:
	      return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	        return c0 + s(a1) + c1 + s(a2) + c2 + s(a3) + c3 + s(a4) + c4 + s(a5) + c5 + s(a6) + c6 + s(a7) + c7 + s(a8) + c8 + s(a9) + c9;
	      };
	    default:
	      throw new _angular2SrcFacadeLang.BaseException('Does not support more than 9 expressions');
	  }
	}
	Object.defineProperty(_interpolationFn, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	//# sourceMappingURL=proto_change_detector.js.map

	//# sourceMappingURL=./proto_change_detector.map

/***/ },
/* 128 */
/*!***************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/change_detection_util.es6 ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _proto_record = __webpack_require__(/*! ./proto_record */ 125);
	
	var _exceptions = __webpack_require__(/*! ./exceptions */ 124);
	
	var _pipesPipe = __webpack_require__(/*! ./pipes/pipe */ 129);
	
	var _constants = __webpack_require__(/*! ./constants */ 120);
	
	var uninitialized = new Object();
	exports.uninitialized = uninitialized;
	
	var SimpleChange = function SimpleChange(previousValue, currentValue) {
	  _classCallCheck(this, SimpleChange);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(previousValue, _rtts_assertRtts_assert.assert.type.any, currentValue, _rtts_assertRtts_assert.assert.type.any);
	  this.previousValue = previousValue;
	  this.currentValue = currentValue;
	};
	
	exports.SimpleChange = SimpleChange;
	
	Object.defineProperty(SimpleChange, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	var _simpleChangesIndex = 0;
	var _simpleChanges = [new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null), new SimpleChange(null, null)];
	function _simpleChange(previousValue, currentValue) {
	  var index = _simpleChangesIndex++ % 20;
	  var s = _simpleChanges[index];
	  s.previousValue = previousValue;
	  s.currentValue = currentValue;
	  return s;
	}
	
	var ChangeDetectionUtil = (function () {
	  function ChangeDetectionUtil() {
	    _classCallCheck(this, ChangeDetectionUtil);
	  }
	
	  _createClass(ChangeDetectionUtil, null, [{
	    key: 'unitialized',
	    value: function unitialized() {
	      return uninitialized;
	    }
	  }, {
	    key: 'arrayFn0',
	    value: function arrayFn0() {
	      return [];
	    }
	  }, {
	    key: 'arrayFn1',
	    value: function arrayFn1(a1) {
	      return [a1];
	    }
	  }, {
	    key: 'arrayFn2',
	    value: function arrayFn2(a1, a2) {
	      return [a1, a2];
	    }
	  }, {
	    key: 'arrayFn3',
	    value: function arrayFn3(a1, a2, a3) {
	      return [a1, a2, a3];
	    }
	  }, {
	    key: 'arrayFn4',
	    value: function arrayFn4(a1, a2, a3, a4) {
	      return [a1, a2, a3, a4];
	    }
	  }, {
	    key: 'arrayFn5',
	    value: function arrayFn5(a1, a2, a3, a4, a5) {
	      return [a1, a2, a3, a4, a5];
	    }
	  }, {
	    key: 'arrayFn6',
	    value: function arrayFn6(a1, a2, a3, a4, a5, a6) {
	      return [a1, a2, a3, a4, a5, a6];
	    }
	  }, {
	    key: 'arrayFn7',
	    value: function arrayFn7(a1, a2, a3, a4, a5, a6, a7) {
	      return [a1, a2, a3, a4, a5, a6, a7];
	    }
	  }, {
	    key: 'arrayFn8',
	    value: function arrayFn8(a1, a2, a3, a4, a5, a6, a7, a8) {
	      return [a1, a2, a3, a4, a5, a6, a7, a8];
	    }
	  }, {
	    key: 'arrayFn9',
	    value: function arrayFn9(a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	      return [a1, a2, a3, a4, a5, a6, a7, a8, a9];
	    }
	  }, {
	    key: 'operation_negate',
	    value: function operation_negate(value) {
	      return !value;
	    }
	  }, {
	    key: 'operation_add',
	    value: function operation_add(left, right) {
	      return left + right;
	    }
	  }, {
	    key: 'operation_subtract',
	    value: function operation_subtract(left, right) {
	      return left - right;
	    }
	  }, {
	    key: 'operation_multiply',
	    value: function operation_multiply(left, right) {
	      return left * right;
	    }
	  }, {
	    key: 'operation_divide',
	    value: function operation_divide(left, right) {
	      return left / right;
	    }
	  }, {
	    key: 'operation_remainder',
	    value: function operation_remainder(left, right) {
	      return left % right;
	    }
	  }, {
	    key: 'operation_equals',
	    value: function operation_equals(left, right) {
	      return left == right;
	    }
	  }, {
	    key: 'operation_not_equals',
	    value: function operation_not_equals(left, right) {
	      return left != right;
	    }
	  }, {
	    key: 'operation_less_then',
	    value: function operation_less_then(left, right) {
	      return left < right;
	    }
	  }, {
	    key: 'operation_greater_then',
	    value: function operation_greater_then(left, right) {
	      return left > right;
	    }
	  }, {
	    key: 'operation_less_or_equals_then',
	    value: function operation_less_or_equals_then(left, right) {
	      return left <= right;
	    }
	  }, {
	    key: 'operation_greater_or_equals_then',
	    value: function operation_greater_or_equals_then(left, right) {
	      return left >= right;
	    }
	  }, {
	    key: 'operation_logical_and',
	    value: function operation_logical_and(left, right) {
	      return left && right;
	    }
	  }, {
	    key: 'operation_logical_or',
	    value: function operation_logical_or(left, right) {
	      return left || right;
	    }
	  }, {
	    key: 'cond',
	    value: function cond(_cond, trueVal, falseVal) {
	      return _cond ? trueVal : falseVal;
	    }
	  }, {
	    key: 'mapFn',
	    value: function mapFn(keys) {
	      function buildMap(values) {
	        var res = _angular2SrcFacadeCollection.StringMapWrapper.create();
	        for (var i = 0; i < keys.length; ++i) {
	          _angular2SrcFacadeCollection.StringMapWrapper.set(res, keys[i], values[i]);
	        }
	        return res;
	      }
	      switch (keys.length) {
	        case 0:
	          return function () {
	            return [];
	          };
	        case 1:
	          return function (a1) {
	            return buildMap([a1]);
	          };
	        case 2:
	          return function (a1, a2) {
	            return buildMap([a1, a2]);
	          };
	        case 3:
	          return function (a1, a2, a3) {
	            return buildMap([a1, a2, a3]);
	          };
	        case 4:
	          return function (a1, a2, a3, a4) {
	            return buildMap([a1, a2, a3, a4]);
	          };
	        case 5:
	          return function (a1, a2, a3, a4, a5) {
	            return buildMap([a1, a2, a3, a4, a5]);
	          };
	        case 6:
	          return function (a1, a2, a3, a4, a5, a6) {
	            return buildMap([a1, a2, a3, a4, a5, a6]);
	          };
	        case 7:
	          return function (a1, a2, a3, a4, a5, a6, a7) {
	            return buildMap([a1, a2, a3, a4, a5, a6, a7]);
	          };
	        case 8:
	          return function (a1, a2, a3, a4, a5, a6, a7, a8) {
	            return buildMap([a1, a2, a3, a4, a5, a6, a7, a8]);
	          };
	        case 9:
	          return function (a1, a2, a3, a4, a5, a6, a7, a8, a9) {
	            return buildMap([a1, a2, a3, a4, a5, a6, a7, a8, a9]);
	          };
	        default:
	          throw new _angular2SrcFacadeLang.BaseException('Does not support literal maps with more than 9 elements');
	      }
	    }
	  }, {
	    key: 'keyedAccess',
	    value: function keyedAccess(obj, args) {
	      return obj[args[0]];
	    }
	  }, {
	    key: 'noChangeMarker',
	    value: function noChangeMarker(value) {
	      return _rtts_assertRtts_assert.assert.returnType(value === _pipesPipe.NO_CHANGE, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'throwOnChange',
	    value: function throwOnChange(proto, change) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord, change, _rtts_assertRtts_assert.assert.type.any);
	      throw new _exceptions.ExpressionChangedAfterItHasBeenChecked(proto, change);
	    }
	  }, {
	    key: 'changeDetectionMode',
	    value: function changeDetectionMode(strategy) {
	      _rtts_assertRtts_assert.assert.argumentTypes(strategy, _rtts_assertRtts_assert.assert.type.string);
	      return strategy == _constants.ON_PUSH ? _constants.CHECK_ONCE : _constants.CHECK_ALWAYS;
	    }
	  }, {
	    key: 'simpleChange',
	    value: function simpleChange(previousValue, currentValue) {
	      _rtts_assertRtts_assert.assert.argumentTypes(previousValue, _rtts_assertRtts_assert.assert.type.any, currentValue, _rtts_assertRtts_assert.assert.type.any);
	      return _rtts_assertRtts_assert.assert.returnType(_simpleChange(previousValue, currentValue), SimpleChange);
	    }
	  }, {
	    key: 'addChange',
	    value: function addChange(changes, propertyName, change) {
	      _rtts_assertRtts_assert.assert.argumentTypes(changes, _rtts_assertRtts_assert.assert.type.any, propertyName, _rtts_assertRtts_assert.assert.type.string, change, _rtts_assertRtts_assert.assert.type.any);
	      if ((0, _angular2SrcFacadeLang.isBlank)(changes)) {
	        changes = {};
	      }
	      changes[propertyName] = change;
	      return changes;
	    }
	  }]);
	
	  return ChangeDetectionUtil;
	})();
	
	exports.ChangeDetectionUtil = ChangeDetectionUtil;
	
	Object.defineProperty(ChangeDetectionUtil.mapFn, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(ChangeDetectionUtil.throwOnChange, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord], []];
	  } });
	Object.defineProperty(ChangeDetectionUtil.changeDetectionMode, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ChangeDetectionUtil.simpleChange, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(ChangeDetectionUtil.addChange, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	//# sourceMappingURL=change_detection_util.js.map

	//# sourceMappingURL=./change_detection_util.map

/***/ },
/* 129 */
/*!****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/pipes/pipe.es6 ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var NO_CHANGE = new Object();
	exports.NO_CHANGE = NO_CHANGE;
	
	var Pipe = (function () {
	  function Pipe() {
	    _classCallCheck(this, Pipe);
	  }
	
	  _createClass(Pipe, [{
	    key: "supports",
	    value: function supports(obj) {
	      return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: "onDestroy",
	    value: function onDestroy() {}
	  }, {
	    key: "transform",
	    value: function transform(value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(value, _rtts_assertRtts_assert.assert.type.any);
	      return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.type.any);
	    }
	  }]);
	
	  return Pipe;
	})();
	
	exports.Pipe = Pipe;
	
	Object.defineProperty(Pipe.prototype.transform, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	//# sourceMappingURL=pipe.js.map

	//# sourceMappingURL=./pipe.map

/***/ },
/* 130 */
/*!*****************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/dynamic_change_detector.es6 ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _abstract_change_detector = __webpack_require__(/*! ./abstract_change_detector */ 131);
	
	var _binding_record = __webpack_require__(/*! ./binding_record */ 117);
	
	var _pipesPipe_registry = __webpack_require__(/*! ./pipes/pipe_registry */ 133);
	
	var _change_detection_util = __webpack_require__(/*! ./change_detection_util */ 128);
	
	var _proto_record = __webpack_require__(/*! ./proto_record */ 125);
	
	var _exceptions = __webpack_require__(/*! ./exceptions */ 124);
	
	var DynamicChangeDetector = (function (_AbstractChangeDetector) {
	  function DynamicChangeDetector(changeControlStrategy, dispatcher, pipeRegistry, protoRecords, directiveRecords) {
	    _classCallCheck(this, DynamicChangeDetector);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(changeControlStrategy, _rtts_assertRtts_assert.assert.type.string, dispatcher, _rtts_assertRtts_assert.assert.type.any, pipeRegistry, _pipesPipe_registry.PipeRegistry, protoRecords, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord), directiveRecords, _angular2SrcFacadeCollection.List);
	    _get(Object.getPrototypeOf(DynamicChangeDetector.prototype), 'constructor', this).call(this);
	    this.dispatcher = dispatcher;
	    this.pipeRegistry = pipeRegistry;
	    this.values = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(protoRecords.length + 1);
	    this.pipes = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(protoRecords.length + 1);
	    this.prevContexts = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(protoRecords.length + 1);
	    this.changes = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(protoRecords.length + 1);
	    _angular2SrcFacadeCollection.ListWrapper.fill(this.values, _change_detection_util.uninitialized);
	    _angular2SrcFacadeCollection.ListWrapper.fill(this.pipes, null);
	    _angular2SrcFacadeCollection.ListWrapper.fill(this.prevContexts, _change_detection_util.uninitialized);
	    _angular2SrcFacadeCollection.ListWrapper.fill(this.changes, false);
	    this.locals = null;
	    this.directives = null;
	    this.protos = protoRecords;
	    this.directiveRecords = directiveRecords;
	    this.changeControlStrategy = changeControlStrategy;
	  }
	
	  _inherits(DynamicChangeDetector, _AbstractChangeDetector);
	
	  _createClass(DynamicChangeDetector, [{
	    key: 'hydrate',
	    value: function hydrate(context, locals, directives) {
	      _rtts_assertRtts_assert.assert.argumentTypes(context, _rtts_assertRtts_assert.assert.type.any, locals, _rtts_assertRtts_assert.assert.type.any, directives, _rtts_assertRtts_assert.assert.type.any);
	      this.mode = _change_detection_util.ChangeDetectionUtil.changeDetectionMode(this.changeControlStrategy);
	      this.values[0] = context;
	      this.locals = locals;
	      this.directives = directives;
	    }
	  }, {
	    key: 'dehydrate',
	    value: function dehydrate() {
	      this._destroyPipes();
	      _angular2SrcFacadeCollection.ListWrapper.fill(this.values, _change_detection_util.uninitialized);
	      _angular2SrcFacadeCollection.ListWrapper.fill(this.changes, false);
	      _angular2SrcFacadeCollection.ListWrapper.fill(this.pipes, null);
	      _angular2SrcFacadeCollection.ListWrapper.fill(this.prevContexts, _change_detection_util.uninitialized);
	      this.locals = null;
	    }
	  }, {
	    key: '_destroyPipes',
	    value: function _destroyPipes() {
	      for (var i = 0; i < this.pipes.length; ++i) {
	        if ((0, _angular2SrcFacadeLang.isPresent)(this.pipes[i])) {
	          this.pipes[i].onDestroy();
	        }
	      }
	    }
	  }, {
	    key: 'hydrated',
	    value: function hydrated() {
	      return _rtts_assertRtts_assert.assert.returnType(this.values[0] !== _change_detection_util.uninitialized, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'detectChangesInRecords',
	    value: function detectChangesInRecords(throwOnChange) {
	      _rtts_assertRtts_assert.assert.argumentTypes(throwOnChange, _rtts_assertRtts_assert.assert.type.boolean);
	      var protos = _rtts_assertRtts_assert.assert.type(this.protos, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord));
	      var changes = null;
	      var isChanged = false;
	      for (var i = 0; i < protos.length; ++i) {
	        var proto = _rtts_assertRtts_assert.assert.type(protos[i], _proto_record.ProtoRecord);
	        var bindingRecord = proto.bindingRecord;
	        var directiveRecord = bindingRecord.directiveRecord;
	        var change = this._check(proto);
	        if ((0, _angular2SrcFacadeLang.isPresent)(change)) {
	          if (throwOnChange) _change_detection_util.ChangeDetectionUtil.throwOnChange(proto, change);
	          this._updateDirectiveOrElement(change, bindingRecord);
	          isChanged = true;
	          changes = this._addChange(bindingRecord, change, changes);
	        }
	        if (proto.lastInDirective) {
	          if ((0, _angular2SrcFacadeLang.isPresent)(changes)) {
	            this._getDirectiveFor(directiveRecord.directiveIndex).onChange(changes);
	            changes = null;
	          }
	          if (isChanged && bindingRecord.isOnPushChangeDetection()) {
	            this._getDetectorFor(directiveRecord.directiveIndex).markAsCheckOnce();
	          }
	          isChanged = false;
	        }
	      }
	    }
	  }, {
	    key: 'callOnAllChangesDone',
	    value: function callOnAllChangesDone() {
	      var dirs = this.directiveRecords;
	      for (var i = dirs.length - 1; i >= 0; --i) {
	        var dir = dirs[i];
	        if (dir.callOnAllChangesDone) {
	          this._getDirectiveFor(dir.directiveIndex).onAllChangesDone();
	        }
	      }
	    }
	  }, {
	    key: '_updateDirectiveOrElement',
	    value: function _updateDirectiveOrElement(change, bindingRecord) {
	      if ((0, _angular2SrcFacadeLang.isBlank)(bindingRecord.directiveRecord)) {
	        this.dispatcher.notifyOnBinding(bindingRecord, change.currentValue);
	      } else {
	        var directiveIndex = bindingRecord.directiveRecord.directiveIndex;
	        bindingRecord.setter(this._getDirectiveFor(directiveIndex), change.currentValue);
	      }
	    }
	  }, {
	    key: '_addChange',
	    value: function _addChange(bindingRecord, change, changes) {
	      _rtts_assertRtts_assert.assert.argumentTypes(bindingRecord, _binding_record.BindingRecord, change, _rtts_assertRtts_assert.assert.type.any, changes, _rtts_assertRtts_assert.assert.type.any);
	      if (bindingRecord.callOnChange()) {
	        return _change_detection_util.ChangeDetectionUtil.addChange(changes, bindingRecord.propertyName, change);
	      } else {
	        return changes;
	      }
	    }
	  }, {
	    key: '_getDirectiveFor',
	    value: function _getDirectiveFor(directiveIndex) {
	      return this.directives.getDirectiveFor(directiveIndex);
	    }
	  }, {
	    key: '_getDetectorFor',
	    value: function _getDetectorFor(directiveIndex) {
	      return this.directives.getDetectorFor(directiveIndex);
	    }
	  }, {
	    key: '_check',
	    value: function _check(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      try {
	        if (proto.mode === _proto_record.RECORD_TYPE_PIPE || proto.mode === _proto_record.RECORD_TYPE_BINDING_PIPE) {
	          return this._pipeCheck(proto);
	        } else {
	          return this._referenceCheck(proto);
	        }
	      } catch (e) {
	        throw new _exceptions.ChangeDetectionError(proto, e);
	      }
	    }
	  }, {
	    key: '_referenceCheck',
	    value: function _referenceCheck(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      if (this._pureFuncAndArgsDidNotChange(proto)) {
	        this._setChanged(proto, false);
	        return null;
	      }
	      var prevValue = this._readSelf(proto);
	      var currValue = this._calculateCurrValue(proto);
	      if (!isSame(prevValue, currValue)) {
	        this._writeSelf(proto, currValue);
	        this._setChanged(proto, true);
	        if (proto.lastInBinding) {
	          return _change_detection_util.ChangeDetectionUtil.simpleChange(prevValue, currValue);
	        } else {
	          return null;
	        }
	      } else {
	        this._setChanged(proto, false);
	        return null;
	      }
	    }
	  }, {
	    key: '_calculateCurrValue',
	    value: function _calculateCurrValue(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      switch (proto.mode) {
	        case _proto_record.RECORD_TYPE_SELF:
	          return this._readContext(proto);
	        case _proto_record.RECORD_TYPE_CONST:
	          return proto.funcOrValue;
	        case _proto_record.RECORD_TYPE_PROPERTY:
	          var context = this._readContext(proto);
	          return proto.funcOrValue(context);
	        case _proto_record.RECORD_TYPE_LOCAL:
	          return this.locals.get(proto.name);
	        case _proto_record.RECORD_TYPE_INVOKE_METHOD:
	          var context = this._readContext(proto);
	          var args = this._readArgs(proto);
	          return proto.funcOrValue(context, args);
	        case _proto_record.RECORD_TYPE_KEYED_ACCESS:
	          var arg = this._readArgs(proto)[0];
	          return this._readContext(proto)[arg];
	        case _proto_record.RECORD_TYPE_INVOKE_CLOSURE:
	          return _angular2SrcFacadeLang.FunctionWrapper.apply(this._readContext(proto), this._readArgs(proto));
	        case _proto_record.RECORD_TYPE_INTERPOLATE:
	        case _proto_record.RECORD_TYPE_PRIMITIVE_OP:
	          return _angular2SrcFacadeLang.FunctionWrapper.apply(proto.funcOrValue, this._readArgs(proto));
	        default:
	          throw new _angular2SrcFacadeLang.BaseException('Unknown operation ' + proto.mode);
	      }
	    }
	  }, {
	    key: '_pipeCheck',
	    value: function _pipeCheck(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      var context = this._readContext(proto);
	      var pipe = this._pipeFor(proto, context);
	      var newValue = pipe.transform(context);
	      if (!_change_detection_util.ChangeDetectionUtil.noChangeMarker(newValue)) {
	        var prevValue = this._readSelf(proto);
	        this._writeSelf(proto, newValue);
	        this._setChanged(proto, true);
	        if (proto.lastInBinding) {
	          return _change_detection_util.ChangeDetectionUtil.simpleChange(prevValue, newValue);
	        } else {
	          return null;
	        }
	      } else {
	        this._setChanged(proto, false);
	        return null;
	      }
	    }
	  }, {
	    key: '_pipeFor',
	    value: function _pipeFor(proto, context) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord, context, _rtts_assertRtts_assert.assert.type.any);
	      var storedPipe = this._readPipe(proto);
	      if ((0, _angular2SrcFacadeLang.isPresent)(storedPipe) && storedPipe.supports(context)) {
	        return storedPipe;
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(storedPipe)) {
	        storedPipe.onDestroy();
	      }
	      var cdr = proto.mode === _proto_record.RECORD_TYPE_BINDING_PIPE ? this.ref : null;
	      var pipe = this.pipeRegistry.get(proto.name, context, cdr);
	      this._writePipe(proto, pipe);
	      return pipe;
	    }
	  }, {
	    key: '_readContext',
	    value: function _readContext(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      if (proto.contextIndex == -1) {
	        return this._getDirectiveFor(proto.directiveIndex);
	      } else {
	        return this.values[proto.contextIndex];
	      }
	      return this.values[proto.contextIndex];
	    }
	  }, {
	    key: '_readSelf',
	    value: function _readSelf(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      return this.values[proto.selfIndex];
	    }
	  }, {
	    key: '_writeSelf',
	    value: function _writeSelf(proto, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord, value, _rtts_assertRtts_assert.assert.type.any);
	      this.values[proto.selfIndex] = value;
	    }
	  }, {
	    key: '_readPipe',
	    value: function _readPipe(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      return this.pipes[proto.selfIndex];
	    }
	  }, {
	    key: '_writePipe',
	    value: function _writePipe(proto, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord, value, _rtts_assertRtts_assert.assert.type.any);
	      this.pipes[proto.selfIndex] = value;
	    }
	  }, {
	    key: '_setChanged',
	    value: function _setChanged(proto, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord, value, _rtts_assertRtts_assert.assert.type.boolean);
	      this.changes[proto.selfIndex] = value;
	    }
	  }, {
	    key: '_pureFuncAndArgsDidNotChange',
	    value: function _pureFuncAndArgsDidNotChange(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      return _rtts_assertRtts_assert.assert.returnType(proto.isPureFunction() && !this._argsChanged(proto), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: '_argsChanged',
	    value: function _argsChanged(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      var args = proto.args;
	      for (var i = 0; i < args.length; ++i) {
	        if (this.changes[args[i]]) {
	          return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: '_readArgs',
	    value: function _readArgs(proto) {
	      _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_record.ProtoRecord);
	      var res = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(proto.args.length);
	      var args = proto.args;
	      for (var i = 0; i < args.length; ++i) {
	        res[i] = this.values[args[i]];
	      }
	      return res;
	    }
	  }]);
	
	  return DynamicChangeDetector;
	})(_abstract_change_detector.AbstractChangeDetector);
	
	exports.DynamicChangeDetector = DynamicChangeDetector;
	
	Object.defineProperty(DynamicChangeDetector, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any], [_pipesPipe_registry.PipeRegistry], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord)], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype.hydrate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any], [_rtts_assertRtts_assert.assert.type.any], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype.detectChangesInRecords, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._addChange, 'parameters', { get: function get() {
	    return [[_binding_record.BindingRecord], [], []];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._check, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._referenceCheck, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._calculateCurrValue, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._pipeCheck, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._pipeFor, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord], []];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._readContext, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._readSelf, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._writeSelf, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord], []];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._readPipe, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._writePipe, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord], []];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._setChanged, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._pureFuncAndArgsDidNotChange, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._argsChanged, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(DynamicChangeDetector.prototype._readArgs, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	function isSame(a, b) {
	  if (a === b) return true;
	  if (a instanceof String && b instanceof String && a == b) return true;
	  if (a !== a && b !== b) return true;
	  return false;
	}
	//# sourceMappingURL=dynamic_change_detector.js.map
	
	//# sourceMappingURL=./dynamic_change_detector.map

/***/ },
/* 131 */
/*!******************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/abstract_change_detector.es6 ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _change_detector_ref = __webpack_require__(/*! ./change_detector_ref */ 132);
	
	var _interfaces = __webpack_require__(/*! ./interfaces */ 126);
	
	var _constants = __webpack_require__(/*! ./constants */ 120);
	
	var AbstractChangeDetector = (function (_ChangeDetector) {
	  function AbstractChangeDetector() {
	    _classCallCheck(this, AbstractChangeDetector);
	
	    _get(Object.getPrototypeOf(AbstractChangeDetector.prototype), 'constructor', this).call(this);
	    this.lightDomChildren = [];
	    this.shadowDomChildren = [];
	    this.ref = new _change_detector_ref.ChangeDetectorRef(this);
	    this.mode = null;
	  }
	
	  _inherits(AbstractChangeDetector, _ChangeDetector);
	
	  _createClass(AbstractChangeDetector, [{
	    key: 'addChild',
	    value: function addChild(cd) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cd, _interfaces.ChangeDetector);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.lightDomChildren, cd);
	      cd.parent = this;
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild(cd) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cd, _interfaces.ChangeDetector);
	      _angular2SrcFacadeCollection.ListWrapper.remove(this.lightDomChildren, cd);
	    }
	  }, {
	    key: 'addShadowDomChild',
	    value: function addShadowDomChild(cd) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cd, _interfaces.ChangeDetector);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.shadowDomChildren, cd);
	      cd.parent = this;
	    }
	  }, {
	    key: 'removeShadowDomChild',
	    value: function removeShadowDomChild(cd) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cd, _interfaces.ChangeDetector);
	      _angular2SrcFacadeCollection.ListWrapper.remove(this.shadowDomChildren, cd);
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {
	      this.parent.removeChild(this);
	    }
	  }, {
	    key: 'detectChanges',
	    value: function detectChanges() {
	      this._detectChanges(false);
	    }
	  }, {
	    key: 'checkNoChanges',
	    value: function checkNoChanges() {
	      this._detectChanges(true);
	    }
	  }, {
	    key: '_detectChanges',
	    value: function _detectChanges(throwOnChange) {
	      _rtts_assertRtts_assert.assert.argumentTypes(throwOnChange, _rtts_assertRtts_assert.assert.type.boolean);
	      if (this.mode === _constants.DETACHED || this.mode === _constants.CHECKED) return;
	      this.detectChangesInRecords(throwOnChange);
	      this._detectChangesInLightDomChildren(throwOnChange);
	      this.callOnAllChangesDone();
	      this._detectChangesInShadowDomChildren(throwOnChange);
	      if (this.mode === _constants.CHECK_ONCE) this.mode = _constants.CHECKED;
	    }
	  }, {
	    key: 'detectChangesInRecords',
	    value: function detectChangesInRecords(throwOnChange) {
	      _rtts_assertRtts_assert.assert.argumentTypes(throwOnChange, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'callOnAllChangesDone',
	    value: function callOnAllChangesDone() {}
	  }, {
	    key: '_detectChangesInLightDomChildren',
	    value: function _detectChangesInLightDomChildren(throwOnChange) {
	      _rtts_assertRtts_assert.assert.argumentTypes(throwOnChange, _rtts_assertRtts_assert.assert.type.boolean);
	      var c = this.lightDomChildren;
	      for (var i = 0; i < c.length; ++i) {
	        c[i]._detectChanges(throwOnChange);
	      }
	    }
	  }, {
	    key: '_detectChangesInShadowDomChildren',
	    value: function _detectChangesInShadowDomChildren(throwOnChange) {
	      _rtts_assertRtts_assert.assert.argumentTypes(throwOnChange, _rtts_assertRtts_assert.assert.type.boolean);
	      var c = this.shadowDomChildren;
	      for (var i = 0; i < c.length; ++i) {
	        c[i]._detectChanges(throwOnChange);
	      }
	    }
	  }, {
	    key: 'markAsCheckOnce',
	    value: function markAsCheckOnce() {
	      this.mode = _constants.CHECK_ONCE;
	    }
	  }, {
	    key: 'markPathToRootAsCheckOnce',
	    value: function markPathToRootAsCheckOnce() {
	      var c = this;
	      while ((0, _angular2SrcFacadeLang.isPresent)(c) && c.mode != _constants.DETACHED) {
	        if (c.mode === _constants.CHECKED) c.mode = _constants.CHECK_ONCE;
	        c = c.parent;
	      }
	    }
	  }]);
	
	  return AbstractChangeDetector;
	})(_interfaces.ChangeDetector);
	
	exports.AbstractChangeDetector = AbstractChangeDetector;
	
	Object.defineProperty(AbstractChangeDetector.prototype.addChild, 'parameters', { get: function get() {
	    return [[_interfaces.ChangeDetector]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype.removeChild, 'parameters', { get: function get() {
	    return [[_interfaces.ChangeDetector]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype.addShadowDomChild, 'parameters', { get: function get() {
	    return [[_interfaces.ChangeDetector]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype.removeShadowDomChild, 'parameters', { get: function get() {
	    return [[_interfaces.ChangeDetector]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype._detectChanges, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype.detectChangesInRecords, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype._detectChangesInLightDomChildren, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(AbstractChangeDetector.prototype._detectChangesInShadowDomChildren, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	//# sourceMappingURL=abstract_change_detector.js.map

	//# sourceMappingURL=./abstract_change_detector.map

/***/ },
/* 132 */
/*!*************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/change_detector_ref.es6 ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _interfaces = __webpack_require__(/*! ./interfaces */ 126);
	
	var _constants = __webpack_require__(/*! ./constants */ 120);
	
	var ChangeDetectorRef = (function () {
	  function ChangeDetectorRef(cd) {
	    _classCallCheck(this, ChangeDetectorRef);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(cd, _interfaces.ChangeDetector);
	    this._cd = cd;
	  }
	
	  _createClass(ChangeDetectorRef, [{
	    key: 'requestCheck',
	    value: function requestCheck() {
	      this._cd.markPathToRootAsCheckOnce();
	    }
	  }, {
	    key: 'detach',
	    value: function detach() {
	      this._cd.mode = _constants.DETACHED;
	    }
	  }, {
	    key: 'reattach',
	    value: function reattach() {
	      this._cd.mode = _constants.CHECK_ALWAYS;
	      this.requestCheck();
	    }
	  }]);
	
	  return ChangeDetectorRef;
	})();
	
	exports.ChangeDetectorRef = ChangeDetectorRef;
	
	Object.defineProperty(ChangeDetectorRef, 'parameters', { get: function get() {
	    return [[_interfaces.ChangeDetector]];
	  } });
	//# sourceMappingURL=change_detector_ref.js.map

	//# sourceMappingURL=./change_detector_ref.map

/***/ },
/* 133 */
/*!*************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/pipes/pipe_registry.es6 ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _pipe = __webpack_require__(/*! ./pipe */ 129);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _change_detector_ref = __webpack_require__(/*! ../change_detector_ref */ 132);
	
	var PipeRegistry = (function () {
	  function PipeRegistry(config) {
	    _classCallCheck(this, PipeRegistry);
	
	    this.config = config;
	  }
	
	  _createClass(PipeRegistry, [{
	    key: 'get',
	    value: function get(type, obj, cdRef) {
	      var listOfConfigs = this.config[type];
	      if ((0, _angular2SrcFacadeLang.isBlank)(listOfConfigs)) {
	        throw new _angular2SrcFacadeLang.BaseException('Cannot find \'' + type + '\' pipe supporting object \'' + obj + '\'');
	      }
	      var matchingConfig = _angular2SrcFacadeCollection.ListWrapper.find(listOfConfigs, function (pipeConfig) {
	        return pipeConfig.supports(obj);
	      });
	      if ((0, _angular2SrcFacadeLang.isBlank)(matchingConfig)) {
	        throw new _angular2SrcFacadeLang.BaseException('Cannot find \'' + type + '\' pipe supporting object \'' + obj + '\'');
	      }
	      return _rtts_assertRtts_assert.assert.returnType(matchingConfig.create(cdRef), _pipe.Pipe);
	    }
	  }]);
	
	  return PipeRegistry;
	})();
	
	exports.PipeRegistry = PipeRegistry;
	
	Object.defineProperty(PipeRegistry, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(PipeRegistry.prototype.get, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [], [_change_detector_ref.ChangeDetectorRef]];
	  } });
	//# sourceMappingURL=pipe_registry.js.map

	//# sourceMappingURL=./pipe_registry.map

/***/ },
/* 134 */
/*!************************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/change_detection_jit_generator.es6 ***!
  \************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _abstract_change_detector = __webpack_require__(/*! ./abstract_change_detector */ 131);
	
	var _change_detection_util = __webpack_require__(/*! ./change_detection_util */ 128);
	
	var _directive_record = __webpack_require__(/*! ./directive_record */ 119);
	
	var _proto_record = __webpack_require__(/*! ./proto_record */ 125);
	
	var ABSTRACT_CHANGE_DETECTOR = 'AbstractChangeDetector';
	var UTIL = 'ChangeDetectionUtil';
	var DISPATCHER_ACCESSOR = 'this.dispatcher';
	var PIPE_REGISTRY_ACCESSOR = 'this.pipeRegistry';
	var PROTOS_ACCESSOR = 'this.protos';
	var DIRECTIVES_ACCESSOR = 'this.directiveRecords';
	var CONTEXT_ACCESSOR = 'this.context';
	var IS_CHANGED_LOCAL = 'isChanged';
	var CHANGES_LOCAL = 'changes';
	var LOCALS_ACCESSOR = 'this.locals';
	var MODE_ACCESSOR = 'this.mode';
	var TEMP_LOCAL = 'temp';
	var CURRENT_PROTO = 'currentProto';
	function typeTemplate(type, cons, detectChanges, notifyOnAllChangesDone, setContext) {
	  _rtts_assertRtts_assert.assert.argumentTypes(type, _rtts_assertRtts_assert.assert.type.string, cons, _rtts_assertRtts_assert.assert.type.string, detectChanges, _rtts_assertRtts_assert.assert.type.string, notifyOnAllChangesDone, _rtts_assertRtts_assert.assert.type.string, setContext, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\n' + cons + '\n' + detectChanges + '\n' + notifyOnAllChangesDone + '\n' + setContext + ';\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ' + type + '(dispatcher, pipeRegistry, protos, directiveRecords);\n}\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(typeTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function constructorTemplate(type, fieldsDefinitions) {
	  _rtts_assertRtts_assert.assert.argumentTypes(type, _rtts_assertRtts_assert.assert.type.string, fieldsDefinitions, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\nvar ' + type + ' = function ' + type + '(dispatcher, pipeRegistry, protos, directiveRecords) {\n' + ABSTRACT_CHANGE_DETECTOR + '.call(this);\n' + DISPATCHER_ACCESSOR + ' = dispatcher;\n' + PIPE_REGISTRY_ACCESSOR + ' = pipeRegistry;\n' + PROTOS_ACCESSOR + ' = protos;\n' + DIRECTIVES_ACCESSOR + ' = directiveRecords;\n' + LOCALS_ACCESSOR + ' = null;\n' + fieldsDefinitions + '\n}\n\n' + type + '.prototype = Object.create(' + ABSTRACT_CHANGE_DETECTOR + '.prototype);\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(constructorTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function pipeOnDestroyTemplate(pipeNames) {
	  return pipeNames.map(function (p) {
	    return '' + p + '.onDestroy()';
	  }).join('\n');
	}
	Object.defineProperty(pipeOnDestroyTemplate, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	function hydrateTemplate(type, mode, fieldDefinitions, pipeOnDestroy, directiveFieldNames, detectorFieldNames) {
	  _rtts_assertRtts_assert.assert.argumentTypes(type, _rtts_assertRtts_assert.assert.type.string, mode, _rtts_assertRtts_assert.assert.type.string, fieldDefinitions, _rtts_assertRtts_assert.assert.type.string, pipeOnDestroy, _rtts_assertRtts_assert.assert.type.string, directiveFieldNames, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, String), detectorFieldNames, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, String));
	  var directiveInit = '';
	  for (var i = 0; i < directiveFieldNames.length; ++i) {
	    directiveInit += '' + directiveFieldNames[i] + ' = directives.getDirectiveFor(this.directiveRecords[' + i + '].directiveIndex);\n';
	  }
	  var detectorInit = '';
	  for (var i = 0; i < detectorFieldNames.length; ++i) {
	    detectorInit += '' + detectorFieldNames[i] + ' = directives.getDetectorFor(this.directiveRecords[' + i + '].directiveIndex);\n';
	  }
	  return _rtts_assertRtts_assert.assert.returnType('\n' + type + '.prototype.hydrate = function(context, locals, directives) {\n  ' + MODE_ACCESSOR + ' = "' + mode + '";\n  ' + CONTEXT_ACCESSOR + ' = context;\n  ' + LOCALS_ACCESSOR + ' = locals;\n  ' + directiveInit + '\n  ' + detectorInit + '\n}\n' + type + '.prototype.dehydrate = function() {\n  ' + pipeOnDestroy + '\n  ' + fieldDefinitions + '\n  ' + LOCALS_ACCESSOR + ' = null;\n}\n' + type + '.prototype.hydrated = function() {\n  return ' + CONTEXT_ACCESSOR + ' !== ' + UTIL + '.unitialized();\n}\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(hydrateTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, String)], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, String)]];
	  } });
	function detectChangesTemplate(type, body) {
	  _rtts_assertRtts_assert.assert.argumentTypes(type, _rtts_assertRtts_assert.assert.type.string, body, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\n' + type + '.prototype.detectChangesInRecords = function(throwOnChange) {\n  ' + body + '\n}\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(detectChangesTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function callOnAllChangesDoneTemplate(type, body) {
	  _rtts_assertRtts_assert.assert.argumentTypes(type, _rtts_assertRtts_assert.assert.type.string, body, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\n' + type + '.prototype.callOnAllChangesDone = function() {\n  ' + body + '\n}\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(callOnAllChangesDoneTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function onAllChangesDoneTemplate(directive) {
	  _rtts_assertRtts_assert.assert.argumentTypes(directive, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('' + directive + '.onAllChangesDone();', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(onAllChangesDoneTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function detectChangesBodyTemplate(localDefinitions, changeDefinitions, records) {
	  _rtts_assertRtts_assert.assert.argumentTypes(localDefinitions, _rtts_assertRtts_assert.assert.type.string, changeDefinitions, _rtts_assertRtts_assert.assert.type.string, records, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\n' + localDefinitions + '\n' + changeDefinitions + '\nvar ' + TEMP_LOCAL + ';\nvar ' + IS_CHANGED_LOCAL + ' = false;\nvar ' + CURRENT_PROTO + ';\nvar ' + CHANGES_LOCAL + ' = null;\n\ncontext = ' + CONTEXT_ACCESSOR + ';\n' + records + '\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(detectChangesBodyTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function pipeCheckTemplate(protoIndex, context, bindingPropagationConfig, pipe, pipeType, oldValue, newValue, change, update, addToChanges, lastInDirective) {
	  _rtts_assertRtts_assert.assert.argumentTypes(protoIndex, _rtts_assertRtts_assert.assert.type.number, context, _rtts_assertRtts_assert.assert.type.string, bindingPropagationConfig, _rtts_assertRtts_assert.assert.type.string, pipe, _rtts_assertRtts_assert.assert.type.string, pipeType, _rtts_assertRtts_assert.assert.type.string, oldValue, _rtts_assertRtts_assert.assert.type.string, newValue, _rtts_assertRtts_assert.assert.type.string, change, _rtts_assertRtts_assert.assert.type.string, update, _rtts_assertRtts_assert.assert.type.string, addToChanges, _rtts_assertRtts_assert.assert.type.any, lastInDirective, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\n' + CURRENT_PROTO + ' = ' + PROTOS_ACCESSOR + '[' + protoIndex + '];\nif (' + pipe + ' === ' + UTIL + '.unitialized()) {\n  ' + pipe + ' = ' + PIPE_REGISTRY_ACCESSOR + '.get(\'' + pipeType + '\', ' + context + ', ' + bindingPropagationConfig + ');\n} else if (!' + pipe + '.supports(' + context + ')) {\n  ' + pipe + '.onDestroy();\n  ' + pipe + ' = ' + PIPE_REGISTRY_ACCESSOR + '.get(\'' + pipeType + '\', ' + context + ', ' + bindingPropagationConfig + ');\n}\n\n' + newValue + ' = ' + pipe + '.transform(' + context + ');\nif (! ' + UTIL + '.noChangeMarker(' + newValue + ')) {\n  ' + change + ' = true;\n  ' + update + '\n  ' + addToChanges + '\n  ' + oldValue + ' = ' + newValue + ';\n}\n' + lastInDirective + '\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(pipeCheckTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function referenceCheckTemplate(protoIndex, assignment, oldValue, newValue, change, update, addToChanges, lastInDirective) {
	  _rtts_assertRtts_assert.assert.argumentTypes(protoIndex, _rtts_assertRtts_assert.assert.type.number, assignment, _rtts_assertRtts_assert.assert.type.string, oldValue, _rtts_assertRtts_assert.assert.type.string, newValue, _rtts_assertRtts_assert.assert.type.string, change, _rtts_assertRtts_assert.assert.type.string, update, _rtts_assertRtts_assert.assert.type.string, addToChanges, _rtts_assertRtts_assert.assert.type.string, lastInDirective, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\n' + CURRENT_PROTO + ' = ' + PROTOS_ACCESSOR + '[' + protoIndex + '];\n' + assignment + '\nif (' + newValue + ' !== ' + oldValue + ' || (' + newValue + ' !== ' + newValue + ') && (' + oldValue + ' !== ' + oldValue + ')) {\n  ' + change + ' = true;\n  ' + update + '\n  ' + addToChanges + '\n  ' + oldValue + ' = ' + newValue + ';\n}\n' + lastInDirective + '\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(referenceCheckTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function assignmentTemplate(field, value) {
	  _rtts_assertRtts_assert.assert.argumentTypes(field, _rtts_assertRtts_assert.assert.type.string, value, _rtts_assertRtts_assert.assert.type.string);
	  return '' + field + ' = ' + value + ';';
	}
	Object.defineProperty(assignmentTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function localDefinitionsTemplate(names) {
	  return _rtts_assertRtts_assert.assert.returnType(names.map(function (n) {
	    return 'var ' + n + ';';
	  }).join('\n'), _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(localDefinitionsTemplate, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	function changeDefinitionsTemplate(names) {
	  return _rtts_assertRtts_assert.assert.returnType(names.map(function (n) {
	    return 'var ' + n + ' = false;';
	  }).join('\n'), _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(changeDefinitionsTemplate, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	function fieldDefinitionsTemplate(names) {
	  return _rtts_assertRtts_assert.assert.returnType(names.map(function (n) {
	    return '' + n + ' = ' + UTIL + '.unitialized();';
	  }).join('\n'), _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(fieldDefinitionsTemplate, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	function ifChangedGuardTemplate(changeNames, body) {
	  _rtts_assertRtts_assert.assert.argumentTypes(changeNames, _angular2SrcFacadeCollection.List, body, _rtts_assertRtts_assert.assert.type.string);
	  var cond = changeNames.join(' || ');
	  return _rtts_assertRtts_assert.assert.returnType('\nif (' + cond + ') {\n  ' + body + '\n}\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(ifChangedGuardTemplate, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function addToChangesTemplate(oldValue, newValue) {
	  _rtts_assertRtts_assert.assert.argumentTypes(oldValue, _rtts_assertRtts_assert.assert.type.string, newValue, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('' + CHANGES_LOCAL + ' = ' + UTIL + '.addChange(' + CHANGES_LOCAL + ', ' + CURRENT_PROTO + '.bindingRecord.propertyName, ' + UTIL + '.simpleChange(' + oldValue + ', ' + newValue + '));', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(addToChangesTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function updateDirectiveTemplate(oldValue, newValue, directiveProperty) {
	  _rtts_assertRtts_assert.assert.argumentTypes(oldValue, _rtts_assertRtts_assert.assert.type.string, newValue, _rtts_assertRtts_assert.assert.type.string, directiveProperty, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\nif(throwOnChange) ' + UTIL + '.throwOnChange(' + CURRENT_PROTO + ', ' + UTIL + '.simpleChange(' + oldValue + ', ' + newValue + '));\n' + directiveProperty + ' = ' + newValue + ';\n' + IS_CHANGED_LOCAL + ' = true;\n  ', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(updateDirectiveTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function updateElementTemplate(oldValue, newValue) {
	  _rtts_assertRtts_assert.assert.argumentTypes(oldValue, _rtts_assertRtts_assert.assert.type.string, newValue, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\nif(throwOnChange) ' + UTIL + '.throwOnChange(' + CURRENT_PROTO + ', ' + UTIL + '.simpleChange(' + oldValue + ', ' + newValue + '));\n' + DISPATCHER_ACCESSOR + '.notifyOnBinding(' + CURRENT_PROTO + '.bindingRecord, ' + newValue + ');\n  ', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(updateElementTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function notifyOnChangesTemplate(directive) {
	  _rtts_assertRtts_assert.assert.argumentTypes(directive, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\nif(' + CHANGES_LOCAL + ') {\n  ' + directive + '.onChange(' + CHANGES_LOCAL + ');\n  ' + CHANGES_LOCAL + ' = null;\n}\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(notifyOnChangesTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function notifyOnPushDetectorsTemplate(detector) {
	  _rtts_assertRtts_assert.assert.argumentTypes(detector, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\nif(' + IS_CHANGED_LOCAL + ') {\n  ' + detector + '.markAsCheckOnce();\n}\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(notifyOnPushDetectorsTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function lastInDirectiveTemplate(notifyOnChanges, notifyOnPush) {
	  _rtts_assertRtts_assert.assert.argumentTypes(notifyOnChanges, _rtts_assertRtts_assert.assert.type.string, notifyOnPush, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType('\n' + notifyOnChanges + '\n' + notifyOnPush + '\n' + IS_CHANGED_LOCAL + ' = false;\n', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(lastInDirectiveTemplate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var ChangeDetectorJITGenerator = (function () {
	  function ChangeDetectorJITGenerator(typeName, changeDetectionStrategy, records, directiveRecords) {
	    _classCallCheck(this, ChangeDetectorJITGenerator);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(typeName, _rtts_assertRtts_assert.assert.type.string, changeDetectionStrategy, _rtts_assertRtts_assert.assert.type.string, records, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord), directiveRecords, _angular2SrcFacadeCollection.List);
	    this.typeName = typeName;
	    this.changeDetectionStrategy = changeDetectionStrategy;
	    this.records = records;
	    this.directiveRecords = directiveRecords;
	    this.localNames = this.getLocalNames(records);
	    this.changeNames = this.getChangeNames(this.localNames);
	    this.fieldNames = this.getFieldNames(this.localNames);
	    this.pipeNames = this.getPipeNames(this.localNames);
	  }
	
	  _createClass(ChangeDetectorJITGenerator, [{
	    key: 'getLocalNames',
	    value: function getLocalNames(records) {
	      _rtts_assertRtts_assert.assert.argumentTypes(records, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord));
	      var index = 0;
	      var names = records.map(function (r) {
	        var sanitizedName = r.name.replace(new RegExp('\\W', 'g'), '');
	        return '' + sanitizedName + '' + index++;
	      });
	      return _rtts_assertRtts_assert.assert.returnType(['context'].concat(names), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }, {
	    key: 'getChangeNames',
	    value: function getChangeNames(localNames) {
	      return _rtts_assertRtts_assert.assert.returnType(localNames.map(function (n) {
	        return 'change_' + n;
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }, {
	    key: 'getFieldNames',
	    value: function getFieldNames(localNames) {
	      return _rtts_assertRtts_assert.assert.returnType(localNames.map(function (n) {
	        return 'this.' + n;
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }, {
	    key: 'getPipeNames',
	    value: function getPipeNames(localNames) {
	      return _rtts_assertRtts_assert.assert.returnType(localNames.map(function (n) {
	        return 'this.' + n + '_pipe';
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }, {
	    key: 'generate',
	    value: function generate() {
	      var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genCallOnAllChangesDone(), this.genHydrate());
	      return _rtts_assertRtts_assert.assert.returnType(new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'protos', 'directiveRecords', text)(_abstract_change_detector.AbstractChangeDetector, _change_detection_util.ChangeDetectionUtil, this.records, this.directiveRecords), Function);
	    }
	  }, {
	    key: 'genConstructor',
	    value: function genConstructor() {
	      return _rtts_assertRtts_assert.assert.returnType(constructorTemplate(this.typeName, this.genFieldDefinitions()), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genHydrate',
	    value: function genHydrate() {
	      var mode = _change_detection_util.ChangeDetectionUtil.changeDetectionMode(this.changeDetectionStrategy);
	      return _rtts_assertRtts_assert.assert.returnType(hydrateTemplate(this.typeName, mode, this.genFieldDefinitions(), pipeOnDestroyTemplate(this.getNonNullPipeNames()), this.getDirectiveFieldNames(), this.getDetectorFieldNames()), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'getDirectiveFieldNames',
	    value: function getDirectiveFieldNames() {
	      var _this = this;
	
	      return _rtts_assertRtts_assert.assert.returnType(this.directiveRecords.map(function (d) {
	        return _this.getDirective(d.directiveIndex);
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }, {
	    key: 'getDetectorFieldNames',
	    value: function getDetectorFieldNames() {
	      var _this2 = this;
	
	      return _rtts_assertRtts_assert.assert.returnType(this.directiveRecords.filter(function (r) {
	        return r.isOnPushChangeDetection();
	      }).map(function (d) {
	        return _this2.getDetector(d.directiveIndex);
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }, {
	    key: 'getDirective',
	    value: function getDirective(d) {
	      _rtts_assertRtts_assert.assert.argumentTypes(d, _directive_record.DirectiveIndex);
	      return 'this.directive_' + d.name;
	    }
	  }, {
	    key: 'getDetector',
	    value: function getDetector(d) {
	      _rtts_assertRtts_assert.assert.argumentTypes(d, _directive_record.DirectiveIndex);
	      return 'this.detector_' + d.name;
	    }
	  }, {
	    key: 'genFieldDefinitions',
	    value: function genFieldDefinitions() {
	      var fields = [];
	      fields = fields.concat(this.fieldNames);
	      fields = fields.concat(this.getNonNullPipeNames());
	      fields = fields.concat(this.getDirectiveFieldNames());
	      fields = fields.concat(this.getDetectorFieldNames());
	      return fieldDefinitionsTemplate(fields);
	    }
	  }, {
	    key: 'getNonNullPipeNames',
	    value: function getNonNullPipeNames() {
	      var _this3 = this;
	
	      var pipes = [];
	      this.records.forEach(function (r) {
	        if (r.mode === _proto_record.RECORD_TYPE_PIPE || r.mode === _proto_record.RECORD_TYPE_BINDING_PIPE) {
	          pipes.push(_this3.pipeNames[r.selfIndex]);
	        }
	      });
	      return _rtts_assertRtts_assert.assert.returnType(pipes, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }, {
	    key: 'genDetectChanges',
	    value: function genDetectChanges() {
	      var body = this.genDetectChangesBody();
	      return _rtts_assertRtts_assert.assert.returnType(detectChangesTemplate(this.typeName, body), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genCallOnAllChangesDone',
	    value: function genCallOnAllChangesDone() {
	      var notifications = [];
	      var dirs = this.directiveRecords;
	      for (var i = dirs.length - 1; i >= 0; --i) {
	        var dir = dirs[i];
	        if (dir.callOnAllChangesDone) {
	          var directive = 'this.directive_' + dir.directiveIndex.name;
	          notifications.push(onAllChangesDoneTemplate(directive));
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(callOnAllChangesDoneTemplate(this.typeName, notifications.join(';\n')), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genDetectChangesBody',
	    value: function genDetectChangesBody() {
	      var _this4 = this;
	
	      var rec = this.records.map(function (r) {
	        return _this4.genRecord(r);
	      }).join('\n');
	      return _rtts_assertRtts_assert.assert.returnType(detectChangesBodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genLocalDefinitions',
	    value: function genLocalDefinitions() {
	      return _rtts_assertRtts_assert.assert.returnType(localDefinitionsTemplate(this.localNames), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genChangeDefinitions',
	    value: function genChangeDefinitions() {
	      return _rtts_assertRtts_assert.assert.returnType(changeDefinitionsTemplate(this.changeNames), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genRecord',
	    value: function genRecord(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      if (r.mode === _proto_record.RECORD_TYPE_PIPE || r.mode === _proto_record.RECORD_TYPE_BINDING_PIPE) {
	        return _rtts_assertRtts_assert.assert.returnType(this.genPipeCheck(r), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(this.genReferenceCheck(r), _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }, {
	    key: 'genPipeCheck',
	    value: function genPipeCheck(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      var context = this.localNames[r.contextIndex];
	      var oldValue = this.fieldNames[r.selfIndex];
	      var newValue = this.localNames[r.selfIndex];
	      var change = this.changeNames[r.selfIndex];
	      var pipe = this.pipeNames[r.selfIndex];
	      var cdRef = r.mode === _proto_record.RECORD_TYPE_BINDING_PIPE ? 'this.ref' : 'null';
	      var update = this.genUpdateDirectiveOrElement(r);
	      var addToChanges = this.genAddToChanges(r);
	      var lastInDirective = this.genLastInDirective(r);
	      return _rtts_assertRtts_assert.assert.returnType(pipeCheckTemplate(r.selfIndex - 1, context, cdRef, pipe, r.name, oldValue, newValue, change, update, addToChanges, lastInDirective), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genReferenceCheck',
	    value: function genReferenceCheck(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      var oldValue = this.fieldNames[r.selfIndex];
	      var newValue = this.localNames[r.selfIndex];
	      var change = this.changeNames[r.selfIndex];
	      var assignment = this.genUpdateCurrentValue(r);
	      var update = this.genUpdateDirectiveOrElement(r);
	      var addToChanges = this.genAddToChanges(r);
	      var lastInDirective = this.genLastInDirective(r);
	      var check = referenceCheckTemplate(r.selfIndex - 1, assignment, oldValue, newValue, change, update, addToChanges, lastInDirective);
	      if (r.isPureFunction()) {
	        return _rtts_assertRtts_assert.assert.returnType(this.ifChangedGuard(r, check), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(check, _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }, {
	    key: 'genUpdateCurrentValue',
	    value: function genUpdateCurrentValue(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      var context = this.getContext(r);
	      var newValue = this.localNames[r.selfIndex];
	      var args = this.genArgs(r);
	      switch (r.mode) {
	        case _proto_record.RECORD_TYPE_SELF:
	          return _rtts_assertRtts_assert.assert.returnType(assignmentTemplate(newValue, context), _rtts_assertRtts_assert.assert.type.string);
	        case _proto_record.RECORD_TYPE_CONST:
	          return _rtts_assertRtts_assert.assert.returnType('' + newValue + ' = ' + this.genLiteral(r.funcOrValue), _rtts_assertRtts_assert.assert.type.string);
	        case _proto_record.RECORD_TYPE_PROPERTY:
	          return _rtts_assertRtts_assert.assert.returnType(assignmentTemplate(newValue, '' + context + '.' + r.name), _rtts_assertRtts_assert.assert.type.string);
	        case _proto_record.RECORD_TYPE_LOCAL:
	          return _rtts_assertRtts_assert.assert.returnType(assignmentTemplate(newValue, '' + LOCALS_ACCESSOR + '.get(\'' + r.name + '\')'), _rtts_assertRtts_assert.assert.type.string);
	        case _proto_record.RECORD_TYPE_INVOKE_METHOD:
	          return _rtts_assertRtts_assert.assert.returnType(assignmentTemplate(newValue, '' + context + '.' + r.name + '(' + args + ')'), _rtts_assertRtts_assert.assert.type.string);
	        case _proto_record.RECORD_TYPE_INVOKE_CLOSURE:
	          return _rtts_assertRtts_assert.assert.returnType(assignmentTemplate(newValue, '' + context + '(' + args + ')'), _rtts_assertRtts_assert.assert.type.string);
	        case _proto_record.RECORD_TYPE_PRIMITIVE_OP:
	          return _rtts_assertRtts_assert.assert.returnType(assignmentTemplate(newValue, '' + UTIL + '.' + r.name + '(' + args + ')'), _rtts_assertRtts_assert.assert.type.string);
	        case _proto_record.RECORD_TYPE_INTERPOLATE:
	          return _rtts_assertRtts_assert.assert.returnType(assignmentTemplate(newValue, this.genInterpolation(r)), _rtts_assertRtts_assert.assert.type.string);
	        case _proto_record.RECORD_TYPE_KEYED_ACCESS:
	          var key = this.localNames[r.args[0]];
	          return _rtts_assertRtts_assert.assert.returnType(assignmentTemplate(newValue, '' + context + '[' + key + ']'), _rtts_assertRtts_assert.assert.type.string);
	        default:
	          throw new _angular2SrcFacadeLang.BaseException('Unknown operation ' + r.mode);
	      }
	    }
	  }, {
	    key: 'getContext',
	    value: function getContext(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      if (r.contextIndex == -1) {
	        return _rtts_assertRtts_assert.assert.returnType(this.getDirective(r.directiveIndex), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(this.localNames[r.contextIndex], _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }, {
	    key: 'ifChangedGuard',
	    value: function ifChangedGuard(r, body) {
	      var _this5 = this;
	
	      return _rtts_assertRtts_assert.assert.returnType(ifChangedGuardTemplate(r.args.map(function (a) {
	        return _this5.changeNames[a];
	      }), body), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genInterpolation',
	    value: function genInterpolation(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      var res = '';
	      for (var i = 0; i < r.args.length; ++i) {
	        res += this.genLiteral(r.fixedArgs[i]);
	        res += ' + ';
	        res += this.localNames[r.args[i]];
	        res += ' + ';
	      }
	      res += this.genLiteral(r.fixedArgs[r.args.length]);
	      return _rtts_assertRtts_assert.assert.returnType(res, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genLiteral',
	    value: function genLiteral(value) {
	      return _rtts_assertRtts_assert.assert.returnType(JSON.stringify(value), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genUpdateDirectiveOrElement',
	    value: function genUpdateDirectiveOrElement(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      if (!r.lastInBinding) return _rtts_assertRtts_assert.assert.returnType('', _rtts_assertRtts_assert.assert.type.string);
	      var newValue = this.localNames[r.selfIndex];
	      var oldValue = this.fieldNames[r.selfIndex];
	      var br = r.bindingRecord;
	      if (br.isDirective()) {
	        var directiveProperty = '' + this.getDirective(br.directiveRecord.directiveIndex) + '.' + br.propertyName;
	        return _rtts_assertRtts_assert.assert.returnType(updateDirectiveTemplate(oldValue, newValue, directiveProperty), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(updateElementTemplate(oldValue, newValue), _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }, {
	    key: 'genAddToChanges',
	    value: function genAddToChanges(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      var newValue = this.localNames[r.selfIndex];
	      var oldValue = this.fieldNames[r.selfIndex];
	      return _rtts_assertRtts_assert.assert.returnType(r.bindingRecord.callOnChange() ? addToChangesTemplate(oldValue, newValue) : '', _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genLastInDirective',
	    value: function genLastInDirective(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      var onChanges = this.genNotifyOnChanges(r);
	      var onPush = this.genNotifyOnPushDetectors(r);
	      return _rtts_assertRtts_assert.assert.returnType(lastInDirectiveTemplate(onChanges, onPush), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'genNotifyOnChanges',
	    value: function genNotifyOnChanges(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      var br = r.bindingRecord;
	      if (r.lastInDirective && br.callOnChange()) {
	        return _rtts_assertRtts_assert.assert.returnType(notifyOnChangesTemplate(this.getDirective(br.directiveRecord.directiveIndex)), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType('', _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }, {
	    key: 'genNotifyOnPushDetectors',
	    value: function genNotifyOnPushDetectors(r) {
	      _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord);
	      var br = r.bindingRecord;
	      if (r.lastInDirective && br.isOnPushChangeDetection()) {
	        return _rtts_assertRtts_assert.assert.returnType(notifyOnPushDetectorsTemplate(this.getDetector(br.directiveRecord.directiveIndex)), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType('', _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }, {
	    key: 'genArgs',
	    value: function genArgs(r) {
	      var _this6 = this;
	
	      return _rtts_assertRtts_assert.assert.returnType(r.args.map(function (arg) {
	        return _this6.localNames[arg];
	      }).join(', '), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return ChangeDetectorJITGenerator;
	})();
	
	exports.ChangeDetectorJITGenerator = ChangeDetectorJITGenerator;
	
	Object.defineProperty(ChangeDetectorJITGenerator, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord)], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getLocalNames, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord)]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getChangeNames, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string)]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getFieldNames, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string)]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getPipeNames, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string)]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getDirective, 'parameters', { get: function get() {
	    return [[_directive_record.DirectiveIndex]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getDetector, 'parameters', { get: function get() {
	    return [[_directive_record.DirectiveIndex]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genRecord, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genPipeCheck, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genReferenceCheck, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genUpdateCurrentValue, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.getContext, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.ifChangedGuard, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genInterpolation, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genUpdateDirectiveOrElement, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genAddToChanges, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genLastInDirective, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genNotifyOnChanges, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genNotifyOnPushDetectors, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	Object.defineProperty(ChangeDetectorJITGenerator.prototype.genArgs, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord]];
	  } });
	//# sourceMappingURL=change_detection_jit_generator.es6.map

	//# sourceMappingURL=./change_detection_jit_generator.map

/***/ },
/* 135 */
/*!**************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/coalesce.es6 ***!
  \**************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.coalesce = coalesce;
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _proto_record = __webpack_require__(/*! ./proto_record */ 125);
	
	function coalesce(records) {
	  _rtts_assertRtts_assert.assert.argumentTypes(records, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord));
	  var res = _angular2SrcFacadeCollection.ListWrapper.create();
	  var indexMap = _angular2SrcFacadeCollection.MapWrapper.create();
	  for (var i = 0; i < records.length; ++i) {
	    var r = records[i];
	    var record = _replaceIndices(r, res.length + 1, indexMap);
	    var matchingRecord = _findMatching(record, res);
	    if ((0, _angular2SrcFacadeLang.isPresent)(matchingRecord) && record.lastInBinding) {
	      _angular2SrcFacadeCollection.ListWrapper.push(res, _selfRecord(record, matchingRecord.selfIndex, res.length + 1));
	      _angular2SrcFacadeCollection.MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);
	    } else if ((0, _angular2SrcFacadeLang.isPresent)(matchingRecord) && !record.lastInBinding) {
	      _angular2SrcFacadeCollection.MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);
	    } else {
	      _angular2SrcFacadeCollection.ListWrapper.push(res, record);
	      _angular2SrcFacadeCollection.MapWrapper.set(indexMap, r.selfIndex, record.selfIndex);
	    }
	  }
	  return _rtts_assertRtts_assert.assert.returnType(res, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord));
	}
	
	Object.defineProperty(coalesce, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord)]];
	  } });
	function _selfRecord(r, contextIndex, selfIndex) {
	  _rtts_assertRtts_assert.assert.argumentTypes(r, _proto_record.ProtoRecord, contextIndex, _rtts_assertRtts_assert.assert.type.number, selfIndex, _rtts_assertRtts_assert.assert.type.number);
	  return _rtts_assertRtts_assert.assert.returnType(new _proto_record.ProtoRecord(_proto_record.RECORD_TYPE_SELF, 'self', null, [], r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective), _proto_record.ProtoRecord);
	}
	Object.defineProperty(_selfRecord, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	function _findMatching(r, rs) {
	  return _angular2SrcFacadeCollection.ListWrapper.find(rs, function (rr) {
	    return rr.mode === r.mode && rr.funcOrValue === r.funcOrValue && rr.contextIndex === r.contextIndex && _angular2SrcFacadeCollection.ListWrapper.equals(rr.args, r.args);
	  });
	}
	Object.defineProperty(_findMatching, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _proto_record.ProtoRecord)]];
	  } });
	function _replaceIndices(r, selfIndex, indexMap) {
	  var args = _angular2SrcFacadeCollection.ListWrapper.map(r.args, function (a) {
	    return _map(indexMap, a);
	  });
	  var contextIndex = _map(indexMap, r.contextIndex);
	  return new _proto_record.ProtoRecord(r.mode, r.name, r.funcOrValue, args, r.fixedArgs, contextIndex, r.directiveIndex, selfIndex, r.bindingRecord, r.expressionAsString, r.lastInBinding, r.lastInDirective);
	}
	Object.defineProperty(_replaceIndices, 'parameters', { get: function get() {
	    return [[_proto_record.ProtoRecord], [_rtts_assertRtts_assert.assert.type.number], [_angular2SrcFacadeCollection.Map]];
	  } });
	function _map(indexMap, value) {
	  _rtts_assertRtts_assert.assert.argumentTypes(indexMap, _angular2SrcFacadeCollection.Map, value, _rtts_assertRtts_assert.assert.type.number);
	  var r = _angular2SrcFacadeCollection.MapWrapper.get(indexMap, value);
	  return (0, _angular2SrcFacadeLang.isPresent)(r) ? r : value;
	}
	Object.defineProperty(_map, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.Map], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	//# sourceMappingURL=coalesce.js.map

	//# sourceMappingURL=./coalesce.map

/***/ },
/* 136 */
/*!**********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/change_detection.es6 ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _proto_change_detector = __webpack_require__(/*! ./proto_change_detector */ 127);
	
	var _pipesPipe_registry = __webpack_require__(/*! ./pipes/pipe_registry */ 133);
	
	var _pipesIterable_changes = __webpack_require__(/*! ./pipes/iterable_changes */ 138);
	
	var _pipesKeyvalue_changes = __webpack_require__(/*! ./pipes/keyvalue_changes */ 139);
	
	var _pipesAsync_pipe = __webpack_require__(/*! ./pipes/async_pipe */ 137);
	
	var _pipesNull_pipe = __webpack_require__(/*! ./pipes/null_pipe */ 140);
	
	var _constants = __webpack_require__(/*! ./constants */ 120);
	
	var _interfaces = __webpack_require__(/*! ./interfaces */ 126);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var keyValDiff = [new _pipesKeyvalue_changes.KeyValueChangesFactory(), new _pipesNull_pipe.NullPipeFactory()];
	exports.keyValDiff = keyValDiff;
	var iterableDiff = [new _pipesIterable_changes.IterableChangesFactory(), new _pipesNull_pipe.NullPipeFactory()];
	exports.iterableDiff = iterableDiff;
	var async = [new _pipesAsync_pipe.AsyncPipeFactory(), new _pipesNull_pipe.NullPipeFactory()];
	exports.async = async;
	var defaultPipes = {
	  'iterableDiff': iterableDiff,
	  'keyValDiff': keyValDiff,
	  'async': async
	};
	exports.defaultPipes = defaultPipes;
	
	var DynamicChangeDetection = (function (_ChangeDetection) {
	  function DynamicChangeDetection(registry) {
	    _classCallCheck(this, DynamicChangeDetection);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(registry, _pipesPipe_registry.PipeRegistry);
	    _get(Object.getPrototypeOf(DynamicChangeDetection.prototype), 'constructor', this).call(this);
	    this.registry = registry;
	  }
	
	  _inherits(DynamicChangeDetection, _ChangeDetection);
	
	  _createClass(DynamicChangeDetection, [{
	    key: 'createProtoChangeDetector',
	    value: function createProtoChangeDetector(name) {
	      var changeControlStrategy = arguments[1] === undefined ? _constants.DEFAULT : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, changeControlStrategy, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(new _proto_change_detector.DynamicProtoChangeDetector(this.registry, changeControlStrategy), _interfaces.ProtoChangeDetector);
	    }
	  }]);
	
	  return DynamicChangeDetection;
	})(_interfaces.ChangeDetection);
	
	exports.DynamicChangeDetection = DynamicChangeDetection;
	
	Object.defineProperty(DynamicChangeDetection, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(DynamicChangeDetection, 'parameters', { get: function get() {
	    return [[_pipesPipe_registry.PipeRegistry]];
	  } });
	Object.defineProperty(DynamicChangeDetection.prototype.createProtoChangeDetector, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var JitChangeDetection = (function (_ChangeDetection2) {
	  function JitChangeDetection(registry) {
	    _classCallCheck(this, JitChangeDetection);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(registry, _pipesPipe_registry.PipeRegistry);
	    _get(Object.getPrototypeOf(JitChangeDetection.prototype), 'constructor', this).call(this);
	    this.registry = registry;
	  }
	
	  _inherits(JitChangeDetection, _ChangeDetection2);
	
	  _createClass(JitChangeDetection, [{
	    key: 'createProtoChangeDetector',
	    value: function createProtoChangeDetector(name) {
	      var changeControlStrategy = arguments[1] === undefined ? _constants.DEFAULT : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, changeControlStrategy, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(new _proto_change_detector.JitProtoChangeDetector(this.registry, changeControlStrategy), _interfaces.ProtoChangeDetector);
	    }
	  }]);
	
	  return JitChangeDetection;
	})(_interfaces.ChangeDetection);
	
	exports.JitChangeDetection = JitChangeDetection;
	
	Object.defineProperty(JitChangeDetection, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(JitChangeDetection, 'parameters', { get: function get() {
	    return [[_pipesPipe_registry.PipeRegistry]];
	  } });
	Object.defineProperty(JitChangeDetection.prototype.createProtoChangeDetector, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var defaultPipeRegistry = new _pipesPipe_registry.PipeRegistry(defaultPipes);
	//# sourceMappingURL=change_detection.js.map
	
	//# sourceMappingURL=./change_detection.map
	exports.defaultPipeRegistry = defaultPipeRegistry;

/***/ },
/* 137 */
/*!**********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/pipes/async_pipe.es6 ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _pipe = __webpack_require__(/*! ./pipe */ 129);
	
	var _change_detector_ref = __webpack_require__(/*! ../change_detector_ref */ 132);
	
	var AsyncPipe = (function (_Pipe) {
	  function AsyncPipe(ref) {
	    _classCallCheck(this, AsyncPipe);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(ref, _change_detector_ref.ChangeDetectorRef);
	    _get(Object.getPrototypeOf(AsyncPipe.prototype), 'constructor', this).call(this);
	    this._ref = ref;
	    this._latestValue = null;
	    this._latestReturnedValue = null;
	    this._subscription = null;
	    this._observable = null;
	  }
	
	  _inherits(AsyncPipe, _Pipe);
	
	  _createClass(AsyncPipe, [{
	    key: 'supports',
	    value: function supports(obs) {
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.ObservableWrapper.isObservable(obs), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'onDestroy',
	    value: function onDestroy() {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._subscription)) {
	        this._dispose();
	      }
	      ;
	    }
	  }, {
	    key: 'transform',
	    value: function transform(obs) {
	      _rtts_assertRtts_assert.assert.argumentTypes(obs, _angular2SrcFacadeAsync.Observable);
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._subscription)) {
	        this._subscribe(obs);
	        return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.type.any);
	      }
	      if (obs !== this._observable) {
	        this._dispose();
	        return _rtts_assertRtts_assert.assert.returnType(this.transform(obs), _rtts_assertRtts_assert.assert.type.any);
	      }
	      if (this._latestValue === this._latestReturnedValue) {
	        return _rtts_assertRtts_assert.assert.returnType(_pipe.NO_CHANGE, _rtts_assertRtts_assert.assert.type.any);
	      } else {
	        this._latestReturnedValue = this._latestValue;
	        return _rtts_assertRtts_assert.assert.returnType(this._latestValue, _rtts_assertRtts_assert.assert.type.any);
	      }
	    }
	  }, {
	    key: '_subscribe',
	    value: function _subscribe(obs) {
	      var _this = this;
	
	      this._observable = obs;
	      this._subscription = _angular2SrcFacadeAsync.ObservableWrapper.subscribe(obs, function (value) {
	        return _this._updateLatestValue(value);
	      }, function (e) {
	        throw e;
	      });
	    }
	  }, {
	    key: '_dispose',
	    value: function _dispose() {
	      _angular2SrcFacadeAsync.ObservableWrapper.dispose(this._subscription);
	      this._latestValue = null;
	      this._latestReturnedValue = null;
	      this._subscription = null;
	      this._observable = null;
	    }
	  }, {
	    key: '_updateLatestValue',
	    value: function _updateLatestValue(value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(value, Object);
	      this._latestValue = value;
	      this._ref.requestCheck();
	    }
	  }]);
	
	  return AsyncPipe;
	})(_pipe.Pipe);
	
	exports.AsyncPipe = AsyncPipe;
	
	Object.defineProperty(AsyncPipe, 'parameters', { get: function get() {
	    return [[_change_detector_ref.ChangeDetectorRef]];
	  } });
	Object.defineProperty(AsyncPipe.prototype.transform, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeAsync.Observable]];
	  } });
	Object.defineProperty(AsyncPipe.prototype._subscribe, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeAsync.Observable]];
	  } });
	Object.defineProperty(AsyncPipe.prototype._updateLatestValue, 'parameters', { get: function get() {
	    return [[Object]];
	  } });
	
	var AsyncPipeFactory = (function () {
	  function AsyncPipeFactory() {
	    _classCallCheck(this, AsyncPipeFactory);
	  }
	
	  _createClass(AsyncPipeFactory, [{
	    key: 'supports',
	    value: function supports(obs) {
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.ObservableWrapper.isObservable(obs), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'create',
	    value: function create(cdRef) {
	      return _rtts_assertRtts_assert.assert.returnType(new AsyncPipe(cdRef), _pipe.Pipe);
	    }
	  }]);
	
	  return AsyncPipeFactory;
	})();
	
	exports.AsyncPipeFactory = AsyncPipeFactory;
	
	//# sourceMappingURL=async_pipe.js.map

	//# sourceMappingURL=./async_pipe.map

/***/ },
/* 138 */
/*!****************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/pipes/iterable_changes.es6 ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _pipe = __webpack_require__(/*! ./pipe */ 129);
	
	var IterableChangesFactory = (function () {
	  function IterableChangesFactory() {
	    _classCallCheck(this, IterableChangesFactory);
	  }
	
	  _createClass(IterableChangesFactory, [{
	    key: 'supports',
	    value: function supports(obj) {
	      return _rtts_assertRtts_assert.assert.returnType(IterableChanges.supportsObj(obj), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'create',
	    value: function create(cdRef) {
	      return _rtts_assertRtts_assert.assert.returnType(new IterableChanges(), _pipe.Pipe);
	    }
	  }]);
	
	  return IterableChangesFactory;
	})();
	
	exports.IterableChangesFactory = IterableChangesFactory;
	
	var IterableChanges = (function (_Pipe) {
	  function IterableChanges() {
	    _classCallCheck(this, IterableChanges);
	
	    _get(Object.getPrototypeOf(IterableChanges.prototype), 'constructor', this).call(this);
	    this._collection = null;
	    this._length = null;
	    this._linkedRecords = null;
	    this._unlinkedRecords = null;
	    this._previousItHead = null;
	    this._itHead = null;
	    this._itTail = null;
	    this._additionsHead = null;
	    this._additionsTail = null;
	    this._movesHead = null;
	    this._movesTail = null;
	    this._removalsHead = null;
	    this._removalsTail = null;
	  }
	
	  _inherits(IterableChanges, _Pipe);
	
	  _createClass(IterableChanges, [{
	    key: 'supports',
	    value: function supports(obj) {
	      return _rtts_assertRtts_assert.assert.returnType(IterableChanges.supportsObj(obj), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'collection',
	    get: function () {
	      return this._collection;
	    }
	  }, {
	    key: 'length',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this._length, _angular2SrcFacadeLang.int);
	    }
	  }, {
	    key: 'forEachItem',
	    value: function forEachItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._itHead; record !== null; record = record._next) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'forEachPreviousItem',
	    value: function forEachPreviousItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'forEachAddedItem',
	    value: function forEachAddedItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'forEachMovedItem',
	    value: function forEachMovedItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._movesHead; record !== null; record = record._nextMoved) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'forEachRemovedItem',
	    value: function forEachRemovedItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'transform',
	    value: function transform(collection) {
	      if (this.check(collection)) {
	        return this;
	      } else {
	        return _pipe.NO_CHANGE;
	      }
	    }
	  }, {
	    key: 'check',
	    value: function check(collection) {
	      var _this = this;
	
	      this._reset();
	      var record = _rtts_assertRtts_assert.assert.type(this._itHead, CollectionChangeRecord);
	      var mayBeDirty = _rtts_assertRtts_assert.assert.type(false, _rtts_assertRtts_assert.assert.type.boolean);
	      var index;
	      var item;
	      if (_angular2SrcFacadeCollection.ListWrapper.isList(collection)) {
	        var list = collection;
	        this._length = collection.length;
	        for (index = 0; index < this._length; index++) {
	          item = list[index];
	          if (record === null || !(0, _angular2SrcFacadeLang.looseIdentical)(record.item, item)) {
	            record = this._mismatch(record, item, index);
	            mayBeDirty = true;
	          } else if (mayBeDirty) {
	            record = this._verifyReinsertion(record, item, index);
	          }
	          record = record._next;
	        }
	      } else {
	        index = 0;
	        (0, _angular2SrcFacadeCollection.iterateListLike)(collection, function (item) {
	          if (record === null || !(0, _angular2SrcFacadeLang.looseIdentical)(record.item, item)) {
	            record = _this._mismatch(record, item, index);
	            mayBeDirty = true;
	          } else if (mayBeDirty) {
	            record = _this._verifyReinsertion(record, item, index);
	          }
	          record = record._next;
	          index++;
	        });
	        this._length = index;
	      }
	      this._truncate(record);
	      this._collection = collection;
	      return _rtts_assertRtts_assert.assert.returnType(this.isDirty, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'isDirty',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: '_reset',
	    value: function _reset() {
	      if (this.isDirty) {
	        var record;
	        var nextRecord;
	        for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	          record._nextPrevious = record._next;
	        }
	        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	          record.previousIndex = record.currentIndex;
	        }
	        this._additionsHead = this._additionsTail = null;
	        for (record = this._movesHead; record !== null; record = nextRecord) {
	          record.previousIndex = record.currentIndex;
	          nextRecord = record._nextMoved;
	        }
	        this._movesHead = this._movesTail = null;
	        this._removalsHead = this._removalsTail = null;
	      }
	    }
	  }, {
	    key: '_mismatch',
	    value: function _mismatch(record, item, index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord, item, _rtts_assertRtts_assert.assert.type.any, index, _angular2SrcFacadeLang.int);
	      var previousRecord;
	      if (record === null) {
	        previousRecord = this._itTail;
	      } else {
	        previousRecord = record._prev;
	        this._remove(record);
	      }
	      record = this._linkedRecords === null ? null : this._linkedRecords.get(item, index);
	      if (record !== null) {
	        this._moveAfter(record, previousRecord, index);
	      } else {
	        record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item);
	        if (record !== null) {
	          this._reinsertAfter(record, previousRecord, index);
	        } else {
	          record = this._addAfter(new CollectionChangeRecord(item), previousRecord, index);
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: '_verifyReinsertion',
	    value: function _verifyReinsertion(record, item, index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord, item, _rtts_assertRtts_assert.assert.type.any, index, _angular2SrcFacadeLang.int);
	      var reinsertRecord = _rtts_assertRtts_assert.assert.type(this._unlinkedRecords === null ? null : this._unlinkedRecords.get(item), CollectionChangeRecord);
	      if (reinsertRecord !== null) {
	        record = this._reinsertAfter(reinsertRecord, record._prev, index);
	      } else if (record.currentIndex != index) {
	        record.currentIndex = index;
	        this._addToMoves(record, index);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: '_truncate',
	    value: function _truncate(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord);
	      while (record !== null) {
	        var nextRecord = _rtts_assertRtts_assert.assert.type(record._next, CollectionChangeRecord);
	        this._addToRemovals(this._unlink(record));
	        record = nextRecord;
	      }
	      if (this._unlinkedRecords !== null) {
	        this._unlinkedRecords.clear();
	      }
	      if (this._additionsTail !== null) {
	        this._additionsTail._nextAdded = null;
	      }
	      if (this._movesTail !== null) {
	        this._movesTail._nextMoved = null;
	      }
	      if (this._itTail !== null) {
	        this._itTail._next = null;
	      }
	      if (this._removalsTail !== null) {
	        this._removalsTail._nextRemoved = null;
	      }
	    }
	  }, {
	    key: '_reinsertAfter',
	    value: function _reinsertAfter(record, prevRecord, index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord, prevRecord, CollectionChangeRecord, index, _angular2SrcFacadeLang.int);
	      if (this._unlinkedRecords !== null) {
	        this._unlinkedRecords.remove(record);
	      }
	      var prev = record._prevRemoved;
	      var next = record._nextRemoved;
	      if (prev === null) {
	        this._removalsHead = next;
	      } else {
	        prev._nextRemoved = next;
	      }
	      if (next === null) {
	        this._removalsTail = prev;
	      } else {
	        next._prevRemoved = prev;
	      }
	      this._insertAfter(record, prevRecord, index);
	      this._addToMoves(record, index);
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: '_moveAfter',
	    value: function _moveAfter(record, prevRecord, index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord, prevRecord, CollectionChangeRecord, index, _angular2SrcFacadeLang.int);
	      this._unlink(record);
	      this._insertAfter(record, prevRecord, index);
	      this._addToMoves(record, index);
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: '_addAfter',
	    value: function _addAfter(record, prevRecord, index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord, prevRecord, CollectionChangeRecord, index, _angular2SrcFacadeLang.int);
	      this._insertAfter(record, prevRecord, index);
	      if (this._additionsTail === null) {
	        this._additionsTail = this._additionsHead = record;
	      } else {
	        this._additionsTail = this._additionsTail._nextAdded = record;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: '_insertAfter',
	    value: function _insertAfter(record, prevRecord, index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord, prevRecord, CollectionChangeRecord, index, _angular2SrcFacadeLang.int);
	      var next = _rtts_assertRtts_assert.assert.type(prevRecord === null ? this._itHead : prevRecord._next, CollectionChangeRecord);
	      record._next = next;
	      record._prev = prevRecord;
	      if (next === null) {
	        this._itTail = record;
	      } else {
	        next._prev = record;
	      }
	      if (prevRecord === null) {
	        this._itHead = record;
	      } else {
	        prevRecord._next = record;
	      }
	      if (this._linkedRecords === null) {
	        this._linkedRecords = new _DuplicateMap();
	      }
	      this._linkedRecords.put(record);
	      record.currentIndex = index;
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: '_remove',
	    value: function _remove(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord);
	      return _rtts_assertRtts_assert.assert.returnType(this._addToRemovals(this._unlink(record)), CollectionChangeRecord);
	    }
	  }, {
	    key: '_unlink',
	    value: function _unlink(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord);
	      if (this._linkedRecords !== null) {
	        this._linkedRecords.remove(record);
	      }
	      var prev = record._prev;
	      var next = record._next;
	      if (prev === null) {
	        this._itHead = next;
	      } else {
	        prev._next = next;
	      }
	      if (next === null) {
	        this._itTail = prev;
	      } else {
	        next._prev = prev;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: '_addToMoves',
	    value: function _addToMoves(record, toIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord, toIndex, _angular2SrcFacadeLang.int);
	      if (record.previousIndex === toIndex) {
	        return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	      }
	      if (this._movesTail === null) {
	        this._movesTail = this._movesHead = record;
	      } else {
	        this._movesTail = this._movesTail._nextMoved = record;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: '_addToRemovals',
	    value: function _addToRemovals(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord);
	      if (this._unlinkedRecords === null) {
	        this._unlinkedRecords = new _DuplicateMap();
	      }
	      this._unlinkedRecords.put(record);
	      record.currentIndex = null;
	      record._nextRemoved = null;
	      if (this._removalsTail === null) {
	        this._removalsTail = this._removalsHead = record;
	        record._prevRemoved = null;
	      } else {
	        record._prevRemoved = this._removalsTail;
	        this._removalsTail = this._removalsTail._nextRemoved = record;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var record;
	      var list = [];
	      for (record = this._itHead; record !== null; record = record._next) {
	        _angular2SrcFacadeCollection.ListWrapper.push(list, record);
	      }
	      var previous = [];
	      for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	        _angular2SrcFacadeCollection.ListWrapper.push(previous, record);
	      }
	      var additions = [];
	      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	        _angular2SrcFacadeCollection.ListWrapper.push(additions, record);
	      }
	      var moves = [];
	      for (record = this._movesHead; record !== null; record = record._nextMoved) {
	        _angular2SrcFacadeCollection.ListWrapper.push(moves, record);
	      }
	      var removals = [];
	      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	        _angular2SrcFacadeCollection.ListWrapper.push(removals, record);
	      }
	      return _rtts_assertRtts_assert.assert.returnType('collection: ' + list.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'moves: ' + moves.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n', _rtts_assertRtts_assert.assert.type.string);
	    }
	  }], [{
	    key: 'supportsObj',
	    value: function supportsObj(obj) {
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeCollection.isListLikeIterable)(obj), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return IterableChanges;
	})(_pipe.Pipe);
	
	exports.IterableChanges = IterableChanges;
	
	Object.defineProperty(IterableChanges.prototype.forEachItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype.forEachPreviousItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype.forEachAddedItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype.forEachMovedItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype.forEachRemovedItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(IterableChanges.prototype._mismatch, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord], [], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._verifyReinsertion, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord], [], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._truncate, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(IterableChanges.prototype._reinsertAfter, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord], [CollectionChangeRecord], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._moveAfter, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord], [CollectionChangeRecord], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._addAfter, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord], [CollectionChangeRecord], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._insertAfter, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord], [CollectionChangeRecord], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._remove, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(IterableChanges.prototype._unlink, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(IterableChanges.prototype._addToMoves, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(IterableChanges.prototype._addToRemovals, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	
	var CollectionChangeRecord = (function () {
	  function CollectionChangeRecord(item) {
	    _classCallCheck(this, CollectionChangeRecord);
	
	    this.currentIndex = null;
	    this.previousIndex = null;
	    this.item = item;
	    this._nextPrevious = null;
	    this._prev = null;
	    this._next = null;
	    this._prevDup = null;
	    this._nextDup = null;
	    this._prevRemoved = null;
	    this._nextRemoved = null;
	    this._nextAdded = null;
	    this._nextMoved = null;
	  }
	
	  _createClass(CollectionChangeRecord, [{
	    key: 'toString',
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType(this.previousIndex === this.currentIndex ? (0, _angular2SrcFacadeLang.stringify)(this.item) : (0, _angular2SrcFacadeLang.stringify)(this.item) + '[' + (0, _angular2SrcFacadeLang.stringify)(this.previousIndex) + '->' + (0, _angular2SrcFacadeLang.stringify)(this.currentIndex) + ']', _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return CollectionChangeRecord;
	})();
	
	exports.CollectionChangeRecord = CollectionChangeRecord;
	
	var _DuplicateItemRecordList = (function () {
	  function _DuplicateItemRecordList() {
	    _classCallCheck(this, _DuplicateItemRecordList);
	
	    this._head = null;
	    this._tail = null;
	  }
	
	  _createClass(_DuplicateItemRecordList, [{
	    key: 'add',
	    value: function add(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord);
	      if (this._head === null) {
	        this._head = this._tail = record;
	        record._nextDup = null;
	        record._prevDup = null;
	      } else {
	        this._tail._nextDup = record;
	        record._prevDup = this._tail;
	        record._nextDup = null;
	        this._tail = record;
	      }
	    }
	  }, {
	    key: 'get',
	    value: function get(item, afterIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(item, _rtts_assertRtts_assert.assert.type.any, afterIndex, _angular2SrcFacadeLang.int);
	      var record;
	      for (record = this._head; record !== null; record = record._nextDup) {
	        if ((afterIndex === null || afterIndex < record.currentIndex) && (0, _angular2SrcFacadeLang.looseIdentical)(record.item, item)) {
	          return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(null, CollectionChangeRecord);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord);
	      var prev = _rtts_assertRtts_assert.assert.type(record._prevDup, CollectionChangeRecord);
	      var next = _rtts_assertRtts_assert.assert.type(record._nextDup, CollectionChangeRecord);
	      if (prev === null) {
	        this._head = next;
	      } else {
	        prev._nextDup = next;
	      }
	      if (next === null) {
	        this._tail = prev;
	      } else {
	        next._prevDup = prev;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(this._head === null, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return _DuplicateItemRecordList;
	})();
	
	Object.defineProperty(_DuplicateItemRecordList.prototype.add, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(_DuplicateItemRecordList.prototype.get, 'parameters', { get: function get() {
	    return [[], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(_DuplicateItemRecordList.prototype.remove, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	
	var _DuplicateMap = (function () {
	  function _DuplicateMap() {
	    _classCallCheck(this, _DuplicateMap);
	
	    this.map = _angular2SrcFacadeCollection.MapWrapper.create();
	  }
	
	  _createClass(_DuplicateMap, [{
	    key: 'put',
	    value: function put(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord);
	      var key = (0, _angular2SrcFacadeLang.getMapKey)(record.item);
	      var duplicates = _angular2SrcFacadeCollection.MapWrapper.get(this.map, key);
	      if (!(0, _angular2SrcFacadeLang.isPresent)(duplicates)) {
	        duplicates = new _DuplicateItemRecordList();
	        _angular2SrcFacadeCollection.MapWrapper.set(this.map, key, duplicates);
	      }
	      duplicates.add(record);
	    }
	  }, {
	    key: 'get',
	    value: function get(value) {
	      var afterIndex = arguments[1] === undefined ? null : arguments[1];
	
	      var key = (0, _angular2SrcFacadeLang.getMapKey)(value);
	      var recordList = _angular2SrcFacadeCollection.MapWrapper.get(this.map, key);
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isBlank)(recordList) ? null : recordList.get(value, afterIndex), CollectionChangeRecord);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, CollectionChangeRecord);
	      var key = (0, _angular2SrcFacadeLang.getMapKey)(record.item);
	      var recordList = _rtts_assertRtts_assert.assert.type(_angular2SrcFacadeCollection.MapWrapper.get(this.map, key), _DuplicateItemRecordList);
	      if (recordList.remove(record)) {
	        _angular2SrcFacadeCollection.MapWrapper['delete'](this.map, key);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(record, CollectionChangeRecord);
	    }
	  }, {
	    key: 'isEmpty',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.size(this.map) === 0, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'clear',
	    value: function clear() {
	      _angular2SrcFacadeCollection.MapWrapper.clear(this.map);
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType('_DuplicateMap(' + (0, _angular2SrcFacadeLang.stringify)(this.map) + ')', _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return _DuplicateMap;
	})();
	
	Object.defineProperty(_DuplicateMap.prototype.put, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	Object.defineProperty(_DuplicateMap.prototype.remove, 'parameters', { get: function get() {
	    return [[CollectionChangeRecord]];
	  } });
	//# sourceMappingURL=iterable_changes.js.map

	//# sourceMappingURL=./iterable_changes.map

/***/ },
/* 139 */
/*!****************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/pipes/keyvalue_changes.es6 ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _pipe = __webpack_require__(/*! ./pipe */ 129);
	
	var KeyValueChangesFactory = (function () {
	  function KeyValueChangesFactory() {
	    _classCallCheck(this, KeyValueChangesFactory);
	  }
	
	  _createClass(KeyValueChangesFactory, [{
	    key: 'supports',
	    value: function supports(obj) {
	      return _rtts_assertRtts_assert.assert.returnType(KeyValueChanges.supportsObj(obj), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'create',
	    value: function create(cdRef) {
	      return _rtts_assertRtts_assert.assert.returnType(new KeyValueChanges(), _pipe.Pipe);
	    }
	  }]);
	
	  return KeyValueChangesFactory;
	})();
	
	exports.KeyValueChangesFactory = KeyValueChangesFactory;
	
	var KeyValueChanges = (function (_Pipe) {
	  function KeyValueChanges() {
	    _classCallCheck(this, KeyValueChanges);
	
	    _get(Object.getPrototypeOf(KeyValueChanges.prototype), 'constructor', this).call(this);
	    this._records = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._mapHead = null;
	    this._previousMapHead = null;
	    this._changesHead = null;
	    this._changesTail = null;
	    this._additionsHead = null;
	    this._additionsTail = null;
	    this._removalsHead = null;
	    this._removalsTail = null;
	  }
	
	  _inherits(KeyValueChanges, _Pipe);
	
	  _createClass(KeyValueChanges, [{
	    key: 'supports',
	    value: function supports(obj) {
	      return _rtts_assertRtts_assert.assert.returnType(KeyValueChanges.supportsObj(obj), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'transform',
	    value: function transform(map) {
	      if (this.check(map)) {
	        return this;
	      } else {
	        return _pipe.NO_CHANGE;
	      }
	    }
	  }, {
	    key: 'isDirty',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType(this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'forEachItem',
	    value: function forEachItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._mapHead; record !== null; record = record._next) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'forEachPreviousItem',
	    value: function forEachPreviousItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'forEachChangedItem',
	    value: function forEachChangedItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._changesHead; record !== null; record = record._nextChanged) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'forEachAddedItem',
	    value: function forEachAddedItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'forEachRemovedItem',
	    value: function forEachRemovedItem(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      var record;
	      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	        fn(record);
	      }
	    }
	  }, {
	    key: 'check',
	    value: function check(map) {
	      var _this = this;
	
	      this._reset();
	      var records = this._records;
	      var oldSeqRecord = _rtts_assertRtts_assert.assert.type(this._mapHead, KVChangeRecord);
	      var lastOldSeqRecord = _rtts_assertRtts_assert.assert.type(null, KVChangeRecord);
	      var lastNewSeqRecord = _rtts_assertRtts_assert.assert.type(null, KVChangeRecord);
	      var seqChanged = _rtts_assertRtts_assert.assert.type(false, _rtts_assertRtts_assert.assert.type.boolean);
	      this._forEach(map, function (value, key) {
	        var newSeqRecord;
	        if (oldSeqRecord !== null && key === oldSeqRecord.key) {
	          newSeqRecord = oldSeqRecord;
	          if (!(0, _angular2SrcFacadeLang.looseIdentical)(value, oldSeqRecord.currentValue)) {
	            oldSeqRecord.previousValue = oldSeqRecord.currentValue;
	            oldSeqRecord.currentValue = value;
	            _this._addToChanges(oldSeqRecord);
	          }
	        } else {
	          seqChanged = true;
	          if (oldSeqRecord !== null) {
	            oldSeqRecord._next = null;
	            _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	            _this._addToRemovals(oldSeqRecord);
	          }
	          if (_angular2SrcFacadeCollection.MapWrapper.contains(records, key)) {
	            newSeqRecord = _angular2SrcFacadeCollection.MapWrapper.get(records, key);
	          } else {
	            newSeqRecord = new KVChangeRecord(key);
	            _angular2SrcFacadeCollection.MapWrapper.set(records, key, newSeqRecord);
	            newSeqRecord.currentValue = value;
	            _this._addToAdditions(newSeqRecord);
	          }
	        }
	        if (seqChanged) {
	          if (_this._isInRemovals(newSeqRecord)) {
	            _this._removeFromRemovals(newSeqRecord);
	          }
	          if (lastNewSeqRecord == null) {
	            _this._mapHead = newSeqRecord;
	          } else {
	            lastNewSeqRecord._next = newSeqRecord;
	          }
	        }
	        lastOldSeqRecord = oldSeqRecord;
	        lastNewSeqRecord = newSeqRecord;
	        oldSeqRecord = oldSeqRecord === null ? null : oldSeqRecord._next;
	      });
	      this._truncate(lastOldSeqRecord, oldSeqRecord);
	      return _rtts_assertRtts_assert.assert.returnType(this.isDirty, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: '_reset',
	    value: function _reset() {
	      if (this.isDirty) {
	        var record;
	        for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	          record._nextPrevious = record._next;
	        }
	        for (record = this._changesHead; record !== null; record = record._nextChanged) {
	          record.previousValue = record.currentValue;
	        }
	        for (record = this._additionsHead; record != null; record = record._nextAdded) {
	          record.previousValue = record.currentValue;
	        }
	        this._changesHead = this._changesTail = null;
	        this._additionsHead = this._additionsTail = null;
	        this._removalsHead = this._removalsTail = null;
	      }
	    }
	  }, {
	    key: '_truncate',
	    value: function _truncate(lastRecord, record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(lastRecord, KVChangeRecord, record, KVChangeRecord);
	      while (record !== null) {
	        if (lastRecord === null) {
	          this._mapHead = null;
	        } else {
	          lastRecord._next = null;
	        }
	        var nextRecord = record._next;
	        this._addToRemovals(record);
	        lastRecord = record;
	        record = nextRecord;
	      }
	      for (var rec = _rtts_assertRtts_assert.assert.type(this._removalsHead, KVChangeRecord); rec !== null; rec = rec._nextRemoved) {
	        rec.previousValue = rec.currentValue;
	        rec.currentValue = null;
	        _angular2SrcFacadeCollection.MapWrapper['delete'](this._records, rec.key);
	      }
	    }
	  }, {
	    key: '_isInRemovals',
	    value: function _isInRemovals(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, KVChangeRecord);
	      return record === this._removalsHead || record._nextRemoved !== null || record._prevRemoved !== null;
	    }
	  }, {
	    key: '_addToRemovals',
	    value: function _addToRemovals(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, KVChangeRecord);
	      if (this._removalsHead === null) {
	        this._removalsHead = this._removalsTail = record;
	      } else {
	        this._removalsTail._nextRemoved = record;
	        record._prevRemoved = this._removalsTail;
	        this._removalsTail = record;
	      }
	    }
	  }, {
	    key: '_removeFromSeq',
	    value: function _removeFromSeq(prev, record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(prev, KVChangeRecord, record, KVChangeRecord);
	      var next = record._next;
	      if (prev === null) {
	        this._mapHead = next;
	      } else {
	        prev._next = next;
	      }
	    }
	  }, {
	    key: '_removeFromRemovals',
	    value: function _removeFromRemovals(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, KVChangeRecord);
	      var prev = record._prevRemoved;
	      var next = record._nextRemoved;
	      if (prev === null) {
	        this._removalsHead = next;
	      } else {
	        prev._nextRemoved = next;
	      }
	      if (next === null) {
	        this._removalsTail = prev;
	      } else {
	        next._prevRemoved = prev;
	      }
	      record._prevRemoved = record._nextRemoved = null;
	    }
	  }, {
	    key: '_addToAdditions',
	    value: function _addToAdditions(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, KVChangeRecord);
	      if (this._additionsHead === null) {
	        this._additionsHead = this._additionsTail = record;
	      } else {
	        this._additionsTail._nextAdded = record;
	        this._additionsTail = record;
	      }
	    }
	  }, {
	    key: '_addToChanges',
	    value: function _addToChanges(record) {
	      _rtts_assertRtts_assert.assert.argumentTypes(record, KVChangeRecord);
	      if (this._changesHead === null) {
	        this._changesHead = this._changesTail = record;
	      } else {
	        this._changesTail._nextChanged = record;
	        this._changesTail = record;
	      }
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var items = [];
	      var previous = [];
	      var changes = [];
	      var additions = [];
	      var removals = [];
	      var record;
	      for (record = this._mapHead; record !== null; record = record._next) {
	        _angular2SrcFacadeCollection.ListWrapper.push(items, (0, _angular2SrcFacadeLang.stringify)(record));
	      }
	      for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	        _angular2SrcFacadeCollection.ListWrapper.push(previous, (0, _angular2SrcFacadeLang.stringify)(record));
	      }
	      for (record = this._changesHead; record !== null; record = record._nextChanged) {
	        _angular2SrcFacadeCollection.ListWrapper.push(changes, (0, _angular2SrcFacadeLang.stringify)(record));
	      }
	      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	        _angular2SrcFacadeCollection.ListWrapper.push(additions, (0, _angular2SrcFacadeLang.stringify)(record));
	      }
	      for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	        _angular2SrcFacadeCollection.ListWrapper.push(removals, (0, _angular2SrcFacadeLang.stringify)(record));
	      }
	      return _rtts_assertRtts_assert.assert.returnType('map: ' + items.join(', ') + '\n' + 'previous: ' + previous.join(', ') + '\n' + 'additions: ' + additions.join(', ') + '\n' + 'changes: ' + changes.join(', ') + '\n' + 'removals: ' + removals.join(', ') + '\n', _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_forEach',
	    value: function _forEach(obj, fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(obj, _rtts_assertRtts_assert.assert.type.any, fn, Function);
	      if (obj instanceof Map) {
	        _angular2SrcFacadeCollection.MapWrapper.forEach(obj, fn);
	      } else {
	        _angular2SrcFacadeCollection.StringMapWrapper.forEach(obj, fn);
	      }
	    }
	  }], [{
	    key: 'supportsObj',
	    value: function supportsObj(obj) {
	      return _rtts_assertRtts_assert.assert.returnType(obj instanceof Map || (0, _angular2SrcFacadeLang.isJsObject)(obj), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return KeyValueChanges;
	})(_pipe.Pipe);
	
	exports.KeyValueChanges = KeyValueChanges;
	
	Object.defineProperty(KeyValueChanges.prototype.forEachItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype.forEachPreviousItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype.forEachChangedItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype.forEachAddedItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype.forEachRemovedItem, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._truncate, 'parameters', { get: function get() {
	    return [[KVChangeRecord], [KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._isInRemovals, 'parameters', { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._addToRemovals, 'parameters', { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._removeFromSeq, 'parameters', { get: function get() {
	    return [[KVChangeRecord], [KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._removeFromRemovals, 'parameters', { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._addToAdditions, 'parameters', { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._addToChanges, 'parameters', { get: function get() {
	    return [[KVChangeRecord]];
	  } });
	Object.defineProperty(KeyValueChanges.prototype._forEach, 'parameters', { get: function get() {
	    return [[], [Function]];
	  } });
	
	var KVChangeRecord = (function () {
	  function KVChangeRecord(key) {
	    _classCallCheck(this, KVChangeRecord);
	
	    this.key = key;
	    this.previousValue = null;
	    this.currentValue = null;
	    this._nextPrevious = null;
	    this._next = null;
	    this._nextAdded = null;
	    this._nextRemoved = null;
	    this._prevRemoved = null;
	    this._nextChanged = null;
	  }
	
	  _createClass(KVChangeRecord, [{
	    key: 'toString',
	    value: function toString() {
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.looseIdentical)(this.previousValue, this.currentValue) ? (0, _angular2SrcFacadeLang.stringify)(this.key) : (0, _angular2SrcFacadeLang.stringify)(this.key) + '[' + (0, _angular2SrcFacadeLang.stringify)(this.previousValue) + '->' + (0, _angular2SrcFacadeLang.stringify)(this.currentValue) + ']', _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return KVChangeRecord;
	})();
	
	exports.KVChangeRecord = KVChangeRecord;
	
	//# sourceMappingURL=keyvalue_changes.js.map

	//# sourceMappingURL=./keyvalue_changes.map

/***/ },
/* 140 */
/*!*********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/change_detection/pipes/null_pipe.es6 ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _pipe = __webpack_require__(/*! ./pipe */ 129);
	
	var NullPipeFactory = (function () {
	  function NullPipeFactory() {
	    _classCallCheck(this, NullPipeFactory);
	  }
	
	  _createClass(NullPipeFactory, [{
	    key: 'supports',
	    value: function supports(obj) {
	      return _rtts_assertRtts_assert.assert.returnType(NullPipe.supportsObj(obj), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'create',
	    value: function create(cdRef) {
	      return _rtts_assertRtts_assert.assert.returnType(new NullPipe(), _pipe.Pipe);
	    }
	  }]);
	
	  return NullPipeFactory;
	})();
	
	exports.NullPipeFactory = NullPipeFactory;
	
	var NullPipe = (function (_Pipe) {
	  function NullPipe() {
	    _classCallCheck(this, NullPipe);
	
	    _get(Object.getPrototypeOf(NullPipe.prototype), 'constructor', this).call(this);
	    this.called = false;
	  }
	
	  _inherits(NullPipe, _Pipe);
	
	  _createClass(NullPipe, [{
	    key: 'supports',
	    value: function supports(obj) {
	      return NullPipe.supportsObj(obj);
	    }
	  }, {
	    key: 'transform',
	    value: function transform(value) {
	      if (!this.called) {
	        this.called = true;
	        return null;
	      } else {
	        return _pipe.NO_CHANGE;
	      }
	    }
	  }], [{
	    key: 'supportsObj',
	    value: function supportsObj(obj) {
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isBlank)(obj), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return NullPipe;
	})(_pipe.Pipe);
	
	exports.NullPipe = NullPipe;
	
	//# sourceMappingURL=null_pipe.js.map

	//# sourceMappingURL=./null_pipe.map

/***/ },
/* 141 */
/*!***************************************************************!*\
  !*** ./~/angular2/es6/dev/src/forms/validator_directives.es6 ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Angular2 = __webpack_require__(/*! angular2/angular2 */ 93);
	
	var _validators = __webpack_require__(/*! ./validators */ 102);
	
	var _directives = __webpack_require__(/*! ./directives */ 103);
	
	var RequiredValidatorDirective = function RequiredValidatorDirective(c) {
	  _classCallCheck(this, RequiredValidatorDirective);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(c, _directives.ControlDirective);
	  c.validator = _validators.Validators.compose([c.validator, _validators.Validators.required]);
	};
	
	exports.RequiredValidatorDirective = RequiredValidatorDirective;
	
	Object.defineProperty(RequiredValidatorDirective, 'annotations', { get: function get() {
	    return [new _angular2Angular2.Decorator({ selector: '[required]' })];
	  } });
	Object.defineProperty(RequiredValidatorDirective, 'parameters', { get: function get() {
	    return [[_directives.ControlDirective]];
	  } });
	//# sourceMappingURL=validator_directives.js.map

	//# sourceMappingURL=./validator_directives.map

/***/ },
/* 142 */
/*!*******************************************************!*\
  !*** ./~/angular2/es6/dev/src/forms/form_builder.es6 ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _model = __webpack_require__(/*! ./model */ 95);
	
	var modelModule = _interopRequireWildcard(_model);
	
	var FormBuilder = (function () {
	  function FormBuilder() {
	    _classCallCheck(this, FormBuilder);
	  }
	
	  _createClass(FormBuilder, [{
	    key: 'group',
	    value: function group(controlsConfig) {
	      var extra = arguments[1] === undefined ? null : arguments[1];
	
	      var controls = this._reduceControls(controlsConfig);
	      var optionals = (0, _angular2SrcFacadeLang.isPresent)(extra) ? _angular2SrcFacadeCollection.StringMapWrapper.get(extra, 'optionals') : null;
	      var validator = (0, _angular2SrcFacadeLang.isPresent)(extra) ? _angular2SrcFacadeCollection.StringMapWrapper.get(extra, 'validator') : null;
	      if ((0, _angular2SrcFacadeLang.isPresent)(validator)) {
	        return _rtts_assertRtts_assert.assert.returnType(new modelModule.ControlGroup(controls, optionals, validator), modelModule.ControlGroup);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(new modelModule.ControlGroup(controls, optionals), modelModule.ControlGroup);
	      }
	    }
	  }, {
	    key: 'control',
	    value: function control(value) {
	      var validator = arguments[1] === undefined ? null : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(value, _rtts_assertRtts_assert.assert.type.any, validator, Function);
	      if ((0, _angular2SrcFacadeLang.isPresent)(validator)) {
	        return _rtts_assertRtts_assert.assert.returnType(new modelModule.Control(value, validator), modelModule.Control);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(new modelModule.Control(value), modelModule.Control);
	      }
	    }
	  }, {
	    key: 'array',
	    value: function array(controlsConfig) {
	      var _this = this;
	
	      var validator = arguments[1] === undefined ? null : arguments[1];
	
	      var controls = _angular2SrcFacadeCollection.ListWrapper.map(controlsConfig, function (c) {
	        return _this._createControl(c);
	      });
	      if ((0, _angular2SrcFacadeLang.isPresent)(validator)) {
	        return _rtts_assertRtts_assert.assert.returnType(new modelModule.ControlArray(controls, validator), modelModule.ControlArray);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(new modelModule.ControlArray(controls), modelModule.ControlArray);
	      }
	    }
	  }, {
	    key: '_reduceControls',
	    value: function _reduceControls(controlsConfig) {
	      var _this2 = this;
	
	      var controls = {};
	      _angular2SrcFacadeCollection.StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {
	        controls[controlName] = _this2._createControl(controlConfig);
	      });
	      return controls;
	    }
	  }, {
	    key: '_createControl',
	    value: function _createControl(controlConfig) {
	      if (controlConfig instanceof modelModule.Control || controlConfig instanceof modelModule.ControlGroup || controlConfig instanceof modelModule.ControlArray) {
	        return controlConfig;
	      } else if (_angular2SrcFacadeCollection.ListWrapper.isList(controlConfig)) {
	        var value = _angular2SrcFacadeCollection.ListWrapper.get(controlConfig, 0);
	        var validator = controlConfig.length > 1 ? controlConfig[1] : null;
	        return this.control(value, validator);
	      } else {
	        return this.control(controlConfig);
	      }
	    }
	  }]);
	
	  return FormBuilder;
	})();
	
	exports.FormBuilder = FormBuilder;
	
	Object.defineProperty(FormBuilder.prototype.control, 'parameters', { get: function get() {
	    return [[], [Function]];
	  } });
	Object.defineProperty(FormBuilder.prototype.array, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List], [Function]];
	  } });
	//# sourceMappingURL=form_builder.js.map

	//# sourceMappingURL=./form_builder.map

/***/ },
/* 143 */
/*!*************************************!*\
  !*** ./~/angular2/es6/dev/core.es6 ***!
  \*************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	var _srcCoreAnnotationsVisibility = __webpack_require__(/*! ./src/core/annotations/visibility */ 153);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreAnnotationsVisibility));
	
	var _srcCoreCompilerInterfaces = __webpack_require__(/*! ./src/core/compiler/interfaces */ 154);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreCompilerInterfaces));
	
	var _srcCoreAnnotationsView = __webpack_require__(/*! ./src/core/annotations/view */ 155);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreAnnotationsView));
	
	var _srcCoreApplication = __webpack_require__(/*! ./src/core/application */ 156);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreApplication));
	
	var _srcCoreApplication_tokens = __webpack_require__(/*! ./src/core/application_tokens */ 214);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreApplication_tokens));
	
	var _srcCoreAnnotationsDi = __webpack_require__(/*! ./src/core/annotations/di */ 169);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreAnnotationsDi));
	
	var _srcCoreCompilerQuery_list = __webpack_require__(/*! ./src/core/compiler/query_list */ 195);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreCompilerQuery_list));
	
	var _srcCoreCompilerCompiler = __webpack_require__(/*! ./src/core/compiler/compiler */ 161);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreCompilerCompiler));
	
	var _srcRenderDomCompilerTemplate_loader = __webpack_require__(/*! ./src/render/dom/compiler/template_loader */ 183);
	
	_defaults(exports, _interopRequireWildcard(_srcRenderDomCompilerTemplate_loader));
	
	var _srcRenderDomShadow_domShadow_dom_strategy = __webpack_require__(/*! ./src/render/dom/shadow_dom/shadow_dom_strategy */ 144);
	
	_defaults(exports, _interopRequireWildcard(_srcRenderDomShadow_domShadow_dom_strategy));
	
	var _srcRenderDomShadow_domNative_shadow_dom_strategy = __webpack_require__(/*! ./src/render/dom/shadow_dom/native_shadow_dom_strategy */ 215);
	
	_defaults(exports, _interopRequireWildcard(_srcRenderDomShadow_domNative_shadow_dom_strategy));
	
	var _srcRenderDomShadow_domEmulated_scoped_shadow_dom_strategy = __webpack_require__(/*! ./src/render/dom/shadow_dom/emulated_scoped_shadow_dom_strategy */ 216);
	
	_defaults(exports, _interopRequireWildcard(_srcRenderDomShadow_domEmulated_scoped_shadow_dom_strategy));
	
	var _srcRenderDomShadow_domEmulated_unscoped_shadow_dom_strategy = __webpack_require__(/*! ./src/render/dom/shadow_dom/emulated_unscoped_shadow_dom_strategy */ 202);
	
	_defaults(exports, _interopRequireWildcard(_srcRenderDomShadow_domEmulated_unscoped_shadow_dom_strategy));
	
	var _srcCoreCompilerDynamic_component_loader = __webpack_require__(/*! ./src/core/compiler/dynamic_component_loader */ 211);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreCompilerDynamic_component_loader));
	
	var _srcCoreCompilerElement_injector = __webpack_require__(/*! ./src/core/compiler/element_injector */ 167);
	
	Object.defineProperty(exports, 'ElementRef', {
	  enumerable: true,
	  get: function get() {
	    return _srcCoreCompilerElement_injector.ElementRef;
	  }
	});
	Object.defineProperty(exports, 'ComponentRef', {
	  enumerable: true,
	  get: function get() {
	    return _srcCoreCompilerElement_injector.ComponentRef;
	  }
	});
	
	var _srcCoreCompilerView = __webpack_require__(/*! ./src/core/compiler/view */ 165);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreCompilerView));
	
	var _srcCoreCompilerView_container_ref = __webpack_require__(/*! ./src/core/compiler/view_container_ref */ 194);
	
	_defaults(exports, _interopRequireWildcard(_srcCoreCompilerView_container_ref));
	
	var _srcCoreCompilerNg_element = __webpack_require__(/*! ./src/core/compiler/ng_element */ 172);
	
	//# sourceMappingURL=core.js.map

	//# sourceMappingURL=./core.map

	_defaults(exports, _interopRequireWildcard(_srcCoreCompilerNg_element));

/***/ },
/* 144 */
/*!******************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/shadow_dom_strategy.es6 ***!
  \******************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _viewView = __webpack_require__(/*! ../view/view */ 145);
	
	var viewModule = _interopRequireWildcard(_viewView);
	
	var _light_dom = __webpack_require__(/*! ./light_dom */ 151);
	
	var ShadowDomStrategy = (function () {
	  function ShadowDomStrategy() {
	    _classCallCheck(this, ShadowDomStrategy);
	  }
	
	  _createClass(ShadowDomStrategy, [{
	    key: 'hasNativeContentElement',
	    value: function hasNativeContentElement() {
	      return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'attachTemplate',
	    value: function attachTemplate(el, view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, view, viewModule.RenderView);
	    }
	  }, {
	    key: 'constructLightDom',
	    value: function constructLightDom(lightDomView, shadowDomView, el) {
	      _rtts_assertRtts_assert.assert.argumentTypes(lightDomView, viewModule.RenderView, shadowDomView, viewModule.RenderView, el, _rtts_assertRtts_assert.assert.type.any);
	      return _rtts_assertRtts_assert.assert.returnType(null, _light_dom.LightDom);
	    }
	  }, {
	    key: 'processStyleElement',
	    value: function processStyleElement(hostComponentId, templateUrl, styleElement) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostComponentId, _rtts_assertRtts_assert.assert.type.string, templateUrl, _rtts_assertRtts_assert.assert.type.string, styleElement, _rtts_assertRtts_assert.assert.type.any);
	      return _rtts_assertRtts_assert.assert.returnType(null, _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: 'processElement',
	    value: function processElement(hostComponentId, elementComponentId, element) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostComponentId, _rtts_assertRtts_assert.assert.type.string, elementComponentId, _rtts_assertRtts_assert.assert.type.string, element, _rtts_assertRtts_assert.assert.type.any);
	    }
	  }]);
	
	  return ShadowDomStrategy;
	})();
	
	exports.ShadowDomStrategy = ShadowDomStrategy;
	
	Object.defineProperty(ShadowDomStrategy.prototype.attachTemplate, 'parameters', { get: function get() {
	    return [[], [viewModule.RenderView]];
	  } });
	Object.defineProperty(ShadowDomStrategy.prototype.constructLightDom, 'parameters', { get: function get() {
	    return [[viewModule.RenderView], [viewModule.RenderView], []];
	  } });
	Object.defineProperty(ShadowDomStrategy.prototype.processStyleElement, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(ShadowDomStrategy.prototype.processElement, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	//# sourceMappingURL=shadow_dom_strategy.js.map

	//# sourceMappingURL=./shadow_dom_strategy.map

/***/ },
/* 145 */
/*!*********************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/view/view.es6 ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _view_container = __webpack_require__(/*! ./view_container */ 146);
	
	var _proto_view = __webpack_require__(/*! ./proto_view */ 148);
	
	var _shadow_domLight_dom = __webpack_require__(/*! ../shadow_dom/light_dom */ 151);
	
	var _shadow_domContent_tag = __webpack_require__(/*! ../shadow_dom/content_tag */ 152);
	
	var NG_BINDING_CLASS = 'ng-binding';
	
	var RenderView = (function () {
	  function RenderView(proto, rootNodes, boundTextNodes, boundElements, contentTags) {
	    _classCallCheck(this, RenderView);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(proto, _proto_view.RenderProtoView, rootNodes, _angular2SrcFacadeCollection.List, boundTextNodes, _angular2SrcFacadeCollection.List, boundElements, _angular2SrcFacadeCollection.List, contentTags, _angular2SrcFacadeCollection.List);
	    this.proto = proto;
	    this.rootNodes = rootNodes;
	    this.boundTextNodes = boundTextNodes;
	    this.boundElements = boundElements;
	    this.viewContainers = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(boundElements.length);
	    this.contentTags = contentTags;
	    this.lightDoms = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(boundElements.length);
	    _angular2SrcFacadeCollection.ListWrapper.fill(this.lightDoms, null);
	    this.componentChildViews = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(boundElements.length);
	    this.hostLightDom = null;
	    this.hydrated = false;
	    this.eventHandlerRemovers = [];
	    this.imperativeHostViews = [];
	  }
	
	  _createClass(RenderView, [{
	    key: 'getDirectParentLightDom',
	    value: function getDirectParentLightDom(boundElementIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	      var binder = this.proto.elementBinders[boundElementIndex];
	      var destLightDom = null;
	      if (binder.parentIndex !== -1 && binder.distanceToParent === 1) {
	        destLightDom = this.lightDoms[binder.parentIndex];
	      }
	      return destLightDom;
	    }
	  }, {
	    key: 'getOrCreateViewContainer',
	    value: function getOrCreateViewContainer(binderIndex) {
	      var vc = this.viewContainers[binderIndex];
	      if ((0, _angular2SrcFacadeLang.isBlank)(vc)) {
	        vc = new _view_container.ViewContainer(this, binderIndex);
	        this.viewContainers[binderIndex] = vc;
	      }
	      return vc;
	    }
	  }, {
	    key: 'setElementProperty',
	    value: function setElementProperty(elementIndex, propertyName, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(elementIndex, _rtts_assertRtts_assert.assert.type.number, propertyName, _rtts_assertRtts_assert.assert.type.string, value, _rtts_assertRtts_assert.assert.type.any);
	      var setter = _angular2SrcFacadeCollection.MapWrapper.get(this.proto.elementBinders[elementIndex].propertySetters, propertyName);
	      setter(this.boundElements[elementIndex], value);
	    }
	  }, {
	    key: 'setText',
	    value: function setText(textIndex, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(textIndex, _rtts_assertRtts_assert.assert.type.number, value, _rtts_assertRtts_assert.assert.type.string);
	      _angular2SrcDomDom_adapter.DOM.setText(this.boundTextNodes[textIndex], value);
	    }
	  }, {
	    key: 'getViewContainer',
	    value: function getViewContainer(index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(index, _rtts_assertRtts_assert.assert.type.number);
	      return _rtts_assertRtts_assert.assert.returnType(this.viewContainers[index], _view_container.ViewContainer);
	    }
	  }, {
	    key: 'setEventDispatcher',
	    value: function setEventDispatcher(dispatcher) {
	      _rtts_assertRtts_assert.assert.argumentTypes(dispatcher, _rtts_assertRtts_assert.assert.type.any);
	      this._eventDispatcher = dispatcher;
	    }
	  }, {
	    key: 'dispatchEvent',
	    value: function dispatchEvent(elementIndex, eventName, event) {
	      var allowDefaultBehavior = true;
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._eventDispatcher)) {
	        var evalLocals = _angular2SrcFacadeCollection.MapWrapper.create();
	        _angular2SrcFacadeCollection.MapWrapper.set(evalLocals, '$event', event);
	        allowDefaultBehavior = this._eventDispatcher.dispatchEvent(elementIndex, eventName, evalLocals);
	        if (!allowDefaultBehavior) {
	          event.preventDefault();
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(allowDefaultBehavior, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return RenderView;
	})();
	
	exports.RenderView = RenderView;
	
	Object.defineProperty(RenderView, 'parameters', { get: function get() {
	    return [[_proto_view.RenderProtoView], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(RenderView.prototype.getDirectParentLightDom, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(RenderView.prototype.setElementProperty, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(RenderView.prototype.setText, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(RenderView.prototype.getViewContainer, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(RenderView.prototype.setEventDispatcher, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	//# sourceMappingURL=view.js.map

	//# sourceMappingURL=./view.map

/***/ },
/* 146 */
/*!*******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/view/view_container.es6 ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _view = __webpack_require__(/*! ./view */ 145);
	
	var viewModule = _interopRequireWildcard(_view);
	
	var ViewContainer = (function () {
	  function ViewContainer(parentView, boundElementIndex) {
	    _classCallCheck(this, ViewContainer);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parentView, viewModule.RenderView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	    this.parentView = parentView;
	    this.boundElementIndex = boundElementIndex;
	    this.views = [];
	  }
	
	  _createClass(ViewContainer, [{
	    key: 'get',
	    value: function get(index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(index, _rtts_assertRtts_assert.assert.type.number);
	      return _rtts_assertRtts_assert.assert.returnType(this.views[index], viewModule.RenderView);
	    }
	  }, {
	    key: 'size',
	    value: function size() {
	      return this.views.length;
	    }
	  }, {
	    key: '_siblingToInsertAfter',
	    value: function _siblingToInsertAfter(index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(index, _rtts_assertRtts_assert.assert.type.number);
	      if (index == 0) return this.parentView.boundElements[this.boundElementIndex];
	      return _angular2SrcFacadeCollection.ListWrapper.last(this.views[index - 1].rootNodes);
	    }
	  }, {
	    key: '_checkHydrated',
	    value: function _checkHydrated() {
	      if (!this.parentView.hydrated) throw new _angular2SrcFacadeLang.BaseException('Cannot change dehydrated ViewContainer');
	    }
	  }, {
	    key: '_getDirectParentLightDom',
	    value: function _getDirectParentLightDom() {
	      return this.parentView.getDirectParentLightDom(this.boundElementIndex);
	    }
	  }, {
	    key: 'clear',
	    value: function clear() {
	      this._checkHydrated();
	      for (var i = this.views.length - 1; i >= 0; i--) {
	        this.detach(i);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._getDirectParentLightDom())) {
	        this._getDirectParentLightDom().redistribute();
	      }
	    }
	  }, {
	    key: 'insert',
	    value: function insert(view) {
	      var atIndex = arguments[1] === undefined ? -1 : arguments[1];
	
	      this._checkHydrated();
	      if (atIndex == -1) atIndex = this.views.length;
	      _angular2SrcFacadeCollection.ListWrapper.insert(this.views, atIndex, view);
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._getDirectParentLightDom())) {
	        ViewContainer.moveViewNodesAfterSibling(this._siblingToInsertAfter(atIndex), view);
	      } else {
	        this._getDirectParentLightDom().redistribute();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parentView.hostLightDom)) {
	        this.parentView.hostLightDom.redistribute();
	      }
	      return _rtts_assertRtts_assert.assert.returnType(view, viewModule.RenderView);
	    }
	  }, {
	    key: 'detach',
	    value: function detach(atIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(atIndex, _rtts_assertRtts_assert.assert.type.number);
	      this._checkHydrated();
	      var detachedView = this.get(atIndex);
	      _angular2SrcFacadeCollection.ListWrapper.removeAt(this.views, atIndex);
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._getDirectParentLightDom())) {
	        ViewContainer.removeViewNodes(detachedView);
	      } else {
	        this._getDirectParentLightDom().redistribute();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parentView.hostLightDom)) {
	        this.parentView.hostLightDom.redistribute();
	      }
	      return detachedView;
	    }
	  }, {
	    key: 'contentTagContainers',
	    value: function contentTagContainers() {
	      return this.views;
	    }
	  }, {
	    key: 'nodes',
	    value: function nodes() {
	      var r = [];
	      for (var i = 0; i < this.views.length; ++i) {
	        r = _angular2SrcFacadeCollection.ListWrapper.concat(r, this.views[i].rootNodes);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(r, _angular2SrcFacadeCollection.List);
	    }
	  }], [{
	    key: 'moveViewNodesAfterSibling',
	    value: function moveViewNodesAfterSibling(sibling, view) {
	      for (var i = view.rootNodes.length - 1; i >= 0; --i) {
	        _angular2SrcDomDom_adapter.DOM.insertAfter(sibling, view.rootNodes[i]);
	      }
	    }
	  }, {
	    key: 'removeViewNodes',
	    value: function removeViewNodes(view) {
	      var len = view.rootNodes.length;
	      if (len == 0) return;
	      var parent = view.rootNodes[0].parentNode;
	      for (var i = len - 1; i >= 0; --i) {
	        _angular2SrcDomDom_adapter.DOM.removeChild(parent, view.rootNodes[i]);
	      }
	    }
	  }]);
	
	  return ViewContainer;
	})();
	
	exports.ViewContainer = ViewContainer;
	
	Object.defineProperty(ViewContainer, 'parameters', { get: function get() {
	    return [[viewModule.RenderView], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(ViewContainer.prototype.get, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(ViewContainer.prototype._siblingToInsertAfter, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(ViewContainer.prototype.detach, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	//# sourceMappingURL=view_container.js.map

	//# sourceMappingURL=./view_container.map

/***/ },
/* 147 */
/*!****************************************************!*\
  !*** ./~/angular2/es6/dev/src/dom/dom_adapter.es6 ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	exports.setRootDomAdapter = setRootDomAdapter;
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var DOM;
	exports.DOM = DOM;
	
	function setRootDomAdapter(adapter) {
	  _rtts_assertRtts_assert.assert.argumentTypes(adapter, DomAdapter);
	  exports.DOM = DOM = adapter;
	}
	
	Object.defineProperty(setRootDomAdapter, "parameters", { get: function get() {
	    return [[DomAdapter]];
	  } });
	function _abstract() {
	  return new _angular2SrcFacadeLang.BaseException("This method is abstract");
	}
	
	var DomAdapter = (function () {
	  function DomAdapter() {
	    _classCallCheck(this, DomAdapter);
	  }
	
	  _createClass(DomAdapter, [{
	    key: "attrToPropMap",
	    get: function () {
	      throw _abstract();
	    }
	  }, {
	    key: "parse",
	    value: function parse(templateHtml) {
	      _rtts_assertRtts_assert.assert.argumentTypes(templateHtml, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "query",
	    value: function query(selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(selector, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "querySelector",
	    value: function querySelector(el, selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, selector, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "querySelectorAll",
	    value: function querySelectorAll(el, selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, selector, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "on",
	    value: function on(el, evt, listener) {
	      throw _abstract();
	    }
	  }, {
	    key: "onAndCancel",
	    value: function onAndCancel(el, evt, listener) {
	      throw _abstract();
	    }
	  }, {
	    key: "dispatchEvent",
	    value: function dispatchEvent(el, evt) {
	      throw _abstract();
	    }
	  }, {
	    key: "createMouseEvent",
	    value: function createMouseEvent(eventType) {
	      throw _abstract();
	    }
	  }, {
	    key: "createEvent",
	    value: function createEvent(eventType) {
	      throw _abstract();
	    }
	  }, {
	    key: "getInnerHTML",
	    value: function getInnerHTML(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "getOuterHTML",
	    value: function getOuterHTML(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "nodeName",
	    value: function nodeName(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "nodeValue",
	    value: function nodeValue(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "type",
	    value: function type(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "content",
	    value: function content(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "firstChild",
	    value: function firstChild(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "nextSibling",
	    value: function nextSibling(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "parentElement",
	    value: function parentElement(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "childNodes",
	    value: function childNodes(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "childNodesAsList",
	    value: function childNodesAsList(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "clearNodes",
	    value: function clearNodes(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "appendChild",
	    value: function appendChild(el, node) {
	      throw _abstract();
	    }
	  }, {
	    key: "removeChild",
	    value: function removeChild(el, node) {
	      throw _abstract();
	    }
	  }, {
	    key: "replaceChild",
	    value: function replaceChild(el, newNode, oldNode) {
	      throw _abstract();
	    }
	  }, {
	    key: "remove",
	    value: function remove(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "insertBefore",
	    value: function insertBefore(el, node) {
	      throw _abstract();
	    }
	  }, {
	    key: "insertAllBefore",
	    value: function insertAllBefore(el, nodes) {
	      throw _abstract();
	    }
	  }, {
	    key: "insertAfter",
	    value: function insertAfter(el, node) {
	      throw _abstract();
	    }
	  }, {
	    key: "setInnerHTML",
	    value: function setInnerHTML(el, value) {
	      throw _abstract();
	    }
	  }, {
	    key: "getText",
	    value: function getText(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "setText",
	    value: function setText(el, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, value, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "getValue",
	    value: function getValue(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "setValue",
	    value: function setValue(el, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, value, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "getChecked",
	    value: function getChecked(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "setChecked",
	    value: function setChecked(el, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, value, _rtts_assertRtts_assert.assert.type.boolean);
	      throw _abstract();
	    }
	  }, {
	    key: "createTemplate",
	    value: function createTemplate(html) {
	      throw _abstract();
	    }
	  }, {
	    key: "createElement",
	    value: function createElement(tagName) {
	      var doc = arguments[1] === undefined ? null : arguments[1];
	
	      throw _abstract();
	    }
	  }, {
	    key: "createTextNode",
	    value: function createTextNode(text) {
	      var doc = arguments[1] === undefined ? null : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(text, _rtts_assertRtts_assert.assert.type.string, doc, _rtts_assertRtts_assert.assert.type.any);
	      throw _abstract();
	    }
	  }, {
	    key: "createScriptTag",
	    value: function createScriptTag(attrName, attrValue) {
	      var doc = arguments[2] === undefined ? null : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(attrName, _rtts_assertRtts_assert.assert.type.string, attrValue, _rtts_assertRtts_assert.assert.type.string, doc, _rtts_assertRtts_assert.assert.type.any);
	      throw _abstract();
	    }
	  }, {
	    key: "createStyleElement",
	    value: function createStyleElement(css) {
	      var doc = arguments[1] === undefined ? null : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(css, _rtts_assertRtts_assert.assert.type.string, doc, _rtts_assertRtts_assert.assert.type.any);
	      throw _abstract();
	    }
	  }, {
	    key: "createShadowRoot",
	    value: function createShadowRoot(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "getShadowRoot",
	    value: function getShadowRoot(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "getHost",
	    value: function getHost(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "getDistributedNodes",
	    value: function getDistributedNodes(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "clone",
	    value: function clone(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "hasProperty",
	    value: function hasProperty(element, name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, name, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "getElementsByClassName",
	    value: function getElementsByClassName(element, name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, name, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "getElementsByTagName",
	    value: function getElementsByTagName(element, name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, name, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "classList",
	    value: function classList(element) {
	      throw _abstract();
	    }
	  }, {
	    key: "addClass",
	    value: function addClass(element, classname) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, classname, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "removeClass",
	    value: function removeClass(element, classname) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, classname, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "hasClass",
	    value: function hasClass(element, classname) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, classname, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "setStyle",
	    value: function setStyle(element, stylename, stylevalue) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, stylename, _rtts_assertRtts_assert.assert.type.string, stylevalue, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "removeStyle",
	    value: function removeStyle(element, stylename) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, stylename, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "getStyle",
	    value: function getStyle(element, stylename) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, stylename, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "tagName",
	    value: function tagName(element) {
	      throw _abstract();
	    }
	  }, {
	    key: "attributeMap",
	    value: function attributeMap(element) {
	      throw _abstract();
	    }
	  }, {
	    key: "getAttribute",
	    value: function getAttribute(element, attribute) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, attribute, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "setAttribute",
	    value: function setAttribute(element, name, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, name, _rtts_assertRtts_assert.assert.type.string, value, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "removeAttribute",
	    value: function removeAttribute(element, attribute) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, attribute, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "templateAwareRoot",
	    value: function templateAwareRoot(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "createHtmlDocument",
	    value: function createHtmlDocument() {
	      throw _abstract();
	    }
	  }, {
	    key: "defaultDoc",
	    value: function defaultDoc() {
	      throw _abstract();
	    }
	  }, {
	    key: "getBoundingClientRect",
	    value: function getBoundingClientRect(el) {
	      throw _abstract();
	    }
	  }, {
	    key: "getTitle",
	    value: function getTitle() {
	      throw _abstract();
	    }
	  }, {
	    key: "setTitle",
	    value: function setTitle(newTitle) {
	      _rtts_assertRtts_assert.assert.argumentTypes(newTitle, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "elementMatches",
	    value: function elementMatches(n, selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(n, _rtts_assertRtts_assert.assert.type.any, selector, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "isTemplateElement",
	    value: function isTemplateElement(el) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any);
	      throw _abstract();
	    }
	  }, {
	    key: "isTextNode",
	    value: function isTextNode(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "isCommentNode",
	    value: function isCommentNode(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "isElementNode",
	    value: function isElementNode(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "hasShadowRoot",
	    value: function hasShadowRoot(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "isShadowRoot",
	    value: function isShadowRoot(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "importIntoDoc",
	    value: function importIntoDoc(node) {
	      throw _abstract();
	    }
	  }, {
	    key: "isPageRule",
	    value: function isPageRule(rule) {
	      throw _abstract();
	    }
	  }, {
	    key: "isStyleRule",
	    value: function isStyleRule(rule) {
	      throw _abstract();
	    }
	  }, {
	    key: "isMediaRule",
	    value: function isMediaRule(rule) {
	      throw _abstract();
	    }
	  }, {
	    key: "isKeyframesRule",
	    value: function isKeyframesRule(rule) {
	      throw _abstract();
	    }
	  }, {
	    key: "getHref",
	    value: function getHref(element) {
	      throw _abstract();
	    }
	  }, {
	    key: "getEventKey",
	    value: function getEventKey(event) {
	      throw _abstract();
	    }
	  }, {
	    key: "resolveAndSetHref",
	    value: function resolveAndSetHref(element, baseUrl, href) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, baseUrl, _rtts_assertRtts_assert.assert.type.string, href, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "cssToRules",
	    value: function cssToRules(css) {
	      _rtts_assertRtts_assert.assert.argumentTypes(css, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }, {
	    key: "supportsDOMEvents",
	    value: function supportsDOMEvents() {
	      throw _abstract();
	    }
	  }, {
	    key: "supportsNativeShadowDOM",
	    value: function supportsNativeShadowDOM() {
	      throw _abstract();
	    }
	  }, {
	    key: "getGlobalEventTarget",
	    value: function getGlobalEventTarget(target) {
	      _rtts_assertRtts_assert.assert.argumentTypes(target, _rtts_assertRtts_assert.assert.type.string);
	      throw _abstract();
	    }
	  }]);
	
	  return DomAdapter;
	})();
	
	exports.DomAdapter = DomAdapter;
	
	Object.defineProperty(DomAdapter, "annotations", { get: function get() {
	    return [new _angular2SrcFacadeLang.ABSTRACT()];
	  } });
	Object.defineProperty(DomAdapter.prototype.parse, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.query, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.querySelector, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.querySelectorAll, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setText, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setValue, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setChecked, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(DomAdapter.prototype.createTextNode, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(DomAdapter.prototype.createScriptTag, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(DomAdapter.prototype.createStyleElement, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(DomAdapter.prototype.hasProperty, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.getElementsByClassName, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.getElementsByTagName, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.addClass, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.removeClass, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.hasClass, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setStyle, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.removeStyle, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.getStyle, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.getAttribute, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setAttribute, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.removeAttribute, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.setTitle, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.elementMatches, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.isTemplateElement, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(DomAdapter.prototype.resolveAndSetHref, "parameters", { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.cssToRules, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomAdapter.prototype.getGlobalEventTarget, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=dom_adapter.js.map

	//# sourceMappingURL=./dom_adapter.map

/***/ },
/* 148 */
/*!***************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/view/proto_view.es6 ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _element_binder = __webpack_require__(/*! ./element_binder */ 149);
	
	var _util = __webpack_require__(/*! ../util */ 150);
	
	var RenderProtoView = (function () {
	  function RenderProtoView(_ref) {
	    var elementBinders = _ref.elementBinders;
	    var element = _ref.element;
	    var imperativeRendererId = _ref.imperativeRendererId;
	
	    _classCallCheck(this, RenderProtoView);
	
	    this.element = element;
	    this.elementBinders = elementBinders;
	    this.imperativeRendererId = imperativeRendererId;
	    if ((0, _angular2SrcFacadeLang.isPresent)(imperativeRendererId)) {
	      this.rootBindingOffset = 0;
	      this.isTemplateElement = false;
	    } else {
	      this.isTemplateElement = _angular2SrcDomDom_adapter.DOM.isTemplateElement(this.element);
	      this.rootBindingOffset = (0, _angular2SrcFacadeLang.isPresent)(this.element) && _angular2SrcDomDom_adapter.DOM.hasClass(this.element, _util.NG_BINDING_CLASS) ? 1 : 0;
	    }
	  }
	
	  _createClass(RenderProtoView, [{
	    key: 'mergeChildComponentProtoViews',
	    value: function mergeChildComponentProtoViews(componentProtoViews) {
	      _rtts_assertRtts_assert.assert.argumentTypes(componentProtoViews, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, RenderProtoView));
	      var componentProtoViewIndex = 0;
	      for (var i = 0; i < this.elementBinders.length; i++) {
	        var eb = this.elementBinders[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(eb.componentId)) {
	          eb.nestedProtoView = componentProtoViews[componentProtoViewIndex];
	          componentProtoViewIndex++;
	        }
	      }
	    }
	  }]);
	
	  return RenderProtoView;
	})();
	
	exports.RenderProtoView = RenderProtoView;
	
	Object.defineProperty(RenderProtoView.prototype.mergeChildComponentProtoViews, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, RenderProtoView)]];
	  } });
	//# sourceMappingURL=proto_view.js.map

	//# sourceMappingURL=./proto_view.map

/***/ },
/* 149 */
/*!*******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/view/element_binder.es6 ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _angular2SrcReflectionTypes = __webpack_require__(/*! angular2/src/reflection/types */ 111);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _proto_view = __webpack_require__(/*! ./proto_view */ 148);
	
	var protoViewModule = _interopRequireWildcard(_proto_view);
	
	var ElementBinder = (function () {
	  function ElementBinder() {
	    var _ref = arguments[0] === undefined ? {} : arguments[0];
	
	    var textNodeIndices = _ref.textNodeIndices;
	    var contentTagSelector = _ref.contentTagSelector;
	    var nestedProtoView = _ref.nestedProtoView;
	    var componentId = _ref.componentId;
	    var eventLocals = _ref.eventLocals;
	    var localEvents = _ref.localEvents;
	    var globalEvents = _ref.globalEvents;
	    var parentIndex = _ref.parentIndex;
	    var distanceToParent = _ref.distanceToParent;
	    var propertySetters = _ref.propertySetters;
	
	    _classCallCheck(this, ElementBinder);
	
	    this.textNodeIndices = textNodeIndices;
	    this.contentTagSelector = contentTagSelector;
	    this.nestedProtoView = nestedProtoView;
	    this.componentId = componentId;
	    this.eventLocals = eventLocals;
	    this.localEvents = localEvents;
	    this.globalEvents = globalEvents;
	    this.parentIndex = parentIndex;
	    this.distanceToParent = distanceToParent;
	    this.propertySetters = propertySetters;
	  }
	
	  _createClass(ElementBinder, [{
	    key: 'hasStaticComponent',
	    value: function hasStaticComponent() {
	      return (0, _angular2SrcFacadeLang.isPresent)(this.componentId) && (0, _angular2SrcFacadeLang.isPresent)(this.nestedProtoView);
	    }
	  }, {
	    key: 'hasDynamicComponent',
	    value: function hasDynamicComponent() {
	      return (0, _angular2SrcFacadeLang.isPresent)(this.componentId) && (0, _angular2SrcFacadeLang.isBlank)(this.nestedProtoView);
	    }
	  }]);
	
	  return ElementBinder;
	})();
	
	exports.ElementBinder = ElementBinder;
	
	var Event = function Event(name, target, fullName) {
	  _classCallCheck(this, Event);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, target, _rtts_assertRtts_assert.assert.type.string, fullName, _rtts_assertRtts_assert.assert.type.string);
	  this.name = name;
	  this.target = target;
	  this.fullName = fullName;
	};
	
	exports.Event = Event;
	
	Object.defineProperty(Event, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=element_binder.js.map

	//# sourceMappingURL=./element_binder.map

/***/ },
/* 150 */
/*!****************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/util.es6 ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.camelCaseToDashCase = camelCaseToDashCase;
	exports.dashCaseToCamelCase = dashCaseToCamelCase;
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var NG_BINDING_CLASS_SELECTOR = '.ng-binding';
	exports.NG_BINDING_CLASS_SELECTOR = NG_BINDING_CLASS_SELECTOR;
	var NG_BINDING_CLASS = 'ng-binding';
	exports.NG_BINDING_CLASS = NG_BINDING_CLASS;
	var EVENT_TARGET_SEPARATOR = ':';
	exports.EVENT_TARGET_SEPARATOR = EVENT_TARGET_SEPARATOR;
	var CAMEL_CASE_REGEXP = _angular2SrcFacadeLang.RegExpWrapper.create('([A-Z])');
	var DASH_CASE_REGEXP = _angular2SrcFacadeLang.RegExpWrapper.create('-([a-z])');
	
	function camelCaseToDashCase(input) {
	  _rtts_assertRtts_assert.assert.argumentTypes(input, _rtts_assertRtts_assert.assert.type.string);
	  return _angular2SrcFacadeLang.StringWrapper.replaceAllMapped(input, CAMEL_CASE_REGEXP, function (m) {
	    return '-' + m[1].toLowerCase();
	  });
	}
	
	Object.defineProperty(camelCaseToDashCase, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	function dashCaseToCamelCase(input) {
	  _rtts_assertRtts_assert.assert.argumentTypes(input, _rtts_assertRtts_assert.assert.type.string);
	  return _angular2SrcFacadeLang.StringWrapper.replaceAllMapped(input, DASH_CASE_REGEXP, function (m) {
	    return m[1].toUpperCase();
	  });
	}
	
	Object.defineProperty(dashCaseToCamelCase, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=util.js.map

	//# sourceMappingURL=./util.map

/***/ },
/* 151 */
/*!********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/light_dom.es6 ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _viewView = __webpack_require__(/*! ../view/view */ 145);
	
	var viewModule = _interopRequireWildcard(_viewView);
	
	var _content_tag = __webpack_require__(/*! ./content_tag */ 152);
	
	var DestinationLightDom = function DestinationLightDom() {
	  _classCallCheck(this, DestinationLightDom);
	};
	
	exports.DestinationLightDom = DestinationLightDom;
	
	var _Root = function _Root(node, boundElementIndex) {
	  _classCallCheck(this, _Root);
	
	  this.node = node;
	  this.boundElementIndex = boundElementIndex;
	};
	
	var LightDom = (function () {
	  function LightDom(lightDomView, shadowDomView, element) {
	    _classCallCheck(this, LightDom);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(lightDomView, viewModule.RenderView, shadowDomView, viewModule.RenderView, element, _rtts_assertRtts_assert.assert.type.any);
	    this.lightDomView = lightDomView;
	    this.shadowDomView = shadowDomView;
	    this.nodes = _angular2SrcDomDom_adapter.DOM.childNodesAsList(element);
	    this.roots = null;
	  }
	
	  _createClass(LightDom, [{
	    key: 'redistribute',
	    value: function redistribute() {
	      redistributeNodes(this.contentTags(), this.expandedDomNodes());
	    }
	  }, {
	    key: 'contentTags',
	    value: function contentTags() {
	      return _rtts_assertRtts_assert.assert.returnType(this._collectAllContentTags(this.shadowDomView, []), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _content_tag.Content));
	    }
	  }, {
	    key: '_collectAllContentTags',
	    value: function _collectAllContentTags(view, acc) {
	      var _this = this;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.RenderView, acc, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _content_tag.Content));
	      var contentTags = view.contentTags;
	      var vcs = view.viewContainers;
	      for (var i = 0; i < vcs.length; i++) {
	        var vc = vcs[i];
	        var contentTag = contentTags[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(contentTag)) {
	          _angular2SrcFacadeCollection.ListWrapper.push(acc, contentTag);
	        }
	        if ((0, _angular2SrcFacadeLang.isPresent)(vc)) {
	          _angular2SrcFacadeCollection.ListWrapper.forEach(vc.contentTagContainers(), function (view) {
	            _this._collectAllContentTags(view, acc);
	          });
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(acc, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _content_tag.Content));
	    }
	  }, {
	    key: 'expandedDomNodes',
	    value: function expandedDomNodes() {
	      var res = [];
	      var roots = this._roots();
	      for (var i = 0; i < roots.length; ++i) {
	        var root = roots[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(root.boundElementIndex)) {
	          var vc = this.lightDomView.viewContainers[root.boundElementIndex];
	          var content = this.lightDomView.contentTags[root.boundElementIndex];
	          if ((0, _angular2SrcFacadeLang.isPresent)(vc)) {
	            res = _angular2SrcFacadeCollection.ListWrapper.concat(res, vc.nodes());
	          } else if ((0, _angular2SrcFacadeLang.isPresent)(content)) {
	            res = _angular2SrcFacadeCollection.ListWrapper.concat(res, content.nodes());
	          } else {
	            _angular2SrcFacadeCollection.ListWrapper.push(res, root.node);
	          }
	        } else {
	          _angular2SrcFacadeCollection.ListWrapper.push(res, root.node);
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(res, _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: '_roots',
	    value: function _roots() {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.roots)) return this.roots;
	      var boundElements = this.lightDomView.boundElements;
	      this.roots = _angular2SrcFacadeCollection.ListWrapper.map(this.nodes, function (n) {
	        var boundElementIndex = null;
	        for (var i = 0; i < boundElements.length; i++) {
	          var boundEl = boundElements[i];
	          if ((0, _angular2SrcFacadeLang.isPresent)(boundEl) && boundEl === n) {
	            boundElementIndex = i;
	            break;
	          }
	        }
	        return new _Root(n, boundElementIndex);
	      });
	      return this.roots;
	    }
	  }]);
	
	  return LightDom;
	})();
	
	exports.LightDom = LightDom;
	
	Object.defineProperty(LightDom, 'parameters', { get: function get() {
	    return [[viewModule.RenderView], [viewModule.RenderView], []];
	  } });
	Object.defineProperty(LightDom.prototype._collectAllContentTags, 'parameters', { get: function get() {
	    return [[viewModule.RenderView], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _content_tag.Content)]];
	  } });
	function redistributeNodes(contents, nodes) {
	  for (var i = 0; i < contents.length; ++i) {
	    var content = contents[i];
	    var select = content.select;
	    if (select.length === 0) {
	      content.insert(_angular2SrcFacadeCollection.ListWrapper.clone(nodes));
	      _angular2SrcFacadeCollection.ListWrapper.clear(nodes);
	    } else {
	      var matchSelector = function matchSelector(n) {
	        return _angular2SrcDomDom_adapter.DOM.elementMatches(n, select);
	      };
	      var matchingNodes = _angular2SrcFacadeCollection.ListWrapper.filter(nodes, matchSelector);
	      content.insert(matchingNodes);
	      _angular2SrcFacadeCollection.ListWrapper.removeAll(nodes, matchingNodes);
	    }
	  }
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if ((0, _angular2SrcFacadeLang.isPresent)(node.parentNode)) {
	      _angular2SrcDomDom_adapter.DOM.remove(nodes[i]);
	    }
	  }
	}
	Object.defineProperty(redistributeNodes, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _content_tag.Content)], [_angular2SrcFacadeCollection.List]];
	  } });
	//# sourceMappingURL=light_dom.js.map

	//# sourceMappingURL=./light_dom.map

/***/ },
/* 152 */
/*!**********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/content_tag.es6 ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _light_dom = __webpack_require__(/*! ./light_dom */ 151);
	
	var ldModule = _interopRequireWildcard(_light_dom);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var ContentStrategy = (function () {
	  function ContentStrategy() {
	    _classCallCheck(this, ContentStrategy);
	  }
	
	  _createClass(ContentStrategy, [{
	    key: 'insert',
	    value: function insert(nodes) {
	      _rtts_assertRtts_assert.assert.argumentTypes(nodes, _angular2SrcFacadeCollection.List);
	    }
	  }]);
	
	  return ContentStrategy;
	})();
	
	Object.defineProperty(ContentStrategy.prototype.insert, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	
	var RenderedContent = (function (_ContentStrategy) {
	  function RenderedContent(contentEl) {
	    _classCallCheck(this, RenderedContent);
	
	    _get(Object.getPrototypeOf(RenderedContent.prototype), 'constructor', this).call(this);
	    this.beginScript = contentEl;
	    this.endScript = _angular2SrcDomDom_adapter.DOM.nextSibling(this.beginScript);
	    this.nodes = [];
	  }
	
	  _inherits(RenderedContent, _ContentStrategy);
	
	  _createClass(RenderedContent, [{
	    key: 'insert',
	    value: function insert(nodes) {
	      _rtts_assertRtts_assert.assert.argumentTypes(nodes, _angular2SrcFacadeCollection.List);
	      this.nodes = nodes;
	      _angular2SrcDomDom_adapter.DOM.insertAllBefore(this.endScript, nodes);
	      this._removeNodesUntil(_angular2SrcFacadeCollection.ListWrapper.isEmpty(nodes) ? this.endScript : nodes[0]);
	    }
	  }, {
	    key: '_removeNodesUntil',
	    value: function _removeNodesUntil(node) {
	      var p = _angular2SrcDomDom_adapter.DOM.parentElement(this.beginScript);
	      for (var next = _angular2SrcDomDom_adapter.DOM.nextSibling(this.beginScript); next !== node; next = _angular2SrcDomDom_adapter.DOM.nextSibling(this.beginScript)) {
	        _angular2SrcDomDom_adapter.DOM.removeChild(p, next);
	      }
	    }
	  }]);
	
	  return RenderedContent;
	})(ContentStrategy);
	
	Object.defineProperty(RenderedContent.prototype.insert, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	
	var IntermediateContent = (function (_ContentStrategy2) {
	  function IntermediateContent(destinationLightDom) {
	    _classCallCheck(this, IntermediateContent);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(destinationLightDom, ldModule.LightDom);
	    _get(Object.getPrototypeOf(IntermediateContent.prototype), 'constructor', this).call(this);
	    this.nodes = [];
	    this.destinationLightDom = destinationLightDom;
	  }
	
	  _inherits(IntermediateContent, _ContentStrategy2);
	
	  _createClass(IntermediateContent, [{
	    key: 'insert',
	    value: function insert(nodes) {
	      _rtts_assertRtts_assert.assert.argumentTypes(nodes, _angular2SrcFacadeCollection.List);
	      this.nodes = nodes;
	      this.destinationLightDom.redistribute();
	    }
	  }]);
	
	  return IntermediateContent;
	})(ContentStrategy);
	
	Object.defineProperty(IntermediateContent, 'parameters', { get: function get() {
	    return [[ldModule.LightDom]];
	  } });
	Object.defineProperty(IntermediateContent.prototype.insert, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	
	var Content = (function () {
	  function Content(contentStartEl, selector) {
	    _classCallCheck(this, Content);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(contentStartEl, _rtts_assertRtts_assert.assert.type.any, selector, _rtts_assertRtts_assert.assert.type.string);
	    this.select = selector;
	    this.contentStartElement = contentStartEl;
	    this._strategy = null;
	  }
	
	  _createClass(Content, [{
	    key: 'hydrate',
	    value: function hydrate(destinationLightDom) {
	      _rtts_assertRtts_assert.assert.argumentTypes(destinationLightDom, ldModule.LightDom);
	      this._strategy = (0, _angular2SrcFacadeLang.isPresent)(destinationLightDom) ? new IntermediateContent(destinationLightDom) : new RenderedContent(this.contentStartElement);
	    }
	  }, {
	    key: 'dehydrate',
	    value: function dehydrate() {
	      this._strategy = null;
	    }
	  }, {
	    key: 'nodes',
	    value: function nodes() {
	      return _rtts_assertRtts_assert.assert.returnType(this._strategy.nodes, _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: 'insert',
	    value: function insert(nodes) {
	      _rtts_assertRtts_assert.assert.argumentTypes(nodes, _angular2SrcFacadeCollection.List);
	      this._strategy.insert(nodes);
	    }
	  }]);
	
	  return Content;
	})();
	
	exports.Content = Content;
	
	Object.defineProperty(Content, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Content.prototype.hydrate, 'parameters', { get: function get() {
	    return [[ldModule.LightDom]];
	  } });
	Object.defineProperty(Content.prototype.insert, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.List]];
	  } });
	//# sourceMappingURL=content_tag.js.map

	//# sourceMappingURL=./content_tag.map

/***/ },
/* 153 */
/*!****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/annotations/visibility.es6 ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var Parent = (function (_DependencyAnnotation) {
	  function Parent() {
	    _classCallCheck(this, Parent);
	
	    _get(Object.getPrototypeOf(Parent.prototype), 'constructor', this).call(this);
	  }
	
	  _inherits(Parent, _DependencyAnnotation);
	
	  return Parent;
	})(_angular2Di.DependencyAnnotation);
	
	exports.Parent = Parent;
	
	Object.defineProperty(Parent, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var Ancestor = (function (_DependencyAnnotation2) {
	  function Ancestor() {
	    _classCallCheck(this, Ancestor);
	
	    _get(Object.getPrototypeOf(Ancestor.prototype), 'constructor', this).call(this);
	  }
	
	  _inherits(Ancestor, _DependencyAnnotation2);
	
	  return Ancestor;
	})(_angular2Di.DependencyAnnotation);
	
	exports.Ancestor = Ancestor;
	
	Object.defineProperty(Ancestor, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	//# sourceMappingURL=visibility.js.map

	//# sourceMappingURL=./visibility.map

/***/ },
/* 154 */
/*!*************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/interfaces.es6 ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var OnChange = (function () {
	  function OnChange() {
	    _classCallCheck(this, OnChange);
	  }
	
	  _createClass(OnChange, [{
	    key: "onChange",
	    value: function onChange(changes) {
	      throw "OnChange.onChange is not implemented";
	    }
	  }]);
	
	  return OnChange;
	})();
	
	exports.OnChange = OnChange;
	
	//# sourceMappingURL=interfaces.js.map

	//# sourceMappingURL=./interfaces.map

/***/ },
/* 155 */
/*!**********************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/annotations/view.es6 ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var View = function View(_ref) {
	  var templateUrl = _ref.templateUrl;
	  var template = _ref.template;
	  var directives = _ref.directives;
	  var renderer = _ref.renderer;
	
	  _classCallCheck(this, View);
	
	  this.templateUrl = templateUrl;
	  this.template = template;
	  this.directives = directives;
	  this.renderer = renderer;
	};
	
	exports.View = View;
	
	Object.defineProperty(View, "annotations", { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	//# sourceMappingURL=view.js.map

	//# sourceMappingURL=./view.map

/***/ },
/* 156 */
/*!*****************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/application.es6 ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.bootstrap = bootstrap;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcDomBrowser_adapter = __webpack_require__(/*! angular2/src/dom/browser_adapter */ 159);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _compilerCompiler = __webpack_require__(/*! ./compiler/compiler */ 161);
	
	var _angular2SrcReflectionReflection = __webpack_require__(/*! angular2/src/reflection/reflection */ 109);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _exception_handler = __webpack_require__(/*! ./exception_handler */ 200);
	
	var _angular2SrcRenderDomCompilerTemplate_loader = __webpack_require__(/*! angular2/src/render/dom/compiler/template_loader */ 183);
	
	var _compilerTemplate_resolver = __webpack_require__(/*! ./compiler/template_resolver */ 197);
	
	var _compilerDirective_metadata_reader = __webpack_require__(/*! ./compiler/directive_metadata_reader */ 162);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcCoreZoneVm_turn_zone = __webpack_require__(/*! angular2/src/core/zone/vm_turn_zone */ 158);
	
	var _angular2SrcCoreLife_cycleLife_cycle = __webpack_require__(/*! angular2/src/core/life_cycle/life_cycle */ 201);
	
	var _angular2SrcRenderDomShadow_domShadow_dom_strategy = __webpack_require__(/*! angular2/src/render/dom/shadow_dom/shadow_dom_strategy */ 144);
	
	var _angular2SrcRenderDomShadow_domEmulated_unscoped_shadow_dom_strategy = __webpack_require__(/*! angular2/src/render/dom/shadow_dom/emulated_unscoped_shadow_dom_strategy */ 202);
	
	var _angular2SrcServicesXhr = __webpack_require__(/*! angular2/src/services/xhr */ 184);
	
	var _angular2SrcServicesXhr_impl = __webpack_require__(/*! angular2/src/services/xhr_impl */ 206);
	
	var _angular2SrcRenderDomEventsEvent_manager = __webpack_require__(/*! angular2/src/render/dom/events/event_manager */ 157);
	
	var _angular2SrcRenderDomEventsKey_events = __webpack_require__(/*! angular2/src/render/dom/events/key_events */ 207);
	
	var _angular2SrcRenderDomEventsHammer_gestures = __webpack_require__(/*! angular2/src/render/dom/events/hammer_gestures */ 208);
	
	var _angular2SrcDiBinding = __webpack_require__(/*! angular2/src/di/binding */ 108);
	
	var _angular2SrcCoreCompilerComponent_url_mapper = __webpack_require__(/*! angular2/src/core/compiler/component_url_mapper */ 198);
	
	var _angular2SrcServicesUrl_resolver = __webpack_require__(/*! angular2/src/services/url_resolver */ 185);
	
	var _angular2SrcRenderDomShadow_domStyle_url_resolver = __webpack_require__(/*! angular2/src/render/dom/shadow_dom/style_url_resolver */ 203);
	
	var _angular2SrcRenderDomShadow_domStyle_inliner = __webpack_require__(/*! angular2/src/render/dom/shadow_dom/style_inliner */ 210);
	
	var _angular2SrcCoreCompilerDynamic_component_loader = __webpack_require__(/*! angular2/src/core/compiler/dynamic_component_loader */ 211);
	
	var _angular2SrcCoreTestabilityTestability = __webpack_require__(/*! angular2/src/core/testability/testability */ 212);
	
	var _angular2SrcCoreCompilerView_pool = __webpack_require__(/*! angular2/src/core/compiler/view_pool */ 193);
	
	var _angular2SrcCoreCompilerView_manager = __webpack_require__(/*! angular2/src/core/compiler/view_manager */ 170);
	
	var _angular2SrcCoreCompilerView_manager_utils = __webpack_require__(/*! angular2/src/core/compiler/view_manager_utils */ 171);
	
	var _angular2SrcCoreCompilerProto_view_factory = __webpack_require__(/*! angular2/src/core/compiler/proto_view_factory */ 199);
	
	var _angular2SrcRenderApi = __webpack_require__(/*! angular2/src/render/api */ 115);
	
	var _angular2SrcRenderDomDirect_dom_renderer = __webpack_require__(/*! angular2/src/render/dom/direct_dom_renderer */ 173);
	
	var _angular2SrcRenderDomCompilerCompiler = __webpack_require__(/*! angular2/src/render/dom/compiler/compiler */ 176);
	
	var rc = _interopRequireWildcard(_angular2SrcRenderDomCompilerCompiler);
	
	var _angular2SrcRenderDomViewView_factory = __webpack_require__(/*! angular2/src/render/dom/view/view_factory */ 174);
	
	var rvf = _interopRequireWildcard(_angular2SrcRenderDomViewView_factory);
	
	var _angular2SrcRenderDomViewView_hydrator = __webpack_require__(/*! angular2/src/render/dom/view/view_hydrator */ 175);
	
	var rvh = _interopRequireWildcard(_angular2SrcRenderDomViewView_hydrator);
	
	var _application_tokens = __webpack_require__(/*! ./application_tokens */ 214);
	
	var _rootInjector;
	var _rootBindings = [(0, _angular2Di.bind)(_angular2SrcReflectionReflection.Reflector).toValue(_angular2SrcReflectionReflection.reflector), _angular2SrcCoreTestabilityTestability.TestabilityRegistry];
	function _injectorBindings(appComponentType) {
	  return _rtts_assertRtts_assert.assert.returnType([(0, _angular2Di.bind)(_application_tokens.appDocumentToken).toValue(_angular2SrcDomDom_adapter.DOM.defaultDoc()), (0, _angular2Di.bind)(_application_tokens.appComponentAnnotatedTypeToken).toFactory(function (reader) {
	    return reader.read(appComponentType);
	  }, [_compilerDirective_metadata_reader.DirectiveMetadataReader]), (0, _angular2Di.bind)(_application_tokens.appElementToken).toFactory(function (appComponentAnnotatedType, appDocument) {
	    var selector = appComponentAnnotatedType.annotation.selector;
	    var element = _angular2SrcDomDom_adapter.DOM.querySelector(appDocument, selector);
	    if ((0, _angular2SrcFacadeLang.isBlank)(element)) {
	      throw new _angular2SrcFacadeLang.BaseException('The app selector "' + selector + '" did not match any elements');
	    }
	    return element;
	  }, [_application_tokens.appComponentAnnotatedTypeToken, _application_tokens.appDocumentToken]), (0, _angular2Di.bind)(_application_tokens.appComponentRefToken).toAsyncFactory(function (dynamicComponentLoader, injector, appElement, appComponentAnnotatedType, testability, registry) {
	    registry.registerApplication(appElement, testability);
	    return dynamicComponentLoader.loadIntoNewLocation(appComponentAnnotatedType.type, null, appElement, injector);
	  }, [_angular2SrcCoreCompilerDynamic_component_loader.DynamicComponentLoader, _angular2Di.Injector, _application_tokens.appElementToken, _application_tokens.appComponentAnnotatedTypeToken, _angular2SrcCoreTestabilityTestability.Testability, _angular2SrcCoreTestabilityTestability.TestabilityRegistry]), (0, _angular2Di.bind)(_application_tokens.appChangeDetectorToken).toFactory(function (ref) {
	    return ref.hostView.changeDetector;
	  }, [_application_tokens.appComponentRefToken]), (0, _angular2Di.bind)(appComponentType).toFactory(function (ref) {
	    return ref.instance;
	  }, [_application_tokens.appComponentRefToken]), (0, _angular2Di.bind)(_angular2SrcCoreLife_cycleLife_cycle.LifeCycle).toFactory(function (exceptionHandler) {
	    return new _angular2SrcCoreLife_cycleLife_cycle.LifeCycle(exceptionHandler, null, (0, _angular2SrcFacadeLang.assertionsEnabled)());
	  }, [_exception_handler.ExceptionHandler]), (0, _angular2Di.bind)(_angular2SrcRenderDomEventsEvent_manager.EventManager).toFactory(function (zone) {
	    var plugins = [new _angular2SrcRenderDomEventsHammer_gestures.HammerGesturesPlugin(), new _angular2SrcRenderDomEventsKey_events.KeyEventsPlugin(), new _angular2SrcRenderDomEventsEvent_manager.DomEventsPlugin()];
	    return new _angular2SrcRenderDomEventsEvent_manager.EventManager(plugins, zone);
	  }, [_angular2SrcCoreZoneVm_turn_zone.VmTurnZone]), (0, _angular2Di.bind)(_angular2SrcRenderDomShadow_domShadow_dom_strategy.ShadowDomStrategy).toFactory(function (styleUrlResolver, doc) {
	    return new _angular2SrcRenderDomShadow_domEmulated_unscoped_shadow_dom_strategy.EmulatedUnscopedShadowDomStrategy(styleUrlResolver, doc.head);
	  }, [_angular2SrcRenderDomShadow_domStyle_url_resolver.StyleUrlResolver, _application_tokens.appDocumentToken]), _angular2SrcRenderDomDirect_dom_renderer.DirectDomRenderer, (0, _angular2Di.bind)(_angular2SrcRenderApi.Renderer).toClass(_angular2SrcRenderDomDirect_dom_renderer.DirectDomRenderer), (0, _angular2Di.bind)(rc.Compiler).toClass(rc.DefaultCompiler), (0, _angular2Di.bind)(rvf.ViewFactory).toFactory(function (capacity, eventManager, shadowDomStrategy) {
	    return new rvf.ViewFactory(capacity, eventManager, shadowDomStrategy);
	  }, [rvf.VIEW_POOL_CAPACITY, _angular2SrcRenderDomEventsEvent_manager.EventManager, _angular2SrcRenderDomShadow_domShadow_dom_strategy.ShadowDomStrategy]), (0, _angular2Di.bind)(rvf.VIEW_POOL_CAPACITY).toValue(10000), rvh.RenderViewHydrator, _angular2SrcCoreCompilerProto_view_factory.ProtoViewFactory, (0, _angular2Di.bind)(_angular2SrcCoreCompilerView_pool.AppViewPool).toFactory(function (capacity) {
	    return new _angular2SrcCoreCompilerView_pool.AppViewPool(capacity);
	  }, [_angular2SrcCoreCompilerView_pool.APP_VIEW_POOL_CAPACITY]), (0, _angular2Di.bind)(_angular2SrcCoreCompilerView_pool.APP_VIEW_POOL_CAPACITY).toValue(10000), _angular2SrcCoreCompilerView_manager.AppViewManager, _angular2SrcCoreCompilerView_manager_utils.AppViewManagerUtils, _compilerCompiler.Compiler, _compilerCompiler.CompilerCache, _compilerTemplate_resolver.TemplateResolver, (0, _angular2Di.bind)(_angular2Change_detection.PipeRegistry).toValue(_angular2Change_detection.defaultPipeRegistry), (0, _angular2Di.bind)(_angular2Change_detection.ChangeDetection).toClass(_angular2Change_detection.DynamicChangeDetection), _angular2SrcRenderDomCompilerTemplate_loader.TemplateLoader, _compilerDirective_metadata_reader.DirectiveMetadataReader, _angular2Change_detection.Parser, _angular2Change_detection.Lexer, _exception_handler.ExceptionHandler, (0, _angular2Di.bind)(_angular2SrcServicesXhr.XHR).toValue(new _angular2SrcServicesXhr_impl.XHRImpl()), _angular2SrcCoreCompilerComponent_url_mapper.ComponentUrlMapper, _angular2SrcServicesUrl_resolver.UrlResolver, _angular2SrcRenderDomShadow_domStyle_url_resolver.StyleUrlResolver, _angular2SrcRenderDomShadow_domStyle_inliner.StyleInliner, _angular2SrcCoreCompilerDynamic_component_loader.DynamicComponentLoader, _angular2SrcCoreTestabilityTestability.Testability], _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcDiBinding.Binding));
	}
	function _createVmZone(givenReporter) {
	  _rtts_assertRtts_assert.assert.argumentTypes(givenReporter, Function);
	  var defaultErrorReporter = function defaultErrorReporter(exception, stackTrace) {
	    var longStackTrace = _angular2SrcFacadeCollection.ListWrapper.join(stackTrace, '\n\n-----async gap-----\n');
	    (0, _angular2SrcFacadeLang.print)('' + exception + '\n\n' + longStackTrace);
	    throw exception;
	  };
	  var reporter = (0, _angular2SrcFacadeLang.isPresent)(givenReporter) ? givenReporter : defaultErrorReporter;
	  var zone = new _angular2SrcCoreZoneVm_turn_zone.VmTurnZone({ enableLongStackTrace: (0, _angular2SrcFacadeLang.assertionsEnabled)() });
	  zone.initCallbacks({ onErrorHandler: reporter });
	  return _rtts_assertRtts_assert.assert.returnType(zone, _angular2SrcCoreZoneVm_turn_zone.VmTurnZone);
	}
	Object.defineProperty(_createVmZone, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	
	function bootstrap(appComponentType) {
	  var componentInjectableBindings = arguments[1] === undefined ? null : arguments[1];
	  var errorReporter = arguments[2] === undefined ? null : arguments[2];
	
	  _rtts_assertRtts_assert.assert.argumentTypes(appComponentType, _angular2SrcFacadeLang.Type, componentInjectableBindings, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcDiBinding.Binding), errorReporter, Function);
	  _angular2SrcDomBrowser_adapter.BrowserDomAdapter.makeCurrent();
	  var bootstrapProcess = _angular2SrcFacadeAsync.PromiseWrapper.completer();
	  var zone = _createVmZone(errorReporter);
	  zone.run(function () {
	    var appInjector = _createAppInjector(appComponentType, componentInjectableBindings, zone);
	    _angular2SrcFacadeAsync.PromiseWrapper.then(appInjector.asyncGet(_application_tokens.appComponentRefToken), function (componentRef) {
	      var appChangeDetector = componentRef.hostView.changeDetector;
	      var lc = appInjector.get(_angular2SrcCoreLife_cycleLife_cycle.LifeCycle);
	      lc.registerWith(zone, appChangeDetector);
	      lc.tick();
	      bootstrapProcess.resolve(componentRef);
	    }, function (err) {
	      bootstrapProcess.reject(err);
	    });
	  });
	  return _rtts_assertRtts_assert.assert.returnType(bootstrapProcess.promise, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, _angular2SrcCoreCompilerDynamic_component_loader.ComponentRef));
	}
	
	Object.defineProperty(bootstrap, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcDiBinding.Binding)], [Function]];
	  } });
	function _createAppInjector(appComponentType, bindings, zone) {
	  _rtts_assertRtts_assert.assert.argumentTypes(appComponentType, _angular2SrcFacadeLang.Type, bindings, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcDiBinding.Binding), zone, _angular2SrcCoreZoneVm_turn_zone.VmTurnZone);
	  if ((0, _angular2SrcFacadeLang.isBlank)(_rootInjector)) _rootInjector = _angular2Di.Injector.resolveAndCreate(_rootBindings);
	  var mergedBindings = (0, _angular2SrcFacadeLang.isPresent)(bindings) ? _angular2SrcFacadeCollection.ListWrapper.concat(_injectorBindings(appComponentType), bindings) : _injectorBindings(appComponentType);
	  _angular2SrcFacadeCollection.ListWrapper.push(mergedBindings, (0, _angular2Di.bind)(_angular2SrcCoreZoneVm_turn_zone.VmTurnZone).toValue(zone));
	  return _rtts_assertRtts_assert.assert.returnType(_rootInjector.resolveAndCreateChild(mergedBindings), _angular2Di.Injector);
	}
	Object.defineProperty(_createAppInjector, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcDiBinding.Binding)], [_angular2SrcCoreZoneVm_turn_zone.VmTurnZone]];
	  } });
	//# sourceMappingURL=application.js.map

	//# sourceMappingURL=./application.map

/***/ },
/* 157 */
/*!********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/events/event_manager.es6 ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcCoreZoneVm_turn_zone = __webpack_require__(/*! angular2/src/core/zone/vm_turn_zone */ 158);
	
	var BUBBLE_SYMBOL = '^';
	
	var EventManager = (function () {
	  function EventManager(plugins, zone) {
	    _classCallCheck(this, EventManager);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(plugins, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, EventManagerPlugin), zone, _angular2SrcCoreZoneVm_turn_zone.VmTurnZone);
	    this._zone = zone;
	    this._plugins = plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      plugins[i].manager = this;
	    }
	  }
	
	  _createClass(EventManager, [{
	    key: 'addEventListener',
	    value: function addEventListener(element, eventName, handler) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, eventName, _rtts_assertRtts_assert.assert.type.string, handler, Function);
	      var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
	      var plugin = this._findPluginFor(withoutBubbleSymbol);
	      plugin.addEventListener(element, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName);
	    }
	  }, {
	    key: 'addGlobalEventListener',
	    value: function addGlobalEventListener(target, eventName, handler) {
	      _rtts_assertRtts_assert.assert.argumentTypes(target, _rtts_assertRtts_assert.assert.type.string, eventName, _rtts_assertRtts_assert.assert.type.string, handler, Function);
	      var withoutBubbleSymbol = this._removeBubbleSymbol(eventName);
	      var plugin = this._findPluginFor(withoutBubbleSymbol);
	      return _rtts_assertRtts_assert.assert.returnType(plugin.addGlobalEventListener(target, withoutBubbleSymbol, handler, withoutBubbleSymbol != eventName), Function);
	    }
	  }, {
	    key: 'getZone',
	    value: function getZone() {
	      return _rtts_assertRtts_assert.assert.returnType(this._zone, _angular2SrcCoreZoneVm_turn_zone.VmTurnZone);
	    }
	  }, {
	    key: '_findPluginFor',
	    value: function _findPluginFor(eventName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string);
	      var plugins = this._plugins;
	      for (var i = 0; i < plugins.length; i++) {
	        var plugin = plugins[i];
	        if (plugin.supports(eventName)) {
	          return _rtts_assertRtts_assert.assert.returnType(plugin, EventManagerPlugin);
	        }
	      }
	      throw new _angular2SrcFacadeLang.BaseException('No event manager plugin found for event ' + eventName);
	    }
	  }, {
	    key: '_removeBubbleSymbol',
	    value: function _removeBubbleSymbol(eventName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(eventName[0] == BUBBLE_SYMBOL ? _angular2SrcFacadeLang.StringWrapper.substring(eventName, 1) : eventName, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return EventManager;
	})();
	
	exports.EventManager = EventManager;
	
	Object.defineProperty(EventManager, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, EventManagerPlugin)], [_angular2SrcCoreZoneVm_turn_zone.VmTurnZone]];
	  } });
	Object.defineProperty(EventManager.prototype.addEventListener, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [Function]];
	  } });
	Object.defineProperty(EventManager.prototype.addGlobalEventListener, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [Function]];
	  } });
	Object.defineProperty(EventManager.prototype._findPluginFor, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(EventManager.prototype._removeBubbleSymbol, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var EventManagerPlugin = (function () {
	  function EventManagerPlugin() {
	    _classCallCheck(this, EventManagerPlugin);
	  }
	
	  _createClass(EventManagerPlugin, [{
	    key: 'supports',
	    value: function supports(eventName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'addEventListener',
	    value: function addEventListener(element, eventName, handler, shouldSupportBubble) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, eventName, _rtts_assertRtts_assert.assert.type.string, handler, Function, shouldSupportBubble, _rtts_assertRtts_assert.assert.type.boolean);
	      throw 'not implemented';
	    }
	  }, {
	    key: 'addGlobalEventListener',
	    value: function addGlobalEventListener(element, eventName, handler, shouldSupportBubble) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, eventName, _rtts_assertRtts_assert.assert.type.string, handler, Function, shouldSupportBubble, _rtts_assertRtts_assert.assert.type.boolean);
	      throw 'not implemented';
	    }
	  }]);
	
	  return EventManagerPlugin;
	})();
	
	exports.EventManagerPlugin = EventManagerPlugin;
	
	Object.defineProperty(EventManagerPlugin.prototype.supports, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(EventManagerPlugin.prototype.addEventListener, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [Function], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(EventManagerPlugin.prototype.addGlobalEventListener, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [Function], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	
	var DomEventsPlugin = (function (_EventManagerPlugin) {
	  function DomEventsPlugin() {
	    _classCallCheck(this, DomEventsPlugin);
	
	    if (_EventManagerPlugin != null) {
	      _EventManagerPlugin.apply(this, arguments);
	    }
	  }
	
	  _inherits(DomEventsPlugin, _EventManagerPlugin);
	
	  _createClass(DomEventsPlugin, [{
	    key: 'supports',
	    value: function supports(eventName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'addEventListener',
	    value: function addEventListener(element, eventName, handler, shouldSupportBubble) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, eventName, _rtts_assertRtts_assert.assert.type.string, handler, Function, shouldSupportBubble, _rtts_assertRtts_assert.assert.type.boolean);
	      var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
	      this.manager._zone.runOutsideAngular(function () {
	        _angular2SrcDomDom_adapter.DOM.on(element, eventName, outsideHandler);
	      });
	    }
	  }, {
	    key: 'addGlobalEventListener',
	    value: function addGlobalEventListener(target, eventName, handler, shouldSupportBubble) {
	      _rtts_assertRtts_assert.assert.argumentTypes(target, _rtts_assertRtts_assert.assert.type.string, eventName, _rtts_assertRtts_assert.assert.type.string, handler, Function, shouldSupportBubble, _rtts_assertRtts_assert.assert.type.boolean);
	      var element = _angular2SrcDomDom_adapter.DOM.getGlobalEventTarget(target);
	      var outsideHandler = this._getOutsideHandler(shouldSupportBubble, element, handler, this.manager._zone);
	      return _rtts_assertRtts_assert.assert.returnType(this.manager._zone.runOutsideAngular(function () {
	        return _angular2SrcDomDom_adapter.DOM.onAndCancel(element, eventName, outsideHandler);
	      }), Function);
	    }
	  }, {
	    key: '_getOutsideHandler',
	    value: function _getOutsideHandler(shouldSupportBubble, element, handler, zone) {
	      _rtts_assertRtts_assert.assert.argumentTypes(shouldSupportBubble, _rtts_assertRtts_assert.assert.type.boolean, element, _rtts_assertRtts_assert.assert.type.any, handler, Function, zone, _angular2SrcCoreZoneVm_turn_zone.VmTurnZone);
	      return shouldSupportBubble ? DomEventsPlugin.bubbleCallback(element, handler, zone) : DomEventsPlugin.sameElementCallback(element, handler, zone);
	    }
	  }], [{
	    key: 'sameElementCallback',
	    value: function sameElementCallback(element, handler, zone) {
	      return function (event) {
	        if (event.target === element) {
	          zone.run(function () {
	            return handler(event);
	          });
	        }
	      };
	    }
	  }, {
	    key: 'bubbleCallback',
	    value: function bubbleCallback(element, handler, zone) {
	      return function (event) {
	        return zone.run(function () {
	          return handler(event);
	        });
	      };
	    }
	  }]);
	
	  return DomEventsPlugin;
	})(EventManagerPlugin);
	
	exports.DomEventsPlugin = DomEventsPlugin;
	
	Object.defineProperty(DomEventsPlugin.prototype.supports, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DomEventsPlugin.prototype.addEventListener, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [Function], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(DomEventsPlugin.prototype.addGlobalEventListener, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [Function], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(DomEventsPlugin.prototype._getOutsideHandler, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.boolean], [], [Function], [_angular2SrcCoreZoneVm_turn_zone.VmTurnZone]];
	  } });
	//# sourceMappingURL=event_manager.js.map

	//# sourceMappingURL=./event_manager.map

/***/ },
/* 158 */
/*!***********************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/zone/vm_turn_zone.es6 ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var VmTurnZone = (function () {
	  function VmTurnZone(_ref) {
	    var enableLongStackTrace = _ref.enableLongStackTrace;
	
	    _classCallCheck(this, VmTurnZone);
	
	    this._nestedRunCounter = 0;
	    this._onTurnStart = null;
	    this._onTurnDone = null;
	    this._onErrorHandler = null;
	    this._outerZone = _angular2SrcFacadeLang.global.zone;
	    this._innerZone = this._createInnerZone(this._outerZone, enableLongStackTrace);
	  }
	
	  _createClass(VmTurnZone, [{
	    key: 'initCallbacks',
	    value: function initCallbacks() {
	      var _ref2 = arguments[0] === undefined ? {} : arguments[0];
	
	      var onTurnStart = _ref2.onTurnStart;
	      var onTurnDone = _ref2.onTurnDone;
	      var onScheduleMicrotask = _ref2.onScheduleMicrotask;
	      var onErrorHandler = _ref2.onErrorHandler;
	
	      this._onTurnStart = (0, _angular2SrcFacadeLang.normalizeBlank)(onTurnStart);
	      this._onTurnDone = (0, _angular2SrcFacadeLang.normalizeBlank)(onTurnDone);
	      this._onErrorHandler = (0, _angular2SrcFacadeLang.normalizeBlank)(onErrorHandler);
	    }
	  }, {
	    key: 'run',
	    value: function run(fn) {
	      return this._innerZone.run(fn);
	    }
	  }, {
	    key: 'runOutsideAngular',
	    value: function runOutsideAngular(fn) {
	      return this._outerZone.run(fn);
	    }
	  }, {
	    key: '_createInnerZone',
	    value: function _createInnerZone(zone, enableLongStackTrace) {
	      var _this = this;
	
	      var vmTurnZone = this;
	      var errorHandling;
	      if (enableLongStackTrace) {
	        errorHandling = _angular2SrcFacadeCollection.StringMapWrapper.merge(Zone.longStackTraceZone, { onError: function onError(e) {
	            vmTurnZone._onError(this, e);
	          } });
	      } else {
	        errorHandling = { onError: function onError(e) {
	            vmTurnZone._onError(this, e);
	          } };
	      }
	      return zone.fork(errorHandling).fork({
	        beforeTask: function beforeTask() {
	          _this._beforeTask();
	        },
	        afterTask: function afterTask() {
	          _this._afterTask();
	        }
	      });
	    }
	  }, {
	    key: '_beforeTask',
	    value: function _beforeTask() {
	      this._nestedRunCounter++;
	      if (this._nestedRunCounter === 1 && this._onTurnStart) {
	        this._onTurnStart();
	      }
	    }
	  }, {
	    key: '_afterTask',
	    value: function _afterTask() {
	      this._nestedRunCounter--;
	      if (this._nestedRunCounter === 0 && this._onTurnDone) {
	        this._onTurnDone();
	      }
	    }
	  }, {
	    key: '_onError',
	    value: function _onError(zone, e) {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._onErrorHandler)) {
	        var trace = [(0, _angular2SrcFacadeLang.normalizeBlank)(e.stack)];
	        while (zone && zone.constructedAtException) {
	          trace.push(zone.constructedAtException.get());
	          zone = zone.parent;
	        }
	        this._onErrorHandler(e, trace);
	      } else {
	        throw e;
	      }
	    }
	  }]);
	
	  return VmTurnZone;
	})();
	
	exports.VmTurnZone = VmTurnZone;
	
	//# sourceMappingURL=vm_turn_zone.es6.map

	//# sourceMappingURL=./vm_turn_zone.map

/***/ },
/* 159 */
/*!********************************************************!*\
  !*** ./~/angular2/es6/dev/src/dom/browser_adapter.es6 ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _dom_adapter = __webpack_require__(/*! ./dom_adapter */ 147);
	
	var _generic_browser_adapter = __webpack_require__(/*! ./generic_browser_adapter */ 160);
	
	var _attrToPropMap = {
	  'innerHtml': 'innerHTML',
	  'readonly': 'readOnly',
	  'tabindex': 'tabIndex'
	};
	var DOM_KEY_LOCATION_NUMPAD = 3;
	var _keyMap = {
	  '\b': 'Backspace',
	  '\t': 'Tab',
	  '': 'Delete',
	  '\u001b': 'Escape',
	  'Del': 'Delete',
	  'Esc': 'Escape',
	  'Left': 'ArrowLeft',
	  'Right': 'ArrowRight',
	  'Up': 'ArrowUp',
	  'Down': 'ArrowDown',
	  'Menu': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'Win': 'OS'
	};
	var _chromeNumKeyPadMap = {
	  'A': '1',
	  'B': '2',
	  'C': '3',
	  'D': '4',
	  'E': '5',
	  'F': '6',
	  'G': '7',
	  'H': '8',
	  'I': '9',
	  'J': '*',
	  'K': '+',
	  'M': '-',
	  'N': '.',
	  'O': '/',
	  '`': '0',
	  '': 'NumLock'
	};
	
	var BrowserDomAdapter = (function (_GenericBrowserDomAdapter) {
	  function BrowserDomAdapter() {
	    _classCallCheck(this, BrowserDomAdapter);
	
	    if (_GenericBrowserDomAdapter != null) {
	      _GenericBrowserDomAdapter.apply(this, arguments);
	    }
	  }
	
	  _inherits(BrowserDomAdapter, _GenericBrowserDomAdapter);
	
	  _createClass(BrowserDomAdapter, [{
	    key: 'attrToPropMap',
	    get: function () {
	      return _attrToPropMap;
	    }
	  }, {
	    key: 'query',
	    value: function query(selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(selector, _rtts_assertRtts_assert.assert.type.string);
	      return document.querySelector(selector);
	    }
	  }, {
	    key: 'querySelector',
	    value: function querySelector(el, selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, selector, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(el.querySelector(selector), Node);
	    }
	  }, {
	    key: 'querySelectorAll',
	    value: function querySelectorAll(el, selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, selector, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(el.querySelectorAll(selector), NodeList);
	    }
	  }, {
	    key: 'on',
	    value: function on(el, evt, listener) {
	      el.addEventListener(evt, listener, false);
	    }
	  }, {
	    key: 'onAndCancel',
	    value: function onAndCancel(el, evt, listener) {
	      el.addEventListener(evt, listener, false);
	      return _rtts_assertRtts_assert.assert.returnType(function () {
	        el.removeEventListener(evt, listener, false);
	      }, Function);
	    }
	  }, {
	    key: 'dispatchEvent',
	    value: function dispatchEvent(el, evt) {
	      el.dispatchEvent(evt);
	    }
	  }, {
	    key: 'createMouseEvent',
	    value: function createMouseEvent(eventType) {
	      var evt = new MouseEvent(eventType);
	      evt.initEvent(eventType, true, true);
	      return evt;
	    }
	  }, {
	    key: 'createEvent',
	    value: function createEvent(eventType) {
	      return new Event(eventType, true);
	    }
	  }, {
	    key: 'getInnerHTML',
	    value: function getInnerHTML(el) {
	      return el.innerHTML;
	    }
	  }, {
	    key: 'getOuterHTML',
	    value: function getOuterHTML(el) {
	      return el.outerHTML;
	    }
	  }, {
	    key: 'nodeName',
	    value: function nodeName(node) {
	      _rtts_assertRtts_assert.assert.argumentTypes(node, Node);
	      return _rtts_assertRtts_assert.assert.returnType(node.nodeName, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'nodeValue',
	    value: function nodeValue(node) {
	      _rtts_assertRtts_assert.assert.argumentTypes(node, Node);
	      return _rtts_assertRtts_assert.assert.returnType(node.nodeValue, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'type',
	    value: function type(node) {
	      _rtts_assertRtts_assert.assert.argumentTypes(node, Node);
	      return node.type;
	    }
	  }, {
	    key: 'content',
	    value: function content(node) {
	      _rtts_assertRtts_assert.assert.argumentTypes(node, HTMLElement);
	      if (this.hasProperty(node, 'content')) {
	        return _rtts_assertRtts_assert.assert.returnType(node.content, Node);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(node, Node);
	      }
	    }
	  }, {
	    key: 'firstChild',
	    value: function firstChild(el) {
	      return _rtts_assertRtts_assert.assert.returnType(el.firstChild, Node);
	    }
	  }, {
	    key: 'nextSibling',
	    value: function nextSibling(el) {
	      return _rtts_assertRtts_assert.assert.returnType(el.nextSibling, Node);
	    }
	  }, {
	    key: 'parentElement',
	    value: function parentElement(el) {
	      return el.parentElement;
	    }
	  }, {
	    key: 'childNodes',
	    value: function childNodes(el) {
	      return _rtts_assertRtts_assert.assert.returnType(el.childNodes, NodeList);
	    }
	  }, {
	    key: 'childNodesAsList',
	    value: function childNodesAsList(el) {
	      var childNodes = el.childNodes;
	      var res = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(childNodes.length);
	      for (var i = 0; i < childNodes.length; i++) {
	        res[i] = childNodes[i];
	      }
	      return _rtts_assertRtts_assert.assert.returnType(res, _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: 'clearNodes',
	    value: function clearNodes(el) {
	      for (var i = 0; i < el.childNodes.length; i++) {
	        this.remove(el.childNodes[i]);
	      }
	    }
	  }, {
	    key: 'appendChild',
	    value: function appendChild(el, node) {
	      el.appendChild(node);
	    }
	  }, {
	    key: 'removeChild',
	    value: function removeChild(el, node) {
	      el.removeChild(node);
	    }
	  }, {
	    key: 'replaceChild',
	    value: function replaceChild(el, newChild, oldChild) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, Node, newChild, _rtts_assertRtts_assert.assert.type.any, oldChild, _rtts_assertRtts_assert.assert.type.any);
	      el.replaceChild(newChild, oldChild);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(el) {
	      var parent = el.parentNode;
	      parent.removeChild(el);
	      return el;
	    }
	  }, {
	    key: 'insertBefore',
	    value: function insertBefore(el, node) {
	      el.parentNode.insertBefore(node, el);
	    }
	  }, {
	    key: 'insertAllBefore',
	    value: function insertAllBefore(el, nodes) {
	      _angular2SrcFacadeCollection.ListWrapper.forEach(nodes, function (n) {
	        el.parentNode.insertBefore(n, el);
	      });
	    }
	  }, {
	    key: 'insertAfter',
	    value: function insertAfter(el, node) {
	      el.parentNode.insertBefore(node, el.nextSibling);
	    }
	  }, {
	    key: 'setInnerHTML',
	    value: function setInnerHTML(el, value) {
	      el.innerHTML = value;
	    }
	  }, {
	    key: 'getText',
	    value: function getText(el) {
	      return el.textContent;
	    }
	  }, {
	    key: 'setText',
	    value: function setText(el, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, value, _rtts_assertRtts_assert.assert.type.string);
	      el.textContent = value;
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue(el) {
	      return el.value;
	    }
	  }, {
	    key: 'setValue',
	    value: function setValue(el, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, value, _rtts_assertRtts_assert.assert.type.string);
	      el.value = value;
	    }
	  }, {
	    key: 'getChecked',
	    value: function getChecked(el) {
	      return el.checked;
	    }
	  }, {
	    key: 'setChecked',
	    value: function setChecked(el, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, value, _rtts_assertRtts_assert.assert.type.boolean);
	      el.checked = value;
	    }
	  }, {
	    key: 'createTemplate',
	    value: function createTemplate(html) {
	      var t = document.createElement('template');
	      t.innerHTML = html;
	      return t;
	    }
	  }, {
	    key: 'createElement',
	    value: function createElement(tagName) {
	      var doc = arguments[1] === undefined ? document : arguments[1];
	
	      return doc.createElement(tagName);
	    }
	  }, {
	    key: 'createTextNode',
	    value: function createTextNode(text) {
	      var doc = arguments[1] === undefined ? document : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(text, _rtts_assertRtts_assert.assert.type.string, doc, _rtts_assertRtts_assert.assert.type.any);
	      return doc.createTextNode(text);
	    }
	  }, {
	    key: 'createScriptTag',
	    value: function createScriptTag(attrName, attrValue) {
	      var doc = arguments[2] === undefined ? document : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(attrName, _rtts_assertRtts_assert.assert.type.string, attrValue, _rtts_assertRtts_assert.assert.type.string, doc, _rtts_assertRtts_assert.assert.type.any);
	      var el = doc.createElement('SCRIPT');
	      el.setAttribute(attrName, attrValue);
	      return el;
	    }
	  }, {
	    key: 'createStyleElement',
	    value: function createStyleElement(css) {
	      var doc = arguments[1] === undefined ? document : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(css, _rtts_assertRtts_assert.assert.type.string, doc, _rtts_assertRtts_assert.assert.type.any);
	      var style = doc.createElement('STYLE');
	      style.innerText = css;
	      return _rtts_assertRtts_assert.assert.returnType(style, HTMLStyleElement);
	    }
	  }, {
	    key: 'createShadowRoot',
	    value: function createShadowRoot(el) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, HTMLElement);
	      return _rtts_assertRtts_assert.assert.returnType(el.createShadowRoot(), ShadowRoot);
	    }
	  }, {
	    key: 'getShadowRoot',
	    value: function getShadowRoot(el) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, HTMLElement);
	      return _rtts_assertRtts_assert.assert.returnType(el.shadowRoot, ShadowRoot);
	    }
	  }, {
	    key: 'getHost',
	    value: function getHost(el) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, HTMLElement);
	      return _rtts_assertRtts_assert.assert.returnType(el.host, HTMLElement);
	    }
	  }, {
	    key: 'clone',
	    value: function clone(node) {
	      _rtts_assertRtts_assert.assert.argumentTypes(node, Node);
	      return node.cloneNode(true);
	    }
	  }, {
	    key: 'hasProperty',
	    value: function hasProperty(element, name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, name, _rtts_assertRtts_assert.assert.type.string);
	      return name in element;
	    }
	  }, {
	    key: 'getElementsByClassName',
	    value: function getElementsByClassName(element, name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, name, _rtts_assertRtts_assert.assert.type.string);
	      return element.getElementsByClassName(name);
	    }
	  }, {
	    key: 'getElementsByTagName',
	    value: function getElementsByTagName(element, name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, name, _rtts_assertRtts_assert.assert.type.string);
	      return element.getElementsByTagName(name);
	    }
	  }, {
	    key: 'classList',
	    value: function classList(element) {
	      return _rtts_assertRtts_assert.assert.returnType(Array.prototype.slice.call(element.classList, 0), _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: 'addClass',
	    value: function addClass(element, classname) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, classname, _rtts_assertRtts_assert.assert.type.string);
	      element.classList.add(classname);
	    }
	  }, {
	    key: 'removeClass',
	    value: function removeClass(element, classname) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, classname, _rtts_assertRtts_assert.assert.type.string);
	      element.classList.remove(classname);
	    }
	  }, {
	    key: 'hasClass',
	    value: function hasClass(element, classname) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, classname, _rtts_assertRtts_assert.assert.type.string);
	      return element.classList.contains(classname);
	    }
	  }, {
	    key: 'setStyle',
	    value: function setStyle(element, stylename, stylevalue) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, stylename, _rtts_assertRtts_assert.assert.type.string, stylevalue, _rtts_assertRtts_assert.assert.type.string);
	      element.style[stylename] = stylevalue;
	    }
	  }, {
	    key: 'removeStyle',
	    value: function removeStyle(element, stylename) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, stylename, _rtts_assertRtts_assert.assert.type.string);
	      element.style[stylename] = null;
	    }
	  }, {
	    key: 'getStyle',
	    value: function getStyle(element, stylename) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, stylename, _rtts_assertRtts_assert.assert.type.string);
	      return element.style[stylename];
	    }
	  }, {
	    key: 'tagName',
	    value: function tagName(element) {
	      return _rtts_assertRtts_assert.assert.returnType(element.tagName, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'attributeMap',
	    value: function attributeMap(element) {
	      var res = _angular2SrcFacadeCollection.MapWrapper.create();
	      var elAttrs = element.attributes;
	      for (var i = 0; i < elAttrs.length; i++) {
	        var attrib = elAttrs[i];
	        _angular2SrcFacadeCollection.MapWrapper.set(res, attrib.name, attrib.value);
	      }
	      return res;
	    }
	  }, {
	    key: 'getAttribute',
	    value: function getAttribute(element, attribute) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, attribute, _rtts_assertRtts_assert.assert.type.string);
	      return element.getAttribute(attribute);
	    }
	  }, {
	    key: 'setAttribute',
	    value: function setAttribute(element, name, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, name, _rtts_assertRtts_assert.assert.type.string, value, _rtts_assertRtts_assert.assert.type.string);
	      element.setAttribute(name, value);
	    }
	  }, {
	    key: 'removeAttribute',
	    value: function removeAttribute(element, attribute) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, attribute, _rtts_assertRtts_assert.assert.type.string);
	      return element.removeAttribute(attribute);
	    }
	  }, {
	    key: 'templateAwareRoot',
	    value: function templateAwareRoot(el) {
	      return this.isTemplateElement(el) ? this.content(el) : el;
	    }
	  }, {
	    key: 'createHtmlDocument',
	    value: function createHtmlDocument() {
	      return document.implementation.createHTMLDocument('fakeTitle');
	    }
	  }, {
	    key: 'defaultDoc',
	    value: function defaultDoc() {
	      return document;
	    }
	  }, {
	    key: 'getBoundingClientRect',
	    value: function getBoundingClientRect(el) {
	      return el.getBoundingClientRect();
	    }
	  }, {
	    key: 'getTitle',
	    value: function getTitle() {
	      return document.title;
	    }
	  }, {
	    key: 'setTitle',
	    value: function setTitle(newTitle) {
	      _rtts_assertRtts_assert.assert.argumentTypes(newTitle, _rtts_assertRtts_assert.assert.type.string);
	      document.title = newTitle;
	    }
	  }, {
	    key: 'elementMatches',
	    value: function elementMatches(n, selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(n, _rtts_assertRtts_assert.assert.type.any, selector, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(n instanceof HTMLElement && n.matches(selector), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'isTemplateElement',
	    value: function isTemplateElement(el) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any);
	      return _rtts_assertRtts_assert.assert.returnType(el instanceof HTMLElement && el.nodeName == 'TEMPLATE', _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'isTextNode',
	    value: function isTextNode(node) {
	      _rtts_assertRtts_assert.assert.argumentTypes(node, Node);
	      return _rtts_assertRtts_assert.assert.returnType(node.nodeType === Node.TEXT_NODE, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'isCommentNode',
	    value: function isCommentNode(node) {
	      _rtts_assertRtts_assert.assert.argumentTypes(node, Node);
	      return _rtts_assertRtts_assert.assert.returnType(node.nodeType === Node.COMMENT_NODE, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'isElementNode',
	    value: function isElementNode(node) {
	      _rtts_assertRtts_assert.assert.argumentTypes(node, Node);
	      return _rtts_assertRtts_assert.assert.returnType(node.nodeType === Node.ELEMENT_NODE, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'hasShadowRoot',
	    value: function hasShadowRoot(node) {
	      return _rtts_assertRtts_assert.assert.returnType(node instanceof HTMLElement && (0, _angular2SrcFacadeLang.isPresent)(node.shadowRoot), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'isShadowRoot',
	    value: function isShadowRoot(node) {
	      return _rtts_assertRtts_assert.assert.returnType(node instanceof ShadowRoot, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'importIntoDoc',
	    value: function importIntoDoc(node) {
	      _rtts_assertRtts_assert.assert.argumentTypes(node, Node);
	      var result = document.importNode(node, true);
	      if (this.isTemplateElement(result) && !this.content(result).childNodes.length && this.content(node).childNodes.length) {
	        var childNodes = this.content(node).childNodes;
	        for (var i = 0; i < childNodes.length; ++i) {
	          this.content(result).appendChild(this.importIntoDoc(childNodes[i]));
	        }
	      }
	      return result;
	    }
	  }, {
	    key: 'isPageRule',
	    value: function isPageRule(rule) {
	      return _rtts_assertRtts_assert.assert.returnType(rule.type === CSSRule.PAGE_RULE, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'isStyleRule',
	    value: function isStyleRule(rule) {
	      return _rtts_assertRtts_assert.assert.returnType(rule.type === CSSRule.STYLE_RULE, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'isMediaRule',
	    value: function isMediaRule(rule) {
	      return _rtts_assertRtts_assert.assert.returnType(rule.type === CSSRule.MEDIA_RULE, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'isKeyframesRule',
	    value: function isKeyframesRule(rule) {
	      return _rtts_assertRtts_assert.assert.returnType(rule.type === CSSRule.KEYFRAMES_RULE, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'getHref',
	    value: function getHref(el) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, Element);
	      return _rtts_assertRtts_assert.assert.returnType(el.href, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'getEventKey',
	    value: function getEventKey(event) {
	      var key = event.key;
	      if ((0, _angular2SrcFacadeLang.isBlank)(key)) {
	        key = event.keyIdentifier;
	        if ((0, _angular2SrcFacadeLang.isBlank)(key)) {
	          return _rtts_assertRtts_assert.assert.returnType('Unidentified', _rtts_assertRtts_assert.assert.type.string);
	        }
	        if (key.startsWith('U+')) {
	          key = String.fromCharCode(parseInt(key.substring(2), 16));
	          if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	            key = _chromeNumKeyPadMap[key];
	          }
	        }
	      }
	      if (_keyMap.hasOwnProperty(key)) {
	        key = _keyMap[key];
	      }
	      return _rtts_assertRtts_assert.assert.returnType(key, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'getGlobalEventTarget',
	    value: function getGlobalEventTarget(target) {
	      _rtts_assertRtts_assert.assert.argumentTypes(target, _rtts_assertRtts_assert.assert.type.string);
	      if (target == 'window') {
	        return window;
	      } else if (target == 'document') {
	        return document;
	      } else if (target == 'body') {
	        return document.body;
	      }
	    }
	  }], [{
	    key: 'makeCurrent',
	    value: function makeCurrent() {
	      (0, _dom_adapter.setRootDomAdapter)(new BrowserDomAdapter());
	    }
	  }]);
	
	  return BrowserDomAdapter;
	})(_generic_browser_adapter.GenericBrowserDomAdapter);
	
	exports.BrowserDomAdapter = BrowserDomAdapter;
	
	Object.defineProperty(BrowserDomAdapter.prototype.query, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.querySelector, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.querySelectorAll, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.nodeName, 'parameters', { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.nodeValue, 'parameters', { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.type, 'parameters', { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.content, 'parameters', { get: function get() {
	    return [[HTMLElement]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.replaceChild, 'parameters', { get: function get() {
	    return [[Node], [], []];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setText, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setValue, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setChecked, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.createTextNode, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.createScriptTag, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.createStyleElement, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.createShadowRoot, 'parameters', { get: function get() {
	    return [[HTMLElement]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getShadowRoot, 'parameters', { get: function get() {
	    return [[HTMLElement]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getHost, 'parameters', { get: function get() {
	    return [[HTMLElement]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.clone, 'parameters', { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.hasProperty, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getElementsByClassName, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getElementsByTagName, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.addClass, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.removeClass, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.hasClass, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setStyle, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.removeStyle, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getStyle, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getAttribute, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setAttribute, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.removeAttribute, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.setTitle, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.elementMatches, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.isTemplateElement, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.isTextNode, 'parameters', { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.isCommentNode, 'parameters', { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.isElementNode, 'parameters', { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.importIntoDoc, 'parameters', { get: function get() {
	    return [[Node]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getHref, 'parameters', { get: function get() {
	    return [[Element]];
	  } });
	Object.defineProperty(BrowserDomAdapter.prototype.getGlobalEventTarget, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=browser_adapter.es6.map

	//# sourceMappingURL=./browser_adapter.map

/***/ },
/* 160 */
/*!****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/dom/generic_browser_adapter.es6 ***!
  \****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _dom_adapter = __webpack_require__(/*! ./dom_adapter */ 147);
	
	var GenericBrowserDomAdapter = (function (_DomAdapter) {
	  function GenericBrowserDomAdapter() {
	    _classCallCheck(this, GenericBrowserDomAdapter);
	
	    if (_DomAdapter != null) {
	      _DomAdapter.apply(this, arguments);
	    }
	  }
	
	  _inherits(GenericBrowserDomAdapter, _DomAdapter);
	
	  _createClass(GenericBrowserDomAdapter, [{
	    key: 'getDistributedNodes',
	    value: function getDistributedNodes(el) {
	      return el.getDistributedNodes();
	    }
	  }, {
	    key: 'resolveAndSetHref',
	    value: function resolveAndSetHref(el, baseUrl, href) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, baseUrl, _rtts_assertRtts_assert.assert.type.string, href, _rtts_assertRtts_assert.assert.type.string);
	      el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	    }
	  }, {
	    key: 'cssToRules',
	    value: function cssToRules(css) {
	      _rtts_assertRtts_assert.assert.argumentTypes(css, _rtts_assertRtts_assert.assert.type.string);
	      var style = this.createStyleElement(css);
	      this.appendChild(this.defaultDoc().head, style);
	      var rules = _angular2SrcFacadeCollection.ListWrapper.create();
	      if ((0, _angular2SrcFacadeLang.isPresent)(style.sheet)) {
	        try {
	          var rawRules = style.sheet.cssRules;
	          rules = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(rawRules.length);
	          for (var i = 0; i < rawRules.length; i++) {
	            rules[i] = rawRules[i];
	          }
	        } catch (e) {}
	      } else {}
	      this.remove(style);
	      return _rtts_assertRtts_assert.assert.returnType(rules, _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: 'supportsDOMEvents',
	    value: function supportsDOMEvents() {
	      return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'supportsNativeShadowDOM',
	    value: function supportsNativeShadowDOM() {
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isFunction)(this.defaultDoc().body.createShadowRoot), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return GenericBrowserDomAdapter;
	})(_dom_adapter.DomAdapter);
	
	exports.GenericBrowserDomAdapter = GenericBrowserDomAdapter;
	
	Object.defineProperty(GenericBrowserDomAdapter, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.ABSTRACT()];
	  } });
	Object.defineProperty(GenericBrowserDomAdapter.prototype.resolveAndSetHref, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(GenericBrowserDomAdapter.prototype.cssToRules, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=generic_browser_adapter.js.map

	//# sourceMappingURL=./generic_browser_adapter.map

/***/ },
/* 161 */
/*!***********************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/compiler.es6 ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _directive_metadata_reader = __webpack_require__(/*! ./directive_metadata_reader */ 162);
	
	var _annotationsAnnotations = __webpack_require__(/*! ../annotations/annotations */ 163);
	
	var _view = __webpack_require__(/*! ./view */ 165);
	
	var _element_injector = __webpack_require__(/*! ./element_injector */ 167);
	
	var _template_resolver = __webpack_require__(/*! ./template_resolver */ 197);
	
	var _annotationsView = __webpack_require__(/*! ../annotations/view */ 155);
	
	var _component_url_mapper = __webpack_require__(/*! ./component_url_mapper */ 198);
	
	var _proto_view_factory = __webpack_require__(/*! ./proto_view_factory */ 199);
	
	var _angular2SrcServicesUrl_resolver = __webpack_require__(/*! angular2/src/services/url_resolver */ 185);
	
	var _angular2SrcRenderApi = __webpack_require__(/*! angular2/src/render/api */ 115);
	
	var renderApi = _interopRequireWildcard(_angular2SrcRenderApi);
	
	var CompilerCache = (function () {
	  function CompilerCache() {
	    _classCallCheck(this, CompilerCache);
	
	    this._cache = _angular2SrcFacadeCollection.MapWrapper.create();
	  }
	
	  _createClass(CompilerCache, [{
	    key: 'set',
	    value: function set(component, protoView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(component, _angular2SrcFacadeLang.Type, protoView, _view.AppProtoView);
	      _angular2SrcFacadeCollection.MapWrapper.set(this._cache, component, protoView);
	    }
	  }, {
	    key: 'get',
	    value: function get(component) {
	      _rtts_assertRtts_assert.assert.argumentTypes(component, _angular2SrcFacadeLang.Type);
	      var result = _angular2SrcFacadeCollection.MapWrapper.get(this._cache, component);
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.normalizeBlank)(result), _view.AppProtoView);
	    }
	  }, {
	    key: 'clear',
	    value: function clear() {
	      _angular2SrcFacadeCollection.MapWrapper.clear(this._cache);
	    }
	  }]);
	
	  return CompilerCache;
	})();
	
	exports.CompilerCache = CompilerCache;
	
	Object.defineProperty(CompilerCache, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(CompilerCache.prototype.set, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type], [_view.AppProtoView]];
	  } });
	Object.defineProperty(CompilerCache.prototype.get, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	
	var Compiler = (function () {
	  function Compiler(reader, cache, templateResolver, componentUrlMapper, urlResolver, renderer, protoViewFactory) {
	    _classCallCheck(this, Compiler);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(reader, _directive_metadata_reader.DirectiveMetadataReader, cache, CompilerCache, templateResolver, _template_resolver.TemplateResolver, componentUrlMapper, _component_url_mapper.ComponentUrlMapper, urlResolver, _angular2SrcServicesUrl_resolver.UrlResolver, renderer, renderApi.Renderer, protoViewFactory, _proto_view_factory.ProtoViewFactory);
	    this._reader = reader;
	    this._compilerCache = cache;
	    this._compiling = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._templateResolver = templateResolver;
	    this._componentUrlMapper = componentUrlMapper;
	    this._urlResolver = urlResolver;
	    this._appUrl = urlResolver.resolve(null, './');
	    this._renderer = renderer;
	    this._protoViewFactory = protoViewFactory;
	  }
	
	  _createClass(Compiler, [{
	    key: '_bindDirective',
	    value: function _bindDirective(directiveTypeOrBinding) {
	      if (directiveTypeOrBinding instanceof _element_injector.DirectiveBinding) {
	        return _rtts_assertRtts_assert.assert.returnType(directiveTypeOrBinding, _element_injector.DirectiveBinding);
	      } else if (directiveTypeOrBinding instanceof _angular2Di.Binding) {
	        var meta = this._reader.read(directiveTypeOrBinding.token);
	        return _rtts_assertRtts_assert.assert.returnType(_element_injector.DirectiveBinding.createFromBinding(directiveTypeOrBinding, meta.annotation), _element_injector.DirectiveBinding);
	      } else {
	        var meta = this._reader.read(directiveTypeOrBinding);
	        return _rtts_assertRtts_assert.assert.returnType(_element_injector.DirectiveBinding.createFromType(meta.type, meta.annotation), _element_injector.DirectiveBinding);
	      }
	    }
	  }, {
	    key: 'compileInHost',
	    value: function compileInHost(componentTypeOrBinding) {
	      var _this = this;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(componentTypeOrBinding, _rtts_assertRtts_assert.assert.type.any);
	      var componentBinding = this._bindDirective(componentTypeOrBinding);
	      this._assertTypeIsComponent(componentBinding);
	      return _rtts_assertRtts_assert.assert.returnType(this._renderer.createHostProtoView('host').then(function (hostRenderPv) {
	        return _this._compileNestedProtoViews(null, hostRenderPv, [componentBinding], true);
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, _view.AppProtoView));
	    }
	  }, {
	    key: 'compile',
	    value: function compile(component) {
	      _rtts_assertRtts_assert.assert.argumentTypes(component, _angular2SrcFacadeLang.Type);
	      var componentBinding = this._bindDirective(component);
	      this._assertTypeIsComponent(componentBinding);
	      var protoView = this._compile(componentBinding);
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.isPromise(protoView) ? protoView : _angular2SrcFacadeAsync.PromiseWrapper.resolve(protoView), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, _view.AppProtoView));
	    }
	  }, {
	    key: '_compile',
	    value: function _compile(componentBinding) {
	      var _this2 = this;
	
	      var component = componentBinding.key.token;
	      var protoView = this._compilerCache.get(component);
	      if ((0, _angular2SrcFacadeLang.isPresent)(protoView)) {
	        return protoView;
	      }
	      var pvPromise = _angular2SrcFacadeCollection.MapWrapper.get(this._compiling, component);
	      if ((0, _angular2SrcFacadeLang.isPresent)(pvPromise)) {
	        return pvPromise;
	      }
	      var template = this._templateResolver.resolve(component);
	      if ((0, _angular2SrcFacadeLang.isPresent)(template.renderer)) {
	        var directives = [];
	        pvPromise = this._renderer.createImperativeComponentProtoView(template.renderer).then(function (renderPv) {
	          return _this2._compileNestedProtoViews(componentBinding, renderPv, directives, true);
	        });
	      } else {
	        var directives = _angular2SrcFacadeCollection.ListWrapper.map(this._flattenDirectives(template), function (directive) {
	          return _this2._bindDirective(directive);
	        });
	        var renderTemplate = this._buildRenderTemplate(component, template, directives);
	        pvPromise = this._renderer.compile(renderTemplate).then(function (renderPv) {
	          return _this2._compileNestedProtoViews(componentBinding, renderPv, directives, true);
	        });
	      }
	      _angular2SrcFacadeCollection.MapWrapper.set(this._compiling, component, pvPromise);
	      return pvPromise;
	    }
	  }, {
	    key: '_compileNestedProtoViews',
	    value: function _compileNestedProtoViews(componentBinding, renderPv, directives, isComponentRootView) {
	      var _this3 = this;
	
	      var nestedPVPromises = [];
	      var protoView = this._protoViewFactory.createProtoView(componentBinding, renderPv, directives);
	      if (isComponentRootView && (0, _angular2SrcFacadeLang.isPresent)(componentBinding)) {
	        var component = componentBinding.key.token;
	        this._compilerCache.set(component, protoView);
	        _angular2SrcFacadeCollection.MapWrapper['delete'](this._compiling, component);
	      }
	      var binderIndex = 0;
	      _angular2SrcFacadeCollection.ListWrapper.forEach(protoView.elementBinders, function (elementBinder) {
	        var nestedComponent = elementBinder.componentDirective;
	        var nestedRenderProtoView = renderPv.elementBinders[binderIndex].nestedProtoView;
	        var elementBinderDone = function elementBinderDone(nestedPv) {
	          elementBinder.nestedProtoView = nestedPv;
	          nestedPv.parentProtoView = (0, _angular2SrcFacadeLang.isPresent)(nestedComponent) ? null : protoView;
	        };
	        var nestedCall = null;
	        if ((0, _angular2SrcFacadeLang.isPresent)(nestedComponent)) {
	          if (!(nestedComponent.annotation instanceof _annotationsAnnotations.DynamicComponent)) {
	            nestedCall = _this3._compile(nestedComponent);
	          }
	        } else if ((0, _angular2SrcFacadeLang.isPresent)(nestedRenderProtoView)) {
	          nestedCall = _this3._compileNestedProtoViews(componentBinding, nestedRenderProtoView, directives, false);
	        }
	        if (_angular2SrcFacadeAsync.PromiseWrapper.isPromise(nestedCall)) {
	          _angular2SrcFacadeCollection.ListWrapper.push(nestedPVPromises, nestedCall.then(elementBinderDone));
	        } else if ((0, _angular2SrcFacadeLang.isPresent)(nestedCall)) {
	          elementBinderDone(nestedCall);
	        }
	        binderIndex++;
	      });
	      var protoViewDone = function protoViewDone(_) {
	        var childComponentRenderPvRefs = [];
	        _angular2SrcFacadeCollection.ListWrapper.forEach(protoView.elementBinders, function (eb) {
	          if ((0, _angular2SrcFacadeLang.isPresent)(eb.componentDirective)) {
	            var componentPv = eb.nestedProtoView;
	            _angular2SrcFacadeCollection.ListWrapper.push(childComponentRenderPvRefs, (0, _angular2SrcFacadeLang.isPresent)(componentPv) ? componentPv.render : null);
	          }
	        });
	        _this3._renderer.mergeChildComponentProtoViews(protoView.render, childComponentRenderPvRefs);
	        return protoView;
	      };
	      if (nestedPVPromises.length > 0) {
	        return _angular2SrcFacadeAsync.PromiseWrapper.all(nestedPVPromises).then(protoViewDone);
	      } else {
	        return protoViewDone(null);
	      }
	    }
	  }, {
	    key: '_buildRenderTemplate',
	    value: function _buildRenderTemplate(component, view, directives) {
	      var componentUrl = this._urlResolver.resolve(this._appUrl, this._componentUrlMapper.getUrl(component));
	      var templateAbsUrl = null;
	      if ((0, _angular2SrcFacadeLang.isPresent)(view.templateUrl)) {
	        templateAbsUrl = this._urlResolver.resolve(componentUrl, view.templateUrl);
	      } else {
	        templateAbsUrl = componentUrl;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(new renderApi.ViewDefinition({
	        componentId: (0, _angular2SrcFacadeLang.stringify)(component),
	        absUrl: templateAbsUrl,
	        template: view.template,
	        directives: _angular2SrcFacadeCollection.ListWrapper.map(directives, Compiler.buildRenderDirective)
	      }), renderApi.ViewDefinition);
	    }
	  }, {
	    key: '_flattenDirectives',
	    value: function _flattenDirectives(template) {
	      _rtts_assertRtts_assert.assert.argumentTypes(template, _annotationsView.View);
	      if ((0, _angular2SrcFacadeLang.isBlank)(template.directives)) return _rtts_assertRtts_assert.assert.returnType([], _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeLang.Type));
	      var directives = [];
	      this._flattenList(template.directives, directives);
	      return _rtts_assertRtts_assert.assert.returnType(directives, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeLang.Type));
	    }
	  }, {
	    key: '_flattenList',
	    value: function _flattenList(tree, out) {
	      _rtts_assertRtts_assert.assert.argumentTypes(tree, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.any), out, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeLang.Type));
	      for (var i = 0; i < tree.length; i++) {
	        var item = tree[i];
	        if (_angular2SrcFacadeCollection.ListWrapper.isList(item)) {
	          this._flattenList(item, out);
	        } else {
	          _angular2SrcFacadeCollection.ListWrapper.push(out, item);
	        }
	      }
	    }
	  }, {
	    key: '_assertTypeIsComponent',
	    value: function _assertTypeIsComponent(directiveBinding) {
	      _rtts_assertRtts_assert.assert.argumentTypes(directiveBinding, _element_injector.DirectiveBinding);
	      if (!(directiveBinding.annotation instanceof _annotationsAnnotations.Component)) {
	        throw new _angular2SrcFacadeLang.BaseException('Could not load \'' + (0, _angular2SrcFacadeLang.stringify)(directiveBinding.key.token) + '\' because it is not a component.');
	      }
	    }
	  }], [{
	    key: 'buildRenderDirective',
	    value: function buildRenderDirective(directiveBinding) {
	      var ann = directiveBinding.annotation;
	      var renderType;
	      var compileChildren = true;
	      if (ann instanceof _annotationsAnnotations.Component || ann instanceof _annotationsAnnotations.DynamicComponent) {
	        renderType = renderApi.DirectiveMetadata.COMPONENT_TYPE;
	      } else if (ann instanceof _annotationsAnnotations.Viewport) {
	        renderType = renderApi.DirectiveMetadata.VIEWPORT_TYPE;
	      } else if (ann instanceof _annotationsAnnotations.Decorator) {
	        renderType = renderApi.DirectiveMetadata.DECORATOR_TYPE;
	        compileChildren = ann.compileChildren;
	      }
	      var readAttributes = [];
	      _angular2SrcFacadeCollection.ListWrapper.forEach(directiveBinding.dependencies, function (dep) {
	        if ((0, _angular2SrcFacadeLang.isPresent)(dep.attributeName)) {
	          _angular2SrcFacadeCollection.ListWrapper.push(readAttributes, dep.attributeName);
	        }
	      });
	      return _rtts_assertRtts_assert.assert.returnType(new renderApi.DirectiveMetadata({
	        id: (0, _angular2SrcFacadeLang.stringify)(directiveBinding.key.token),
	        type: renderType,
	        selector: ann.selector,
	        compileChildren: compileChildren,
	        hostListeners: (0, _angular2SrcFacadeLang.isPresent)(ann.hostListeners) ? _angular2SrcFacadeCollection.MapWrapper.createFromStringMap(ann.hostListeners) : null,
	        hostProperties: (0, _angular2SrcFacadeLang.isPresent)(ann.hostProperties) ? _angular2SrcFacadeCollection.MapWrapper.createFromStringMap(ann.hostProperties) : null,
	        properties: (0, _angular2SrcFacadeLang.isPresent)(ann.properties) ? _angular2SrcFacadeCollection.MapWrapper.createFromStringMap(ann.properties) : null,
	        readAttributes: readAttributes
	      }), renderApi.DirectiveMetadata);
	    }
	  }]);
	
	  return Compiler;
	})();
	
	exports.Compiler = Compiler;
	
	Object.defineProperty(Compiler, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(Compiler, 'parameters', { get: function get() {
	    return [[_directive_metadata_reader.DirectiveMetadataReader], [CompilerCache], [_template_resolver.TemplateResolver], [_component_url_mapper.ComponentUrlMapper], [_angular2SrcServicesUrl_resolver.UrlResolver], [renderApi.Renderer], [_proto_view_factory.ProtoViewFactory]];
	  } });
	Object.defineProperty(Compiler.prototype.compileInHost, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(Compiler.prototype.compile, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	Object.defineProperty(Compiler.prototype._compile, 'parameters', { get: function get() {
	    return [[_element_injector.DirectiveBinding]];
	  } });
	Object.defineProperty(Compiler.prototype._flattenDirectives, 'parameters', { get: function get() {
	    return [[_annotationsView.View]];
	  } });
	Object.defineProperty(Compiler.prototype._flattenList, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.any)], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeLang.Type)]];
	  } });
	Object.defineProperty(Compiler.prototype._assertTypeIsComponent, 'parameters', { get: function get() {
	    return [[_element_injector.DirectiveBinding]];
	  } });
	//# sourceMappingURL=compiler.js.map

	//# sourceMappingURL=./compiler.map

/***/ },
/* 162 */
/*!****************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/directive_metadata_reader.es6 ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _annotationsAnnotations = __webpack_require__(/*! ../annotations/annotations */ 163);
	
	var _directive_metadata = __webpack_require__(/*! ./directive_metadata */ 164);
	
	var _angular2SrcReflectionReflection = __webpack_require__(/*! angular2/src/reflection/reflection */ 109);
	
	var DirectiveMetadataReader = (function () {
	  function DirectiveMetadataReader() {
	    _classCallCheck(this, DirectiveMetadataReader);
	  }
	
	  _createClass(DirectiveMetadataReader, [{
	    key: 'read',
	    value: function read(type) {
	      _rtts_assertRtts_assert.assert.argumentTypes(type, _angular2SrcFacadeLang.Type);
	      var annotations = _angular2SrcReflectionReflection.reflector.annotations(type);
	      if ((0, _angular2SrcFacadeLang.isPresent)(annotations)) {
	        for (var i = 0; i < annotations.length; i++) {
	          var annotation = annotations[i];
	          if (annotation instanceof _annotationsAnnotations.Directive) {
	            var resolvedInjectables = null;
	            if (annotation instanceof _annotationsAnnotations.Component && (0, _angular2SrcFacadeLang.isPresent)(annotation.injectables)) {
	              resolvedInjectables = _angular2Di.Injector.resolve(annotation.injectables);
	            }
	            return _rtts_assertRtts_assert.assert.returnType(new _directive_metadata.DirectiveMetadata(type, annotation, resolvedInjectables), _directive_metadata.DirectiveMetadata);
	          }
	        }
	      }
	      throw new _angular2SrcFacadeLang.BaseException('No Directive annotation found on ' + (0, _angular2SrcFacadeLang.stringify)(type));
	    }
	  }]);
	
	  return DirectiveMetadataReader;
	})();
	
	exports.DirectiveMetadataReader = DirectiveMetadataReader;
	
	Object.defineProperty(DirectiveMetadataReader, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(DirectiveMetadataReader.prototype.read, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	//# sourceMappingURL=directive_metadata_reader.js.map

	//# sourceMappingURL=./directive_metadata_reader.map

/***/ },
/* 163 */
/*!*****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/annotations/annotations.es6 ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var Directive = (function (_Injectable) {
	  function Directive() {
	    var _ref = arguments[0] === undefined ? {} : arguments[0];
	
	    var selector = _ref.selector;
	    var properties = _ref.properties;
	    var events = _ref.events;
	    var hostListeners = _ref.hostListeners;
	    var hostProperties = _ref.hostProperties;
	    var lifecycle = _ref.lifecycle;
	
	    _classCallCheck(this, Directive);
	
	    _get(Object.getPrototypeOf(Directive.prototype), 'constructor', this).call(this);
	    this.selector = selector;
	    this.properties = properties;
	    this.events = events;
	    this.hostListeners = hostListeners;
	    this.hostProperties = hostProperties;
	    this.lifecycle = lifecycle;
	  }
	
	  _inherits(Directive, _Injectable);
	
	  _createClass(Directive, [{
	    key: 'hasLifecycleHook',
	    value: function hasLifecycleHook(hook) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hook, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(this.lifecycle) ? _angular2SrcFacadeCollection.ListWrapper.contains(this.lifecycle, hook) : false, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return Directive;
	})(_angular2Di.Injectable);
	
	exports.Directive = Directive;
	
	Object.defineProperty(Directive, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.ABSTRACT(), new _angular2SrcFacadeLang.CONST()];
	  } });
	Object.defineProperty(Directive.prototype.hasLifecycleHook, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var Component = (function (_Directive) {
	  function Component() {
	    var _ref2 = arguments[0] === undefined ? {} : arguments[0];
	
	    var selector = _ref2.selector;
	    var properties = _ref2.properties;
	    var events = _ref2.events;
	    var hostListeners = _ref2.hostListeners;
	    var hostProperties = _ref2.hostProperties;
	    var injectables = _ref2.injectables;
	    var lifecycle = _ref2.lifecycle;
	    var _ref2$changeDetection = _ref2.changeDetection;
	    var changeDetection = _ref2$changeDetection === undefined ? _angular2Change_detection.DEFAULT : _ref2$changeDetection;
	
	    _classCallCheck(this, Component);
	
	    _get(Object.getPrototypeOf(Component.prototype), 'constructor', this).call(this, {
	      selector: selector,
	      properties: properties,
	      events: events,
	      hostListeners: hostListeners,
	      hostProperties: hostProperties,
	      lifecycle: lifecycle
	    });
	    this.changeDetection = changeDetection;
	    this.injectables = injectables;
	  }
	
	  _inherits(Component, _Directive);
	
	  return Component;
	})(Directive);
	
	exports.Component = Component;
	
	Object.defineProperty(Component, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var DynamicComponent = (function (_Directive2) {
	  function DynamicComponent() {
	    var _ref3 = arguments[0] === undefined ? {} : arguments[0];
	
	    var selector = _ref3.selector;
	    var properties = _ref3.properties;
	    var events = _ref3.events;
	    var hostListeners = _ref3.hostListeners;
	    var hostProperties = _ref3.hostProperties;
	    var injectables = _ref3.injectables;
	    var lifecycle = _ref3.lifecycle;
	
	    _classCallCheck(this, DynamicComponent);
	
	    _get(Object.getPrototypeOf(DynamicComponent.prototype), 'constructor', this).call(this, {
	      selector: selector,
	      properties: properties,
	      events: events,
	      hostListeners: hostListeners,
	      hostProperties: hostProperties,
	      lifecycle: lifecycle
	    });
	    this.injectables = injectables;
	  }
	
	  _inherits(DynamicComponent, _Directive2);
	
	  return DynamicComponent;
	})(Directive);
	
	exports.DynamicComponent = DynamicComponent;
	
	Object.defineProperty(DynamicComponent, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var Decorator = (function (_Directive3) {
	  function Decorator() {
	    var _ref4 = arguments[0] === undefined ? {} : arguments[0];
	
	    var selector = _ref4.selector;
	    var properties = _ref4.properties;
	    var events = _ref4.events;
	    var hostListeners = _ref4.hostListeners;
	    var hostProperties = _ref4.hostProperties;
	    var lifecycle = _ref4.lifecycle;
	    var _ref4$compileChildren = _ref4.compileChildren;
	    var compileChildren = _ref4$compileChildren === undefined ? true : _ref4$compileChildren;
	
	    _classCallCheck(this, Decorator);
	
	    _get(Object.getPrototypeOf(Decorator.prototype), 'constructor', this).call(this, {
	      selector: selector,
	      properties: properties,
	      events: events,
	      hostListeners: hostListeners,
	      hostProperties: hostProperties,
	      lifecycle: lifecycle
	    });
	    this.compileChildren = compileChildren;
	  }
	
	  _inherits(Decorator, _Directive3);
	
	  return Decorator;
	})(Directive);
	
	exports.Decorator = Decorator;
	
	Object.defineProperty(Decorator, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var Viewport = (function (_Directive4) {
	  function Viewport() {
	    var _ref5 = arguments[0] === undefined ? {} : arguments[0];
	
	    var selector = _ref5.selector;
	    var properties = _ref5.properties;
	    var events = _ref5.events;
	    var hostListeners = _ref5.hostListeners;
	    var hostProperties = _ref5.hostProperties;
	    var lifecycle = _ref5.lifecycle;
	
	    _classCallCheck(this, Viewport);
	
	    _get(Object.getPrototypeOf(Viewport.prototype), 'constructor', this).call(this, {
	      selector: selector,
	      properties: properties,
	      events: events,
	      hostListeners: hostListeners,
	      hostProperties: hostProperties,
	      lifecycle: lifecycle
	    });
	  }
	
	  _inherits(Viewport, _Directive4);
	
	  return Viewport;
	})(Directive);
	
	exports.Viewport = Viewport;
	
	Object.defineProperty(Viewport, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	var onDestroy = 'onDestroy';
	exports.onDestroy = onDestroy;
	var onChange = 'onChange';
	exports.onChange = onChange;
	var onAllChangesDone = 'onAllChangesDone';
	//# sourceMappingURL=annotations.js.map
	
	//# sourceMappingURL=./annotations.map
	exports.onAllChangesDone = onAllChangesDone;

/***/ },
/* 164 */
/*!*********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/directive_metadata.es6 ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcCoreAnnotationsAnnotations = __webpack_require__(/*! angular2/src/core/annotations/annotations */ 163);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var DirectiveMetadata = function DirectiveMetadata(type, annotation, resolvedInjectables) {
	  _classCallCheck(this, DirectiveMetadata);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(type, _angular2SrcFacadeLang.Type, annotation, _angular2SrcCoreAnnotationsAnnotations.Directive, resolvedInjectables, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2Di.ResolvedBinding));
	  this.annotation = annotation;
	  this.type = type;
	  this.resolvedInjectables = resolvedInjectables;
	};
	
	exports.DirectiveMetadata = DirectiveMetadata;
	
	Object.defineProperty(DirectiveMetadata, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type], [_angular2SrcCoreAnnotationsAnnotations.Directive], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2Di.ResolvedBinding)]];
	  } });
	//# sourceMappingURL=directive_metadata.js.map

	//# sourceMappingURL=./directive_metadata.map

/***/ },
/* 165 */
/*!*******************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/view.es6 ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _element_injector = __webpack_require__(/*! ./element_injector */ 167);
	
	var _element_binder = __webpack_require__(/*! ./element_binder */ 166);
	
	var _angular2SrcReflectionTypes = __webpack_require__(/*! angular2/src/reflection/types */ 111);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcRenderApi = __webpack_require__(/*! angular2/src/render/api */ 115);
	
	var renderApi = _interopRequireWildcard(_angular2SrcRenderApi);
	
	var AppViewContainer = function AppViewContainer() {
	  _classCallCheck(this, AppViewContainer);
	
	  this.views = [];
	};
	
	exports.AppViewContainer = AppViewContainer;
	
	var AppView = (function () {
	  function AppView(renderer, proto, protoLocals) {
	    _classCallCheck(this, AppView);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(renderer, renderApi.Renderer, proto, AppProtoView, protoLocals, _angular2SrcFacadeCollection.Map);
	    this.render = null;
	    this.proto = proto;
	    this.changeDetector = null;
	    this.elementInjectors = null;
	    this.rootElementInjectors = null;
	    this.componentChildViews = null;
	    this.viewContainers = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(this.proto.elementBinders.length);
	    this.preBuiltObjects = null;
	    this.context = null;
	    this.locals = new _angular2Change_detection.Locals(null, _angular2SrcFacadeCollection.MapWrapper.clone(protoLocals));
	    this.renderer = renderer;
	    this.imperativeHostViews = [];
	  }
	
	  _createClass(AppView, [{
	    key: 'init',
	    value: function init(changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, componentChildViews) {
	      _rtts_assertRtts_assert.assert.argumentTypes(changeDetector, _angular2Change_detection.ChangeDetector, elementInjectors, _angular2SrcFacadeCollection.List, rootElementInjectors, _angular2SrcFacadeCollection.List, preBuiltObjects, _angular2SrcFacadeCollection.List, componentChildViews, _angular2SrcFacadeCollection.List);
	      this.changeDetector = changeDetector;
	      this.elementInjectors = elementInjectors;
	      this.rootElementInjectors = rootElementInjectors;
	      this.preBuiltObjects = preBuiltObjects;
	      this.componentChildViews = componentChildViews;
	    }
	  }, {
	    key: 'setLocal',
	    value: function setLocal(contextName, value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(contextName, _rtts_assertRtts_assert.assert.type.string, value, _rtts_assertRtts_assert.assert.type.any);
	      if (!this.hydrated()) throw new _angular2SrcFacadeLang.BaseException('Cannot set locals on dehydrated view.');
	      if (!_angular2SrcFacadeCollection.MapWrapper.contains(this.proto.variableBindings, contextName)) {
	        return;
	      }
	      var templateName = _angular2SrcFacadeCollection.MapWrapper.get(this.proto.variableBindings, contextName);
	      this.locals.set(templateName, value);
	    }
	  }, {
	    key: 'hydrated',
	    value: function hydrated() {
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(this.context), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'triggerEventHandlers',
	    value: function triggerEventHandlers(eventName, eventObj, binderIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string, eventObj, _rtts_assertRtts_assert.assert.type.any, binderIndex, _angular2SrcFacadeLang.int);
	      var locals = _angular2SrcFacadeCollection.MapWrapper.create();
	      _angular2SrcFacadeCollection.MapWrapper.set(locals, '$event', eventObj);
	      this.dispatchEvent(binderIndex, eventName, locals);
	    }
	  }, {
	    key: 'notifyOnBinding',
	    value: function notifyOnBinding(b, currentValue) {
	      _rtts_assertRtts_assert.assert.argumentTypes(b, _angular2Change_detection.BindingRecord, currentValue, _rtts_assertRtts_assert.assert.type.any);
	      if (b.isElement()) {
	        this.renderer.setElementProperty(this.render, b.elementIndex, b.propertyName, currentValue);
	      } else {
	        this.renderer.setText(this.render, b.elementIndex, currentValue);
	      }
	    }
	  }, {
	    key: 'getDirectiveFor',
	    value: function getDirectiveFor(directive) {
	      _rtts_assertRtts_assert.assert.argumentTypes(directive, _angular2Change_detection.DirectiveIndex);
	      var elementInjector = this.elementInjectors[directive.elementIndex];
	      return elementInjector.getDirectiveAtIndex(directive.directiveIndex);
	    }
	  }, {
	    key: 'getDetectorFor',
	    value: function getDetectorFor(directive) {
	      _rtts_assertRtts_assert.assert.argumentTypes(directive, _angular2Change_detection.DirectiveIndex);
	      var childView = this.componentChildViews[directive.elementIndex];
	      return (0, _angular2SrcFacadeLang.isPresent)(childView) ? childView.changeDetector : null;
	    }
	  }, {
	    key: 'dispatchEvent',
	    value: function dispatchEvent(elementIndex, eventName, locals) {
	      var _this = this;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(elementIndex, _rtts_assertRtts_assert.assert.type.number, eventName, _rtts_assertRtts_assert.assert.type.string, locals, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.any));
	      var allowDefaultBehavior = true;
	      if (this.hydrated()) {
	        var elBinder = this.proto.elementBinders[elementIndex];
	        if ((0, _angular2SrcFacadeLang.isBlank)(elBinder.hostListeners)) return _rtts_assertRtts_assert.assert.returnType(allowDefaultBehavior, _rtts_assertRtts_assert.assert.type.boolean);
	        var eventMap = elBinder.hostListeners[eventName];
	        if ((0, _angular2SrcFacadeLang.isBlank)(eventMap)) return _rtts_assertRtts_assert.assert.returnType(allowDefaultBehavior, _rtts_assertRtts_assert.assert.type.boolean);
	        _angular2SrcFacadeCollection.MapWrapper.forEach(eventMap, function (expr, directiveIndex) {
	          var context;
	          if (directiveIndex === -1) {
	            context = _this.context;
	          } else {
	            context = _this.elementInjectors[elementIndex].getDirectiveAtIndex(directiveIndex);
	          }
	          var result = expr.eval(context, new _angular2Change_detection.Locals(_this.locals, locals));
	          if ((0, _angular2SrcFacadeLang.isPresent)(result)) {
	            allowDefaultBehavior = allowDefaultBehavior && result;
	          }
	        });
	      }
	      return _rtts_assertRtts_assert.assert.returnType(allowDefaultBehavior, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return AppView;
	})();
	
	exports.AppView = AppView;
	
	Object.defineProperty(AppView, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.IMPLEMENTS(_angular2Change_detection.ChangeDispatcher)];
	  } });
	Object.defineProperty(AppView, 'parameters', { get: function get() {
	    return [[renderApi.Renderer], [AppProtoView], [_angular2SrcFacadeCollection.Map]];
	  } });
	Object.defineProperty(AppView.prototype.init, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.ChangeDetector], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(AppView.prototype.setLocal, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(AppView.prototype.triggerEventHandlers, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(AppView.prototype.notifyOnBinding, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.BindingRecord], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(AppView.prototype.getDirectiveFor, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.DirectiveIndex]];
	  } });
	Object.defineProperty(AppView.prototype.getDetectorFor, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.DirectiveIndex]];
	  } });
	Object.defineProperty(AppView.prototype.dispatchEvent, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.any)]];
	  } });
	
	var AppProtoView = (function () {
	  function AppProtoView(render, protoChangeDetector) {
	    _classCallCheck(this, AppProtoView);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(render, renderApi.ProtoViewRef, protoChangeDetector, _angular2Change_detection.ProtoChangeDetector);
	    this.render = render;
	    this.elementBinders = [];
	    this.variableBindings = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.protoLocals = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.protoChangeDetector = protoChangeDetector;
	    this.parentProtoView = null;
	    this.textNodesWithBindingCount = 0;
	    this.bindings = [];
	    this._directiveRecordsMap = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._variableBindings = null;
	    this._directiveRecords = null;
	  }
	
	  _createClass(AppProtoView, [{
	    key: 'getVariableBindings',
	    value: function getVariableBindings() {
	      var _this2 = this;
	
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._variableBindings)) {
	        return _rtts_assertRtts_assert.assert.returnType(this._variableBindings, _angular2SrcFacadeCollection.List);
	      }
	      this._variableBindings = (0, _angular2SrcFacadeLang.isPresent)(this.parentProtoView) ? _angular2SrcFacadeCollection.ListWrapper.clone(this.parentProtoView.getVariableBindings()) : [];
	      _angular2SrcFacadeCollection.MapWrapper.forEach(this.protoLocals, function (v, local) {
	        _angular2SrcFacadeCollection.ListWrapper.push(_this2._variableBindings, local);
	      });
	      return _rtts_assertRtts_assert.assert.returnType(this._variableBindings, _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: 'getdirectiveRecords',
	    value: function getdirectiveRecords() {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._directiveRecords)) {
	        return _rtts_assertRtts_assert.assert.returnType(this._directiveRecords, _angular2SrcFacadeCollection.List);
	      }
	      this._directiveRecords = [];
	      for (var injectorIndex = 0; injectorIndex < this.elementBinders.length; ++injectorIndex) {
	        var pei = this.elementBinders[injectorIndex].protoElementInjector;
	        if ((0, _angular2SrcFacadeLang.isPresent)(pei)) {
	          for (var directiveIndex = 0; directiveIndex < pei.numberOfDirectives; ++directiveIndex) {
	            _angular2SrcFacadeCollection.ListWrapper.push(this._directiveRecords, this._getDirectiveRecord(injectorIndex, directiveIndex));
	          }
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(this._directiveRecords, _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: 'bindVariable',
	    value: function bindVariable(contextName, templateName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(contextName, _rtts_assertRtts_assert.assert.type.string, templateName, _rtts_assertRtts_assert.assert.type.string);
	      _angular2SrcFacadeCollection.MapWrapper.set(this.variableBindings, contextName, templateName);
	      _angular2SrcFacadeCollection.MapWrapper.set(this.protoLocals, templateName, null);
	    }
	  }, {
	    key: 'bindElement',
	    value: function bindElement(parent, distanceToParent, protoElementInjector) {
	      var componentDirective = arguments[3] === undefined ? null : arguments[3];
	      var viewportDirective = arguments[4] === undefined ? null : arguments[4];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, _element_binder.ElementBinder, distanceToParent, _angular2SrcFacadeLang.int, protoElementInjector, _element_injector.ProtoElementInjector, componentDirective, _element_injector.DirectiveBinding, viewportDirective, _element_injector.DirectiveBinding);
	      var elBinder = new _element_binder.ElementBinder(this.elementBinders.length, parent, distanceToParent, protoElementInjector, componentDirective, viewportDirective);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.elementBinders, elBinder);
	      return _rtts_assertRtts_assert.assert.returnType(elBinder, _element_binder.ElementBinder);
	    }
	  }, {
	    key: 'bindTextNode',
	    value: function bindTextNode(expression) {
	      _rtts_assertRtts_assert.assert.argumentTypes(expression, _angular2Change_detection.AST);
	      var textNodeIndex = this.textNodesWithBindingCount++;
	      var b = _angular2Change_detection.BindingRecord.createForTextNode(expression, textNodeIndex);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.bindings, b);
	    }
	  }, {
	    key: 'bindElementProperty',
	    value: function bindElementProperty(expression, setterName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(expression, _angular2Change_detection.AST, setterName, _rtts_assertRtts_assert.assert.type.string);
	      var elementIndex = this.elementBinders.length - 1;
	      var b = _angular2Change_detection.BindingRecord.createForElement(expression, elementIndex, setterName);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.bindings, b);
	    }
	  }, {
	    key: 'bindHostElementProperty',
	    value: function bindHostElementProperty(expression, setterName, directiveIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(expression, _angular2Change_detection.AST, setterName, _rtts_assertRtts_assert.assert.type.string, directiveIndex, _angular2Change_detection.DirectiveIndex);
	      var b = _angular2Change_detection.BindingRecord.createForHostProperty(directiveIndex, expression, setterName);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.bindings, b);
	    }
	  }, {
	    key: 'bindEvent',
	    value: function bindEvent(eventBindings) {
	      var directiveIndex = arguments[1] === undefined ? -1 : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(eventBindings, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, renderApi.EventBinding), directiveIndex, _angular2SrcFacadeLang.int);
	      var elBinder = this.elementBinders[this.elementBinders.length - 1];
	      var events = elBinder.hostListeners;
	      if ((0, _angular2SrcFacadeLang.isBlank)(events)) {
	        events = _angular2SrcFacadeCollection.StringMapWrapper.create();
	        elBinder.hostListeners = events;
	      }
	      for (var i = 0; i < eventBindings.length; i++) {
	        var eventBinding = eventBindings[i];
	        var eventName = eventBinding.fullName;
	        var event = _angular2SrcFacadeCollection.StringMapWrapper.get(events, eventName);
	        if ((0, _angular2SrcFacadeLang.isBlank)(event)) {
	          event = _angular2SrcFacadeCollection.MapWrapper.create();
	          _angular2SrcFacadeCollection.StringMapWrapper.set(events, eventName, event);
	        }
	        _angular2SrcFacadeCollection.MapWrapper.set(event, directiveIndex, eventBinding.source);
	      }
	    }
	  }, {
	    key: 'bindDirectiveProperty',
	    value: function bindDirectiveProperty(directiveIndex, expression, setterName, setter) {
	      _rtts_assertRtts_assert.assert.argumentTypes(directiveIndex, _rtts_assertRtts_assert.assert.type.number, expression, _angular2Change_detection.AST, setterName, _rtts_assertRtts_assert.assert.type.string, setter, _angular2SrcReflectionTypes.SetterFn);
	      var elementIndex = this.elementBinders.length - 1;
	      var directiveRecord = this._getDirectiveRecord(elementIndex, directiveIndex);
	      var b = _angular2Change_detection.BindingRecord.createForDirective(expression, setterName, setter, directiveRecord);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.bindings, b);
	    }
	  }, {
	    key: '_getDirectiveRecord',
	    value: function _getDirectiveRecord(elementInjectorIndex, directiveIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(elementInjectorIndex, _rtts_assertRtts_assert.assert.type.number, directiveIndex, _rtts_assertRtts_assert.assert.type.number);
	      var id = elementInjectorIndex * 100 + directiveIndex;
	      var protoElementInjector = this.elementBinders[elementInjectorIndex].protoElementInjector;
	      if (!_angular2SrcFacadeCollection.MapWrapper.contains(this._directiveRecordsMap, id)) {
	        var binding = protoElementInjector.getDirectiveBindingAtIndex(directiveIndex);
	        var changeDetection = binding.changeDetection;
	        _angular2SrcFacadeCollection.MapWrapper.set(this._directiveRecordsMap, id, new _angular2Change_detection.DirectiveRecord(new _angular2Change_detection.DirectiveIndex(elementInjectorIndex, directiveIndex), binding.callOnAllChangesDone, binding.callOnChange, changeDetection));
	      }
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(this._directiveRecordsMap, id), _angular2Change_detection.DirectiveRecord);
	    }
	  }]);
	
	  return AppProtoView;
	})();
	
	exports.AppProtoView = AppProtoView;
	
	Object.defineProperty(AppProtoView, 'parameters', { get: function get() {
	    return [[renderApi.ProtoViewRef], [_angular2Change_detection.ProtoChangeDetector]];
	  } });
	Object.defineProperty(AppProtoView.prototype.bindVariable, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(AppProtoView.prototype.bindElement, 'parameters', { get: function get() {
	    return [[_element_binder.ElementBinder], [_angular2SrcFacadeLang.int], [_element_injector.ProtoElementInjector], [_element_injector.DirectiveBinding], [_element_injector.DirectiveBinding]];
	  } });
	Object.defineProperty(AppProtoView.prototype.bindTextNode, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.AST]];
	  } });
	Object.defineProperty(AppProtoView.prototype.bindElementProperty, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.AST], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(AppProtoView.prototype.bindHostElementProperty, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.AST], [_rtts_assertRtts_assert.assert.type.string], [_angular2Change_detection.DirectiveIndex]];
	  } });
	Object.defineProperty(AppProtoView.prototype.bindEvent, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, renderApi.EventBinding)], [_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(AppProtoView.prototype.bindDirectiveProperty, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_angular2Change_detection.AST], [_rtts_assertRtts_assert.assert.type.string], [_angular2SrcReflectionTypes.SetterFn]];
	  } });
	Object.defineProperty(AppProtoView.prototype._getDirectiveRecord, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	//# sourceMappingURL=view.js.map

	//# sourceMappingURL=./view.map

/***/ },
/* 166 */
/*!*****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/element_binder.es6 ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _element_injector = __webpack_require__(/*! ./element_injector */ 167);
	
	var eiModule = _interopRequireWildcard(_element_injector);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _view = __webpack_require__(/*! ./view */ 165);
	
	var viewModule = _interopRequireWildcard(_view);
	
	var ElementBinder = (function () {
	  function ElementBinder(index, parent, distanceToParent, protoElementInjector, componentDirective, viewportDirective) {
	    _classCallCheck(this, ElementBinder);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int, parent, ElementBinder, distanceToParent, _angular2SrcFacadeLang.int, protoElementInjector, eiModule.ProtoElementInjector, componentDirective, _element_injector.DirectiveBinding, viewportDirective, _element_injector.DirectiveBinding);
	    if ((0, _angular2SrcFacadeLang.isBlank)(index)) {
	      throw new _angular2SrcFacadeLang.BaseException('null index not allowed.');
	    }
	    this.protoElementInjector = protoElementInjector;
	    this.componentDirective = componentDirective;
	    this.viewportDirective = viewportDirective;
	    this.parent = parent;
	    this.index = index;
	    this.distanceToParent = distanceToParent;
	    this.hostListeners = null;
	    this.nestedProtoView = null;
	  }
	
	  _createClass(ElementBinder, [{
	    key: 'hasStaticComponent',
	    value: function hasStaticComponent() {
	      return (0, _angular2SrcFacadeLang.isPresent)(this.componentDirective) && (0, _angular2SrcFacadeLang.isPresent)(this.nestedProtoView);
	    }
	  }, {
	    key: 'hasDynamicComponent',
	    value: function hasDynamicComponent() {
	      return (0, _angular2SrcFacadeLang.isPresent)(this.componentDirective) && (0, _angular2SrcFacadeLang.isBlank)(this.nestedProtoView);
	    }
	  }]);
	
	  return ElementBinder;
	})();
	
	exports.ElementBinder = ElementBinder;
	
	Object.defineProperty(ElementBinder, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int], [ElementBinder], [_angular2SrcFacadeLang.int], [eiModule.ProtoElementInjector], [_element_injector.DirectiveBinding], [_element_injector.DirectiveBinding]];
	  } });
	//# sourceMappingURL=element_binder.js.map

	//# sourceMappingURL=./element_binder.map

/***/ },
/* 167 */
/*!*******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/element_injector.es6 ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeMath = __webpack_require__(/*! angular2/src/facade/math */ 168);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcCoreAnnotationsVisibility = __webpack_require__(/*! angular2/src/core/annotations/visibility */ 153);
	
	var _angular2SrcCoreAnnotationsDi = __webpack_require__(/*! angular2/src/core/annotations/di */ 169);
	
	var _angular2SrcCoreCompilerView = __webpack_require__(/*! angular2/src/core/compiler/view */ 165);
	
	var viewModule = _interopRequireWildcard(_angular2SrcCoreCompilerView);
	
	var _view_manager = __webpack_require__(/*! ./view_manager */ 170);
	
	var avmModule = _interopRequireWildcard(_view_manager);
	
	var _angular2SrcCoreCompilerView_container_ref = __webpack_require__(/*! angular2/src/core/compiler/view_container_ref */ 194);
	
	var _angular2SrcCoreCompilerNg_element = __webpack_require__(/*! angular2/src/core/compiler/ng_element */ 172);
	
	var _angular2SrcCoreAnnotationsAnnotations = __webpack_require__(/*! angular2/src/core/annotations/annotations */ 163);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _query_list = __webpack_require__(/*! ./query_list */ 195);
	
	var _angular2SrcReflectionReflection = __webpack_require__(/*! angular2/src/reflection/reflection */ 109);
	
	var _MAX_DIRECTIVE_CONSTRUCTION_COUNTER = 10;
	var MAX_DEPTH = _angular2SrcFacadeMath.Math.pow(2, 30) - 1;
	var _undefined = new Object();
	var _staticKeys;
	
	var ElementRef = function ElementRef(elementInjector, hostView, boundElementIndex, injector, viewManager, defaultProtoView) {
	  _classCallCheck(this, ElementRef);
	
	  this.elementInjector = elementInjector;
	  this.hostView = hostView;
	  this.boundElementIndex = boundElementIndex;
	  this.injector = injector;
	  this.viewContainer = new _angular2SrcCoreCompilerView_container_ref.ViewContainerRef(viewManager, this, defaultProtoView);
	};
	
	exports.ElementRef = ElementRef;
	
	var StaticKeys = (function () {
	  function StaticKeys() {
	    _classCallCheck(this, StaticKeys);
	
	    this.viewManagerId = _angular2Di.Key.get(avmModule.AppViewManager).id;
	    this.defaultProtoViewId = _angular2Di.Key.get(viewModule.AppProtoView).id;
	    this.viewId = _angular2Di.Key.get(viewModule.AppView).id;
	    this.ngElementId = _angular2Di.Key.get(_angular2SrcCoreCompilerNg_element.NgElement).id;
	    this.viewContainerId = _angular2Di.Key.get(_angular2SrcCoreCompilerView_container_ref.ViewContainerRef).id;
	    this.changeDetectorRefId = _angular2Di.Key.get(_angular2Change_detection.ChangeDetectorRef).id;
	    this.elementRefId = _angular2Di.Key.get(ElementRef).id;
	  }
	
	  _createClass(StaticKeys, null, [{
	    key: 'instance',
	    value: function instance() {
	      if ((0, _angular2SrcFacadeLang.isBlank)(_staticKeys)) _staticKeys = new StaticKeys();
	      return _rtts_assertRtts_assert.assert.returnType(_staticKeys, StaticKeys);
	    }
	  }]);
	
	  return StaticKeys;
	})();
	
	var TreeNode = (function () {
	  function TreeNode(parent) {
	    _classCallCheck(this, TreeNode);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parent, TreeNode);
	    this._head = null;
	    this._tail = null;
	    this._next = null;
	    if ((0, _angular2SrcFacadeLang.isPresent)(parent)) parent.addChild(this);
	  }
	
	  _createClass(TreeNode, [{
	    key: '_assertConsistency',
	    value: function _assertConsistency() {
	      this._assertHeadBeforeTail();
	      this._assertTailReachable();
	      this._assertPresentInParentList();
	    }
	  }, {
	    key: '_assertHeadBeforeTail',
	    value: function _assertHeadBeforeTail() {
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._tail) && (0, _angular2SrcFacadeLang.isPresent)(this._head)) throw new _angular2SrcFacadeLang.BaseException('null tail but non-null head');
	    }
	  }, {
	    key: '_assertTailReachable',
	    value: function _assertTailReachable() {
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._tail)) return;
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._tail._next)) throw new _angular2SrcFacadeLang.BaseException('node after tail');
	      var p = this._head;
	      while ((0, _angular2SrcFacadeLang.isPresent)(p) && p != this._tail) p = p._next;
	      if ((0, _angular2SrcFacadeLang.isBlank)(p) && (0, _angular2SrcFacadeLang.isPresent)(this._tail)) throw new _angular2SrcFacadeLang.BaseException('tail not reachable.');
	    }
	  }, {
	    key: '_assertPresentInParentList',
	    value: function _assertPresentInParentList() {
	      var p = this._parent;
	      if ((0, _angular2SrcFacadeLang.isBlank)(p)) {
	        return;
	      }
	      var cur = p._head;
	      while ((0, _angular2SrcFacadeLang.isPresent)(cur) && cur != this) cur = cur._next;
	      if ((0, _angular2SrcFacadeLang.isBlank)(cur)) throw new _angular2SrcFacadeLang.BaseException('node not reachable through parent.');
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(child) {
	      _rtts_assertRtts_assert.assert.argumentTypes(child, TreeNode);
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._tail)) {
	        this._tail._next = child;
	        this._tail = child;
	      } else {
	        this._tail = this._head = child;
	      }
	      child._next = null;
	      child._parent = this;
	      this._assertConsistency();
	    }
	  }, {
	    key: 'addChildAfter',
	    value: function addChildAfter(child, prevSibling) {
	      _rtts_assertRtts_assert.assert.argumentTypes(child, TreeNode, prevSibling, TreeNode);
	      this._assertConsistency();
	      if ((0, _angular2SrcFacadeLang.isBlank)(prevSibling)) {
	        var prevHead = this._head;
	        this._head = child;
	        child._next = prevHead;
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._tail)) this._tail = child;
	      } else if ((0, _angular2SrcFacadeLang.isBlank)(prevSibling._next)) {
	        this.addChild(child);
	        return;
	      } else {
	        prevSibling._assertPresentInParentList();
	        child._next = prevSibling._next;
	        prevSibling._next = child;
	      }
	      child._parent = this;
	      this._assertConsistency();
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {
	      this._assertConsistency();
	      if ((0, _angular2SrcFacadeLang.isBlank)(this.parent)) return;
	      var nextSibling = this._next;
	      var prevSibling = this._findPrev();
	      if ((0, _angular2SrcFacadeLang.isBlank)(prevSibling)) {
	        this.parent._head = this._next;
	      } else {
	        prevSibling._next = this._next;
	      }
	      if ((0, _angular2SrcFacadeLang.isBlank)(nextSibling)) {
	        this._parent._tail = prevSibling;
	      }
	      this._parent._assertConsistency();
	      this._parent = null;
	      this._next = null;
	      this._assertConsistency();
	    }
	  }, {
	    key: '_findPrev',
	    value: function _findPrev() {
	      var node = this.parent._head;
	      if (node == this) return null;
	      while (node._next !== this) node = node._next;
	      return node;
	    }
	  }, {
	    key: 'parent',
	    get: function () {
	      return this._parent;
	    }
	  }, {
	    key: 'children',
	    get: function () {
	      var res = [];
	      var child = this._head;
	      while (child != null) {
	        _angular2SrcFacadeCollection.ListWrapper.push(res, child);
	        child = child._next;
	      }
	      return res;
	    }
	  }]);
	
	  return TreeNode;
	})();
	
	exports.TreeNode = TreeNode;
	
	Object.defineProperty(TreeNode, 'parameters', { get: function get() {
	    return [[TreeNode]];
	  } });
	Object.defineProperty(TreeNode.prototype.addChild, 'parameters', { get: function get() {
	    return [[TreeNode]];
	  } });
	Object.defineProperty(TreeNode.prototype.addChildAfter, 'parameters', { get: function get() {
	    return [[TreeNode], [TreeNode]];
	  } });
	
	var DirectiveDependency = (function (_Dependency) {
	  function DirectiveDependency(key, asPromise, lazy, optional, properties, depth, attributeName, queryDirective) {
	    _classCallCheck(this, DirectiveDependency);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(key, _angular2Di.Key, asPromise, _rtts_assertRtts_assert.assert.type.boolean, lazy, _rtts_assertRtts_assert.assert.type.boolean, optional, _rtts_assertRtts_assert.assert.type.boolean, properties, _angular2SrcFacadeCollection.List, depth, _angular2SrcFacadeLang.int, attributeName, _rtts_assertRtts_assert.assert.type.string, queryDirective, _rtts_assertRtts_assert.assert.type.any);
	    _get(Object.getPrototypeOf(DirectiveDependency.prototype), 'constructor', this).call(this, key, asPromise, lazy, optional, properties);
	    this.depth = depth;
	    this.attributeName = attributeName;
	    this.queryDirective = queryDirective;
	    this._verify();
	  }
	
	  _inherits(DirectiveDependency, _Dependency);
	
	  _createClass(DirectiveDependency, [{
	    key: '_verify',
	    value: function _verify() {
	      var count = 0;
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.queryDirective)) count++;
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.attributeName)) count++;
	      if (count > 1) throw new _angular2SrcFacadeLang.BaseException('A directive injectable can contain only one of the following @Attribute or @Query.');
	    }
	  }], [{
	    key: 'createFrom',
	    value: function createFrom(d) {
	      _rtts_assertRtts_assert.assert.argumentTypes(d, _angular2Di.Dependency);
	      return _rtts_assertRtts_assert.assert.returnType(new DirectiveDependency(d.key, d.asPromise, d.lazy, d.optional, d.properties, DirectiveDependency._depth(d.properties), DirectiveDependency._attributeName(d.properties), DirectiveDependency._query(d.properties)), _angular2Di.Dependency);
	    }
	  }, {
	    key: '_depth',
	    value: function _depth(properties) {
	      if (properties.length == 0) return _rtts_assertRtts_assert.assert.returnType(0, _angular2SrcFacadeLang.int);
	      if (_angular2SrcFacadeCollection.ListWrapper.any(properties, function (p) {
	        return p instanceof _angular2SrcCoreAnnotationsVisibility.Parent;
	      })) return _rtts_assertRtts_assert.assert.returnType(1, _angular2SrcFacadeLang.int);
	      if (_angular2SrcFacadeCollection.ListWrapper.any(properties, function (p) {
	        return p instanceof _angular2SrcCoreAnnotationsVisibility.Ancestor;
	      })) return _rtts_assertRtts_assert.assert.returnType(MAX_DEPTH, _angular2SrcFacadeLang.int);
	      return _rtts_assertRtts_assert.assert.returnType(0, _angular2SrcFacadeLang.int);
	    }
	  }, {
	    key: '_attributeName',
	    value: function _attributeName(properties) {
	      var p = _angular2SrcFacadeCollection.ListWrapper.find(properties, function (p) {
	        return p instanceof _angular2SrcCoreAnnotationsDi.Attribute;
	      });
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(p) ? p.attributeName : null, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_query',
	    value: function _query(properties) {
	      var p = _angular2SrcFacadeCollection.ListWrapper.find(properties, function (p) {
	        return p instanceof _angular2SrcCoreAnnotationsDi.Query;
	      });
	      return (0, _angular2SrcFacadeLang.isPresent)(p) ? p.directive : null;
	    }
	  }]);
	
	  return DirectiveDependency;
	})(_angular2Di.Dependency);
	
	exports.DirectiveDependency = DirectiveDependency;
	
	Object.defineProperty(DirectiveDependency, 'parameters', { get: function get() {
	    return [[_angular2Di.Key], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.boolean], [_angular2SrcFacadeCollection.List], [_angular2SrcFacadeLang.int], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(DirectiveDependency.createFrom, 'parameters', { get: function get() {
	    return [[_angular2Di.Dependency]];
	  } });
	
	var DirectiveBinding = (function (_ResolvedBinding) {
	  function DirectiveBinding(key, factory, dependencies, providedAsPromise, annotation) {
	    _classCallCheck(this, DirectiveBinding);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(key, _angular2Di.Key, factory, Function, dependencies, _angular2SrcFacadeCollection.List, providedAsPromise, _rtts_assertRtts_assert.assert.type.boolean, annotation, _angular2SrcCoreAnnotationsAnnotations.Directive);
	    _get(Object.getPrototypeOf(DirectiveBinding.prototype), 'constructor', this).call(this, key, factory, dependencies, providedAsPromise);
	    this.callOnDestroy = (0, _angular2SrcFacadeLang.isPresent)(annotation) && annotation.hasLifecycleHook(_angular2SrcCoreAnnotationsAnnotations.onDestroy);
	    this.callOnChange = (0, _angular2SrcFacadeLang.isPresent)(annotation) && annotation.hasLifecycleHook(_angular2SrcCoreAnnotationsAnnotations.onChange);
	    this.callOnAllChangesDone = (0, _angular2SrcFacadeLang.isPresent)(annotation) && annotation.hasLifecycleHook(_angular2SrcCoreAnnotationsAnnotations.onAllChangesDone);
	    this.annotation = annotation;
	    if (annotation instanceof _angular2SrcCoreAnnotationsAnnotations.Component && (0, _angular2SrcFacadeLang.isPresent)(annotation.injectables)) {
	      this.resolvedInjectables = _angular2Di.Injector.resolve(annotation.injectables);
	    }
	  }
	
	  _inherits(DirectiveBinding, _ResolvedBinding);
	
	  _createClass(DirectiveBinding, [{
	    key: 'displayName',
	    get: function () {
	      return this.key.displayName;
	    }
	  }, {
	    key: 'eventEmitters',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(this.annotation) && (0, _angular2SrcFacadeLang.isPresent)(this.annotation.events) ? this.annotation.events : [], _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }, {
	    key: 'changeDetection',
	    get: function () {
	      if (this.annotation instanceof _angular2SrcCoreAnnotationsAnnotations.Component) {
	        var c = _rtts_assertRtts_assert.assert.type(this.annotation, _angular2SrcCoreAnnotationsAnnotations.Component);
	        return c.changeDetection;
	      } else {
	        return null;
	      }
	    }
	  }], [{
	    key: 'createFromBinding',
	    value: function createFromBinding(b, annotation) {
	      _rtts_assertRtts_assert.assert.argumentTypes(b, _angular2Di.Binding, annotation, _angular2SrcCoreAnnotationsAnnotations.Directive);
	      var rb = b.resolve();
	      var deps = _angular2SrcFacadeCollection.ListWrapper.map(rb.dependencies, DirectiveDependency.createFrom);
	      return _rtts_assertRtts_assert.assert.returnType(new DirectiveBinding(rb.key, rb.factory, deps, rb.providedAsPromise, annotation), DirectiveBinding);
	    }
	  }, {
	    key: 'createFromType',
	    value: function createFromType(type, annotation) {
	      _rtts_assertRtts_assert.assert.argumentTypes(type, _angular2SrcFacadeLang.Type, annotation, _angular2SrcCoreAnnotationsAnnotations.Directive);
	      var binding = new _angular2Di.Binding(type, { toClass: type });
	      return _rtts_assertRtts_assert.assert.returnType(DirectiveBinding.createFromBinding(binding, annotation), DirectiveBinding);
	    }
	  }]);
	
	  return DirectiveBinding;
	})(_angular2Di.ResolvedBinding);
	
	exports.DirectiveBinding = DirectiveBinding;
	
	Object.defineProperty(DirectiveBinding, 'parameters', { get: function get() {
	    return [[_angular2Di.Key], [Function], [_angular2SrcFacadeCollection.List], [_rtts_assertRtts_assert.assert.type.boolean], [_angular2SrcCoreAnnotationsAnnotations.Directive]];
	  } });
	Object.defineProperty(DirectiveBinding.createFromBinding, 'parameters', { get: function get() {
	    return [[_angular2Di.Binding], [_angular2SrcCoreAnnotationsAnnotations.Directive]];
	  } });
	Object.defineProperty(DirectiveBinding.createFromType, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type], [_angular2SrcCoreAnnotationsAnnotations.Directive]];
	  } });
	
	var PreBuiltObjects = function PreBuiltObjects(viewManager, view, element, defaultProtoView) {
	  _classCallCheck(this, PreBuiltObjects);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(viewManager, avmModule.AppViewManager, view, viewModule.AppView, element, _angular2SrcCoreCompilerNg_element.NgElement, defaultProtoView, viewModule.AppProtoView);
	  this.viewManager = viewManager;
	  this.view = view;
	  this.defaultProtoView = defaultProtoView;
	  this.element = element;
	};
	
	exports.PreBuiltObjects = PreBuiltObjects;
	
	Object.defineProperty(PreBuiltObjects, 'parameters', { get: function get() {
	    return [[avmModule.AppViewManager], [viewModule.AppView], [_angular2SrcCoreCompilerNg_element.NgElement], [viewModule.AppProtoView]];
	  } });
	
	var EventEmitterAccessor = (function () {
	  function EventEmitterAccessor(eventName, getter) {
	    _classCallCheck(this, EventEmitterAccessor);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string, getter, Function);
	    this.eventName = eventName;
	    this.getter = getter;
	  }
	
	  _createClass(EventEmitterAccessor, [{
	    key: 'subscribe',
	    value: function subscribe(view, boundElementIndex, directive) {
	      var _this = this;
	
	      var eventEmitter = this.getter(directive);
	      return _angular2SrcFacadeAsync.ObservableWrapper.subscribe(eventEmitter, function (eventObj) {
	        return view.triggerEventHandlers(_this.eventName, eventObj, boundElementIndex);
	      });
	    }
	  }]);
	
	  return EventEmitterAccessor;
	})();
	
	Object.defineProperty(EventEmitterAccessor, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [Function]];
	  } });
	Object.defineProperty(EventEmitterAccessor.prototype.subscribe, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number], [Object]];
	  } });
	
	var ProtoElementInjector = (function () {
	  function ProtoElementInjector(parent, index, bindings) {
	    var firstBindingIsComponent = arguments[3] === undefined ? false : arguments[3];
	    var distanceToParent = arguments[4] === undefined ? 0 : arguments[4];
	
	    _classCallCheck(this, ProtoElementInjector);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parent, ProtoElementInjector, index, _angular2SrcFacadeLang.int, bindings, _angular2SrcFacadeCollection.List, firstBindingIsComponent, _rtts_assertRtts_assert.assert.type.boolean, distanceToParent, _rtts_assertRtts_assert.assert.type.number);
	    this.parent = parent;
	    this.index = index;
	    this.distanceToParent = distanceToParent;
	    this.exportComponent = false;
	    this.exportElement = false;
	    this._binding0IsComponent = firstBindingIsComponent;
	    this._binding0 = null;
	    this._keyId0 = null;
	    this._binding1 = null;
	    this._keyId1 = null;
	    this._binding2 = null;
	    this._keyId2 = null;
	    this._binding3 = null;
	    this._keyId3 = null;
	    this._binding4 = null;
	    this._keyId4 = null;
	    this._binding5 = null;
	    this._keyId5 = null;
	    this._binding6 = null;
	    this._keyId6 = null;
	    this._binding7 = null;
	    this._keyId7 = null;
	    this._binding8 = null;
	    this._keyId8 = null;
	    this._binding9 = null;
	    this._keyId9 = null;
	    this.numberOfDirectives = bindings.length;
	    var length = bindings.length;
	    this.eventEmitterAccessors = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(length);
	    if (length > 0) {
	      this._binding0 = this._createBinding(bindings[0]);
	      this._keyId0 = this._binding0.key.id;
	      this.eventEmitterAccessors[0] = this._createEventEmitterAccessors(this._binding0);
	    }
	    if (length > 1) {
	      this._binding1 = this._createBinding(bindings[1]);
	      this._keyId1 = this._binding1.key.id;
	      this.eventEmitterAccessors[1] = this._createEventEmitterAccessors(this._binding1);
	    }
	    if (length > 2) {
	      this._binding2 = this._createBinding(bindings[2]);
	      this._keyId2 = this._binding2.key.id;
	      this.eventEmitterAccessors[2] = this._createEventEmitterAccessors(this._binding2);
	    }
	    if (length > 3) {
	      this._binding3 = this._createBinding(bindings[3]);
	      this._keyId3 = this._binding3.key.id;
	      this.eventEmitterAccessors[3] = this._createEventEmitterAccessors(this._binding3);
	    }
	    if (length > 4) {
	      this._binding4 = this._createBinding(bindings[4]);
	      this._keyId4 = this._binding4.key.id;
	      this.eventEmitterAccessors[4] = this._createEventEmitterAccessors(this._binding4);
	    }
	    if (length > 5) {
	      this._binding5 = this._createBinding(bindings[5]);
	      this._keyId5 = this._binding5.key.id;
	      this.eventEmitterAccessors[5] = this._createEventEmitterAccessors(this._binding5);
	    }
	    if (length > 6) {
	      this._binding6 = this._createBinding(bindings[6]);
	      this._keyId6 = this._binding6.key.id;
	      this.eventEmitterAccessors[6] = this._createEventEmitterAccessors(this._binding6);
	    }
	    if (length > 7) {
	      this._binding7 = this._createBinding(bindings[7]);
	      this._keyId7 = this._binding7.key.id;
	      this.eventEmitterAccessors[7] = this._createEventEmitterAccessors(this._binding7);
	    }
	    if (length > 8) {
	      this._binding8 = this._createBinding(bindings[8]);
	      this._keyId8 = this._binding8.key.id;
	      this.eventEmitterAccessors[8] = this._createEventEmitterAccessors(this._binding8);
	    }
	    if (length > 9) {
	      this._binding9 = this._createBinding(bindings[9]);
	      this._keyId9 = this._binding9.key.id;
	      this.eventEmitterAccessors[9] = this._createEventEmitterAccessors(this._binding9);
	    }
	    if (length > 10) {
	      throw 'Maximum number of directives per element has been reached.';
	    }
	  }
	
	  _createClass(ProtoElementInjector, [{
	    key: '_createEventEmitterAccessors',
	    value: function _createEventEmitterAccessors(b) {
	      return _angular2SrcFacadeCollection.ListWrapper.map(b.eventEmitters, function (eventName) {
	        return new EventEmitterAccessor(eventName, _angular2SrcReflectionReflection.reflector.getter(eventName));
	      });
	    }
	  }, {
	    key: 'instantiate',
	    value: function instantiate(parent) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, ElementInjector);
	      return _rtts_assertRtts_assert.assert.returnType(new ElementInjector(this, parent), ElementInjector);
	    }
	  }, {
	    key: 'directParent',
	    value: function directParent() {
	      return _rtts_assertRtts_assert.assert.returnType(this.distanceToParent < 2 ? this.parent : null, ProtoElementInjector);
	    }
	  }, {
	    key: '_createBinding',
	    value: function _createBinding(bindingOrType) {
	      if (bindingOrType instanceof DirectiveBinding) {
	        return bindingOrType;
	      } else {
	        var b = (0, _angular2Di.bind)(bindingOrType).toClass(bindingOrType);
	        return DirectiveBinding.createFromBinding(b, null);
	      }
	    }
	  }, {
	    key: 'hasBindings',
	    get: function () {
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(this._binding0), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'getDirectiveBindingAtIndex',
	    value: function getDirectiveBindingAtIndex(index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int);
	      if (index == 0) return this._binding0;
	      if (index == 1) return this._binding1;
	      if (index == 2) return this._binding2;
	      if (index == 3) return this._binding3;
	      if (index == 4) return this._binding4;
	      if (index == 5) return this._binding5;
	      if (index == 6) return this._binding6;
	      if (index == 7) return this._binding7;
	      if (index == 8) return this._binding8;
	      if (index == 9) return this._binding9;
	      throw new OutOfBoundsAccess(index);
	    }
	  }]);
	
	  return ProtoElementInjector;
	})();
	
	exports.ProtoElementInjector = ProtoElementInjector;
	
	Object.defineProperty(ProtoElementInjector, 'parameters', { get: function get() {
	    return [[ProtoElementInjector], [_angular2SrcFacadeLang.int], [_angular2SrcFacadeCollection.List], [_rtts_assertRtts_assert.assert.type.boolean], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(ProtoElementInjector.prototype._createEventEmitterAccessors, 'parameters', { get: function get() {
	    return [[DirectiveBinding]];
	  } });
	Object.defineProperty(ProtoElementInjector.prototype.instantiate, 'parameters', { get: function get() {
	    return [[ElementInjector]];
	  } });
	Object.defineProperty(ProtoElementInjector.prototype.getDirectiveBindingAtIndex, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	
	var ElementInjector = (function (_TreeNode) {
	  function ElementInjector(proto, parent) {
	    _classCallCheck(this, ElementInjector);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(proto, ProtoElementInjector, parent, ElementInjector);
	    _get(Object.getPrototypeOf(ElementInjector.prototype), 'constructor', this).call(this, parent);
	    this._proto = proto;
	    this._preBuiltObjects = null;
	    this._lightDomAppInjector = null;
	    this._shadowDomAppInjector = null;
	    this._obj0 = null;
	    this._obj1 = null;
	    this._obj2 = null;
	    this._obj3 = null;
	    this._obj4 = null;
	    this._obj5 = null;
	    this._obj6 = null;
	    this._obj7 = null;
	    this._obj8 = null;
	    this._obj9 = null;
	    this._constructionCounter = 0;
	    this._inheritQueries(parent);
	    this._buildQueries();
	  }
	
	  _inherits(ElementInjector, _TreeNode);
	
	  _createClass(ElementInjector, [{
	    key: 'clearDirectives',
	    value: function clearDirectives() {
	      this._host = null;
	      this._preBuiltObjects = null;
	      this._lightDomAppInjector = null;
	      this._shadowDomAppInjector = null;
	      var p = this._proto;
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding0) && p._binding0.callOnDestroy) {
	        this._obj0.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding1) && p._binding1.callOnDestroy) {
	        this._obj1.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding2) && p._binding2.callOnDestroy) {
	        this._obj2.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding3) && p._binding3.callOnDestroy) {
	        this._obj3.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding4) && p._binding4.callOnDestroy) {
	        this._obj4.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding5) && p._binding5.callOnDestroy) {
	        this._obj5.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding6) && p._binding6.callOnDestroy) {
	        this._obj6.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding7) && p._binding7.callOnDestroy) {
	        this._obj7.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding8) && p._binding8.callOnDestroy) {
	        this._obj8.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding9) && p._binding9.callOnDestroy) {
	        this._obj9.onDestroy();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._dynamicallyCreatedComponentBinding) && this._dynamicallyCreatedComponentBinding.callOnDestroy) {
	        this._dynamicallyCreatedComponent.onDestroy();
	      }
	      this._obj0 = null;
	      this._obj1 = null;
	      this._obj2 = null;
	      this._obj3 = null;
	      this._obj4 = null;
	      this._obj5 = null;
	      this._obj6 = null;
	      this._obj7 = null;
	      this._obj8 = null;
	      this._obj9 = null;
	      this._dynamicallyCreatedComponent = null;
	      this._dynamicallyCreatedComponentBinding = null;
	      this._constructionCounter = 0;
	    }
	  }, {
	    key: 'instantiateDirectives',
	    value: function instantiateDirectives(lightDomAppInjector, host, shadowDomAppInjector, preBuiltObjects) {
	      _rtts_assertRtts_assert.assert.argumentTypes(lightDomAppInjector, _angular2Di.Injector, host, ElementInjector, shadowDomAppInjector, _angular2Di.Injector, preBuiltObjects, PreBuiltObjects);
	      this._host = host;
	      this._checkShadowDomAppInjector(shadowDomAppInjector);
	      this._preBuiltObjects = preBuiltObjects;
	      this._lightDomAppInjector = lightDomAppInjector;
	      this._shadowDomAppInjector = shadowDomAppInjector;
	      var p = this._proto;
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId0)) this._getDirectiveByKeyId(p._keyId0);
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId1)) this._getDirectiveByKeyId(p._keyId1);
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId2)) this._getDirectiveByKeyId(p._keyId2);
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId3)) this._getDirectiveByKeyId(p._keyId3);
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId4)) this._getDirectiveByKeyId(p._keyId4);
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId5)) this._getDirectiveByKeyId(p._keyId5);
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId6)) this._getDirectiveByKeyId(p._keyId6);
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId7)) this._getDirectiveByKeyId(p._keyId7);
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId8)) this._getDirectiveByKeyId(p._keyId8);
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._keyId9)) this._getDirectiveByKeyId(p._keyId9);
	    }
	  }, {
	    key: 'dynamicallyCreateComponent',
	    value: function dynamicallyCreateComponent(directiveBinding, injector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(directiveBinding, _rtts_assertRtts_assert.assert.type.any, injector, _angular2Di.Injector);
	      this._shadowDomAppInjector = injector;
	      this._dynamicallyCreatedComponentBinding = directiveBinding;
	      this._dynamicallyCreatedComponent = this._new(this._dynamicallyCreatedComponentBinding);
	      return this._dynamicallyCreatedComponent;
	    }
	  }, {
	    key: '_checkShadowDomAppInjector',
	    value: function _checkShadowDomAppInjector(shadowDomAppInjector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(shadowDomAppInjector, _angular2Di.Injector);
	      if (this._proto._binding0IsComponent && (0, _angular2SrcFacadeLang.isBlank)(shadowDomAppInjector)) {
	        throw new _angular2SrcFacadeLang.BaseException('A shadowDomAppInjector is required as this ElementInjector contains a component');
	      } else if (!this._proto._binding0IsComponent && (0, _angular2SrcFacadeLang.isPresent)(shadowDomAppInjector)) {
	        throw new _angular2SrcFacadeLang.BaseException('No shadowDomAppInjector allowed as there is not component stored in this ElementInjector');
	      }
	    }
	  }, {
	    key: 'get',
	    value: function get(token) {
	      if (this._isDynamicallyLoadedComponent(token)) {
	        return this._dynamicallyCreatedComponent;
	      }
	      return this._getByKey(_angular2Di.Key.get(token), 0, false, null);
	    }
	  }, {
	    key: '_isDynamicallyLoadedComponent',
	    value: function _isDynamicallyLoadedComponent(token) {
	      return (0, _angular2SrcFacadeLang.isPresent)(this._dynamicallyCreatedComponentBinding) && _angular2Di.Key.get(token) === this._dynamicallyCreatedComponentBinding.key;
	    }
	  }, {
	    key: 'hasDirective',
	    value: function hasDirective(type) {
	      _rtts_assertRtts_assert.assert.argumentTypes(type, _angular2SrcFacadeLang.Type);
	      return _rtts_assertRtts_assert.assert.returnType(this._getDirectiveByKeyId(_angular2Di.Key.get(type).id) !== _undefined, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'getEventEmitterAccessors',
	    value: function getEventEmitterAccessors() {
	      return this._proto.eventEmitterAccessors;
	    }
	  }, {
	    key: 'getNgElement',
	    value: function getNgElement() {
	      return this._preBuiltObjects.element;
	    }
	  }, {
	    key: 'getComponent',
	    value: function getComponent() {
	      if (this._proto._binding0IsComponent) {
	        return this._obj0;
	      } else {
	        throw new _angular2SrcFacadeLang.BaseException('There is no component stored in this ElementInjector');
	      }
	    }
	  }, {
	    key: 'getElementRef',
	    value: function getElementRef() {
	      return new ElementRef(this, this._preBuiltObjects.view, this._proto.index, this._lightDomAppInjector, this._preBuiltObjects.viewManager, this._preBuiltObjects.defaultProtoView);
	    }
	  }, {
	    key: 'getDynamicallyLoadedComponent',
	    value: function getDynamicallyLoadedComponent() {
	      return this._dynamicallyCreatedComponent;
	    }
	  }, {
	    key: 'directParent',
	    value: function directParent() {
	      return _rtts_assertRtts_assert.assert.returnType(this._proto.distanceToParent < 2 ? this.parent : null, ElementInjector);
	    }
	  }, {
	    key: '_isComponentKey',
	    value: function _isComponentKey(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _angular2Di.Key);
	      return this._proto._binding0IsComponent && key.id === this._proto._keyId0;
	    }
	  }, {
	    key: '_isDynamicallyLoadedComponentKey',
	    value: function _isDynamicallyLoadedComponentKey(key) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _angular2Di.Key);
	      return (0, _angular2SrcFacadeLang.isPresent)(this._dynamicallyCreatedComponentBinding) && key.id === this._dynamicallyCreatedComponentBinding.key.id;
	    }
	  }, {
	    key: '_new',
	    value: function _new(binding) {
	      _rtts_assertRtts_assert.assert.argumentTypes(binding, _angular2Di.ResolvedBinding);
	      if (this._constructionCounter++ > _MAX_DIRECTIVE_CONSTRUCTION_COUNTER) {
	        throw new _angular2Di.CyclicDependencyError(binding.key);
	      }
	      var factory = binding.factory;
	      var deps = binding.dependencies;
	      var length = deps.length;
	      var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
	      try {
	        d0 = length > 0 ? this._getByDependency(deps[0], binding.key) : null;
	        d1 = length > 1 ? this._getByDependency(deps[1], binding.key) : null;
	        d2 = length > 2 ? this._getByDependency(deps[2], binding.key) : null;
	        d3 = length > 3 ? this._getByDependency(deps[3], binding.key) : null;
	        d4 = length > 4 ? this._getByDependency(deps[4], binding.key) : null;
	        d5 = length > 5 ? this._getByDependency(deps[5], binding.key) : null;
	        d6 = length > 6 ? this._getByDependency(deps[6], binding.key) : null;
	        d7 = length > 7 ? this._getByDependency(deps[7], binding.key) : null;
	        d8 = length > 8 ? this._getByDependency(deps[8], binding.key) : null;
	        d9 = length > 9 ? this._getByDependency(deps[9], binding.key) : null;
	      } catch (e) {
	        if (e instanceof _angular2Di.AbstractBindingError) e.addKey(binding.key);
	        throw e;
	      }
	      var obj;
	      switch (length) {
	        case 0:
	          obj = factory();
	          break;
	        case 1:
	          obj = factory(d0);
	          break;
	        case 2:
	          obj = factory(d0, d1);
	          break;
	        case 3:
	          obj = factory(d0, d1, d2);
	          break;
	        case 4:
	          obj = factory(d0, d1, d2, d3);
	          break;
	        case 5:
	          obj = factory(d0, d1, d2, d3, d4);
	          break;
	        case 6:
	          obj = factory(d0, d1, d2, d3, d4, d5);
	          break;
	        case 7:
	          obj = factory(d0, d1, d2, d3, d4, d5, d6);
	          break;
	        case 8:
	          obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	          break;
	        case 9:
	          obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	          break;
	        case 10:
	          obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	          break;
	        default:
	          throw 'Directive ' + binding.key.token + ' can only have up to 10 dependencies.';
	      }
	      this._addToQueries(obj, binding.key.token);
	      return obj;
	    }
	  }, {
	    key: '_getByDependency',
	    value: function _getByDependency(dep, requestor) {
	      _rtts_assertRtts_assert.assert.argumentTypes(dep, DirectiveDependency, requestor, _angular2Di.Key);
	      if ((0, _angular2SrcFacadeLang.isPresent)(dep.attributeName)) return this._buildAttribute(dep);
	      if ((0, _angular2SrcFacadeLang.isPresent)(dep.queryDirective)) return this._findQuery(dep.queryDirective).list;
	      if (dep.key.id === StaticKeys.instance().changeDetectorRefId) {
	        var componentView = this._preBuiltObjects.view.componentChildViews[this._proto.index];
	        return componentView.changeDetector.ref;
	      }
	      if (dep.key.id === StaticKeys.instance().elementRefId) {
	        return this.getElementRef();
	      }
	      if (dep.key.id === StaticKeys.instance().viewContainerId) {
	        return this.getElementRef().viewContainer;
	      }
	      return this._getByKey(dep.key, dep.depth, dep.optional, requestor);
	    }
	  }, {
	    key: '_buildAttribute',
	    value: function _buildAttribute(dep) {
	      var attributes = this._proto.attributes;
	      if ((0, _angular2SrcFacadeLang.isPresent)(attributes) && _angular2SrcFacadeCollection.MapWrapper.contains(attributes, dep.attributeName)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(attributes, dep.attributeName), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }, {
	    key: '_buildQueriesForDeps',
	    value: function _buildQueriesForDeps(deps) {
	      _rtts_assertRtts_assert.assert.argumentTypes(deps, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, DirectiveDependency));
	      for (var i = 0; i < deps.length; i++) {
	        var dep = deps[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(dep.queryDirective)) {
	          this._createQueryRef(dep.queryDirective);
	        }
	      }
	    }
	  }, {
	    key: '_createQueryRef',
	    value: function _createQueryRef(directive) {
	      var queryList = new _query_list.QueryList();
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._query0)) {
	        this._query0 = new QueryRef(directive, queryList, this);
	      } else if ((0, _angular2SrcFacadeLang.isBlank)(this._query1)) {
	        this._query1 = new QueryRef(directive, queryList, this);
	      } else if ((0, _angular2SrcFacadeLang.isBlank)(this._query2)) {
	        this._query2 = new QueryRef(directive, queryList, this);
	      } else throw new QueryError();
	    }
	  }, {
	    key: '_addToQueries',
	    value: function _addToQueries(obj, token) {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._query0) && this._query0.directive === token) {
	        this._query0.list.add(obj);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._query1) && this._query1.directive === token) {
	        this._query1.list.add(obj);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._query2) && this._query2.directive === token) {
	        this._query2.list.add(obj);
	      }
	    }
	  }, {
	    key: '_inheritQueries',
	    value: function _inheritQueries(parent) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, ElementInjector);
	      if ((0, _angular2SrcFacadeLang.isBlank)(parent)) return;
	      if ((0, _angular2SrcFacadeLang.isPresent)(parent._query0)) {
	        this._query0 = parent._query0;
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(parent._query1)) {
	        this._query1 = parent._query1;
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(parent._query2)) {
	        this._query2 = parent._query2;
	      }
	    }
	  }, {
	    key: '_buildQueries',
	    value: function _buildQueries() {
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._proto)) return;
	      var p = this._proto;
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding0)) {
	        this._buildQueriesForDeps(p._binding0.dependencies);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding1)) {
	        this._buildQueriesForDeps(p._binding1.dependencies);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding2)) {
	        this._buildQueriesForDeps(p._binding2.dependencies);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding3)) {
	        this._buildQueriesForDeps(p._binding3.dependencies);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding4)) {
	        this._buildQueriesForDeps(p._binding4.dependencies);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding5)) {
	        this._buildQueriesForDeps(p._binding5.dependencies);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding6)) {
	        this._buildQueriesForDeps(p._binding6.dependencies);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding7)) {
	        this._buildQueriesForDeps(p._binding7.dependencies);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding8)) {
	        this._buildQueriesForDeps(p._binding8.dependencies);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(p._binding9)) {
	        this._buildQueriesForDeps(p._binding9.dependencies);
	      }
	    }
	  }, {
	    key: '_findQuery',
	    value: function _findQuery(token) {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._query0) && this._query0.directive === token) {
	        return this._query0;
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._query1) && this._query1.directive === token) {
	        return this._query1;
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._query2) && this._query2.directive === token) {
	        return this._query2;
	      }
	      throw new _angular2SrcFacadeLang.BaseException('Cannot find query for directive ' + token + '.');
	    }
	  }, {
	    key: 'link',
	    value: function link(parent) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, ElementInjector);
	      parent.addChild(this);
	      this._addParentQueries();
	    }
	  }, {
	    key: 'linkAfter',
	    value: function linkAfter(parent, prevSibling) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, ElementInjector, prevSibling, ElementInjector);
	      parent.addChildAfter(this, prevSibling);
	      this._addParentQueries();
	    }
	  }, {
	    key: '_addParentQueries',
	    value: function _addParentQueries() {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parent._query0)) {
	        this._addQueryToTree(this.parent._query0);
	        this.parent._query0.update();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parent._query1)) {
	        this._addQueryToTree(this.parent._query1);
	        this.parent._query1.update();
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parent._query2)) {
	        this._addQueryToTree(this.parent._query2);
	        this.parent._query2.update();
	      }
	    }
	  }, {
	    key: 'unlink',
	    value: function unlink() {
	      var queriesToUpDate = [];
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parent._query0)) {
	        this._pruneQueryFromTree(this.parent._query0);
	        _angular2SrcFacadeCollection.ListWrapper.push(queriesToUpDate, this.parent._query0);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parent._query1)) {
	        this._pruneQueryFromTree(this.parent._query1);
	        _angular2SrcFacadeCollection.ListWrapper.push(queriesToUpDate, this.parent._query1);
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.parent._query2)) {
	        this._pruneQueryFromTree(this.parent._query2);
	        _angular2SrcFacadeCollection.ListWrapper.push(queriesToUpDate, this.parent._query2);
	      }
	      this.remove();
	      _angular2SrcFacadeCollection.ListWrapper.forEach(queriesToUpDate, function (q) {
	        return q.update();
	      });
	    }
	  }, {
	    key: '_pruneQueryFromTree',
	    value: function _pruneQueryFromTree(query) {
	      _rtts_assertRtts_assert.assert.argumentTypes(query, QueryRef);
	      this._removeQueryRef(query);
	      var child = this._head;
	      while ((0, _angular2SrcFacadeLang.isPresent)(child)) {
	        child._pruneQueryFromTree(query);
	        child = child._next;
	      }
	    }
	  }, {
	    key: '_addQueryToTree',
	    value: function _addQueryToTree(query) {
	      _rtts_assertRtts_assert.assert.argumentTypes(query, QueryRef);
	      this._assignQueryRef(query);
	      var child = this._head;
	      while ((0, _angular2SrcFacadeLang.isPresent)(child)) {
	        child._addQueryToTree(query);
	        child = child._next;
	      }
	    }
	  }, {
	    key: '_assignQueryRef',
	    value: function _assignQueryRef(query) {
	      _rtts_assertRtts_assert.assert.argumentTypes(query, QueryRef);
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._query0)) {
	        this._query0 = query;
	        return;
	      } else if ((0, _angular2SrcFacadeLang.isBlank)(this._query1)) {
	        this._query1 = query;
	        return;
	      } else if ((0, _angular2SrcFacadeLang.isBlank)(this._query2)) {
	        this._query2 = query;
	        return;
	      }
	      throw new QueryError();
	    }
	  }, {
	    key: '_removeQueryRef',
	    value: function _removeQueryRef(query) {
	      _rtts_assertRtts_assert.assert.argumentTypes(query, QueryRef);
	      if (this._query0 == query) this._query0 = null;
	      if (this._query1 == query) this._query1 = null;
	      if (this._query2 == query) this._query2 = null;
	    }
	  }, {
	    key: '_getByKey',
	    value: function _getByKey(key, depth, optional, requestor) {
	      _rtts_assertRtts_assert.assert.argumentTypes(key, _angular2Di.Key, depth, _rtts_assertRtts_assert.assert.type.number, optional, _rtts_assertRtts_assert.assert.type.boolean, requestor, _angular2Di.Key);
	      var ei = this;
	      if (!this._shouldIncludeSelf(depth)) {
	        depth -= ei._proto.distanceToParent;
	        ei = ei._parent;
	      }
	      while (ei != null && depth >= 0) {
	        var preBuiltObj = ei._getPreBuiltObjectByKeyId(key.id);
	        if (preBuiltObj !== _undefined) return preBuiltObj;
	        var dir = ei._getDirectiveByKeyId(key.id);
	        if (dir !== _undefined) return dir;
	        depth -= ei._proto.distanceToParent;
	        ei = ei._parent;
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._host) && this._host._isComponentKey(key)) {
	        return this._host.getComponent();
	      } else if ((0, _angular2SrcFacadeLang.isPresent)(this._host) && this._host._isDynamicallyLoadedComponentKey(key)) {
	        return this._host.getDynamicallyLoadedComponent();
	      } else if (optional) {
	        return this._appInjector(requestor).getOptional(key);
	      } else {
	        return this._appInjector(requestor).get(key);
	      }
	    }
	  }, {
	    key: '_appInjector',
	    value: function _appInjector(requestor) {
	      _rtts_assertRtts_assert.assert.argumentTypes(requestor, _angular2Di.Key);
	      if ((0, _angular2SrcFacadeLang.isPresent)(requestor) && (this._isComponentKey(requestor) || this._isDynamicallyLoadedComponentKey(requestor))) {
	        return this._shadowDomAppInjector;
	      } else {
	        return this._lightDomAppInjector;
	      }
	    }
	  }, {
	    key: '_shouldIncludeSelf',
	    value: function _shouldIncludeSelf(depth) {
	      _rtts_assertRtts_assert.assert.argumentTypes(depth, _angular2SrcFacadeLang.int);
	      return depth === 0;
	    }
	  }, {
	    key: '_getPreBuiltObjectByKeyId',
	    value: function _getPreBuiltObjectByKeyId(keyId) {
	      _rtts_assertRtts_assert.assert.argumentTypes(keyId, _angular2SrcFacadeLang.int);
	      var staticKeys = StaticKeys.instance();
	      if (keyId === staticKeys.viewManagerId) return this._preBuiltObjects.viewManagerId;
	      if (keyId === staticKeys.viewId) return this._preBuiltObjects.view;
	      if (keyId === staticKeys.ngElementId) return this._preBuiltObjects.element;
	      if (keyId === staticKeys.defaultProtoViewId) return this._preBuiltObjects.defaultProtoView;
	      return _undefined;
	    }
	  }, {
	    key: '_getDirectiveByKeyId',
	    value: function _getDirectiveByKeyId(keyId) {
	      _rtts_assertRtts_assert.assert.argumentTypes(keyId, _angular2SrcFacadeLang.int);
	      var p = this._proto;
	      if (p._keyId0 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj0)) {
	          this._obj0 = this._new(p._binding0);
	        }
	        return this._obj0;
	      }
	      if (p._keyId1 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj1)) {
	          this._obj1 = this._new(p._binding1);
	        }
	        return this._obj1;
	      }
	      if (p._keyId2 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj2)) {
	          this._obj2 = this._new(p._binding2);
	        }
	        return this._obj2;
	      }
	      if (p._keyId3 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj3)) {
	          this._obj3 = this._new(p._binding3);
	        }
	        return this._obj3;
	      }
	      if (p._keyId4 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj4)) {
	          this._obj4 = this._new(p._binding4);
	        }
	        return this._obj4;
	      }
	      if (p._keyId5 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj5)) {
	          this._obj5 = this._new(p._binding5);
	        }
	        return this._obj5;
	      }
	      if (p._keyId6 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj6)) {
	          this._obj6 = this._new(p._binding6);
	        }
	        return this._obj6;
	      }
	      if (p._keyId7 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj7)) {
	          this._obj7 = this._new(p._binding7);
	        }
	        return this._obj7;
	      }
	      if (p._keyId8 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj8)) {
	          this._obj8 = this._new(p._binding8);
	        }
	        return this._obj8;
	      }
	      if (p._keyId9 === keyId) {
	        if ((0, _angular2SrcFacadeLang.isBlank)(this._obj9)) {
	          this._obj9 = this._new(p._binding9);
	        }
	        return this._obj9;
	      }
	      return _undefined;
	    }
	  }, {
	    key: 'getDirectiveAtIndex',
	    value: function getDirectiveAtIndex(index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(index, _angular2SrcFacadeLang.int);
	      if (index == 0) return this._obj0;
	      if (index == 1) return this._obj1;
	      if (index == 2) return this._obj2;
	      if (index == 3) return this._obj3;
	      if (index == 4) return this._obj4;
	      if (index == 5) return this._obj5;
	      if (index == 6) return this._obj6;
	      if (index == 7) return this._obj7;
	      if (index == 8) return this._obj8;
	      if (index == 9) return this._obj9;
	      throw new OutOfBoundsAccess(index);
	    }
	  }, {
	    key: 'hasInstances',
	    value: function hasInstances() {
	      return this._constructionCounter > 0;
	    }
	  }, {
	    key: 'isExportingComponent',
	    value: function isExportingComponent() {
	      return this._proto.exportComponent;
	    }
	  }, {
	    key: 'isExportingElement',
	    value: function isExportingElement() {
	      return this._proto.exportElement;
	    }
	  }, {
	    key: 'getExportImplicitName',
	    value: function getExportImplicitName() {
	      return this._proto.exportImplicitName;
	    }
	  }, {
	    key: 'getLightDomAppInjector',
	    value: function getLightDomAppInjector() {
	      return this._lightDomAppInjector;
	    }
	  }, {
	    key: 'getShadowDomAppInjector',
	    value: function getShadowDomAppInjector() {
	      return this._shadowDomAppInjector;
	    }
	  }, {
	    key: 'getHost',
	    value: function getHost() {
	      return this._host;
	    }
	  }, {
	    key: 'getBoundElementIndex',
	    value: function getBoundElementIndex() {
	      return this._proto.index;
	    }
	  }]);
	
	  return ElementInjector;
	})(TreeNode);
	
	exports.ElementInjector = ElementInjector;
	
	Object.defineProperty(ElementInjector, 'parameters', { get: function get() {
	    return [[ProtoElementInjector], [ElementInjector]];
	  } });
	Object.defineProperty(ElementInjector.prototype.instantiateDirectives, 'parameters', { get: function get() {
	    return [[_angular2Di.Injector], [ElementInjector], [_angular2Di.Injector], [PreBuiltObjects]];
	  } });
	Object.defineProperty(ElementInjector.prototype.dynamicallyCreateComponent, 'parameters', { get: function get() {
	    return [[], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(ElementInjector.prototype._checkShadowDomAppInjector, 'parameters', { get: function get() {
	    return [[_angular2Di.Injector]];
	  } });
	Object.defineProperty(ElementInjector.prototype.hasDirective, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	Object.defineProperty(ElementInjector.prototype._isComponentKey, 'parameters', { get: function get() {
	    return [[_angular2Di.Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._isDynamicallyLoadedComponentKey, 'parameters', { get: function get() {
	    return [[_angular2Di.Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._new, 'parameters', { get: function get() {
	    return [[_angular2Di.ResolvedBinding]];
	  } });
	Object.defineProperty(ElementInjector.prototype._getByDependency, 'parameters', { get: function get() {
	    return [[DirectiveDependency], [_angular2Di.Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._buildQueriesForDeps, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, DirectiveDependency)]];
	  } });
	Object.defineProperty(ElementInjector.prototype._inheritQueries, 'parameters', { get: function get() {
	    return [[ElementInjector]];
	  } });
	Object.defineProperty(ElementInjector.prototype.link, 'parameters', { get: function get() {
	    return [[ElementInjector]];
	  } });
	Object.defineProperty(ElementInjector.prototype.linkAfter, 'parameters', { get: function get() {
	    return [[ElementInjector], [ElementInjector]];
	  } });
	Object.defineProperty(ElementInjector.prototype._pruneQueryFromTree, 'parameters', { get: function get() {
	    return [[QueryRef]];
	  } });
	Object.defineProperty(ElementInjector.prototype._addQueryToTree, 'parameters', { get: function get() {
	    return [[QueryRef]];
	  } });
	Object.defineProperty(ElementInjector.prototype._assignQueryRef, 'parameters', { get: function get() {
	    return [[QueryRef]];
	  } });
	Object.defineProperty(ElementInjector.prototype._removeQueryRef, 'parameters', { get: function get() {
	    return [[QueryRef]];
	  } });
	Object.defineProperty(ElementInjector.prototype._getByKey, 'parameters', { get: function get() {
	    return [[_angular2Di.Key], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.boolean], [_angular2Di.Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._appInjector, 'parameters', { get: function get() {
	    return [[_angular2Di.Key]];
	  } });
	Object.defineProperty(ElementInjector.prototype._shouldIncludeSelf, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(ElementInjector.prototype._getPreBuiltObjectByKeyId, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(ElementInjector.prototype._getDirectiveByKeyId, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	Object.defineProperty(ElementInjector.prototype.getDirectiveAtIndex, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	
	var OutOfBoundsAccess = (function (_Error) {
	  function OutOfBoundsAccess(index) {
	    _classCallCheck(this, OutOfBoundsAccess);
	
	    _get(Object.getPrototypeOf(OutOfBoundsAccess.prototype), 'constructor', this).call(this);
	    this.message = 'Index ' + index + ' is out-of-bounds.';
	  }
	
	  _inherits(OutOfBoundsAccess, _Error);
	
	  _createClass(OutOfBoundsAccess, [{
	    key: 'toString',
	    value: function toString() {
	      return this.message;
	    }
	  }]);
	
	  return OutOfBoundsAccess;
	})(Error);
	
	var QueryError = (function (_Error2) {
	  function QueryError() {
	    _classCallCheck(this, QueryError);
	
	    _get(Object.getPrototypeOf(QueryError.prototype), 'constructor', this).call(this);
	    this.message = 'Only 3 queries can be concurrently active in a template.';
	  }
	
	  _inherits(QueryError, _Error2);
	
	  _createClass(QueryError, [{
	    key: 'toString',
	    value: function toString() {
	      return this.message;
	    }
	  }]);
	
	  return QueryError;
	})(Error);
	
	var QueryRef = (function () {
	  function QueryRef(directive, list, originator) {
	    _classCallCheck(this, QueryRef);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(directive, _rtts_assertRtts_assert.assert.type.any, list, _query_list.QueryList, originator, ElementInjector);
	    this.directive = directive;
	    this.list = list;
	    this.originator = originator;
	  }
	
	  _createClass(QueryRef, [{
	    key: 'update',
	    value: function update() {
	      var aggregator = [];
	      this.visit(this.originator, aggregator);
	      this.list.reset(aggregator);
	    }
	  }, {
	    key: 'visit',
	    value: function visit(inj, aggregator) {
	      _rtts_assertRtts_assert.assert.argumentTypes(inj, ElementInjector, aggregator, _rtts_assertRtts_assert.assert.type.any);
	      if ((0, _angular2SrcFacadeLang.isBlank)(inj)) return;
	      if (inj.hasDirective(this.directive)) {
	        _angular2SrcFacadeCollection.ListWrapper.push(aggregator, inj.get(this.directive));
	      }
	      var child = inj._head;
	      while ((0, _angular2SrcFacadeLang.isPresent)(child)) {
	        this.visit(child, aggregator);
	        child = child._next;
	      }
	    }
	  }]);
	
	  return QueryRef;
	})();
	
	Object.defineProperty(QueryRef, 'parameters', { get: function get() {
	    return [[], [_query_list.QueryList], [ElementInjector]];
	  } });
	Object.defineProperty(QueryRef.prototype.visit, 'parameters', { get: function get() {
	    return [[ElementInjector], []];
	  } });
	//# sourceMappingURL=element_injector.js.map

	//# sourceMappingURL=./element_injector.map

/***/ },
/* 168 */
/*!************************************************!*\
  !*** ./~/angular2/es6/dev/src/facade/math.es6 ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var Math = _angular2SrcFacadeLang.global.Math;
	exports.Math = Math;
	var NaN = _angular2SrcFacadeLang.global.NaN;
	//# sourceMappingURL=math.es6.map
	
	//# sourceMappingURL=./math.map
	exports.NaN = NaN;

/***/ },
/* 169 */
/*!********************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/annotations/di.es6 ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var Attribute = (function (_DependencyAnnotation) {
	  function Attribute(attributeName) {
	    _classCallCheck(this, Attribute);
	
	    _get(Object.getPrototypeOf(Attribute.prototype), 'constructor', this).call(this);
	    this.attributeName = attributeName;
	  }
	
	  _inherits(Attribute, _DependencyAnnotation);
	
	  _createClass(Attribute, [{
	    key: 'token',
	    get: function () {
	      return this;
	    }
	  }]);
	
	  return Attribute;
	})(_angular2Di.DependencyAnnotation);
	
	exports.Attribute = Attribute;
	
	Object.defineProperty(Attribute, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	
	var Query = (function (_DependencyAnnotation2) {
	  function Query(directive) {
	    _classCallCheck(this, Query);
	
	    _get(Object.getPrototypeOf(Query.prototype), 'constructor', this).call(this);
	    this.directive = directive;
	  }
	
	  _inherits(Query, _DependencyAnnotation2);
	
	  return Query;
	})(_angular2Di.DependencyAnnotation);
	
	exports.Query = Query;
	
	Object.defineProperty(Query, 'annotations', { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	//# sourceMappingURL=di.js.map

	//# sourceMappingURL=./di.map

/***/ },
/* 170 */
/*!***************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/view_manager.es6 ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _element_injector = __webpack_require__(/*! ./element_injector */ 167);
	
	var eli = _interopRequireWildcard(_element_injector);
	
	var _view = __webpack_require__(/*! ./view */ 165);
	
	var viewModule = _interopRequireWildcard(_view);
	
	var _angular2SrcRenderApi = __webpack_require__(/*! angular2/src/render/api */ 115);
	
	var _view_manager_utils = __webpack_require__(/*! ./view_manager_utils */ 171);
	
	var _view_pool = __webpack_require__(/*! ./view_pool */ 193);
	
	var AppViewManager = (function () {
	  function AppViewManager(viewPool, utils, renderer) {
	    _classCallCheck(this, AppViewManager);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(viewPool, _view_pool.AppViewPool, utils, _view_manager_utils.AppViewManagerUtils, renderer, _angular2SrcRenderApi.Renderer);
	    this._renderer = renderer;
	    this._viewPool = viewPool;
	    this._utils = utils;
	  }
	
	  _createClass(AppViewManager, [{
	    key: 'createDynamicComponentView',
	    value: function createDynamicComponentView(hostLocation, componentProtoView, componentBinding, injector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostLocation, eli.ElementRef, componentProtoView, viewModule.AppProtoView, componentBinding, _angular2Di.Binding, injector, _angular2Di.Injector);
	      var hostView = hostLocation.hostView;
	      var boundElementIndex = hostLocation.boundElementIndex;
	      var binder = hostView.proto.elementBinders[boundElementIndex];
	      if (!binder.hasDynamicComponent()) {
	        throw new _angular2SrcFacadeLang.BaseException('There is no dynamic component directive at element ' + boundElementIndex);
	      }
	      var componentView = this._createViewRecurse(componentProtoView);
	      var renderViewRefs = this._renderer.createDynamicComponentView(hostView.render, boundElementIndex, componentProtoView.render);
	      componentView.render = renderViewRefs[0];
	      this._utils.attachComponentView(hostView, boundElementIndex, componentView);
	      this._utils.hydrateDynamicComponentInElementInjector(hostView, boundElementIndex, componentBinding, injector);
	      this._utils.hydrateComponentView(hostView, boundElementIndex);
	      this._viewHydrateRecurse(componentView, renderViewRefs, 1);
	      return _rtts_assertRtts_assert.assert.returnType(componentView, viewModule.AppView);
	    }
	  }, {
	    key: 'createInPlaceHostView',
	    value: function createInPlaceHostView(parentComponentLocation, hostElementSelector, hostProtoView, injector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentComponentLocation, eli.ElementRef, hostElementSelector, _rtts_assertRtts_assert.assert.type.any, hostProtoView, viewModule.AppProtoView, injector, _angular2Di.Injector);
	      var parentComponentHostView = null;
	      var parentComponentBoundElementIndex = null;
	      var parentRenderViewRef = null;
	      if ((0, _angular2SrcFacadeLang.isPresent)(parentComponentLocation)) {
	        parentComponentHostView = parentComponentLocation.hostView;
	        parentComponentBoundElementIndex = parentComponentLocation.boundElementIndex;
	        parentRenderViewRef = parentComponentHostView.componentChildViews[parentComponentBoundElementIndex].render;
	      }
	      var hostView = this._createViewRecurse(hostProtoView);
	      var renderViewRefs = this._renderer.createInPlaceHostView(parentRenderViewRef, hostElementSelector, hostView.proto.render);
	      hostView.render = renderViewRefs[0];
	      this._utils.attachAndHydrateInPlaceHostView(parentComponentHostView, parentComponentBoundElementIndex, hostView, injector);
	      this._viewHydrateRecurse(hostView, renderViewRefs, 1);
	      return _rtts_assertRtts_assert.assert.returnType(hostView, viewModule.AppView);
	    }
	  }, {
	    key: 'destroyInPlaceHostView',
	    value: function destroyInPlaceHostView(parentComponentLocation, hostView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentComponentLocation, eli.ElementRef, hostView, viewModule.AppView);
	      var parentView = null;
	      var parentRenderViewRef = null;
	      if ((0, _angular2SrcFacadeLang.isPresent)(parentComponentLocation)) {
	        parentView = parentComponentLocation.hostView.componentChildViews[parentComponentLocation.boundElementIndex];
	        parentRenderViewRef = parentView.render;
	      }
	      var hostViewRenderRef = hostView.render;
	      this._viewDehydrateRecurse(hostView);
	      this._utils.detachInPlaceHostView(parentView, hostView);
	      this._renderer.destroyInPlaceHostView(parentRenderViewRef, hostViewRenderRef);
	      this._destroyView(hostView);
	    }
	  }, {
	    key: 'createViewInContainer',
	    value: function createViewInContainer(viewContainerLocation, atIndex, protoView) {
	      var injector = arguments[3] === undefined ? null : arguments[3];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(viewContainerLocation, eli.ElementRef, atIndex, _rtts_assertRtts_assert.assert.type.number, protoView, viewModule.AppProtoView, injector, _angular2Di.Injector);
	      var parentView = viewContainerLocation.hostView;
	      var boundElementIndex = _rtts_assertRtts_assert.assert.type(viewContainerLocation.boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	      var view = this._createViewRecurse(protoView);
	      var renderViewRefs = this._renderer.createViewInContainer(this._getRenderViewContainerRef(parentView, boundElementIndex), atIndex, view.proto.render);
	      view.render = renderViewRefs[0];
	      this._utils.attachViewInContainer(parentView, boundElementIndex, atIndex, view);
	      this._utils.hydrateViewInContainer(parentView, boundElementIndex, atIndex, injector);
	      this._viewHydrateRecurse(view, renderViewRefs, 1);
	      return _rtts_assertRtts_assert.assert.returnType(view, viewModule.AppView);
	    }
	  }, {
	    key: 'destroyViewInContainer',
	    value: function destroyViewInContainer(viewContainerLocation, atIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(viewContainerLocation, eli.ElementRef, atIndex, _rtts_assertRtts_assert.assert.type.number);
	      var parentView = viewContainerLocation.hostView;
	      var boundElementIndex = _rtts_assertRtts_assert.assert.type(viewContainerLocation.boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	      var viewContainer = parentView.viewContainers[boundElementIndex];
	      var view = viewContainer.views[atIndex];
	      this._viewDehydrateRecurse(view);
	      this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
	      this._renderer.destroyViewInContainer(this._getRenderViewContainerRef(parentView, boundElementIndex), atIndex);
	      this._destroyView(view);
	    }
	  }, {
	    key: 'attachViewInContainer',
	    value: function attachViewInContainer(viewContainerLocation, atIndex, view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(viewContainerLocation, eli.ElementRef, atIndex, _rtts_assertRtts_assert.assert.type.number, view, viewModule.AppView);
	      var parentView = viewContainerLocation.hostView;
	      var boundElementIndex = _rtts_assertRtts_assert.assert.type(viewContainerLocation.boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	      this._utils.attachViewInContainer(parentView, boundElementIndex, atIndex, view);
	      this._renderer.insertViewIntoContainer(this._getRenderViewContainerRef(parentView, boundElementIndex), atIndex, view.render);
	      return _rtts_assertRtts_assert.assert.returnType(view, viewModule.AppView);
	    }
	  }, {
	    key: 'detachViewInContainer',
	    value: function detachViewInContainer(viewContainerLocation, atIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(viewContainerLocation, eli.ElementRef, atIndex, _rtts_assertRtts_assert.assert.type.number);
	      var parentView = viewContainerLocation.hostView;
	      var boundElementIndex = _rtts_assertRtts_assert.assert.type(viewContainerLocation.boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	      var viewContainer = parentView.viewContainers[boundElementIndex];
	      var view = viewContainer.views[atIndex];
	      this._utils.detachViewInContainer(parentView, boundElementIndex, atIndex);
	      this._renderer.detachViewFromContainer(this._getRenderViewContainerRef(parentView, boundElementIndex), atIndex);
	      return _rtts_assertRtts_assert.assert.returnType(view, viewModule.AppView);
	    }
	  }, {
	    key: '_getRenderViewContainerRef',
	    value: function _getRenderViewContainerRef(parentView, boundElementIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentView, viewModule.AppView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	      return new _angular2SrcRenderApi.RenderViewContainerRef(parentView.render, boundElementIndex);
	    }
	  }, {
	    key: '_createViewRecurse',
	    value: function _createViewRecurse(protoView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(protoView, viewModule.AppProtoView);
	      var view = this._viewPool.getView(protoView);
	      if ((0, _angular2SrcFacadeLang.isBlank)(view)) {
	        view = this._utils.createView(protoView, this, this._renderer);
	        var binders = protoView.elementBinders;
	        for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	          var binder = binders[binderIdx];
	          if (binder.hasStaticComponent()) {
	            var childView = this._createViewRecurse(binder.nestedProtoView);
	            this._utils.attachComponentView(view, binderIdx, childView);
	          }
	        }
	      }
	      return view;
	    }
	  }, {
	    key: '_destroyView',
	    value: function _destroyView(view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.AppView);
	      this._viewPool.returnView(view);
	    }
	  }, {
	    key: '_viewHydrateRecurse',
	    value: function _viewHydrateRecurse(view, renderComponentViewRefs, renderComponentIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.AppView, renderComponentViewRefs, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcRenderApi.ViewRef), renderComponentIndex, _rtts_assertRtts_assert.assert.type.number);
	      this._renderer.setEventDispatcher(view.render, view);
	      var binders = view.proto.elementBinders;
	      for (var i = 0; i < binders.length; ++i) {
	        if (binders[i].hasStaticComponent()) {
	          var childView = view.componentChildViews[i];
	          childView.render = renderComponentViewRefs[renderComponentIndex++];
	          this._utils.hydrateComponentView(view, i);
	          renderComponentIndex = this._viewHydrateRecurse(view.componentChildViews[i], renderComponentViewRefs, renderComponentIndex);
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(renderComponentIndex, _rtts_assertRtts_assert.assert.type.number);
	    }
	  }, {
	    key: '_viewDehydrateRecurse',
	    value: function _viewDehydrateRecurse(view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.AppView);
	      this._utils.dehydrateView(view);
	      var binders = view.proto.elementBinders;
	      for (var i = 0; i < binders.length; i++) {
	        var componentView = view.componentChildViews[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(componentView)) {
	          this._viewDehydrateRecurse(componentView);
	          if (binders[i].hasDynamicComponent()) {
	            this._utils.detachComponentView(view, i);
	            this._destroyView(componentView);
	          }
	        }
	        var vc = view.viewContainers[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(vc)) {
	          for (var j = vc.views.length - 1; j >= 0; j--) {
	            var childView = vc.views[j];
	            this._viewDehydrateRecurse(childView);
	            this._utils.detachViewInContainer(view, i, j);
	            this._destroyView(childView);
	          }
	        }
	      }
	      for (var i = 0; i < view.imperativeHostViews.length; i++) {
	        var hostView = view.imperativeHostViews[i];
	        this._viewDehydrateRecurse(hostView);
	        this._utils.detachInPlaceHostView(view, hostView);
	        this._destroyView(hostView);
	      }
	      view.render = null;
	    }
	  }]);
	
	  return AppViewManager;
	})();
	
	exports.AppViewManager = AppViewManager;
	
	Object.defineProperty(AppViewManager, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(AppViewManager, 'parameters', { get: function get() {
	    return [[_view_pool.AppViewPool], [_view_manager_utils.AppViewManagerUtils], [_angular2SrcRenderApi.Renderer]];
	  } });
	Object.defineProperty(AppViewManager.prototype.createDynamicComponentView, 'parameters', { get: function get() {
	    return [[eli.ElementRef], [viewModule.AppProtoView], [_angular2Di.Binding], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(AppViewManager.prototype.createInPlaceHostView, 'parameters', { get: function get() {
	    return [[eli.ElementRef], [], [viewModule.AppProtoView], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(AppViewManager.prototype.destroyInPlaceHostView, 'parameters', { get: function get() {
	    return [[eli.ElementRef], [viewModule.AppView]];
	  } });
	Object.defineProperty(AppViewManager.prototype.createViewInContainer, 'parameters', { get: function get() {
	    return [[eli.ElementRef], [_rtts_assertRtts_assert.assert.type.number], [viewModule.AppProtoView], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(AppViewManager.prototype.destroyViewInContainer, 'parameters', { get: function get() {
	    return [[eli.ElementRef], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(AppViewManager.prototype.attachViewInContainer, 'parameters', { get: function get() {
	    return [[eli.ElementRef], [_rtts_assertRtts_assert.assert.type.number], [viewModule.AppView]];
	  } });
	Object.defineProperty(AppViewManager.prototype.detachViewInContainer, 'parameters', { get: function get() {
	    return [[eli.ElementRef], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(AppViewManager.prototype._getRenderViewContainerRef, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(AppViewManager.prototype._createViewRecurse, 'parameters', { get: function get() {
	    return [[viewModule.AppProtoView]];
	  } });
	Object.defineProperty(AppViewManager.prototype._destroyView, 'parameters', { get: function get() {
	    return [[viewModule.AppView]];
	  } });
	Object.defineProperty(AppViewManager.prototype._viewHydrateRecurse, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcRenderApi.ViewRef)], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(AppViewManager.prototype._viewDehydrateRecurse, 'parameters', { get: function get() {
	    return [[viewModule.AppView]];
	  } });
	//# sourceMappingURL=view_manager.js.map

	//# sourceMappingURL=./view_manager.map

/***/ },
/* 171 */
/*!*********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/view_manager_utils.es6 ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _element_injector = __webpack_require__(/*! ./element_injector */ 167);
	
	var eli = _interopRequireWildcard(_element_injector);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcCoreCompilerNg_element = __webpack_require__(/*! angular2/src/core/compiler/ng_element */ 172);
	
	var _view = __webpack_require__(/*! ./view */ 165);
	
	var viewModule = _interopRequireWildcard(_view);
	
	var _view_manager = __webpack_require__(/*! ./view_manager */ 170);
	
	var avmModule = _interopRequireWildcard(_view_manager);
	
	var _angular2SrcRenderApi = __webpack_require__(/*! angular2/src/render/api */ 115);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _directive_metadata_reader = __webpack_require__(/*! ./directive_metadata_reader */ 162);
	
	var AppViewManagerUtils = (function () {
	  function AppViewManagerUtils(metadataReader) {
	    _classCallCheck(this, AppViewManagerUtils);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(metadataReader, _directive_metadata_reader.DirectiveMetadataReader);
	    this._metadataReader = metadataReader;
	  }
	
	  _createClass(AppViewManagerUtils, [{
	    key: 'createView',
	    value: function createView(protoView, viewManager, renderer) {
	      _rtts_assertRtts_assert.assert.argumentTypes(protoView, viewModule.AppProtoView, viewManager, avmModule.AppViewManager, renderer, _angular2SrcRenderApi.Renderer);
	      var view = new viewModule.AppView(renderer, protoView, protoView.protoLocals);
	      var changeDetector = protoView.protoChangeDetector.instantiate(view, protoView.bindings, protoView.getVariableBindings(), protoView.getdirectiveRecords());
	      var binders = protoView.elementBinders;
	      var elementInjectors = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(binders.length);
	      var rootElementInjectors = [];
	      var preBuiltObjects = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(binders.length);
	      var componentChildViews = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(binders.length);
	      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	        var binder = binders[binderIdx];
	        var elementInjector = null;
	        var protoElementInjector = binder.protoElementInjector;
	        if ((0, _angular2SrcFacadeLang.isPresent)(protoElementInjector)) {
	          if ((0, _angular2SrcFacadeLang.isPresent)(protoElementInjector.parent)) {
	            var parentElementInjector = elementInjectors[protoElementInjector.parent.index];
	            elementInjector = protoElementInjector.instantiate(parentElementInjector);
	          } else {
	            elementInjector = protoElementInjector.instantiate(null);
	            _angular2SrcFacadeCollection.ListWrapper.push(rootElementInjectors, elementInjector);
	          }
	        }
	        elementInjectors[binderIdx] = elementInjector;
	        if ((0, _angular2SrcFacadeLang.isPresent)(elementInjector)) {
	          var defaultProtoView = (0, _angular2SrcFacadeLang.isPresent)(binder.viewportDirective) ? binder.nestedProtoView : null;
	          preBuiltObjects[binderIdx] = new eli.PreBuiltObjects(viewManager, view, new _angular2SrcCoreCompilerNg_element.NgElement(view, binderIdx), defaultProtoView);
	        }
	      }
	      view.init(changeDetector, elementInjectors, rootElementInjectors, preBuiltObjects, componentChildViews);
	      return _rtts_assertRtts_assert.assert.returnType(view, viewModule.AppView);
	    }
	  }, {
	    key: 'attachComponentView',
	    value: function attachComponentView(hostView, boundElementIndex, componentView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostView, viewModule.AppView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number, componentView, viewModule.AppView);
	      var childChangeDetector = componentView.changeDetector;
	      hostView.changeDetector.addShadowDomChild(childChangeDetector);
	      hostView.componentChildViews[boundElementIndex] = componentView;
	    }
	  }, {
	    key: 'detachComponentView',
	    value: function detachComponentView(hostView, boundElementIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostView, viewModule.AppView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	      var componentView = hostView.componentChildViews[boundElementIndex];
	      hostView.changeDetector.removeShadowDomChild(componentView.changeDetector);
	      hostView.componentChildViews[boundElementIndex] = null;
	    }
	  }, {
	    key: 'hydrateComponentView',
	    value: function hydrateComponentView(hostView, boundElementIndex) {
	      var injector = arguments[2] === undefined ? null : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(hostView, viewModule.AppView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number, injector, _angular2Di.Injector);
	      var elementInjector = hostView.elementInjectors[boundElementIndex];
	      var componentView = hostView.componentChildViews[boundElementIndex];
	      var binder = hostView.proto.elementBinders[boundElementIndex];
	      var component;
	      if (binder.hasDynamicComponent()) {
	        component = elementInjector.getDynamicallyLoadedComponent();
	      } else {
	        component = elementInjector.getComponent();
	      }
	      this._hydrateView(componentView, injector, elementInjector, component, null);
	    }
	  }, {
	    key: 'attachAndHydrateInPlaceHostView',
	    value: function attachAndHydrateInPlaceHostView(parentComponentHostView, parentComponentBoundElementIndex, hostView) {
	      var injector = arguments[3] === undefined ? null : arguments[3];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(parentComponentHostView, viewModule.AppView, parentComponentBoundElementIndex, _rtts_assertRtts_assert.assert.type.number, hostView, viewModule.AppView, injector, _angular2Di.Injector);
	      var hostElementInjector = null;
	      if ((0, _angular2SrcFacadeLang.isPresent)(parentComponentHostView)) {
	        hostElementInjector = parentComponentHostView.elementInjectors[parentComponentBoundElementIndex];
	        var parentView = parentComponentHostView.componentChildViews[parentComponentBoundElementIndex];
	        parentView.changeDetector.addChild(hostView.changeDetector);
	        _angular2SrcFacadeCollection.ListWrapper.push(parentView.imperativeHostViews, hostView);
	      }
	      this._hydrateView(hostView, injector, hostElementInjector, new Object(), null);
	    }
	  }, {
	    key: 'detachInPlaceHostView',
	    value: function detachInPlaceHostView(parentView, hostView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentView, viewModule.AppView, hostView, viewModule.AppView);
	      if ((0, _angular2SrcFacadeLang.isPresent)(parentView)) {
	        parentView.changeDetector.removeChild(hostView.changeDetector);
	        _angular2SrcFacadeCollection.ListWrapper.remove(parentView.imperativeHostViews, hostView);
	      }
	    }
	  }, {
	    key: 'attachViewInContainer',
	    value: function attachViewInContainer(parentView, boundElementIndex, atIndex, view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentView, viewModule.AppView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number, atIndex, _rtts_assertRtts_assert.assert.type.number, view, viewModule.AppView);
	      parentView.changeDetector.addChild(view.changeDetector);
	      var viewContainer = parentView.viewContainers[boundElementIndex];
	      if ((0, _angular2SrcFacadeLang.isBlank)(viewContainer)) {
	        viewContainer = new viewModule.AppViewContainer();
	        parentView.viewContainers[boundElementIndex] = viewContainer;
	      }
	      _angular2SrcFacadeCollection.ListWrapper.insert(viewContainer.views, atIndex, view);
	      var sibling;
	      if (atIndex == 0) {
	        sibling = null;
	      } else {
	        sibling = _angular2SrcFacadeCollection.ListWrapper.last(viewContainer.views[atIndex - 1].rootElementInjectors);
	      }
	      var elementInjector = parentView.elementInjectors[boundElementIndex];
	      for (var i = view.rootElementInjectors.length - 1; i >= 0; i--) {
	        view.rootElementInjectors[i].linkAfter(elementInjector, sibling);
	      }
	    }
	  }, {
	    key: 'detachViewInContainer',
	    value: function detachViewInContainer(parentView, boundElementIndex, atIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentView, viewModule.AppView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number, atIndex, _rtts_assertRtts_assert.assert.type.number);
	      var viewContainer = parentView.viewContainers[boundElementIndex];
	      var view = viewContainer.views[atIndex];
	      view.changeDetector.remove();
	      _angular2SrcFacadeCollection.ListWrapper.removeAt(viewContainer.views, atIndex);
	      for (var i = 0; i < view.rootElementInjectors.length; ++i) {
	        view.rootElementInjectors[i].unlink();
	      }
	    }
	  }, {
	    key: 'hydrateViewInContainer',
	    value: function hydrateViewInContainer(parentView, boundElementIndex, atIndex, injector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentView, viewModule.AppView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number, atIndex, _rtts_assertRtts_assert.assert.type.number, injector, _angular2Di.Injector);
	      var viewContainer = parentView.viewContainers[boundElementIndex];
	      var view = viewContainer.views[atIndex];
	      var elementInjector = parentView.elementInjectors[boundElementIndex];
	      this._hydrateView(view, injector, elementInjector, parentView.context, parentView.locals);
	    }
	  }, {
	    key: 'hydrateDynamicComponentInElementInjector',
	    value: function hydrateDynamicComponentInElementInjector(hostView, boundElementIndex, componentBinding) {
	      var injector = arguments[3] === undefined ? null : arguments[3];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(hostView, viewModule.AppView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number, componentBinding, _angular2Di.Binding, injector, _angular2Di.Injector);
	      var elementInjector = hostView.elementInjectors[boundElementIndex];
	      if ((0, _angular2SrcFacadeLang.isPresent)(elementInjector.getDynamicallyLoadedComponent())) {
	        throw new _angular2SrcFacadeLang.BaseException('There already is a dynamic component loaded at element ' + boundElementIndex);
	      }
	      if ((0, _angular2SrcFacadeLang.isBlank)(injector)) {
	        injector = elementInjector.getLightDomAppInjector();
	      }
	      var annotation = this._metadataReader.read(componentBinding.token).annotation;
	      var componentDirective = eli.DirectiveBinding.createFromBinding(componentBinding, annotation);
	      var shadowDomAppInjector = this._createShadowDomAppInjector(componentDirective, injector);
	      elementInjector.dynamicallyCreateComponent(componentDirective, shadowDomAppInjector);
	    }
	  }, {
	    key: '_createShadowDomAppInjector',
	    value: function _createShadowDomAppInjector(componentDirective, appInjector) {
	      var shadowDomAppInjector = null;
	      var injectables = componentDirective.resolvedInjectables;
	      if ((0, _angular2SrcFacadeLang.isPresent)(injectables)) {
	        shadowDomAppInjector = appInjector.createChildFromResolved(injectables);
	      } else {
	        shadowDomAppInjector = appInjector;
	      }
	      return shadowDomAppInjector;
	    }
	  }, {
	    key: '_hydrateView',
	    value: function _hydrateView(view, appInjector, hostElementInjector, context, parentLocals) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.AppView, appInjector, _angular2Di.Injector, hostElementInjector, eli.ElementInjector, context, Object, parentLocals, _angular2Change_detection.Locals);
	      if ((0, _angular2SrcFacadeLang.isBlank)(appInjector)) {
	        appInjector = hostElementInjector.getShadowDomAppInjector();
	      }
	      if ((0, _angular2SrcFacadeLang.isBlank)(appInjector)) {
	        appInjector = hostElementInjector.getLightDomAppInjector();
	      }
	      view.context = context;
	      view.locals.parent = parentLocals;
	      view.changeDetector.hydrate(view.context, view.locals, view);
	      var binders = view.proto.elementBinders;
	      for (var i = 0; i < binders.length; ++i) {
	        var elementInjector = view.elementInjectors[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(elementInjector)) {
	          var componentDirective = view.proto.elementBinders[i].componentDirective;
	          var shadowDomAppInjector = null;
	          if ((0, _angular2SrcFacadeLang.isPresent)(componentDirective)) {
	            shadowDomAppInjector = this._createShadowDomAppInjector(componentDirective, appInjector);
	          } else {
	            shadowDomAppInjector = null;
	          }
	          elementInjector.instantiateDirectives(appInjector, hostElementInjector, shadowDomAppInjector, view.preBuiltObjects[i]);
	          this._setUpEventEmitters(view, elementInjector, i);
	          var exportImplicitName = elementInjector.getExportImplicitName();
	          if (elementInjector.isExportingComponent()) {
	            view.locals.set(exportImplicitName, elementInjector.getComponent());
	          } else if (elementInjector.isExportingElement()) {
	            view.locals.set(exportImplicitName, elementInjector.getNgElement().domElement);
	          }
	        }
	      }
	    }
	  }, {
	    key: '_setUpEventEmitters',
	    value: function _setUpEventEmitters(view, elementInjector, boundElementIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.AppView, elementInjector, eli.ElementInjector, boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	      var emitters = elementInjector.getEventEmitterAccessors();
	      for (var directiveIndex = 0; directiveIndex < emitters.length; ++directiveIndex) {
	        var directiveEmitters = emitters[directiveIndex];
	        var directive = elementInjector.getDirectiveAtIndex(directiveIndex);
	        for (var eventIndex = 0; eventIndex < directiveEmitters.length; ++eventIndex) {
	          var eventEmitterAccessor = directiveEmitters[eventIndex];
	          eventEmitterAccessor.subscribe(view, boundElementIndex, directive);
	        }
	      }
	    }
	  }, {
	    key: 'dehydrateView',
	    value: function dehydrateView(view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.AppView);
	      var binders = view.proto.elementBinders;
	      for (var i = 0; i < binders.length; ++i) {
	        var elementInjector = view.elementInjectors[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(elementInjector)) {
	          elementInjector.clearDirectives();
	        }
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(view.locals)) {
	        view.locals.clearValues();
	      }
	      view.context = null;
	      view.changeDetector.dehydrate();
	    }
	  }]);
	
	  return AppViewManagerUtils;
	})();
	
	exports.AppViewManagerUtils = AppViewManagerUtils;
	
	Object.defineProperty(AppViewManagerUtils, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(AppViewManagerUtils, 'parameters', { get: function get() {
	    return [[_directive_metadata_reader.DirectiveMetadataReader]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.createView, 'parameters', { get: function get() {
	    return [[viewModule.AppProtoView], [avmModule.AppViewManager], [_angular2SrcRenderApi.Renderer]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.attachComponentView, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number], [viewModule.AppView]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.detachComponentView, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.hydrateComponentView, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.attachAndHydrateInPlaceHostView, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number], [viewModule.AppView], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.detachInPlaceHostView, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [viewModule.AppView]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.attachViewInContainer, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.number], [viewModule.AppView]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.detachViewInContainer, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.hydrateViewInContainer, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.number], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.hydrateDynamicComponentInElementInjector, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number], [_angular2Di.Binding], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype._hydrateView, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_angular2Di.Injector], [eli.ElementInjector], [Object], [_angular2Change_detection.Locals]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype._setUpEventEmitters, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [eli.ElementInjector], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(AppViewManagerUtils.prototype.dehydrateView, 'parameters', { get: function get() {
	    return [[viewModule.AppView]];
	  } });
	//# sourceMappingURL=view_manager_utils.js.map

	//# sourceMappingURL=./view_manager_utils.map

/***/ },
/* 172 */
/*!*************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/ng_element.es6 ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _compilerView = __webpack_require__(/*! ../compiler/view */ 165);
	
	var viewModule = _interopRequireWildcard(_compilerView);
	
	var _angular2SrcRenderDomDirect_dom_renderer = __webpack_require__(/*! angular2/src/render/dom/direct_dom_renderer */ 173);
	
	var NgElement = (function () {
	  function NgElement(view, boundElementIndex) {
	    _classCallCheck(this, NgElement);
	
	    this._view = view;
	    this._boundElementIndex = boundElementIndex;
	  }
	
	  _createClass(NgElement, [{
	    key: 'domElement',
	    get: function () {
	      var domViewRef = _rtts_assertRtts_assert.assert.type(this._view.render, _angular2SrcRenderDomDirect_dom_renderer.DirectDomViewRef);
	      return domViewRef.delegate.boundElements[this._boundElementIndex];
	    }
	  }, {
	    key: 'getAttribute',
	    value: function getAttribute(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.normalizeBlank)(_angular2SrcDomDom_adapter.DOM.getAttribute(this.domElement, name)), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return NgElement;
	})();
	
	exports.NgElement = NgElement;
	
	Object.defineProperty(NgElement.prototype.getAttribute, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=ng_element.js.map

	//# sourceMappingURL=./ng_element.map

/***/ },
/* 173 */
/*!*******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/direct_dom_renderer.es6 ***!
  \*******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x3, _x4, _x5) { var _again = true; _function: while (_again) { var object = _x3, property = _x4, receiver = _x5; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x3 = parent; _x4 = property; _x5 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _api = __webpack_require__(/*! ../api */ 115);
	
	var api = _interopRequireWildcard(_api);
	
	var _viewView = __webpack_require__(/*! ./view/view */ 145);
	
	var _viewProto_view = __webpack_require__(/*! ./view/proto_view */ 148);
	
	var _viewView_factory = __webpack_require__(/*! ./view/view_factory */ 174);
	
	var _viewView_hydrator = __webpack_require__(/*! ./view/view_hydrator */ 175);
	
	var _compilerCompiler = __webpack_require__(/*! ./compiler/compiler */ 176);
	
	var _shadow_domShadow_dom_strategy = __webpack_require__(/*! ./shadow_dom/shadow_dom_strategy */ 144);
	
	var _viewProto_view_builder = __webpack_require__(/*! ./view/proto_view_builder */ 179);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _viewView_container = __webpack_require__(/*! ./view/view_container */ 146);
	
	function _resolveViewContainer(vc) {
	  _rtts_assertRtts_assert.assert.argumentTypes(vc, api.RenderViewContainerRef);
	  return _resolveView(vc.view).getOrCreateViewContainer(vc.elementIndex);
	}
	Object.defineProperty(_resolveViewContainer, 'parameters', { get: function get() {
	    return [[api.RenderViewContainerRef]];
	  } });
	function _resolveView(viewRef) {
	  _rtts_assertRtts_assert.assert.argumentTypes(viewRef, DirectDomViewRef);
	  return (0, _angular2SrcFacadeLang.isPresent)(viewRef) ? viewRef.delegate : null;
	}
	Object.defineProperty(_resolveView, 'parameters', { get: function get() {
	    return [[DirectDomViewRef]];
	  } });
	function _resolveProtoView(protoViewRef) {
	  _rtts_assertRtts_assert.assert.argumentTypes(protoViewRef, DirectDomProtoViewRef);
	  return (0, _angular2SrcFacadeLang.isPresent)(protoViewRef) ? protoViewRef.delegate : null;
	}
	Object.defineProperty(_resolveProtoView, 'parameters', { get: function get() {
	    return [[DirectDomProtoViewRef]];
	  } });
	function _wrapView(view) {
	  _rtts_assertRtts_assert.assert.argumentTypes(view, _viewView.RenderView);
	  return new DirectDomViewRef(view);
	}
	Object.defineProperty(_wrapView, 'parameters', { get: function get() {
	    return [[_viewView.RenderView]];
	  } });
	function _collectComponentChildViewRefs(view) {
	  var target = arguments[1] === undefined ? null : arguments[1];
	
	  if ((0, _angular2SrcFacadeLang.isBlank)(target)) {
	    target = [];
	  }
	  _angular2SrcFacadeCollection.ListWrapper.push(target, _wrapView(view));
	  _angular2SrcFacadeCollection.ListWrapper.forEach(view.componentChildViews, function (view) {
	    if ((0, _angular2SrcFacadeLang.isPresent)(view)) {
	      _collectComponentChildViewRefs(view, target);
	    }
	  });
	  return target;
	}
	
	var DirectDomProtoViewRef = (function (_api$ProtoViewRef) {
	  function DirectDomProtoViewRef(delegate) {
	    _classCallCheck(this, DirectDomProtoViewRef);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(delegate, _viewProto_view.RenderProtoView);
	    _get(Object.getPrototypeOf(DirectDomProtoViewRef.prototype), 'constructor', this).call(this);
	    this.delegate = delegate;
	  }
	
	  _inherits(DirectDomProtoViewRef, _api$ProtoViewRef);
	
	  return DirectDomProtoViewRef;
	})(api.ProtoViewRef);
	
	exports.DirectDomProtoViewRef = DirectDomProtoViewRef;
	
	Object.defineProperty(DirectDomProtoViewRef, 'parameters', { get: function get() {
	    return [[_viewProto_view.RenderProtoView]];
	  } });
	
	var DirectDomViewRef = (function (_api$ViewRef) {
	  function DirectDomViewRef(delegate) {
	    _classCallCheck(this, DirectDomViewRef);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(delegate, _viewView.RenderView);
	    _get(Object.getPrototypeOf(DirectDomViewRef.prototype), 'constructor', this).call(this);
	    this.delegate = delegate;
	  }
	
	  _inherits(DirectDomViewRef, _api$ViewRef);
	
	  return DirectDomViewRef;
	})(api.ViewRef);
	
	exports.DirectDomViewRef = DirectDomViewRef;
	
	Object.defineProperty(DirectDomViewRef, 'parameters', { get: function get() {
	    return [[_viewView.RenderView]];
	  } });
	
	var DirectDomRenderer = (function (_api$Renderer) {
	  function DirectDomRenderer(compiler, viewFactory, viewHydrator, shadowDomStrategy) {
	    _classCallCheck(this, DirectDomRenderer);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(compiler, _compilerCompiler.Compiler, viewFactory, _viewView_factory.ViewFactory, viewHydrator, _viewView_hydrator.RenderViewHydrator, shadowDomStrategy, _shadow_domShadow_dom_strategy.ShadowDomStrategy);
	    _get(Object.getPrototypeOf(DirectDomRenderer.prototype), 'constructor', this).call(this);
	    this._compiler = compiler;
	    this._viewFactory = viewFactory;
	    this._viewHydrator = viewHydrator;
	    this._shadowDomStrategy = shadowDomStrategy;
	  }
	
	  _inherits(DirectDomRenderer, _api$Renderer);
	
	  _createClass(DirectDomRenderer, [{
	    key: 'createHostProtoView',
	    value: function createHostProtoView(componentId) {
	      var rootElement = _angular2SrcDomDom_adapter.DOM.createElement('div');
	      var hostProtoViewBuilder = new _viewProto_view_builder.ProtoViewBuilder(rootElement);
	      var elBinder = hostProtoViewBuilder.bindElement(rootElement, 'root element');
	      elBinder.setComponentId(componentId);
	      elBinder.bindDirective(0);
	      this._shadowDomStrategy.processElement(null, componentId, rootElement);
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.resolve(hostProtoViewBuilder.build()), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, api.ProtoViewDto));
	    }
	  }, {
	    key: 'createImperativeComponentProtoView',
	    value: function createImperativeComponentProtoView(rendererId) {
	      var protoViewBuilder = new _viewProto_view_builder.ProtoViewBuilder(null);
	      protoViewBuilder.setImperativeRendererId(rendererId);
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.resolve(protoViewBuilder.build()), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, api.ProtoViewDto));
	    }
	  }, {
	    key: 'compile',
	    value: function compile(template) {
	      _rtts_assertRtts_assert.assert.argumentTypes(template, api.ViewDefinition);
	      return _rtts_assertRtts_assert.assert.returnType(this._compiler.compile(template), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, api.ProtoViewDto));
	    }
	  }, {
	    key: 'mergeChildComponentProtoViews',
	    value: function mergeChildComponentProtoViews(protoViewRef, protoViewRefs) {
	      _rtts_assertRtts_assert.assert.argumentTypes(protoViewRef, api.ProtoViewRef, protoViewRefs, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, api.ProtoViewRef));
	      _resolveProtoView(protoViewRef).mergeChildComponentProtoViews(_angular2SrcFacadeCollection.ListWrapper.map(protoViewRefs, _resolveProtoView));
	    }
	  }, {
	    key: 'createViewInContainer',
	    value: function createViewInContainer(vcRef, atIndex, protoViewRef) {
	      _rtts_assertRtts_assert.assert.argumentTypes(vcRef, api.RenderViewContainerRef, atIndex, _rtts_assertRtts_assert.assert.type.number, protoViewRef, api.ProtoViewRef);
	      var view = this._viewFactory.getView(_resolveProtoView(protoViewRef));
	      var vc = _resolveViewContainer(vcRef);
	      this._viewHydrator.hydrateViewInViewContainer(vc, view);
	      vc.insert(view, atIndex);
	      return _rtts_assertRtts_assert.assert.returnType(_collectComponentChildViewRefs(view), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, api.ViewRef));
	    }
	  }, {
	    key: 'destroyViewInContainer',
	    value: function destroyViewInContainer(vcRef, atIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(vcRef, api.RenderViewContainerRef, atIndex, _rtts_assertRtts_assert.assert.type.number);
	      var vc = _resolveViewContainer(vcRef);
	      var view = vc.detach(atIndex);
	      this._viewHydrator.dehydrateViewInViewContainer(vc, view);
	      this._viewFactory.returnView(view);
	    }
	  }, {
	    key: 'insertViewIntoContainer',
	    value: function insertViewIntoContainer(vcRef, _x2, viewRef) {
	      var atIndex = arguments[1] === undefined ? -1 : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(vcRef, api.RenderViewContainerRef, atIndex, _rtts_assertRtts_assert.assert.type.any, viewRef, api.ViewRef);
	      _resolveViewContainer(vcRef).insert(_resolveView(viewRef), atIndex);
	    }
	  }, {
	    key: 'detachViewFromContainer',
	    value: function detachViewFromContainer(vcRef, atIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(vcRef, api.RenderViewContainerRef, atIndex, _rtts_assertRtts_assert.assert.type.number);
	      _resolveViewContainer(vcRef).detach(atIndex);
	    }
	  }, {
	    key: 'createDynamicComponentView',
	    value: function createDynamicComponentView(hostViewRef, elementIndex, componentViewRef) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostViewRef, api.ViewRef, elementIndex, _rtts_assertRtts_assert.assert.type.number, componentViewRef, api.ProtoViewRef);
	      var hostView = _resolveView(hostViewRef);
	      var componentView = this._viewFactory.getView(_resolveProtoView(componentViewRef));
	      this._viewHydrator.hydrateDynamicComponentView(hostView, elementIndex, componentView);
	      return _rtts_assertRtts_assert.assert.returnType(_collectComponentChildViewRefs(componentView), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, api.ViewRef));
	    }
	  }, {
	    key: 'destroyDynamicComponentView',
	    value: function destroyDynamicComponentView(hostViewRef, elementIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostViewRef, api.ViewRef, elementIndex, _rtts_assertRtts_assert.assert.type.number);
	      throw new _angular2SrcFacadeLang.BaseException('Not supported yet');
	    }
	  }, {
	    key: 'createInPlaceHostView',
	    value: function createInPlaceHostView(parentViewRef, hostElementSelector, hostProtoViewRef) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentViewRef, api.ViewRef, hostElementSelector, _rtts_assertRtts_assert.assert.type.any, hostProtoViewRef, api.ProtoViewRef);
	      var parentView = _resolveView(parentViewRef);
	      var hostView = this._viewFactory.createInPlaceHostView(hostElementSelector, _resolveProtoView(hostProtoViewRef));
	      this._viewHydrator.hydrateInPlaceHostView(parentView, hostView);
	      return _rtts_assertRtts_assert.assert.returnType(_collectComponentChildViewRefs(hostView), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, api.ViewRef));
	    }
	  }, {
	    key: 'destroyInPlaceHostView',
	    value: function destroyInPlaceHostView(parentViewRef, hostViewRef) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentViewRef, api.ViewRef, hostViewRef, api.ViewRef);
	      var parentView = _resolveView(parentViewRef);
	      var hostView = _resolveView(hostViewRef);
	      this._viewHydrator.dehydrateInPlaceHostView(parentView, hostView);
	    }
	  }, {
	    key: 'setImperativeComponentRootNodes',
	    value: function setImperativeComponentRootNodes(parentViewRef, elementIndex, nodes) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentViewRef, api.ViewRef, elementIndex, _rtts_assertRtts_assert.assert.type.number, nodes, _angular2SrcFacadeCollection.List);
	      var parentView = _resolveView(parentViewRef);
	      var hostElement = parentView.boundElements[elementIndex];
	      var componentView = parentView.componentChildViews[elementIndex];
	      if ((0, _angular2SrcFacadeLang.isBlank)(componentView)) {
	        throw new _angular2SrcFacadeLang.BaseException('There is no componentChildView at index ' + elementIndex);
	      }
	      if ((0, _angular2SrcFacadeLang.isBlank)(componentView.proto.imperativeRendererId)) {
	        throw new _angular2SrcFacadeLang.BaseException('This component view has no imperative renderer');
	      }
	      _viewView_container.ViewContainer.removeViewNodes(componentView);
	      componentView.rootNodes = nodes;
	      this._shadowDomStrategy.attachTemplate(hostElement, componentView);
	    }
	  }, {
	    key: 'setElementProperty',
	    value: function setElementProperty(viewRef, elementIndex, propertyName, propertyValue) {
	      _rtts_assertRtts_assert.assert.argumentTypes(viewRef, api.ViewRef, elementIndex, _rtts_assertRtts_assert.assert.type.number, propertyName, _rtts_assertRtts_assert.assert.type.string, propertyValue, _rtts_assertRtts_assert.assert.type.any);
	      _resolveView(viewRef).setElementProperty(elementIndex, propertyName, propertyValue);
	    }
	  }, {
	    key: 'setText',
	    value: function setText(viewRef, textNodeIndex, text) {
	      _rtts_assertRtts_assert.assert.argumentTypes(viewRef, api.ViewRef, textNodeIndex, _rtts_assertRtts_assert.assert.type.number, text, _rtts_assertRtts_assert.assert.type.string);
	      _resolveView(viewRef).setText(textNodeIndex, text);
	    }
	  }, {
	    key: 'setEventDispatcher',
	    value: function setEventDispatcher(viewRef, dispatcher) {
	      _rtts_assertRtts_assert.assert.argumentTypes(viewRef, api.ViewRef, dispatcher, _rtts_assertRtts_assert.assert.type.any);
	      _resolveView(viewRef).setEventDispatcher(dispatcher);
	    }
	  }]);
	
	  return DirectDomRenderer;
	})(api.Renderer);
	
	exports.DirectDomRenderer = DirectDomRenderer;
	
	Object.defineProperty(DirectDomRenderer, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(DirectDomRenderer, 'parameters', { get: function get() {
	    return [[_compilerCompiler.Compiler], [_viewView_factory.ViewFactory], [_viewView_hydrator.RenderViewHydrator], [_shadow_domShadow_dom_strategy.ShadowDomStrategy]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.compile, 'parameters', { get: function get() {
	    return [[api.ViewDefinition]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.mergeChildComponentProtoViews, 'parameters', { get: function get() {
	    return [[api.ProtoViewRef], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, api.ProtoViewRef)]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.createViewInContainer, 'parameters', { get: function get() {
	    return [[api.RenderViewContainerRef], [_rtts_assertRtts_assert.assert.type.number], [api.ProtoViewRef]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.destroyViewInContainer, 'parameters', { get: function get() {
	    return [[api.RenderViewContainerRef], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.insertViewIntoContainer, 'parameters', { get: function get() {
	    return [[api.RenderViewContainerRef], [], [api.ViewRef]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.detachViewFromContainer, 'parameters', { get: function get() {
	    return [[api.RenderViewContainerRef], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.createDynamicComponentView, 'parameters', { get: function get() {
	    return [[api.ViewRef], [_rtts_assertRtts_assert.assert.type.number], [api.ProtoViewRef]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.destroyDynamicComponentView, 'parameters', { get: function get() {
	    return [[api.ViewRef], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.createInPlaceHostView, 'parameters', { get: function get() {
	    return [[api.ViewRef], [], [api.ProtoViewRef]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.destroyInPlaceHostView, 'parameters', { get: function get() {
	    return [[api.ViewRef], [api.ViewRef]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.setImperativeComponentRootNodes, 'parameters', { get: function get() {
	    return [[api.ViewRef], [_rtts_assertRtts_assert.assert.type.number], [_angular2SrcFacadeCollection.List]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.setElementProperty, 'parameters', { get: function get() {
	    return [[api.ViewRef], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.setText, 'parameters', { get: function get() {
	    return [[api.ViewRef], [_rtts_assertRtts_assert.assert.type.number], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DirectDomRenderer.prototype.setEventDispatcher, 'parameters', { get: function get() {
	    return [[api.ViewRef], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	//# sourceMappingURL=direct_dom_renderer.js.map

	//# sourceMappingURL=./direct_dom_renderer.map

/***/ },
/* 174 */
/*!*****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/view/view_factory.es6 ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _shadow_domContent_tag = __webpack_require__(/*! ../shadow_dom/content_tag */ 152);
	
	var _shadow_domShadow_dom_strategy = __webpack_require__(/*! ../shadow_dom/shadow_dom_strategy */ 144);
	
	var _angular2SrcRenderDomEventsEvent_manager = __webpack_require__(/*! angular2/src/render/dom/events/event_manager */ 157);
	
	var _proto_view = __webpack_require__(/*! ./proto_view */ 148);
	
	var pvModule = _interopRequireWildcard(_proto_view);
	
	var _view = __webpack_require__(/*! ./view */ 145);
	
	var viewModule = _interopRequireWildcard(_view);
	
	var _util = __webpack_require__(/*! ../util */ 150);
	
	var VIEW_POOL_CAPACITY = 'render.ViewFactory.viewPoolCapacity';
	exports.VIEW_POOL_CAPACITY = VIEW_POOL_CAPACITY;
	
	var ViewFactory = (function () {
	  function ViewFactory(poolCapacityPerProtoView, eventManager, shadowDomStrategy) {
	    _classCallCheck(this, ViewFactory);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(poolCapacityPerProtoView, _rtts_assertRtts_assert.assert.type.any, eventManager, _angular2SrcRenderDomEventsEvent_manager.EventManager, shadowDomStrategy, _shadow_domShadow_dom_strategy.ShadowDomStrategy);
	    this._poolCapacityPerProtoView = poolCapacityPerProtoView;
	    this._pooledViewsPerProtoView = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._eventManager = eventManager;
	    this._shadowDomStrategy = shadowDomStrategy;
	  }
	
	  _createClass(ViewFactory, [{
	    key: 'createInPlaceHostView',
	    value: function createInPlaceHostView(hostElementSelector, hostProtoView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostElementSelector, _rtts_assertRtts_assert.assert.type.any, hostProtoView, pvModule.RenderProtoView);
	      return _rtts_assertRtts_assert.assert.returnType(this._createView(hostProtoView, hostElementSelector), viewModule.RenderView);
	    }
	  }, {
	    key: 'getView',
	    value: function getView(protoView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(protoView, pvModule.RenderProtoView);
	      var pooledViews = _angular2SrcFacadeCollection.MapWrapper.get(this._pooledViewsPerProtoView, protoView);
	      if ((0, _angular2SrcFacadeLang.isPresent)(pooledViews) && pooledViews.length > 0) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.ListWrapper.removeLast(pooledViews), viewModule.RenderView);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(this._createView(protoView, null), viewModule.RenderView);
	    }
	  }, {
	    key: 'returnView',
	    value: function returnView(view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.RenderView);
	      if (view.hydrated) {
	        throw new _angular2SrcFacadeLang.BaseException('View is still hydrated');
	      }
	      var protoView = view.proto;
	      var pooledViews = _angular2SrcFacadeCollection.MapWrapper.get(this._pooledViewsPerProtoView, protoView);
	      if ((0, _angular2SrcFacadeLang.isBlank)(pooledViews)) {
	        pooledViews = [];
	        _angular2SrcFacadeCollection.MapWrapper.set(this._pooledViewsPerProtoView, protoView, pooledViews);
	      }
	      if (pooledViews.length < this._poolCapacityPerProtoView) {
	        _angular2SrcFacadeCollection.ListWrapper.push(pooledViews, view);
	      }
	    }
	  }, {
	    key: '_createView',
	    value: function _createView(protoView, inplaceElement) {
	      _rtts_assertRtts_assert.assert.argumentTypes(protoView, pvModule.RenderProtoView, inplaceElement, _rtts_assertRtts_assert.assert.type.any);
	      if ((0, _angular2SrcFacadeLang.isPresent)(protoView.imperativeRendererId)) {
	        return _rtts_assertRtts_assert.assert.returnType(new viewModule.RenderView(protoView, [], [], [], []), viewModule.RenderView);
	      }
	      var rootElementClone = (0, _angular2SrcFacadeLang.isPresent)(inplaceElement) ? inplaceElement : _angular2SrcDomDom_adapter.DOM.importIntoDoc(protoView.element);
	      var elementsWithBindingsDynamic;
	      if (protoView.isTemplateElement) {
	        elementsWithBindingsDynamic = _angular2SrcDomDom_adapter.DOM.querySelectorAll(_angular2SrcDomDom_adapter.DOM.content(rootElementClone), _util.NG_BINDING_CLASS_SELECTOR);
	      } else {
	        elementsWithBindingsDynamic = _angular2SrcDomDom_adapter.DOM.getElementsByClassName(rootElementClone, _util.NG_BINDING_CLASS);
	      }
	      var elementsWithBindings = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(elementsWithBindingsDynamic.length);
	      for (var binderIdx = 0; binderIdx < elementsWithBindingsDynamic.length; ++binderIdx) {
	        elementsWithBindings[binderIdx] = elementsWithBindingsDynamic[binderIdx];
	      }
	      var viewRootNodes;
	      if (protoView.isTemplateElement) {
	        var childNode = _angular2SrcDomDom_adapter.DOM.firstChild(_angular2SrcDomDom_adapter.DOM.content(rootElementClone));
	        viewRootNodes = [];
	        while (childNode != null) {
	          _angular2SrcFacadeCollection.ListWrapper.push(viewRootNodes, childNode);
	          childNode = _angular2SrcDomDom_adapter.DOM.nextSibling(childNode);
	        }
	      } else {
	        viewRootNodes = [rootElementClone];
	      }
	      var binders = protoView.elementBinders;
	      var boundTextNodes = [];
	      var boundElements = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(binders.length);
	      var contentTags = _angular2SrcFacadeCollection.ListWrapper.createFixedSize(binders.length);
	      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	        var binder = binders[binderIdx];
	        var element;
	        if (binderIdx === 0 && protoView.rootBindingOffset === 1) {
	          element = rootElementClone;
	        } else {
	          element = elementsWithBindings[binderIdx - protoView.rootBindingOffset];
	        }
	        boundElements[binderIdx] = element;
	        var childNodes = _angular2SrcDomDom_adapter.DOM.childNodes(_angular2SrcDomDom_adapter.DOM.templateAwareRoot(element));
	        var textNodeIndices = binder.textNodeIndices;
	        for (var i = 0; i < textNodeIndices.length; i++) {
	          _angular2SrcFacadeCollection.ListWrapper.push(boundTextNodes, childNodes[textNodeIndices[i]]);
	        }
	        var contentTag = null;
	        if ((0, _angular2SrcFacadeLang.isPresent)(binder.contentTagSelector)) {
	          contentTag = new _shadow_domContent_tag.Content(element, binder.contentTagSelector);
	        }
	        contentTags[binderIdx] = contentTag;
	      }
	      var view = new viewModule.RenderView(protoView, viewRootNodes, boundTextNodes, boundElements, contentTags);
	      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	        var binder = binders[binderIdx];
	        var element = boundElements[binderIdx];
	        if (binder.hasStaticComponent()) {
	          var childView = this._createView(binder.nestedProtoView, null);
	          ViewFactory.setComponentView(this._shadowDomStrategy, view, binderIdx, childView);
	        }
	        if ((0, _angular2SrcFacadeLang.isPresent)(binder.eventLocals) && (0, _angular2SrcFacadeLang.isPresent)(binder.localEvents)) {
	          for (var i = 0; i < binder.localEvents.length; i++) {
	            this._createEventListener(view, element, binderIdx, binder.localEvents[i].name, binder.eventLocals);
	          }
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(view, viewModule.RenderView);
	    }
	  }, {
	    key: '_createEventListener',
	    value: function _createEventListener(view, element, elementIndex, eventName, eventLocals) {
	      this._eventManager.addEventListener(element, eventName, function (event) {
	        view.dispatchEvent(elementIndex, eventName, event);
	      });
	    }
	  }], [{
	    key: 'setComponentView',
	    value: function setComponentView(shadowDomStrategy, hostView, elementIndex, componentView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(shadowDomStrategy, _shadow_domShadow_dom_strategy.ShadowDomStrategy, hostView, viewModule.RenderView, elementIndex, _rtts_assertRtts_assert.assert.type.number, componentView, viewModule.RenderView);
	      var element = hostView.boundElements[elementIndex];
	      var lightDom = shadowDomStrategy.constructLightDom(hostView, componentView, element);
	      shadowDomStrategy.attachTemplate(element, componentView);
	      hostView.lightDoms[elementIndex] = lightDom;
	      hostView.componentChildViews[elementIndex] = componentView;
	    }
	  }]);
	
	  return ViewFactory;
	})();
	
	exports.ViewFactory = ViewFactory;
	
	Object.defineProperty(ViewFactory, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(ViewFactory, 'parameters', { get: function get() {
	    return [[new _angular2Di.Inject(VIEW_POOL_CAPACITY)], [_angular2SrcRenderDomEventsEvent_manager.EventManager], [_shadow_domShadow_dom_strategy.ShadowDomStrategy]];
	  } });
	Object.defineProperty(ViewFactory.prototype.createInPlaceHostView, 'parameters', { get: function get() {
	    return [[], [pvModule.RenderProtoView]];
	  } });
	Object.defineProperty(ViewFactory.prototype.getView, 'parameters', { get: function get() {
	    return [[pvModule.RenderProtoView]];
	  } });
	Object.defineProperty(ViewFactory.prototype.returnView, 'parameters', { get: function get() {
	    return [[viewModule.RenderView]];
	  } });
	Object.defineProperty(ViewFactory.prototype._createView, 'parameters', { get: function get() {
	    return [[pvModule.RenderProtoView], []];
	  } });
	Object.defineProperty(ViewFactory.setComponentView, 'parameters', { get: function get() {
	    return [[_shadow_domShadow_dom_strategy.ShadowDomStrategy], [viewModule.RenderView], [_rtts_assertRtts_assert.assert.type.number], [viewModule.RenderView]];
	  } });
	//# sourceMappingURL=view_factory.js.map

	//# sourceMappingURL=./view_factory.map

/***/ },
/* 175 */
/*!******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/view/view_hydrator.es6 ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _shadow_domLight_dom = __webpack_require__(/*! ../shadow_dom/light_dom */ 151);
	
	var ldModule = _interopRequireWildcard(_shadow_domLight_dom);
	
	var _eventsEvent_manager = __webpack_require__(/*! ../events/event_manager */ 157);
	
	var _view_factory = __webpack_require__(/*! ./view_factory */ 174);
	
	var _view_container = __webpack_require__(/*! ./view_container */ 146);
	
	var vcModule = _interopRequireWildcard(_view_container);
	
	var _view = __webpack_require__(/*! ./view */ 145);
	
	var viewModule = _interopRequireWildcard(_view);
	
	var _shadow_domShadow_dom_strategy = __webpack_require__(/*! ../shadow_dom/shadow_dom_strategy */ 144);
	
	var RenderViewHydrator = (function () {
	  function RenderViewHydrator(eventManager, viewFactory, shadowDomStrategy) {
	    _classCallCheck(this, RenderViewHydrator);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(eventManager, _eventsEvent_manager.EventManager, viewFactory, _view_factory.ViewFactory, shadowDomStrategy, _shadow_domShadow_dom_strategy.ShadowDomStrategy);
	    this._eventManager = eventManager;
	    this._viewFactory = viewFactory;
	    this._shadowDomStrategy = shadowDomStrategy;
	  }
	
	  _createClass(RenderViewHydrator, [{
	    key: 'hydrateDynamicComponentView',
	    value: function hydrateDynamicComponentView(hostView, boundElementIndex, componentView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostView, viewModule.RenderView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number, componentView, viewModule.RenderView);
	      _view_factory.ViewFactory.setComponentView(this._shadowDomStrategy, hostView, boundElementIndex, componentView);
	      var lightDom = hostView.lightDoms[boundElementIndex];
	      this._viewHydrateRecurse(componentView, lightDom);
	      if ((0, _angular2SrcFacadeLang.isPresent)(lightDom)) {
	        lightDom.redistribute();
	      }
	    }
	  }, {
	    key: 'dehydrateDynamicComponentView',
	    value: function dehydrateDynamicComponentView(parentView, boundElementIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentView, viewModule.RenderView, boundElementIndex, _rtts_assertRtts_assert.assert.type.number);
	      throw new _angular2SrcFacadeLang.BaseException('Not supported yet');
	    }
	  }, {
	    key: 'hydrateInPlaceHostView',
	    value: function hydrateInPlaceHostView(parentView, hostView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentView, viewModule.RenderView, hostView, viewModule.RenderView);
	      if ((0, _angular2SrcFacadeLang.isPresent)(parentView)) {
	        _angular2SrcFacadeCollection.ListWrapper.push(parentView.imperativeHostViews, hostView);
	      }
	      this._viewHydrateRecurse(hostView, null);
	    }
	  }, {
	    key: 'dehydrateInPlaceHostView',
	    value: function dehydrateInPlaceHostView(parentView, hostView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parentView, viewModule.RenderView, hostView, viewModule.RenderView);
	      if ((0, _angular2SrcFacadeLang.isPresent)(parentView)) {
	        _angular2SrcFacadeCollection.ListWrapper.remove(parentView.imperativeHostViews, hostView);
	      }
	      vcModule.ViewContainer.removeViewNodes(hostView);
	      hostView.rootNodes = [];
	      this._viewDehydrateRecurse(hostView);
	    }
	  }, {
	    key: 'hydrateViewInViewContainer',
	    value: function hydrateViewInViewContainer(viewContainer, view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(viewContainer, vcModule.ViewContainer, view, viewModule.RenderView);
	      this._viewHydrateRecurse(view, viewContainer.parentView.hostLightDom);
	    }
	  }, {
	    key: 'dehydrateViewInViewContainer',
	    value: function dehydrateViewInViewContainer(viewContainer, view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(viewContainer, vcModule.ViewContainer, view, viewModule.RenderView);
	      this._viewDehydrateRecurse(view);
	    }
	  }, {
	    key: '_viewHydrateRecurse',
	    value: function _viewHydrateRecurse(view, hostLightDom) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, _rtts_assertRtts_assert.assert.type.any, hostLightDom, ldModule.LightDom);
	      if (view.hydrated) throw new _angular2SrcFacadeLang.BaseException('The view is already hydrated.');
	      view.hydrated = true;
	      view.hostLightDom = hostLightDom;
	      for (var i = 0; i < view.contentTags.length; i++) {
	        var destLightDom = view.getDirectParentLightDom(i);
	        var ct = view.contentTags[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(ct)) {
	          ct.hydrate(destLightDom);
	        }
	      }
	      for (var i = 0; i < view.componentChildViews.length; i++) {
	        var cv = view.componentChildViews[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(cv)) {
	          this._viewHydrateRecurse(cv, view.lightDoms[i]);
	        }
	      }
	      for (var i = 0; i < view.lightDoms.length; ++i) {
	        var lightDom = view.lightDoms[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(lightDom)) {
	          lightDom.redistribute();
	        }
	      }
	      view.eventHandlerRemovers = _angular2SrcFacadeCollection.ListWrapper.create();
	      var binders = view.proto.elementBinders;
	      for (var binderIdx = 0; binderIdx < binders.length; binderIdx++) {
	        var binder = binders[binderIdx];
	        if ((0, _angular2SrcFacadeLang.isPresent)(binder.globalEvents)) {
	          for (var i = 0; i < binder.globalEvents.length; i++) {
	            var globalEvent = binder.globalEvents[i];
	            var remover = this._createGlobalEventListener(view, binderIdx, globalEvent.name, globalEvent.target, globalEvent.fullName);
	            _angular2SrcFacadeCollection.ListWrapper.push(view.eventHandlerRemovers, remover);
	          }
	        }
	      }
	    }
	  }, {
	    key: '_createGlobalEventListener',
	    value: function _createGlobalEventListener(view, elementIndex, eventName, eventTarget, fullName) {
	      return _rtts_assertRtts_assert.assert.returnType(this._eventManager.addGlobalEventListener(eventTarget, eventName, function (event) {
	        view.dispatchEvent(elementIndex, fullName, event);
	      }), Function);
	    }
	  }, {
	    key: '_viewDehydrateRecurse',
	    value: function _viewDehydrateRecurse(view) {
	      for (var i = 0; i < view.componentChildViews.length; i++) {
	        var cv = view.componentChildViews[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(cv)) {
	          this._viewDehydrateRecurse(cv);
	          if (view.proto.elementBinders[i].hasDynamicComponent()) {
	            vcModule.ViewContainer.removeViewNodes(cv);
	            this._viewFactory.returnView(cv);
	            view.lightDoms[i] = null;
	            view.componentChildViews[i] = null;
	          }
	        }
	      }
	      for (var i = 0; i < view.imperativeHostViews.length; i++) {
	        var hostView = view.imperativeHostViews[i];
	        this._viewDehydrateRecurse(hostView);
	        vcModule.ViewContainer.removeViewNodes(hostView);
	        hostView.rootNodes = [];
	        this._viewFactory.returnView(hostView);
	      }
	      view.imperativeHostViews = [];
	      if ((0, _angular2SrcFacadeLang.isPresent)(view.viewContainers)) {
	        for (var i = 0; i < view.viewContainers.length; i++) {
	          var vc = view.viewContainers[i];
	          if ((0, _angular2SrcFacadeLang.isPresent)(vc)) {
	            this._viewContainerDehydrateRecurse(vc);
	          }
	          var ct = view.contentTags[i];
	          if ((0, _angular2SrcFacadeLang.isPresent)(ct)) {
	            ct.dehydrate();
	          }
	        }
	      }
	      for (var i = 0; i < view.eventHandlerRemovers.length; i++) {
	        view.eventHandlerRemovers[i]();
	      }
	      view.hostLightDom = null;
	      view.eventHandlerRemovers = null;
	      view.setEventDispatcher(null);
	      view.hydrated = false;
	    }
	  }, {
	    key: '_viewContainerDehydrateRecurse',
	    value: function _viewContainerDehydrateRecurse(viewContainer) {
	      for (var i = 0; i < viewContainer.views.length; i++) {
	        var view = viewContainer.views[i];
	        this._viewDehydrateRecurse(view);
	        this._viewFactory.returnView(view);
	      }
	      viewContainer.clear();
	    }
	  }]);
	
	  return RenderViewHydrator;
	})();
	
	exports.RenderViewHydrator = RenderViewHydrator;
	
	Object.defineProperty(RenderViewHydrator, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(RenderViewHydrator, 'parameters', { get: function get() {
	    return [[_eventsEvent_manager.EventManager], [_view_factory.ViewFactory], [_shadow_domShadow_dom_strategy.ShadowDomStrategy]];
	  } });
	Object.defineProperty(RenderViewHydrator.prototype.hydrateDynamicComponentView, 'parameters', { get: function get() {
	    return [[viewModule.RenderView], [_rtts_assertRtts_assert.assert.type.number], [viewModule.RenderView]];
	  } });
	Object.defineProperty(RenderViewHydrator.prototype.dehydrateDynamicComponentView, 'parameters', { get: function get() {
	    return [[viewModule.RenderView], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(RenderViewHydrator.prototype.hydrateInPlaceHostView, 'parameters', { get: function get() {
	    return [[viewModule.RenderView], [viewModule.RenderView]];
	  } });
	Object.defineProperty(RenderViewHydrator.prototype.dehydrateInPlaceHostView, 'parameters', { get: function get() {
	    return [[viewModule.RenderView], [viewModule.RenderView]];
	  } });
	Object.defineProperty(RenderViewHydrator.prototype.hydrateViewInViewContainer, 'parameters', { get: function get() {
	    return [[vcModule.ViewContainer], [viewModule.RenderView]];
	  } });
	Object.defineProperty(RenderViewHydrator.prototype.dehydrateViewInViewContainer, 'parameters', { get: function get() {
	    return [[vcModule.ViewContainer], [viewModule.RenderView]];
	  } });
	Object.defineProperty(RenderViewHydrator.prototype._viewHydrateRecurse, 'parameters', { get: function get() {
	    return [[], [ldModule.LightDom]];
	  } });
	//# sourceMappingURL=view_hydrator.js.map

	//# sourceMappingURL=./view_hydrator.map

/***/ },
/* 176 */
/*!*****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/compiler.es6 ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _api = __webpack_require__(/*! ../../api */ 115);
	
	var _compile_pipeline = __webpack_require__(/*! ./compile_pipeline */ 177);
	
	var _angular2SrcRenderDomCompilerTemplate_loader = __webpack_require__(/*! angular2/src/render/dom/compiler/template_loader */ 183);
	
	var _compile_step_factory = __webpack_require__(/*! ./compile_step_factory */ 186);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _shadow_domShadow_dom_strategy = __webpack_require__(/*! ../shadow_dom/shadow_dom_strategy */ 144);
	
	var Compiler = (function () {
	  function Compiler(stepFactory, templateLoader) {
	    _classCallCheck(this, Compiler);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(stepFactory, _compile_step_factory.CompileStepFactory, templateLoader, _angular2SrcRenderDomCompilerTemplate_loader.TemplateLoader);
	    this._templateLoader = templateLoader;
	    this._stepFactory = stepFactory;
	  }
	
	  _createClass(Compiler, [{
	    key: 'compile',
	    value: function compile(template) {
	      var _this = this;
	
	      var tplPromise = this._templateLoader.load(template);
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.then(tplPromise, function (el) {
	        return _this._compileTemplate(template, el);
	      }, function (_) {
	        throw new _angular2SrcFacadeLang.BaseException('Failed to load the template "' + template.componentId + '"');
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, _api.ProtoViewDto));
	    }
	  }, {
	    key: '_compileTemplate',
	    value: function _compileTemplate(template, tplElement) {
	      var subTaskPromises = [];
	      var pipeline = new _compile_pipeline.CompilePipeline(this._stepFactory.createSteps(template, subTaskPromises));
	      var compileElements;
	      compileElements = pipeline.process(tplElement, template.componentId);
	      var protoView = compileElements[0].inheritedProtoView.build();
	      if (subTaskPromises.length > 0) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.all(subTaskPromises).then(function (_) {
	          return protoView;
	        }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, _api.ProtoViewDto));
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.resolve(protoView), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, _api.ProtoViewDto));
	      }
	    }
	  }]);
	
	  return Compiler;
	})();
	
	exports.Compiler = Compiler;
	
	Object.defineProperty(Compiler, 'parameters', { get: function get() {
	    return [[_compile_step_factory.CompileStepFactory], [_angular2SrcRenderDomCompilerTemplate_loader.TemplateLoader]];
	  } });
	Object.defineProperty(Compiler.prototype.compile, 'parameters', { get: function get() {
	    return [[_api.ViewDefinition]];
	  } });
	Object.defineProperty(Compiler.prototype._compileTemplate, 'parameters', { get: function get() {
	    return [[_api.ViewDefinition], []];
	  } });
	
	var DefaultCompiler = (function (_Compiler) {
	  function DefaultCompiler(parser, shadowDomStrategy, templateLoader) {
	    _classCallCheck(this, DefaultCompiler);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parser, _angular2Change_detection.Parser, shadowDomStrategy, _shadow_domShadow_dom_strategy.ShadowDomStrategy, templateLoader, _angular2SrcRenderDomCompilerTemplate_loader.TemplateLoader);
	    _get(Object.getPrototypeOf(DefaultCompiler.prototype), 'constructor', this).call(this, new _compile_step_factory.DefaultStepFactory(parser, shadowDomStrategy), templateLoader);
	  }
	
	  _inherits(DefaultCompiler, _Compiler);
	
	  return DefaultCompiler;
	})(Compiler);
	
	exports.DefaultCompiler = DefaultCompiler;
	
	Object.defineProperty(DefaultCompiler, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(DefaultCompiler, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.Parser], [_shadow_domShadow_dom_strategy.ShadowDomStrategy], [_angular2SrcRenderDomCompilerTemplate_loader.TemplateLoader]];
	  } });
	//# sourceMappingURL=compiler.js.map

	//# sourceMappingURL=./compiler.map

/***/ },
/* 177 */
/*!*************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/compile_pipeline.es6 ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _compile_element = __webpack_require__(/*! ./compile_element */ 178);
	
	var _compile_control = __webpack_require__(/*! ./compile_control */ 181);
	
	var _compile_step = __webpack_require__(/*! ./compile_step */ 182);
	
	var _viewProto_view_builder = __webpack_require__(/*! ../view/proto_view_builder */ 179);
	
	var CompilePipeline = (function () {
	  function CompilePipeline(steps) {
	    _classCallCheck(this, CompilePipeline);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(steps, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _compile_step.CompileStep));
	    this._control = new _compile_control.CompileControl(steps);
	  }
	
	  _createClass(CompilePipeline, [{
	    key: 'process',
	    value: function process(rootElement) {
	      var compilationCtxtDescription = arguments[1] === undefined ? '' : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(rootElement, _rtts_assertRtts_assert.assert.type.any, compilationCtxtDescription, _rtts_assertRtts_assert.assert.type.string);
	      var results = _angular2SrcFacadeCollection.ListWrapper.create();
	      var rootCompileElement = new _compile_element.CompileElement(rootElement, compilationCtxtDescription);
	      rootCompileElement.inheritedProtoView = new _viewProto_view_builder.ProtoViewBuilder(rootElement);
	      rootCompileElement.isViewRoot = true;
	      this._process(results, null, rootCompileElement, compilationCtxtDescription);
	      return _rtts_assertRtts_assert.assert.returnType(results, _angular2SrcFacadeCollection.List);
	    }
	  }, {
	    key: '_process',
	    value: function _process(results, parent, current) {
	      var compilationCtxtDescription = arguments[3] === undefined ? '' : arguments[3];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(results, _rtts_assertRtts_assert.assert.type.any, parent, _compile_element.CompileElement, current, _compile_element.CompileElement, compilationCtxtDescription, _rtts_assertRtts_assert.assert.type.string);
	      var additionalChildren = this._control.internalProcess(results, 0, parent, current);
	      if (current.compileChildren) {
	        var node = _angular2SrcDomDom_adapter.DOM.firstChild(_angular2SrcDomDom_adapter.DOM.templateAwareRoot(current.element));
	        while ((0, _angular2SrcFacadeLang.isPresent)(node)) {
	          var nextNode = _angular2SrcDomDom_adapter.DOM.nextSibling(node);
	          if (_angular2SrcDomDom_adapter.DOM.isElementNode(node)) {
	            var childCompileElement = new _compile_element.CompileElement(node, compilationCtxtDescription);
	            childCompileElement.inheritedProtoView = current.inheritedProtoView;
	            childCompileElement.inheritedElementBinder = current.inheritedElementBinder;
	            childCompileElement.distanceToInheritedBinder = current.distanceToInheritedBinder + 1;
	            this._process(results, current, childCompileElement);
	          }
	          node = nextNode;
	        }
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(additionalChildren)) {
	        for (var i = 0; i < additionalChildren.length; i++) {
	          this._process(results, current, additionalChildren[i]);
	        }
	      }
	    }
	  }]);
	
	  return CompilePipeline;
	})();
	
	exports.CompilePipeline = CompilePipeline;
	
	Object.defineProperty(CompilePipeline, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _compile_step.CompileStep)]];
	  } });
	Object.defineProperty(CompilePipeline.prototype.process, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(CompilePipeline.prototype._process, 'parameters', { get: function get() {
	    return [[], [_compile_element.CompileElement], [_compile_element.CompileElement], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=compile_pipeline.js.map

	//# sourceMappingURL=./compile_pipeline.map

/***/ },
/* 178 */
/*!************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/compile_element.es6 ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _viewProto_view_builder = __webpack_require__(/*! ../view/proto_view_builder */ 179);
	
	var CompileElement = (function () {
	  function CompileElement(element) {
	    var compilationUnit = arguments[1] === undefined ? '' : arguments[1];
	
	    _classCallCheck(this, CompileElement);
	
	    this.element = element;
	    this._attrs = null;
	    this._classList = null;
	    this.isViewRoot = false;
	    this.inheritedProtoView = null;
	    this.inheritedElementBinder = null;
	    this.distanceToInheritedBinder = 0;
	    this.compileChildren = true;
	    var tplDesc = (0, _angular2SrcFacadeLang.assertionsEnabled)() ? getElementDescription(element) : null;
	    if (compilationUnit !== '') {
	      this.elementDescription = compilationUnit;
	      if ((0, _angular2SrcFacadeLang.isPresent)(tplDesc)) this.elementDescription += ': ' + tplDesc;
	    } else {
	      this.elementDescription = tplDesc;
	    }
	  }
	
	  _createClass(CompileElement, [{
	    key: 'isBound',
	    value: function isBound() {
	      return (0, _angular2SrcFacadeLang.isPresent)(this.inheritedElementBinder) && this.distanceToInheritedBinder === 0;
	    }
	  }, {
	    key: 'bindElement',
	    value: function bindElement() {
	      if (!this.isBound()) {
	        var parentBinder = this.inheritedElementBinder;
	        this.inheritedElementBinder = this.inheritedProtoView.bindElement(this.element, this.elementDescription);
	        if ((0, _angular2SrcFacadeLang.isPresent)(parentBinder)) {
	          this.inheritedElementBinder.setParent(parentBinder, this.distanceToInheritedBinder);
	        }
	        this.distanceToInheritedBinder = 0;
	      }
	      return this.inheritedElementBinder;
	    }
	  }, {
	    key: 'refreshAttrs',
	    value: function refreshAttrs() {
	      this._attrs = null;
	    }
	  }, {
	    key: 'attrs',
	    value: function attrs() {
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._attrs)) {
	        this._attrs = _angular2SrcDomDom_adapter.DOM.attributeMap(this.element);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(this._attrs, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }, {
	    key: 'refreshClassList',
	    value: function refreshClassList() {
	      this._classList = null;
	    }
	  }, {
	    key: 'classList',
	    value: function classList() {
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._classList)) {
	        this._classList = _angular2SrcFacadeCollection.ListWrapper.create();
	        var elClassList = _angular2SrcDomDom_adapter.DOM.classList(this.element);
	        for (var i = 0; i < elClassList.length; i++) {
	          _angular2SrcFacadeCollection.ListWrapper.push(this._classList, elClassList[i]);
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(this._classList, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }]);
	
	  return CompileElement;
	})();
	
	exports.CompileElement = CompileElement;
	
	function getElementDescription(domElement) {
	  var buf = new _angular2SrcFacadeLang.StringJoiner();
	  var atts = _angular2SrcDomDom_adapter.DOM.attributeMap(domElement);
	  buf.add('<');
	  buf.add(_angular2SrcDomDom_adapter.DOM.tagName(domElement).toLowerCase());
	  addDescriptionAttribute(buf, 'id', _angular2SrcFacadeCollection.MapWrapper.get(atts, 'id'));
	  addDescriptionAttribute(buf, 'class', _angular2SrcFacadeCollection.MapWrapper.get(atts, 'class'));
	  _angular2SrcFacadeCollection.MapWrapper.forEach(atts, function (attValue, attName) {
	    if (attName !== 'id' && attName !== 'class') {
	      addDescriptionAttribute(buf, attName, attValue);
	    }
	  });
	  buf.add('>');
	  return _rtts_assertRtts_assert.assert.returnType(buf.toString(), _rtts_assertRtts_assert.assert.type.string);
	}
	function addDescriptionAttribute(buffer, attName, attValue) {
	  _rtts_assertRtts_assert.assert.argumentTypes(buffer, _angular2SrcFacadeLang.StringJoiner, attName, _rtts_assertRtts_assert.assert.type.string, attValue, _rtts_assertRtts_assert.assert.type.any);
	  if ((0, _angular2SrcFacadeLang.isPresent)(attValue)) {
	    if (attValue.length === 0) {
	      buffer.add(' ' + attName);
	    } else {
	      buffer.add(' ' + attName + '="' + attValue + '"');
	    }
	  }
	}
	Object.defineProperty(addDescriptionAttribute, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.StringJoiner], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	//# sourceMappingURL=compile_element.js.map

	//# sourceMappingURL=./compile_element.map

/***/ },
/* 179 */
/*!***********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/view/proto_view_builder.es6 ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _proto_view = __webpack_require__(/*! ./proto_view */ 148);
	
	var _element_binder = __webpack_require__(/*! ./element_binder */ 149);
	
	var _property_setter_factory = __webpack_require__(/*! ./property_setter_factory */ 180);
	
	var _api = __webpack_require__(/*! ../../api */ 115);
	
	var api = _interopRequireWildcard(_api);
	
	var _direct_dom_renderer = __webpack_require__(/*! ../direct_dom_renderer */ 173);
	
	var directDomRenderer = _interopRequireWildcard(_direct_dom_renderer);
	
	var _util = __webpack_require__(/*! ../util */ 150);
	
	var ProtoViewBuilder = (function () {
	  function ProtoViewBuilder(rootElement) {
	    _classCallCheck(this, ProtoViewBuilder);
	
	    this.rootElement = rootElement;
	    this.elements = [];
	    this.variableBindings = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.imperativeRendererId = null;
	  }
	
	  _createClass(ProtoViewBuilder, [{
	    key: 'setImperativeRendererId',
	    value: function setImperativeRendererId(id) {
	      _rtts_assertRtts_assert.assert.argumentTypes(id, _rtts_assertRtts_assert.assert.type.string);
	      this.imperativeRendererId = id;
	      return _rtts_assertRtts_assert.assert.returnType(this, ProtoViewBuilder);
	    }
	  }, {
	    key: 'bindElement',
	    value: function bindElement(element) {
	      var description = arguments[1] === undefined ? null : arguments[1];
	
	      var builder = new ElementBinderBuilder(this.elements.length, element, description);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.elements, builder);
	      _angular2SrcDomDom_adapter.DOM.addClass(element, _util.NG_BINDING_CLASS);
	      return _rtts_assertRtts_assert.assert.returnType(builder, ElementBinderBuilder);
	    }
	  }, {
	    key: 'bindVariable',
	    value: function bindVariable(name, value) {
	      _angular2SrcFacadeCollection.MapWrapper.set(this.variableBindings, value, name);
	    }
	  }, {
	    key: 'build',
	    value: function build() {
	      var renderElementBinders = [];
	      var apiElementBinders = [];
	      _angular2SrcFacadeCollection.ListWrapper.forEach(this.elements, function (ebb) {
	        var propertySetters = _angular2SrcFacadeCollection.MapWrapper.create();
	        var apiDirectiveBinders = _angular2SrcFacadeCollection.ListWrapper.map(ebb.directives, function (dbb) {
	          ebb.eventBuilder.merge(dbb.eventBuilder);
	          _angular2SrcFacadeCollection.MapWrapper.forEach(dbb.hostPropertyBindings, function (_, hostPropertyName) {
	            _angular2SrcFacadeCollection.MapWrapper.set(propertySetters, hostPropertyName, (0, _property_setter_factory.setterFactory)(hostPropertyName));
	          });
	          return new api.DirectiveBinder({
	            directiveIndex: dbb.directiveIndex,
	            propertyBindings: dbb.propertyBindings,
	            eventBindings: dbb.eventBindings,
	            hostPropertyBindings: dbb.hostPropertyBindings
	          });
	        });
	        _angular2SrcFacadeCollection.MapWrapper.forEach(ebb.propertyBindings, function (_, propertyName) {
	          _angular2SrcFacadeCollection.MapWrapper.set(propertySetters, propertyName, (0, _property_setter_factory.setterFactory)(propertyName));
	        });
	        var nestedProtoView = (0, _angular2SrcFacadeLang.isPresent)(ebb.nestedProtoView) ? ebb.nestedProtoView.build() : null;
	        var parentIndex = (0, _angular2SrcFacadeLang.isPresent)(ebb.parent) ? ebb.parent.index : -1;
	        _angular2SrcFacadeCollection.ListWrapper.push(apiElementBinders, new api.ElementBinder({
	          index: ebb.index,
	          parentIndex: parentIndex,
	          distanceToParent: ebb.distanceToParent,
	          directives: apiDirectiveBinders,
	          nestedProtoView: nestedProtoView,
	          propertyBindings: ebb.propertyBindings,
	          variableBindings: ebb.variableBindings,
	          eventBindings: ebb.eventBindings,
	          textBindings: ebb.textBindings,
	          readAttributes: ebb.readAttributes
	        }));
	        _angular2SrcFacadeCollection.ListWrapper.push(renderElementBinders, new _element_binder.ElementBinder({
	          textNodeIndices: ebb.textBindingIndices,
	          contentTagSelector: ebb.contentTagSelector,
	          parentIndex: parentIndex,
	          distanceToParent: ebb.distanceToParent,
	          nestedProtoView: (0, _angular2SrcFacadeLang.isPresent)(nestedProtoView) ? nestedProtoView.render.delegate : null,
	          componentId: ebb.componentId,
	          eventLocals: new _angular2Change_detection.LiteralArray(ebb.eventBuilder.buildEventLocals()),
	          localEvents: ebb.eventBuilder.buildLocalEvents(),
	          globalEvents: ebb.eventBuilder.buildGlobalEvents(),
	          propertySetters: propertySetters
	        }));
	      });
	      return _rtts_assertRtts_assert.assert.returnType(new api.ProtoViewDto({
	        render: new directDomRenderer.DirectDomProtoViewRef(new _proto_view.RenderProtoView({
	          element: this.rootElement,
	          elementBinders: renderElementBinders,
	          imperativeRendererId: this.imperativeRendererId
	        })),
	        elementBinders: apiElementBinders,
	        variableBindings: this.variableBindings
	      }), api.ProtoViewDto);
	    }
	  }]);
	
	  return ProtoViewBuilder;
	})();
	
	exports.ProtoViewBuilder = ProtoViewBuilder;
	
	Object.defineProperty(ProtoViewBuilder.prototype.setImperativeRendererId, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var ElementBinderBuilder = (function () {
	  function ElementBinderBuilder(index, element, description) {
	    _classCallCheck(this, ElementBinderBuilder);
	
	    this.element = element;
	    this.index = index;
	    this.parent = null;
	    this.distanceToParent = 0;
	    this.directives = [];
	    this.nestedProtoView = null;
	    this.propertyBindings = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.variableBindings = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.eventBindings = _angular2SrcFacadeCollection.ListWrapper.create();
	    this.eventBuilder = new EventBuilder();
	    this.textBindings = [];
	    this.textBindingIndices = [];
	    this.contentTagSelector = null;
	    this.componentId = null;
	    this.readAttributes = _angular2SrcFacadeCollection.MapWrapper.create();
	  }
	
	  _createClass(ElementBinderBuilder, [{
	    key: 'setParent',
	    value: function setParent(parent, distanceToParent) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, ElementBinderBuilder, distanceToParent, _rtts_assertRtts_assert.assert.type.any);
	      this.parent = parent;
	      if ((0, _angular2SrcFacadeLang.isPresent)(parent)) {
	        this.distanceToParent = distanceToParent;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(this, ElementBinderBuilder);
	    }
	  }, {
	    key: 'readAttribute',
	    value: function readAttribute(attrName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(attrName, _rtts_assertRtts_assert.assert.type.string);
	      if ((0, _angular2SrcFacadeLang.isBlank)(_angular2SrcFacadeCollection.MapWrapper.get(this.readAttributes, attrName))) {
	        _angular2SrcFacadeCollection.MapWrapper.set(this.readAttributes, attrName, _angular2SrcDomDom_adapter.DOM.getAttribute(this.element, attrName));
	      }
	    }
	  }, {
	    key: 'bindDirective',
	    value: function bindDirective(directiveIndex) {
	      _rtts_assertRtts_assert.assert.argumentTypes(directiveIndex, _rtts_assertRtts_assert.assert.type.number);
	      var directive = new DirectiveBuilder(directiveIndex);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.directives, directive);
	      return _rtts_assertRtts_assert.assert.returnType(directive, DirectiveBuilder);
	    }
	  }, {
	    key: 'bindNestedProtoView',
	    value: function bindNestedProtoView(rootElement) {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.nestedProtoView)) {
	        throw new _angular2SrcFacadeLang.BaseException('Only one nested view per element is allowed');
	      }
	      this.nestedProtoView = new ProtoViewBuilder(rootElement);
	      return _rtts_assertRtts_assert.assert.returnType(this.nestedProtoView, ProtoViewBuilder);
	    }
	  }, {
	    key: 'bindProperty',
	    value: function bindProperty(name, expression) {
	      _angular2SrcFacadeCollection.MapWrapper.set(this.propertyBindings, name, expression);
	      (0, _property_setter_factory.setterFactory)(name);
	    }
	  }, {
	    key: 'bindVariable',
	    value: function bindVariable(name, value) {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.nestedProtoView)) {
	        this.nestedProtoView.bindVariable(name, value);
	      } else {
	        _angular2SrcFacadeCollection.MapWrapper.set(this.variableBindings, value, name);
	      }
	    }
	  }, {
	    key: 'bindEvent',
	    value: function bindEvent(name, expression) {
	      var target = arguments[2] === undefined ? null : arguments[2];
	
	      _angular2SrcFacadeCollection.ListWrapper.push(this.eventBindings, this.eventBuilder.add(name, expression, target));
	    }
	  }, {
	    key: 'bindText',
	    value: function bindText(index, expression) {
	      _angular2SrcFacadeCollection.ListWrapper.push(this.textBindingIndices, index);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.textBindings, expression);
	    }
	  }, {
	    key: 'setContentTagSelector',
	    value: function setContentTagSelector(value) {
	      _rtts_assertRtts_assert.assert.argumentTypes(value, _rtts_assertRtts_assert.assert.type.string);
	      this.contentTagSelector = value;
	    }
	  }, {
	    key: 'setComponentId',
	    value: function setComponentId(componentId) {
	      _rtts_assertRtts_assert.assert.argumentTypes(componentId, _rtts_assertRtts_assert.assert.type.string);
	      this.componentId = componentId;
	    }
	  }]);
	
	  return ElementBinderBuilder;
	})();
	
	exports.ElementBinderBuilder = ElementBinderBuilder;
	
	Object.defineProperty(ElementBinderBuilder.prototype.setParent, 'parameters', { get: function get() {
	    return [[ElementBinderBuilder], []];
	  } });
	Object.defineProperty(ElementBinderBuilder.prototype.readAttribute, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ElementBinderBuilder.prototype.bindDirective, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(ElementBinderBuilder.prototype.setContentTagSelector, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ElementBinderBuilder.prototype.setComponentId, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var DirectiveBuilder = (function () {
	  function DirectiveBuilder(directiveIndex) {
	    _classCallCheck(this, DirectiveBuilder);
	
	    this.directiveIndex = directiveIndex;
	    this.propertyBindings = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.hostPropertyBindings = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.eventBindings = _angular2SrcFacadeCollection.ListWrapper.create();
	    this.eventBuilder = new EventBuilder();
	  }
	
	  _createClass(DirectiveBuilder, [{
	    key: 'bindProperty',
	    value: function bindProperty(name, expression) {
	      _angular2SrcFacadeCollection.MapWrapper.set(this.propertyBindings, name, expression);
	    }
	  }, {
	    key: 'bindHostProperty',
	    value: function bindHostProperty(name, expression) {
	      _angular2SrcFacadeCollection.MapWrapper.set(this.hostPropertyBindings, name, expression);
	    }
	  }, {
	    key: 'bindEvent',
	    value: function bindEvent(name, expression) {
	      var target = arguments[2] === undefined ? null : arguments[2];
	
	      _angular2SrcFacadeCollection.ListWrapper.push(this.eventBindings, this.eventBuilder.add(name, expression, target));
	    }
	  }]);
	
	  return DirectiveBuilder;
	})();
	
	exports.DirectiveBuilder = DirectiveBuilder;
	
	var EventBuilder = (function (_AstTransformer) {
	  function EventBuilder() {
	    _classCallCheck(this, EventBuilder);
	
	    _get(Object.getPrototypeOf(EventBuilder.prototype), 'constructor', this).call(this);
	    this.locals = [];
	    this.localEvents = [];
	    this.globalEvents = [];
	    this._implicitReceiver = new _angular2Change_detection.ImplicitReceiver();
	  }
	
	  _inherits(EventBuilder, _AstTransformer);
	
	  _createClass(EventBuilder, [{
	    key: 'add',
	    value: function add(name, source, target) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, source, _angular2Change_detection.ASTWithSource, target, _rtts_assertRtts_assert.assert.type.string);
	      var adjustedAst = source.ast;
	      var fullName = (0, _angular2SrcFacadeLang.isPresent)(target) ? target + _util.EVENT_TARGET_SEPARATOR + name : name;
	      var result = new api.EventBinding(fullName, new _angular2Change_detection.ASTWithSource(adjustedAst, source.source, source.location));
	      var event = new _element_binder.Event(name, target, fullName);
	      if ((0, _angular2SrcFacadeLang.isBlank)(target)) {
	        _angular2SrcFacadeCollection.ListWrapper.push(this.localEvents, event);
	      } else {
	        _angular2SrcFacadeCollection.ListWrapper.push(this.globalEvents, event);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(result, api.EventBinding);
	    }
	  }, {
	    key: 'visitAccessMember',
	    value: function visitAccessMember(ast) {
	      var isEventAccess = false;
	      var current = ast;
	      while (!isEventAccess && current instanceof _angular2Change_detection.AccessMember) {
	        if (current.name == '$event') {
	          isEventAccess = true;
	        }
	        current = current.receiver;
	      }
	      if (isEventAccess) {
	        _angular2SrcFacadeCollection.ListWrapper.push(this.locals, ast);
	        var index = this.locals.length - 1;
	        return new _angular2Change_detection.AccessMember(this._implicitReceiver, '' + index, function (arr) {
	          return arr[index];
	        }, null);
	      } else {
	        return ast;
	      }
	    }
	  }, {
	    key: 'buildEventLocals',
	    value: function buildEventLocals() {
	      return this.locals;
	    }
	  }, {
	    key: 'buildLocalEvents',
	    value: function buildLocalEvents() {
	      return this.localEvents;
	    }
	  }, {
	    key: 'buildGlobalEvents',
	    value: function buildGlobalEvents() {
	      return this.globalEvents;
	    }
	  }, {
	    key: 'merge',
	    value: function merge(eventBuilder) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventBuilder, EventBuilder);
	      this._merge(this.localEvents, eventBuilder.localEvents);
	      this._merge(this.globalEvents, eventBuilder.globalEvents);
	      _angular2SrcFacadeCollection.ListWrapper.concat(this.locals, eventBuilder.locals);
	    }
	  }, {
	    key: '_merge',
	    value: function _merge(host, tobeAdded) {
	      _rtts_assertRtts_assert.assert.argumentTypes(host, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _element_binder.Event), tobeAdded, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _element_binder.Event));
	      var names = _angular2SrcFacadeCollection.ListWrapper.create();
	      for (var i = 0; i < host.length; i++) {
	        _angular2SrcFacadeCollection.ListWrapper.push(names, host[i].fullName);
	      }
	      for (var j = 0; j < tobeAdded.length; j++) {
	        if (!_angular2SrcFacadeCollection.ListWrapper.contains(names, tobeAdded[j].fullName)) {
	          _angular2SrcFacadeCollection.ListWrapper.push(host, tobeAdded[j]);
	        }
	      }
	    }
	  }]);
	
	  return EventBuilder;
	})(_angular2Change_detection.AstTransformer);
	
	exports.EventBuilder = EventBuilder;
	
	Object.defineProperty(EventBuilder.prototype.add, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_angular2Change_detection.ASTWithSource], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(EventBuilder.prototype.visitAccessMember, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.AccessMember]];
	  } });
	Object.defineProperty(EventBuilder.prototype.merge, 'parameters', { get: function get() {
	    return [[EventBuilder]];
	  } });
	Object.defineProperty(EventBuilder.prototype._merge, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _element_binder.Event)], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _element_binder.Event)]];
	  } });
	//# sourceMappingURL=proto_view_builder.js.map

	//# sourceMappingURL=./proto_view_builder.map

/***/ },
/* 180 */
/*!****************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/view/property_setter_factory.es6 ***!
  \****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.setterFactory = setterFactory;
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _util = __webpack_require__(/*! ../util */ 150);
	
	var _angular2SrcReflectionReflection = __webpack_require__(/*! angular2/src/reflection/reflection */ 109);
	
	var STYLE_SEPARATOR = '.';
	var propertySettersCache = _angular2SrcFacadeCollection.StringMapWrapper.create();
	var innerHTMLSetterCache;
	
	function setterFactory(property) {
	  var setterFn, styleParts, styleSuffix;
	  if (_angular2SrcFacadeLang.StringWrapper.startsWith(property, ATTRIBUTE_PREFIX)) {
	    setterFn = attributeSetterFactory(_angular2SrcFacadeLang.StringWrapper.substring(property, ATTRIBUTE_PREFIX.length));
	  } else if (_angular2SrcFacadeLang.StringWrapper.startsWith(property, CLASS_PREFIX)) {
	    setterFn = classSetterFactory(_angular2SrcFacadeLang.StringWrapper.substring(property, CLASS_PREFIX.length));
	  } else if (_angular2SrcFacadeLang.StringWrapper.startsWith(property, STYLE_PREFIX)) {
	    styleParts = property.split(STYLE_SEPARATOR);
	    styleSuffix = styleParts.length > 2 ? _angular2SrcFacadeCollection.ListWrapper.get(styleParts, 2) : '';
	    setterFn = styleSetterFactory(_angular2SrcFacadeCollection.ListWrapper.get(styleParts, 1), styleSuffix);
	  } else if (_angular2SrcFacadeLang.StringWrapper.equals(property, 'innerHtml')) {
	    if ((0, _angular2SrcFacadeLang.isBlank)(innerHTMLSetterCache)) {
	      innerHTMLSetterCache = function (el, value) {
	        return _angular2SrcDomDom_adapter.DOM.setInnerHTML(el, value);
	      };
	    }
	    setterFn = innerHTMLSetterCache;
	  } else {
	    property = resolvePropertyName(property);
	    setterFn = _angular2SrcFacadeCollection.StringMapWrapper.get(propertySettersCache, property);
	    if ((0, _angular2SrcFacadeLang.isBlank)(setterFn)) {
	      var propertySetterFn = _angular2SrcReflectionReflection.reflector.setter(property);
	      setterFn = function (receiver, value) {
	        if (_angular2SrcDomDom_adapter.DOM.hasProperty(receiver, property)) {
	          return propertySetterFn(receiver, value);
	        }
	      };
	      _angular2SrcFacadeCollection.StringMapWrapper.set(propertySettersCache, property, setterFn);
	    }
	  }
	  return _rtts_assertRtts_assert.assert.returnType(setterFn, Function);
	}
	
	Object.defineProperty(setterFactory, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var ATTRIBUTE_PREFIX = 'attr.';
	var attributeSettersCache = _angular2SrcFacadeCollection.StringMapWrapper.create();
	function _isValidAttributeValue(attrName, value) {
	  _rtts_assertRtts_assert.assert.argumentTypes(attrName, _rtts_assertRtts_assert.assert.type.string, value, _rtts_assertRtts_assert.assert.type.any);
	  if (attrName == 'role') {
	    return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isString)(value), _rtts_assertRtts_assert.assert.type.boolean);
	  } else {
	    return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(value), _rtts_assertRtts_assert.assert.type.boolean);
	  }
	}
	Object.defineProperty(_isValidAttributeValue, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	function attributeSetterFactory(attrName) {
	  _rtts_assertRtts_assert.assert.argumentTypes(attrName, _rtts_assertRtts_assert.assert.type.string);
	  var setterFn = _angular2SrcFacadeCollection.StringMapWrapper.get(attributeSettersCache, attrName);
	  var dashCasedAttributeName;
	  if ((0, _angular2SrcFacadeLang.isBlank)(setterFn)) {
	    dashCasedAttributeName = (0, _util.camelCaseToDashCase)(attrName);
	    setterFn = function (element, value) {
	      if (_isValidAttributeValue(dashCasedAttributeName, value)) {
	        _angular2SrcDomDom_adapter.DOM.setAttribute(element, dashCasedAttributeName, (0, _angular2SrcFacadeLang.stringify)(value));
	      } else {
	        if ((0, _angular2SrcFacadeLang.isPresent)(value)) {
	          throw new _angular2SrcFacadeLang.BaseException('Invalid ' + dashCasedAttributeName + ' attribute, only string values are allowed, got \'' + (0, _angular2SrcFacadeLang.stringify)(value) + '\'');
	        }
	        _angular2SrcDomDom_adapter.DOM.removeAttribute(element, dashCasedAttributeName);
	      }
	    };
	    _angular2SrcFacadeCollection.StringMapWrapper.set(attributeSettersCache, attrName, setterFn);
	  }
	  return _rtts_assertRtts_assert.assert.returnType(setterFn, Function);
	}
	Object.defineProperty(attributeSetterFactory, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var CLASS_PREFIX = 'class.';
	var classSettersCache = _angular2SrcFacadeCollection.StringMapWrapper.create();
	function classSetterFactory(className) {
	  _rtts_assertRtts_assert.assert.argumentTypes(className, _rtts_assertRtts_assert.assert.type.string);
	  var setterFn = _angular2SrcFacadeCollection.StringMapWrapper.get(classSettersCache, className);
	  var dashCasedClassName;
	  if ((0, _angular2SrcFacadeLang.isBlank)(setterFn)) {
	    dashCasedClassName = (0, _util.camelCaseToDashCase)(className);
	    setterFn = function (element, value) {
	      if (value) {
	        _angular2SrcDomDom_adapter.DOM.addClass(element, dashCasedClassName);
	      } else {
	        _angular2SrcDomDom_adapter.DOM.removeClass(element, dashCasedClassName);
	      }
	    };
	    _angular2SrcFacadeCollection.StringMapWrapper.set(classSettersCache, className, setterFn);
	  }
	  return _rtts_assertRtts_assert.assert.returnType(setterFn, Function);
	}
	Object.defineProperty(classSetterFactory, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var STYLE_PREFIX = 'style.';
	var styleSettersCache = _angular2SrcFacadeCollection.StringMapWrapper.create();
	function styleSetterFactory(styleName, styleSuffix) {
	  _rtts_assertRtts_assert.assert.argumentTypes(styleName, _rtts_assertRtts_assert.assert.type.string, styleSuffix, _rtts_assertRtts_assert.assert.type.string);
	  var cacheKey = styleName + styleSuffix;
	  var setterFn = _angular2SrcFacadeCollection.StringMapWrapper.get(styleSettersCache, cacheKey);
	  var dashCasedStyleName;
	  if ((0, _angular2SrcFacadeLang.isBlank)(setterFn)) {
	    dashCasedStyleName = (0, _util.camelCaseToDashCase)(styleName);
	    setterFn = function (element, value) {
	      var valAsStr;
	      if ((0, _angular2SrcFacadeLang.isPresent)(value)) {
	        valAsStr = (0, _angular2SrcFacadeLang.stringify)(value);
	        _angular2SrcDomDom_adapter.DOM.setStyle(element, dashCasedStyleName, valAsStr + styleSuffix);
	      } else {
	        _angular2SrcDomDom_adapter.DOM.removeStyle(element, dashCasedStyleName);
	      }
	    };
	    _angular2SrcFacadeCollection.StringMapWrapper.set(styleSettersCache, cacheKey, setterFn);
	  }
	  return _rtts_assertRtts_assert.assert.returnType(setterFn, Function);
	}
	Object.defineProperty(styleSetterFactory, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function resolvePropertyName(attrName) {
	  _rtts_assertRtts_assert.assert.argumentTypes(attrName, _rtts_assertRtts_assert.assert.type.string);
	  var mappedPropName = _angular2SrcFacadeCollection.StringMapWrapper.get(_angular2SrcDomDom_adapter.DOM.attrToPropMap, attrName);
	  return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(mappedPropName) ? mappedPropName : attrName, _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(resolvePropertyName, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=property_setter_factory.js.map

	//# sourceMappingURL=./property_setter_factory.map

/***/ },
/* 181 */
/*!************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/compile_control.es6 ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _compile_element = __webpack_require__(/*! ./compile_element */ 178);
	
	var _compile_step = __webpack_require__(/*! ./compile_step */ 182);
	
	var CompileControl = (function () {
	  function CompileControl(steps) {
	    _classCallCheck(this, CompileControl);
	
	    this._steps = steps;
	    this._currentStepIndex = 0;
	    this._parent = null;
	    this._results = null;
	    this._additionalChildren = null;
	  }
	
	  _createClass(CompileControl, [{
	    key: 'internalProcess',
	    value: function internalProcess(results, startStepIndex, parent, current) {
	      _rtts_assertRtts_assert.assert.argumentTypes(results, _rtts_assertRtts_assert.assert.type.any, startStepIndex, _rtts_assertRtts_assert.assert.type.any, parent, _compile_element.CompileElement, current, _compile_element.CompileElement);
	      this._results = results;
	      var previousStepIndex = this._currentStepIndex;
	      var previousParent = this._parent;
	      this._ignoreCurrentElement = false;
	      for (var i = startStepIndex; i < this._steps.length && !this._ignoreCurrentElement; i++) {
	        var step = this._steps[i];
	        this._parent = parent;
	        this._currentStepIndex = i;
	        step.process(parent, current, this);
	        parent = this._parent;
	      }
	      if (!this._ignoreCurrentElement) {
	        _angular2SrcFacadeCollection.ListWrapper.push(results, current);
	      }
	      this._currentStepIndex = previousStepIndex;
	      this._parent = previousParent;
	      var localAdditionalChildren = this._additionalChildren;
	      this._additionalChildren = null;
	      return localAdditionalChildren;
	    }
	  }, {
	    key: 'addParent',
	    value: function addParent(newElement) {
	      _rtts_assertRtts_assert.assert.argumentTypes(newElement, _compile_element.CompileElement);
	      this.internalProcess(this._results, this._currentStepIndex + 1, this._parent, newElement);
	      this._parent = newElement;
	    }
	  }, {
	    key: 'addChild',
	    value: function addChild(element) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _compile_element.CompileElement);
	      if ((0, _angular2SrcFacadeLang.isBlank)(this._additionalChildren)) {
	        this._additionalChildren = _angular2SrcFacadeCollection.ListWrapper.create();
	      }
	      _angular2SrcFacadeCollection.ListWrapper.push(this._additionalChildren, element);
	    }
	  }, {
	    key: 'ignoreCurrentElement',
	    value: function ignoreCurrentElement() {
	      this._ignoreCurrentElement = true;
	    }
	  }]);
	
	  return CompileControl;
	})();
	
	exports.CompileControl = CompileControl;
	
	Object.defineProperty(CompileControl.prototype.internalProcess, 'parameters', { get: function get() {
	    return [[], [], [_compile_element.CompileElement], [_compile_element.CompileElement]];
	  } });
	Object.defineProperty(CompileControl.prototype.addParent, 'parameters', { get: function get() {
	    return [[_compile_element.CompileElement]];
	  } });
	Object.defineProperty(CompileControl.prototype.addChild, 'parameters', { get: function get() {
	    return [[_compile_element.CompileElement]];
	  } });
	//# sourceMappingURL=compile_control.js.map

	//# sourceMappingURL=./compile_control.map

/***/ },
/* 182 */
/*!*********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/compile_step.es6 ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _compile_element = __webpack_require__(/*! ./compile_element */ 178);
	
	var _compile_control = __webpack_require__(/*! ./compile_control */ 181);
	
	var compileControlModule = _interopRequireWildcard(_compile_control);
	
	var CompileStep = (function () {
	  function CompileStep() {
	    _classCallCheck(this, CompileStep);
	  }
	
	  _createClass(CompileStep, [{
	    key: 'process',
	    value: function process(parent, current, control) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, _compile_element.CompileElement, current, _compile_element.CompileElement, control, compileControlModule.CompileControl);
	    }
	  }]);
	
	  return CompileStep;
	})();
	
	exports.CompileStep = CompileStep;
	
	Object.defineProperty(CompileStep.prototype.process, 'parameters', { get: function get() {
	    return [[_compile_element.CompileElement], [_compile_element.CompileElement], [compileControlModule.CompileControl]];
	  } });
	//# sourceMappingURL=compile_step.js.map

	//# sourceMappingURL=./compile_step.map

/***/ },
/* 183 */
/*!************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/template_loader.es6 ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcServicesXhr = __webpack_require__(/*! angular2/src/services/xhr */ 184);
	
	var _api = __webpack_require__(/*! ../../api */ 115);
	
	var _angular2SrcServicesUrl_resolver = __webpack_require__(/*! angular2/src/services/url_resolver */ 185);
	
	var TemplateLoader = (function () {
	  function TemplateLoader(xhr, urlResolver) {
	    _classCallCheck(this, TemplateLoader);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(xhr, _angular2SrcServicesXhr.XHR, urlResolver, _angular2SrcServicesUrl_resolver.UrlResolver);
	    this._xhr = xhr;
	    this._htmlCache = _angular2SrcFacadeCollection.StringMapWrapper.create();
	  }
	
	  _createClass(TemplateLoader, [{
	    key: 'load',
	    value: function load(template) {
	      _rtts_assertRtts_assert.assert.argumentTypes(template, _api.ViewDefinition);
	      if ((0, _angular2SrcFacadeLang.isPresent)(template.template)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.resolve(_angular2SrcDomDom_adapter.DOM.createTemplate(template.template)), _angular2SrcFacadeAsync.Promise);
	      }
	      var url = template.absUrl;
	      if ((0, _angular2SrcFacadeLang.isPresent)(url)) {
	        var promise = _angular2SrcFacadeCollection.StringMapWrapper.get(this._htmlCache, url);
	        if ((0, _angular2SrcFacadeLang.isBlank)(promise)) {
	          promise = this._xhr.get(url).then(function (html) {
	            var template = _angular2SrcDomDom_adapter.DOM.createTemplate(html);
	            return template;
	          });
	          _angular2SrcFacadeCollection.StringMapWrapper.set(this._htmlCache, url, promise);
	        }
	        return _rtts_assertRtts_assert.assert.returnType(promise, _angular2SrcFacadeAsync.Promise);
	      }
	      throw new _angular2SrcFacadeLang.BaseException('View should have either the url or template property set');
	    }
	  }]);
	
	  return TemplateLoader;
	})();
	
	exports.TemplateLoader = TemplateLoader;
	
	Object.defineProperty(TemplateLoader, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(TemplateLoader, 'parameters', { get: function get() {
	    return [[_angular2SrcServicesXhr.XHR], [_angular2SrcServicesUrl_resolver.UrlResolver]];
	  } });
	Object.defineProperty(TemplateLoader.prototype.load, 'parameters', { get: function get() {
	    return [[_api.ViewDefinition]];
	  } });
	//# sourceMappingURL=template_loader.js.map

	//# sourceMappingURL=./template_loader.map

/***/ },
/* 184 */
/*!*************************************************!*\
  !*** ./~/angular2/es6/dev/src/services/xhr.es6 ***!
  \*************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var XHR = (function () {
	  function XHR() {
	    _classCallCheck(this, XHR);
	  }
	
	  _createClass(XHR, [{
	    key: "get",
	    value: function get(url) {
	      _rtts_assertRtts_assert.assert.argumentTypes(url, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }]);
	
	  return XHR;
	})();
	
	exports.XHR = XHR;
	
	Object.defineProperty(XHR.prototype.get, "parameters", { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=xhr.js.map

	//# sourceMappingURL=./xhr.map

/***/ },
/* 185 */
/*!**********************************************************!*\
  !*** ./~/angular2/es6/dev/src/services/url_resolver.es6 ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var UrlResolver = (function () {
	  function UrlResolver() {
	    _classCallCheck(this, UrlResolver);
	
	    if ((0, _angular2SrcFacadeLang.isBlank)(UrlResolver.a)) {
	      UrlResolver.a = _angular2SrcDomDom_adapter.DOM.createElement('a');
	    }
	  }
	
	  _createClass(UrlResolver, [{
	    key: 'resolve',
	    value: function resolve(baseUrl, url) {
	      _rtts_assertRtts_assert.assert.argumentTypes(baseUrl, _rtts_assertRtts_assert.assert.type.string, url, _rtts_assertRtts_assert.assert.type.string);
	      if ((0, _angular2SrcFacadeLang.isBlank)(baseUrl)) {
	        _angular2SrcDomDom_adapter.DOM.resolveAndSetHref(UrlResolver.a, url, null);
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcDomDom_adapter.DOM.getHref(UrlResolver.a), _rtts_assertRtts_assert.assert.type.string);
	      }
	      if ((0, _angular2SrcFacadeLang.isBlank)(url) || url == '') return _rtts_assertRtts_assert.assert.returnType(baseUrl, _rtts_assertRtts_assert.assert.type.string);
	      if (url[0] == '/') {
	        throw new _angular2SrcFacadeLang.BaseException('Could not resolve the url ' + url + ' from ' + baseUrl);
	      }
	      var m = _angular2SrcFacadeLang.RegExpWrapper.firstMatch(_schemeRe, url);
	      if ((0, _angular2SrcFacadeLang.isPresent)(m[1])) {
	        return _rtts_assertRtts_assert.assert.returnType(url, _rtts_assertRtts_assert.assert.type.string);
	      }
	      _angular2SrcDomDom_adapter.DOM.resolveAndSetHref(UrlResolver.a, baseUrl, url);
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcDomDom_adapter.DOM.getHref(UrlResolver.a), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return UrlResolver;
	})();
	
	exports.UrlResolver = UrlResolver;
	
	Object.defineProperty(UrlResolver, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(UrlResolver.prototype.resolve, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var _schemeRe = _angular2SrcFacadeLang.RegExpWrapper.create('^([^:/?#]+:)?');
	//# sourceMappingURL=url_resolver.js.map

	//# sourceMappingURL=./url_resolver.map

/***/ },
/* 186 */
/*!*****************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/compile_step_factory.es6 ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _api = __webpack_require__(/*! ../../api */ 115);
	
	var _compile_step = __webpack_require__(/*! ./compile_step */ 182);
	
	var _property_binding_parser = __webpack_require__(/*! ./property_binding_parser */ 187);
	
	var _text_interpolation_parser = __webpack_require__(/*! ./text_interpolation_parser */ 188);
	
	var _directive_parser = __webpack_require__(/*! ./directive_parser */ 189);
	
	var _view_splitter = __webpack_require__(/*! ./view_splitter */ 191);
	
	var _shadow_domShadow_dom_compile_step = __webpack_require__(/*! ../shadow_dom/shadow_dom_compile_step */ 192);
	
	var _shadow_domShadow_dom_strategy = __webpack_require__(/*! ../shadow_dom/shadow_dom_strategy */ 144);
	
	var CompileStepFactory = (function () {
	  function CompileStepFactory() {
	    _classCallCheck(this, CompileStepFactory);
	  }
	
	  _createClass(CompileStepFactory, [{
	    key: 'createSteps',
	    value: function createSteps(template, subTaskPromises) {
	      _rtts_assertRtts_assert.assert.argumentTypes(template, _api.ViewDefinition, subTaskPromises, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeAsync.Promise));
	      return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _compile_step.CompileStep));
	    }
	  }]);
	
	  return CompileStepFactory;
	})();
	
	exports.CompileStepFactory = CompileStepFactory;
	
	Object.defineProperty(CompileStepFactory.prototype.createSteps, 'parameters', { get: function get() {
	    return [[_api.ViewDefinition], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeAsync.Promise)]];
	  } });
	
	var DefaultStepFactory = (function (_CompileStepFactory) {
	  function DefaultStepFactory(parser, shadowDomStrategy) {
	    _classCallCheck(this, DefaultStepFactory);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parser, _angular2Change_detection.Parser, shadowDomStrategy, _rtts_assertRtts_assert.assert.type.any);
	    _get(Object.getPrototypeOf(DefaultStepFactory.prototype), 'constructor', this).call(this);
	    this._parser = parser;
	    this._shadowDomStrategy = shadowDomStrategy;
	  }
	
	  _inherits(DefaultStepFactory, _CompileStepFactory);
	
	  _createClass(DefaultStepFactory, [{
	    key: 'createSteps',
	    value: function createSteps(template, subTaskPromises) {
	      _rtts_assertRtts_assert.assert.argumentTypes(template, _api.ViewDefinition, subTaskPromises, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeAsync.Promise));
	      return [new _view_splitter.ViewSplitter(this._parser), new _property_binding_parser.PropertyBindingParser(this._parser), new _directive_parser.DirectiveParser(this._parser, template.directives), new _text_interpolation_parser.TextInterpolationParser(this._parser), new _shadow_domShadow_dom_compile_step.ShadowDomCompileStep(this._shadowDomStrategy, template, subTaskPromises)];
	    }
	  }]);
	
	  return DefaultStepFactory;
	})(CompileStepFactory);
	
	exports.DefaultStepFactory = DefaultStepFactory;
	
	Object.defineProperty(DefaultStepFactory, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.Parser], []];
	  } });
	Object.defineProperty(DefaultStepFactory.prototype.createSteps, 'parameters', { get: function get() {
	    return [[_api.ViewDefinition], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeAsync.Promise)]];
	  } });
	//# sourceMappingURL=compile_step_factory.js.map

	//# sourceMappingURL=./compile_step_factory.map

/***/ },
/* 187 */
/*!********************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/property_binding_parser.es6 ***!
  \********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _compile_step = __webpack_require__(/*! ./compile_step */ 182);
	
	var _compile_element = __webpack_require__(/*! ./compile_element */ 178);
	
	var _compile_control = __webpack_require__(/*! ./compile_control */ 181);
	
	var _util = __webpack_require__(/*! ../util */ 150);
	
	var BIND_NAME_REGEXP = _angular2SrcFacadeLang.RegExpWrapper.create('^(?:(?:(?:(bind-)|(var-|#)|(on-))(.+))|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$');
	
	var PropertyBindingParser = (function (_CompileStep) {
	  function PropertyBindingParser(parser) {
	    _classCallCheck(this, PropertyBindingParser);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parser, _angular2Change_detection.Parser);
	    _get(Object.getPrototypeOf(PropertyBindingParser.prototype), 'constructor', this).call(this);
	    this._parser = parser;
	  }
	
	  _inherits(PropertyBindingParser, _CompileStep);
	
	  _createClass(PropertyBindingParser, [{
	    key: 'process',
	    value: function process(parent, current, control) {
	      var _this = this;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, _compile_element.CompileElement, current, _compile_element.CompileElement, control, _compile_control.CompileControl);
	      var attrs = current.attrs();
	      var newAttrs = _angular2SrcFacadeCollection.MapWrapper.create();
	      _angular2SrcFacadeCollection.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	        var bindParts = _angular2SrcFacadeLang.RegExpWrapper.firstMatch(BIND_NAME_REGEXP, attrName);
	        if ((0, _angular2SrcFacadeLang.isPresent)(bindParts)) {
	          if ((0, _angular2SrcFacadeLang.isPresent)(bindParts[1])) {
	            _this._bindProperty(bindParts[4], attrValue, current, newAttrs);
	          } else if ((0, _angular2SrcFacadeLang.isPresent)(bindParts[2])) {
	            var identifier = bindParts[4];
	            var value = attrValue == '' ? '$implicit' : attrValue;
	            _this._bindVariable(identifier, value, current, newAttrs);
	          } else if ((0, _angular2SrcFacadeLang.isPresent)(bindParts[3])) {
	            _this._bindEvent(bindParts[4], attrValue, current, newAttrs);
	          } else if ((0, _angular2SrcFacadeLang.isPresent)(bindParts[5])) {
	            _this._bindProperty(bindParts[5], attrValue, current, newAttrs);
	          } else if ((0, _angular2SrcFacadeLang.isPresent)(bindParts[6])) {
	            _this._bindEvent(bindParts[6], attrValue, current, newAttrs);
	          }
	        } else {
	          var expr = _this._parser.parseInterpolation(attrValue, current.elementDescription);
	          if ((0, _angular2SrcFacadeLang.isPresent)(expr)) {
	            _this._bindPropertyAst(attrName, expr, current, newAttrs);
	          }
	        }
	      });
	      _angular2SrcFacadeCollection.MapWrapper.forEach(newAttrs, function (attrValue, attrName) {
	        _angular2SrcFacadeCollection.MapWrapper.set(attrs, attrName, attrValue);
	      });
	    }
	  }, {
	    key: '_bindVariable',
	    value: function _bindVariable(identifier, value, current, newAttrs) {
	      _rtts_assertRtts_assert.assert.argumentTypes(identifier, _rtts_assertRtts_assert.assert.type.any, value, _rtts_assertRtts_assert.assert.type.any, current, _compile_element.CompileElement, newAttrs, _rtts_assertRtts_assert.assert.type.any);
	      current.bindElement().bindVariable((0, _util.dashCaseToCamelCase)(identifier), value);
	      _angular2SrcFacadeCollection.MapWrapper.set(newAttrs, identifier, value);
	    }
	  }, {
	    key: '_bindProperty',
	    value: function _bindProperty(name, expression, current, newAttrs) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.any, expression, _rtts_assertRtts_assert.assert.type.any, current, _compile_element.CompileElement, newAttrs, _rtts_assertRtts_assert.assert.type.any);
	      this._bindPropertyAst(name, this._parser.parseBinding(expression, current.elementDescription), current, newAttrs);
	    }
	  }, {
	    key: '_bindPropertyAst',
	    value: function _bindPropertyAst(name, ast, current, newAttrs) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.any, ast, _rtts_assertRtts_assert.assert.type.any, current, _compile_element.CompileElement, newAttrs, _rtts_assertRtts_assert.assert.type.any);
	      var binder = current.bindElement();
	      var camelCaseName = (0, _util.dashCaseToCamelCase)(name);
	      binder.bindProperty(camelCaseName, ast);
	      _angular2SrcFacadeCollection.MapWrapper.set(newAttrs, name, ast.source);
	    }
	  }, {
	    key: '_bindEvent',
	    value: function _bindEvent(name, expression, current, newAttrs) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.any, expression, _rtts_assertRtts_assert.assert.type.any, current, _compile_element.CompileElement, newAttrs, _rtts_assertRtts_assert.assert.type.any);
	      current.bindElement().bindEvent((0, _util.dashCaseToCamelCase)(name), this._parser.parseAction(expression, current.elementDescription));
	    }
	  }]);
	
	  return PropertyBindingParser;
	})(_compile_step.CompileStep);
	
	exports.PropertyBindingParser = PropertyBindingParser;
	
	Object.defineProperty(PropertyBindingParser, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.Parser]];
	  } });
	Object.defineProperty(PropertyBindingParser.prototype.process, 'parameters', { get: function get() {
	    return [[_compile_element.CompileElement], [_compile_element.CompileElement], [_compile_control.CompileControl]];
	  } });
	Object.defineProperty(PropertyBindingParser.prototype._bindVariable, 'parameters', { get: function get() {
	    return [[], [], [_compile_element.CompileElement], []];
	  } });
	Object.defineProperty(PropertyBindingParser.prototype._bindProperty, 'parameters', { get: function get() {
	    return [[], [], [_compile_element.CompileElement], []];
	  } });
	Object.defineProperty(PropertyBindingParser.prototype._bindPropertyAst, 'parameters', { get: function get() {
	    return [[], [], [_compile_element.CompileElement], []];
	  } });
	Object.defineProperty(PropertyBindingParser.prototype._bindEvent, 'parameters', { get: function get() {
	    return [[], [], [_compile_element.CompileElement], []];
	  } });
	//# sourceMappingURL=property_binding_parser.js.map

	//# sourceMappingURL=./property_binding_parser.map

/***/ },
/* 188 */
/*!**********************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/text_interpolation_parser.es6 ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _compile_step = __webpack_require__(/*! ./compile_step */ 182);
	
	var _compile_element = __webpack_require__(/*! ./compile_element */ 178);
	
	var _compile_control = __webpack_require__(/*! ./compile_control */ 181);
	
	var TextInterpolationParser = (function (_CompileStep) {
	  function TextInterpolationParser(parser) {
	    _classCallCheck(this, TextInterpolationParser);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parser, _angular2Change_detection.Parser);
	    _get(Object.getPrototypeOf(TextInterpolationParser.prototype), 'constructor', this).call(this);
	    this._parser = parser;
	  }
	
	  _inherits(TextInterpolationParser, _CompileStep);
	
	  _createClass(TextInterpolationParser, [{
	    key: 'process',
	    value: function process(parent, current, control) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, _compile_element.CompileElement, current, _compile_element.CompileElement, control, _compile_control.CompileControl);
	      if (!current.compileChildren) {
	        return;
	      }
	      var element = current.element;
	      var childNodes = _angular2SrcDomDom_adapter.DOM.childNodes(_angular2SrcDomDom_adapter.DOM.templateAwareRoot(element));
	      for (var i = 0; i < childNodes.length; i++) {
	        var node = childNodes[i];
	        if (_angular2SrcDomDom_adapter.DOM.isTextNode(node)) {
	          var text = _angular2SrcDomDom_adapter.DOM.nodeValue(node);
	          var expr = this._parser.parseInterpolation(text, current.elementDescription);
	          if ((0, _angular2SrcFacadeLang.isPresent)(expr)) {
	            _angular2SrcDomDom_adapter.DOM.setText(node, ' ');
	            current.bindElement().bindText(i, expr);
	          }
	        }
	      }
	    }
	  }]);
	
	  return TextInterpolationParser;
	})(_compile_step.CompileStep);
	
	exports.TextInterpolationParser = TextInterpolationParser;
	
	Object.defineProperty(TextInterpolationParser, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.Parser]];
	  } });
	Object.defineProperty(TextInterpolationParser.prototype.process, 'parameters', { get: function get() {
	    return [[_compile_element.CompileElement], [_compile_element.CompileElement], [_compile_control.CompileControl]];
	  } });
	//# sourceMappingURL=text_interpolation_parser.js.map

	//# sourceMappingURL=./text_interpolation_parser.map

/***/ },
/* 189 */
/*!*************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/directive_parser.es6 ***!
  \*************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _angular2SrcRenderDomCompilerSelector = __webpack_require__(/*! angular2/src/render/dom/compiler/selector */ 190);
	
	var _compile_step = __webpack_require__(/*! ./compile_step */ 182);
	
	var _compile_element = __webpack_require__(/*! ./compile_element */ 178);
	
	var _compile_control = __webpack_require__(/*! ./compile_control */ 181);
	
	var _api = __webpack_require__(/*! ../../api */ 115);
	
	var _util = __webpack_require__(/*! ../util */ 150);
	
	var DirectiveParser = (function (_CompileStep) {
	  function DirectiveParser(parser, directives) {
	    _classCallCheck(this, DirectiveParser);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parser, _angular2Change_detection.Parser, directives, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _api.DirectiveMetadata));
	    _get(Object.getPrototypeOf(DirectiveParser.prototype), 'constructor', this).call(this);
	    this._parser = parser;
	    this._selectorMatcher = new _angular2SrcRenderDomCompilerSelector.SelectorMatcher();
	    this._directives = directives;
	    for (var i = 0; i < directives.length; i++) {
	      var selector = _angular2SrcRenderDomCompilerSelector.CssSelector.parse(directives[i].selector);
	      this._selectorMatcher.addSelectables(selector, i);
	    }
	  }
	
	  _inherits(DirectiveParser, _CompileStep);
	
	  _createClass(DirectiveParser, [{
	    key: 'process',
	    value: function process(parent, current, control) {
	      var _this = this;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, _compile_element.CompileElement, current, _compile_element.CompileElement, control, _compile_control.CompileControl);
	      var attrs = current.attrs();
	      var classList = current.classList();
	      var cssSelector = new _angular2SrcRenderDomCompilerSelector.CssSelector();
	      var nodeName = _angular2SrcDomDom_adapter.DOM.nodeName(current.element);
	      cssSelector.setElement(nodeName);
	      for (var i = 0; i < classList.length; i++) {
	        cssSelector.addClassName(classList[i]);
	      }
	      _angular2SrcFacadeCollection.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	        cssSelector.addAttribute(attrName, attrValue);
	      });
	      var viewportDirective;
	      var componentDirective;
	      var isTemplateElement = _angular2SrcDomDom_adapter.DOM.isTemplateElement(current.element);
	      this._selectorMatcher.match(cssSelector, function (selector, directiveIndex) {
	        var elementBinder = current.bindElement();
	        var directive = _this._directives[directiveIndex];
	        var directiveBinderBuilder = elementBinder.bindDirective(directiveIndex);
	        current.compileChildren = current.compileChildren && directive.compileChildren;
	        if ((0, _angular2SrcFacadeLang.isPresent)(directive.properties)) {
	          _angular2SrcFacadeCollection.MapWrapper.forEach(directive.properties, function (bindConfig, dirProperty) {
	            _this._bindDirectiveProperty(dirProperty, bindConfig, current, directiveBinderBuilder);
	          });
	        }
	        if ((0, _angular2SrcFacadeLang.isPresent)(directive.hostListeners)) {
	          _angular2SrcFacadeCollection.MapWrapper.forEach(directive.hostListeners, function (action, eventName) {
	            _this._bindDirectiveEvent(eventName, action, current, directiveBinderBuilder);
	          });
	        }
	        if ((0, _angular2SrcFacadeLang.isPresent)(directive.hostProperties)) {
	          _angular2SrcFacadeCollection.MapWrapper.forEach(directive.hostProperties, function (hostPropertyName, directivePropertyName) {
	            _this._bindHostProperty(hostPropertyName, directivePropertyName, current, directiveBinderBuilder);
	          });
	        }
	        if ((0, _angular2SrcFacadeLang.isPresent)(directive.readAttributes)) {
	          _angular2SrcFacadeCollection.ListWrapper.forEach(directive.readAttributes, function (attrName) {
	            elementBinder.readAttribute(attrName);
	          });
	        }
	        if (directive.type === _api.DirectiveMetadata.VIEWPORT_TYPE) {
	          if (!isTemplateElement) {
	            throw new _angular2SrcFacadeLang.BaseException('Viewport directives need to be placed on <template> elements or elements ' + ('with template attribute - check ' + current.elementDescription));
	          }
	          if ((0, _angular2SrcFacadeLang.isPresent)(viewportDirective)) {
	            throw new _angular2SrcFacadeLang.BaseException('Only one viewport directive is allowed per element - check ' + current.elementDescription);
	          }
	          viewportDirective = directive;
	        } else {
	          if (isTemplateElement) {
	            throw new _angular2SrcFacadeLang.BaseException('Only template directives are allowed on template elements - check ' + current.elementDescription);
	          }
	          if (directive.type === _api.DirectiveMetadata.COMPONENT_TYPE) {
	            if ((0, _angular2SrcFacadeLang.isPresent)(componentDirective)) {
	              throw new _angular2SrcFacadeLang.BaseException('Only one component directive is allowed per element - check ' + current.elementDescription);
	            }
	            componentDirective = directive;
	            elementBinder.setComponentId(directive.id);
	          }
	        }
	      });
	    }
	  }, {
	    key: '_bindDirectiveProperty',
	    value: function _bindDirectiveProperty(dirProperty, bindConfig, compileElement, directiveBinderBuilder) {
	      var pipes = this._splitBindConfig(bindConfig);
	      var elProp = _angular2SrcFacadeCollection.ListWrapper.removeAt(pipes, 0);
	      var bindingAst = _angular2SrcFacadeCollection.MapWrapper.get(compileElement.bindElement().propertyBindings, (0, _util.dashCaseToCamelCase)(elProp));
	      if ((0, _angular2SrcFacadeLang.isBlank)(bindingAst)) {
	        var attributeValue = _angular2SrcFacadeCollection.MapWrapper.get(compileElement.attrs(), (0, _util.camelCaseToDashCase)(elProp));
	        if ((0, _angular2SrcFacadeLang.isPresent)(attributeValue)) {
	          bindingAst = this._parser.wrapLiteralPrimitive(attributeValue, compileElement.elementDescription);
	        }
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(bindingAst)) {
	        var fullExpAstWithBindPipes = this._parser.addPipes(bindingAst, pipes);
	        directiveBinderBuilder.bindProperty(dirProperty, fullExpAstWithBindPipes);
	      }
	    }
	  }, {
	    key: '_bindDirectiveEvent',
	    value: function _bindDirectiveEvent(eventName, action, compileElement, directiveBinderBuilder) {
	      var ast = this._parser.parseAction(action, compileElement.elementDescription);
	      if (_angular2SrcFacadeLang.StringWrapper.contains(eventName, _util.EVENT_TARGET_SEPARATOR)) {
	        var parts = eventName.split(_util.EVENT_TARGET_SEPARATOR);
	        directiveBinderBuilder.bindEvent(parts[1], ast, parts[0]);
	      } else {
	        directiveBinderBuilder.bindEvent(eventName, ast);
	      }
	    }
	  }, {
	    key: '_bindHostProperty',
	    value: function _bindHostProperty(hostPropertyName, directivePropertyName, compileElement, directiveBinderBuilder) {
	      var ast = this._parser.parseBinding(directivePropertyName, 'hostProperties of ' + compileElement.elementDescription);
	      directiveBinderBuilder.bindHostProperty(hostPropertyName, ast);
	    }
	  }, {
	    key: '_splitBindConfig',
	    value: function _splitBindConfig(bindConfig) {
	      return _angular2SrcFacadeCollection.ListWrapper.map(bindConfig.split('|'), function (s) {
	        return s.trim();
	      });
	    }
	  }]);
	
	  return DirectiveParser;
	})(_compile_step.CompileStep);
	
	exports.DirectiveParser = DirectiveParser;
	
	Object.defineProperty(DirectiveParser, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.Parser], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _api.DirectiveMetadata)]];
	  } });
	Object.defineProperty(DirectiveParser.prototype.process, 'parameters', { get: function get() {
	    return [[_compile_element.CompileElement], [_compile_element.CompileElement], [_compile_control.CompileControl]];
	  } });
	Object.defineProperty(DirectiveParser.prototype._splitBindConfig, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=directive_parser.js.map

	//# sourceMappingURL=./directive_parser.map

/***/ },
/* 190 */
/*!*****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/selector.es6 ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _EMPTY_ATTR_VALUE = '';
	var _SELECTOR_REGEXP = _angular2SrcFacadeLang.RegExpWrapper.create('(\\:not\\()|' + '([-\\w]+)|' + '(?:\\.([-\\w]+))|' + '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' + '(?:\\))|' + '(\\s*,\\s*)');
	
	var CssSelector = (function () {
	  function CssSelector() {
	    _classCallCheck(this, CssSelector);
	
	    this.element = null;
	    this.classNames = _angular2SrcFacadeCollection.ListWrapper.create();
	    this.attrs = _angular2SrcFacadeCollection.ListWrapper.create();
	    this.notSelector = null;
	  }
	
	  _createClass(CssSelector, [{
	    key: 'setElement',
	    value: function setElement() {
	      var element = arguments[0] === undefined ? null : arguments[0];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.string);
	      if ((0, _angular2SrcFacadeLang.isPresent)(element)) {
	        element = element.toLowerCase();
	      }
	      this.element = element;
	    }
	  }, {
	    key: 'addAttribute',
	    value: function addAttribute(name) {
	      var value = arguments[1] === undefined ? _EMPTY_ATTR_VALUE : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, value, _rtts_assertRtts_assert.assert.type.string);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.attrs, name.toLowerCase());
	      if ((0, _angular2SrcFacadeLang.isPresent)(value)) {
	        value = value.toLowerCase();
	      } else {
	        value = _EMPTY_ATTR_VALUE;
	      }
	      _angular2SrcFacadeCollection.ListWrapper.push(this.attrs, value);
	    }
	  }, {
	    key: 'addClassName',
	    value: function addClassName(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      _angular2SrcFacadeCollection.ListWrapper.push(this.classNames, name.toLowerCase());
	    }
	  }, {
	    key: 'toString',
	    value: function toString() {
	      var res = '';
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.element)) {
	        res += this.element;
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.classNames)) {
	        for (var i = 0; i < this.classNames.length; i++) {
	          res += '.' + this.classNames[i];
	        }
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.attrs)) {
	        for (var i = 0; i < this.attrs.length;) {
	          var attrName = this.attrs[i++];
	          var attrValue = this.attrs[i++];
	          res += '[' + attrName;
	          if (attrValue.length > 0) {
	            res += '=' + attrValue;
	          }
	          res += ']';
	        }
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.notSelector)) {
	        res += ':not(' + this.notSelector.toString() + ')';
	      }
	      return _rtts_assertRtts_assert.assert.returnType(res, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }], [{
	    key: 'parse',
	    value: function parse(selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(selector, _rtts_assertRtts_assert.assert.type.string);
	      var results = _angular2SrcFacadeCollection.ListWrapper.create();
	      var _addResult = function _addResult(res, cssSel) {
	        if ((0, _angular2SrcFacadeLang.isPresent)(cssSel.notSelector) && (0, _angular2SrcFacadeLang.isBlank)(cssSel.element) && _angular2SrcFacadeCollection.ListWrapper.isEmpty(cssSel.classNames) && _angular2SrcFacadeCollection.ListWrapper.isEmpty(cssSel.attrs)) {
	          cssSel.element = '*';
	        }
	        _angular2SrcFacadeCollection.ListWrapper.push(res, cssSel);
	      };
	      var cssSelector = new CssSelector();
	      var matcher = _angular2SrcFacadeLang.RegExpWrapper.matcher(_SELECTOR_REGEXP, selector);
	      var match;
	      var current = cssSelector;
	      while ((0, _angular2SrcFacadeLang.isPresent)(match = _angular2SrcFacadeLang.RegExpMatcherWrapper.next(matcher))) {
	        if ((0, _angular2SrcFacadeLang.isPresent)(match[1])) {
	          if ((0, _angular2SrcFacadeLang.isPresent)(cssSelector.notSelector)) {
	            throw new _angular2SrcFacadeLang.BaseException('Nesting :not is not allowed in a selector');
	          }
	          current.notSelector = new CssSelector();
	          current = current.notSelector;
	        }
	        if ((0, _angular2SrcFacadeLang.isPresent)(match[2])) {
	          current.setElement(match[2]);
	        }
	        if ((0, _angular2SrcFacadeLang.isPresent)(match[3])) {
	          current.addClassName(match[3]);
	        }
	        if ((0, _angular2SrcFacadeLang.isPresent)(match[4])) {
	          current.addAttribute(match[4], match[5]);
	        }
	        if ((0, _angular2SrcFacadeLang.isPresent)(match[6])) {
	          _addResult(results, cssSelector);
	          cssSelector = current = new CssSelector();
	        }
	      }
	      _addResult(results, cssSelector);
	      return _rtts_assertRtts_assert.assert.returnType(results, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, CssSelector));
	    }
	  }]);
	
	  return CssSelector;
	})();
	
	exports.CssSelector = CssSelector;
	
	Object.defineProperty(CssSelector.parse, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(CssSelector.prototype.setElement, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(CssSelector.prototype.addAttribute, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(CssSelector.prototype.addClassName, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var SelectorMatcher = (function () {
	  function SelectorMatcher() {
	    _classCallCheck(this, SelectorMatcher);
	
	    this._elementMap = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._elementPartialMap = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._classMap = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._classPartialMap = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._attrValueMap = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._attrValuePartialMap = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._listContexts = _angular2SrcFacadeCollection.ListWrapper.create();
	  }
	
	  _createClass(SelectorMatcher, [{
	    key: 'addSelectables',
	    value: function addSelectables(cssSelectors, callbackCtxt) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssSelectors, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, CssSelector), callbackCtxt, _rtts_assertRtts_assert.assert.type.any);
	      var listContext = null;
	      if (cssSelectors.length > 1) {
	        listContext = new SelectorListContext(cssSelectors);
	        _angular2SrcFacadeCollection.ListWrapper.push(this._listContexts, listContext);
	      }
	      for (var i = 0; i < cssSelectors.length; i++) {
	        this.addSelectable(cssSelectors[i], callbackCtxt, listContext);
	      }
	    }
	  }, {
	    key: 'addSelectable',
	    value: function addSelectable(cssSelector, callbackCtxt, listContext) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssSelector, _rtts_assertRtts_assert.assert.type.any, callbackCtxt, _rtts_assertRtts_assert.assert.type.any, listContext, SelectorListContext);
	      var matcher = this;
	      var element = cssSelector.element;
	      var classNames = cssSelector.classNames;
	      var attrs = cssSelector.attrs;
	      var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	      if ((0, _angular2SrcFacadeLang.isPresent)(element)) {
	        var isTerminal = attrs.length === 0 && classNames.length === 0;
	        if (isTerminal) {
	          this._addTerminal(matcher._elementMap, element, selectable);
	        } else {
	          matcher = this._addPartial(matcher._elementPartialMap, element);
	        }
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(classNames)) {
	        for (var index = 0; index < classNames.length; index++) {
	          var isTerminal = attrs.length === 0 && index === classNames.length - 1;
	          var className = classNames[index];
	          if (isTerminal) {
	            this._addTerminal(matcher._classMap, className, selectable);
	          } else {
	            matcher = this._addPartial(matcher._classPartialMap, className);
	          }
	        }
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(attrs)) {
	        for (var index = 0; index < attrs.length;) {
	          var isTerminal = index === attrs.length - 2;
	          var attrName = attrs[index++];
	          var attrValue = attrs[index++];
	          var map = isTerminal ? matcher._attrValueMap : matcher._attrValuePartialMap;
	          var valuesMap = _angular2SrcFacadeCollection.MapWrapper.get(map, attrName);
	          if ((0, _angular2SrcFacadeLang.isBlank)(valuesMap)) {
	            valuesMap = _angular2SrcFacadeCollection.MapWrapper.create();
	            _angular2SrcFacadeCollection.MapWrapper.set(map, attrName, valuesMap);
	          }
	          if (isTerminal) {
	            this._addTerminal(valuesMap, attrValue, selectable);
	          } else {
	            matcher = this._addPartial(valuesMap, attrValue);
	          }
	        }
	      }
	    }
	  }, {
	    key: '_addTerminal',
	    value: function _addTerminal(map, name, selectable) {
	      _rtts_assertRtts_assert.assert.argumentTypes(map, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.string), name, _rtts_assertRtts_assert.assert.type.string, selectable, _rtts_assertRtts_assert.assert.type.any);
	      var terminalList = _angular2SrcFacadeCollection.MapWrapper.get(map, name);
	      if ((0, _angular2SrcFacadeLang.isBlank)(terminalList)) {
	        terminalList = _angular2SrcFacadeCollection.ListWrapper.create();
	        _angular2SrcFacadeCollection.MapWrapper.set(map, name, terminalList);
	      }
	      _angular2SrcFacadeCollection.ListWrapper.push(terminalList, selectable);
	    }
	  }, {
	    key: '_addPartial',
	    value: function _addPartial(map, name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(map, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.string), name, _rtts_assertRtts_assert.assert.type.string);
	      var matcher = _angular2SrcFacadeCollection.MapWrapper.get(map, name);
	      if ((0, _angular2SrcFacadeLang.isBlank)(matcher)) {
	        matcher = new SelectorMatcher();
	        _angular2SrcFacadeCollection.MapWrapper.set(map, name, matcher);
	      }
	      return matcher;
	    }
	  }, {
	    key: 'match',
	    value: function match(cssSelector, matchedCallback) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssSelector, CssSelector, matchedCallback, Function);
	      var result = false;
	      var element = cssSelector.element;
	      var classNames = cssSelector.classNames;
	      var attrs = cssSelector.attrs;
	      for (var i = 0; i < this._listContexts.length; i++) {
	        this._listContexts[i].alreadyMatched = false;
	      }
	      result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	      result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) || result;
	      if ((0, _angular2SrcFacadeLang.isPresent)(classNames)) {
	        for (var index = 0; index < classNames.length; index++) {
	          var className = classNames[index];
	          result = this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	          result = this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) || result;
	        }
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(attrs)) {
	        for (var index = 0; index < attrs.length;) {
	          var attrName = attrs[index++];
	          var attrValue = attrs[index++];
	          var valuesMap = _angular2SrcFacadeCollection.MapWrapper.get(this._attrValueMap, attrName);
	          if (!_angular2SrcFacadeLang.StringWrapper.equals(attrValue, _EMPTY_ATTR_VALUE)) {
	            result = this._matchTerminal(valuesMap, _EMPTY_ATTR_VALUE, cssSelector, matchedCallback) || result;
	          }
	          result = this._matchTerminal(valuesMap, attrValue, cssSelector, matchedCallback) || result;
	          valuesMap = _angular2SrcFacadeCollection.MapWrapper.get(this._attrValuePartialMap, attrName);
	          result = this._matchPartial(valuesMap, attrValue, cssSelector, matchedCallback) || result;
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(result, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: '_matchTerminal',
	    value: function _matchTerminal(_x3, name, cssSelector, matchedCallback) {
	      var map = arguments[0] === undefined ? null : arguments[0];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(map, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.string), name, _rtts_assertRtts_assert.assert.type.any, cssSelector, _rtts_assertRtts_assert.assert.type.any, matchedCallback, _rtts_assertRtts_assert.assert.type.any);
	      if ((0, _angular2SrcFacadeLang.isBlank)(map) || (0, _angular2SrcFacadeLang.isBlank)(name)) {
	        return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	      var selectables = _angular2SrcFacadeCollection.MapWrapper.get(map, name);
	      var starSelectables = _angular2SrcFacadeCollection.MapWrapper.get(map, '*');
	      if ((0, _angular2SrcFacadeLang.isPresent)(starSelectables)) {
	        selectables = _angular2SrcFacadeCollection.ListWrapper.concat(selectables, starSelectables);
	      }
	      if ((0, _angular2SrcFacadeLang.isBlank)(selectables)) {
	        return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	      var selectable;
	      var result = false;
	      for (var index = 0; index < selectables.length; index++) {
	        selectable = selectables[index];
	        result = selectable.finalize(cssSelector, matchedCallback) || result;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(result, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: '_matchPartial',
	    value: function _matchPartial(_x4, name, cssSelector, matchedCallback) {
	      var map = arguments[0] === undefined ? null : arguments[0];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(map, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.string), name, _rtts_assertRtts_assert.assert.type.any, cssSelector, _rtts_assertRtts_assert.assert.type.any, matchedCallback, _rtts_assertRtts_assert.assert.type.any);
	      if ((0, _angular2SrcFacadeLang.isBlank)(map) || (0, _angular2SrcFacadeLang.isBlank)(name)) {
	        return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	      var nestedSelector = _angular2SrcFacadeCollection.MapWrapper.get(map, name);
	      if ((0, _angular2SrcFacadeLang.isBlank)(nestedSelector)) {
	        return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(nestedSelector.match(cssSelector, matchedCallback), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return SelectorMatcher;
	})();
	
	exports.SelectorMatcher = SelectorMatcher;
	
	Object.defineProperty(SelectorMatcher.prototype.addSelectables, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, CssSelector)], []];
	  } });
	Object.defineProperty(SelectorMatcher.prototype.addSelectable, 'parameters', { get: function get() {
	    return [[], [], [SelectorListContext]];
	  } });
	Object.defineProperty(SelectorMatcher.prototype._addTerminal, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.string)], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(SelectorMatcher.prototype._addPartial, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.string)], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(SelectorMatcher.prototype.match, 'parameters', { get: function get() {
	    return [[CssSelector], [Function]];
	  } });
	Object.defineProperty(SelectorMatcher.prototype._matchTerminal, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.string)], [], [], []];
	  } });
	Object.defineProperty(SelectorMatcher.prototype._matchPartial, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.string)], [], [], []];
	  } });
	
	var SelectorListContext = function SelectorListContext(selectors) {
	  _classCallCheck(this, SelectorListContext);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(selectors, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, CssSelector));
	  this.selectors = selectors;
	  this.alreadyMatched = false;
	};
	
	Object.defineProperty(SelectorListContext, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, CssSelector)]];
	  } });
	
	var SelectorContext = (function () {
	  function SelectorContext(selector, cbContext, listContext) {
	    _classCallCheck(this, SelectorContext);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(selector, CssSelector, cbContext, _rtts_assertRtts_assert.assert.type.any, listContext, SelectorListContext);
	    this.selector = selector;
	    this.notSelector = selector.notSelector;
	    this.cbContext = cbContext;
	    this.listContext = listContext;
	  }
	
	  _createClass(SelectorContext, [{
	    key: 'finalize',
	    value: function finalize(cssSelector, callback) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssSelector, CssSelector, callback, _rtts_assertRtts_assert.assert.type.any);
	      var result = true;
	      if ((0, _angular2SrcFacadeLang.isPresent)(this.notSelector) && ((0, _angular2SrcFacadeLang.isBlank)(this.listContext) || !this.listContext.alreadyMatched)) {
	        var notMatcher = new SelectorMatcher();
	        notMatcher.addSelectable(this.notSelector, null, null);
	        result = !notMatcher.match(cssSelector, null);
	      }
	      if (result && (0, _angular2SrcFacadeLang.isPresent)(callback) && ((0, _angular2SrcFacadeLang.isBlank)(this.listContext) || !this.listContext.alreadyMatched)) {
	        if ((0, _angular2SrcFacadeLang.isPresent)(this.listContext)) {
	          this.listContext.alreadyMatched = true;
	        }
	        callback(this.selector, this.cbContext);
	      }
	      return result;
	    }
	  }]);
	
	  return SelectorContext;
	})();
	
	Object.defineProperty(SelectorContext, 'parameters', { get: function get() {
	    return [[CssSelector], [], [SelectorListContext]];
	  } });
	Object.defineProperty(SelectorContext.prototype.finalize, 'parameters', { get: function get() {
	    return [[CssSelector], []];
	  } });
	//# sourceMappingURL=selector.js.map

	//# sourceMappingURL=./selector.map

/***/ },
/* 191 */
/*!**********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/compiler/view_splitter.es6 ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _compile_step = __webpack_require__(/*! ./compile_step */ 182);
	
	var _compile_element = __webpack_require__(/*! ./compile_element */ 178);
	
	var _compile_control = __webpack_require__(/*! ./compile_control */ 181);
	
	var _util = __webpack_require__(/*! ../util */ 150);
	
	var ViewSplitter = (function (_CompileStep) {
	  function ViewSplitter(parser) {
	    _classCallCheck(this, ViewSplitter);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(parser, _angular2Change_detection.Parser);
	    _get(Object.getPrototypeOf(ViewSplitter.prototype), 'constructor', this).call(this);
	    this._parser = parser;
	  }
	
	  _inherits(ViewSplitter, _CompileStep);
	
	  _createClass(ViewSplitter, [{
	    key: 'process',
	    value: function process(parent, current, control) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, _compile_element.CompileElement, current, _compile_element.CompileElement, control, _compile_control.CompileControl);
	      var attrs = current.attrs();
	      var templateBindings = _angular2SrcFacadeCollection.MapWrapper.get(attrs, 'template');
	      var hasTemplateBinding = (0, _angular2SrcFacadeLang.isPresent)(templateBindings);
	      _angular2SrcFacadeCollection.MapWrapper.forEach(attrs, function (attrValue, attrName) {
	        if (_angular2SrcFacadeLang.StringWrapper.startsWith(attrName, '*')) {
	          var key = _angular2SrcFacadeLang.StringWrapper.substring(attrName, 1);
	          if (hasTemplateBinding) {
	            throw new _angular2SrcFacadeLang.BaseException('Only one template directive per element is allowed: ' + ('' + templateBindings + ' and ' + key + ' cannot be used simultaneously ') + ('in ' + current.elementDescription));
	          } else {
	            templateBindings = attrValue.length == 0 ? key : key + ' ' + attrValue;
	            hasTemplateBinding = true;
	          }
	        }
	      });
	      if ((0, _angular2SrcFacadeLang.isPresent)(parent)) {
	        if (_angular2SrcDomDom_adapter.DOM.isTemplateElement(current.element)) {
	          if (!current.isViewRoot) {
	            var viewRoot = new _compile_element.CompileElement(_angular2SrcDomDom_adapter.DOM.createTemplate(''));
	            viewRoot.inheritedProtoView = current.bindElement().bindNestedProtoView(viewRoot.element);
	            viewRoot.elementDescription = current.elementDescription;
	            viewRoot.isViewRoot = true;
	            this._moveChildNodes(_angular2SrcDomDom_adapter.DOM.content(current.element), _angular2SrcDomDom_adapter.DOM.content(viewRoot.element));
	            control.addChild(viewRoot);
	          }
	        }
	        if (hasTemplateBinding) {
	          var newParent = new _compile_element.CompileElement(_angular2SrcDomDom_adapter.DOM.createTemplate(''));
	          newParent.inheritedProtoView = current.inheritedProtoView;
	          newParent.inheritedElementBinder = current.inheritedElementBinder;
	          newParent.distanceToInheritedBinder = current.distanceToInheritedBinder;
	          newParent.elementDescription = current.elementDescription;
	          current.inheritedProtoView = newParent.bindElement().bindNestedProtoView(current.element);
	          current.inheritedElementBinder = null;
	          current.distanceToInheritedBinder = 0;
	          current.isViewRoot = true;
	          this._parseTemplateBindings(templateBindings, newParent);
	          this._addParentElement(current.element, newParent.element);
	          control.addParent(newParent);
	          _angular2SrcDomDom_adapter.DOM.remove(current.element);
	        }
	      }
	    }
	  }, {
	    key: '_moveChildNodes',
	    value: function _moveChildNodes(source, target) {
	      var next = _angular2SrcDomDom_adapter.DOM.firstChild(source);
	      while ((0, _angular2SrcFacadeLang.isPresent)(next)) {
	        _angular2SrcDomDom_adapter.DOM.appendChild(target, next);
	        next = _angular2SrcDomDom_adapter.DOM.firstChild(source);
	      }
	    }
	  }, {
	    key: '_addParentElement',
	    value: function _addParentElement(currentElement, newParentElement) {
	      _angular2SrcDomDom_adapter.DOM.insertBefore(currentElement, newParentElement);
	      _angular2SrcDomDom_adapter.DOM.appendChild(newParentElement, currentElement);
	    }
	  }, {
	    key: '_parseTemplateBindings',
	    value: function _parseTemplateBindings(templateBindings, compileElement) {
	      _rtts_assertRtts_assert.assert.argumentTypes(templateBindings, _rtts_assertRtts_assert.assert.type.string, compileElement, _compile_element.CompileElement);
	      var bindings = this._parser.parseTemplateBindings(templateBindings, compileElement.elementDescription);
	      for (var i = 0; i < bindings.length; i++) {
	        var binding = bindings[i];
	        if (binding.keyIsVar) {
	          compileElement.bindElement().bindVariable((0, _util.dashCaseToCamelCase)(binding.key), binding.name);
	          _angular2SrcFacadeCollection.MapWrapper.set(compileElement.attrs(), binding.key, binding.name);
	        } else if ((0, _angular2SrcFacadeLang.isPresent)(binding.expression)) {
	          compileElement.bindElement().bindProperty((0, _util.dashCaseToCamelCase)(binding.key), binding.expression);
	          _angular2SrcFacadeCollection.MapWrapper.set(compileElement.attrs(), binding.key, binding.expression.source);
	        } else {
	          _angular2SrcDomDom_adapter.DOM.setAttribute(compileElement.element, binding.key, '');
	        }
	      }
	    }
	  }]);
	
	  return ViewSplitter;
	})(_compile_step.CompileStep);
	
	exports.ViewSplitter = ViewSplitter;
	
	Object.defineProperty(ViewSplitter, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.Parser]];
	  } });
	Object.defineProperty(ViewSplitter.prototype.process, 'parameters', { get: function get() {
	    return [[_compile_element.CompileElement], [_compile_element.CompileElement], [_compile_control.CompileControl]];
	  } });
	Object.defineProperty(ViewSplitter.prototype._parseTemplateBindings, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_compile_element.CompileElement]];
	  } });
	//# sourceMappingURL=view_splitter.js.map

	//# sourceMappingURL=./view_splitter.map

/***/ },
/* 192 */
/*!**********************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/shadow_dom_compile_step.es6 ***!
  \**********************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _compilerCompile_step = __webpack_require__(/*! ../compiler/compile_step */ 182);
	
	var _compilerCompile_element = __webpack_require__(/*! ../compiler/compile_element */ 178);
	
	var _compilerCompile_control = __webpack_require__(/*! ../compiler/compile_control */ 181);
	
	var _api = __webpack_require__(/*! ../../api */ 115);
	
	var _shadow_dom_strategy = __webpack_require__(/*! ./shadow_dom_strategy */ 144);
	
	var ShadowDomCompileStep = (function (_CompileStep) {
	  function ShadowDomCompileStep(shadowDomStrategy, template, subTaskPromises) {
	    _classCallCheck(this, ShadowDomCompileStep);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(shadowDomStrategy, _shadow_dom_strategy.ShadowDomStrategy, template, _api.ViewDefinition, subTaskPromises, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeAsync.Promise));
	    _get(Object.getPrototypeOf(ShadowDomCompileStep.prototype), 'constructor', this).call(this);
	    this._shadowDomStrategy = shadowDomStrategy;
	    this._template = template;
	    this._subTaskPromises = subTaskPromises;
	  }
	
	  _inherits(ShadowDomCompileStep, _CompileStep);
	
	  _createClass(ShadowDomCompileStep, [{
	    key: 'process',
	    value: function process(parent, current, control) {
	      _rtts_assertRtts_assert.assert.argumentTypes(parent, _compilerCompile_element.CompileElement, current, _compilerCompile_element.CompileElement, control, _compilerCompile_control.CompileControl);
	      var tagName = _angular2SrcDomDom_adapter.DOM.tagName(current.element).toUpperCase();
	      if (tagName == 'STYLE') {
	        this._processStyleElement(current, control);
	      } else if (tagName == 'CONTENT') {
	        this._processContentElement(current);
	      } else {
	        var componentId = current.isBound() ? current.inheritedElementBinder.componentId : null;
	        this._shadowDomStrategy.processElement(this._template.componentId, componentId, current.element);
	      }
	    }
	  }, {
	    key: '_processStyleElement',
	    value: function _processStyleElement(current, control) {
	      _rtts_assertRtts_assert.assert.argumentTypes(current, _compilerCompile_element.CompileElement, control, _compilerCompile_control.CompileControl);
	      var stylePromise = this._shadowDomStrategy.processStyleElement(this._template.componentId, this._template.absUrl, current.element);
	      if ((0, _angular2SrcFacadeLang.isPresent)(stylePromise) && _angular2SrcFacadeAsync.PromiseWrapper.isPromise(stylePromise)) {
	        _angular2SrcFacadeCollection.ListWrapper.push(this._subTaskPromises, stylePromise);
	      }
	      control.ignoreCurrentElement();
	    }
	  }, {
	    key: '_processContentElement',
	    value: function _processContentElement(current) {
	      _rtts_assertRtts_assert.assert.argumentTypes(current, _compilerCompile_element.CompileElement);
	      if (this._shadowDomStrategy.hasNativeContentElement()) {
	        return;
	      }
	      var attrs = current.attrs();
	      var selector = _angular2SrcFacadeCollection.MapWrapper.get(attrs, 'select');
	      selector = (0, _angular2SrcFacadeLang.isPresent)(selector) ? selector : '';
	      var contentStart = _angular2SrcDomDom_adapter.DOM.createScriptTag('type', 'ng/contentStart');
	      if ((0, _angular2SrcFacadeLang.assertionsEnabled)()) {
	        _angular2SrcDomDom_adapter.DOM.setAttribute(contentStart, 'select', selector);
	      }
	      var contentEnd = _angular2SrcDomDom_adapter.DOM.createScriptTag('type', 'ng/contentEnd');
	      _angular2SrcDomDom_adapter.DOM.insertBefore(current.element, contentStart);
	      _angular2SrcDomDom_adapter.DOM.insertBefore(current.element, contentEnd);
	      _angular2SrcDomDom_adapter.DOM.remove(current.element);
	      current.element = contentStart;
	      current.bindElement().setContentTagSelector(selector);
	    }
	  }]);
	
	  return ShadowDomCompileStep;
	})(_compilerCompile_step.CompileStep);
	
	exports.ShadowDomCompileStep = ShadowDomCompileStep;
	
	Object.defineProperty(ShadowDomCompileStep, 'parameters', { get: function get() {
	    return [[_shadow_dom_strategy.ShadowDomStrategy], [_api.ViewDefinition], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeAsync.Promise)]];
	  } });
	Object.defineProperty(ShadowDomCompileStep.prototype.process, 'parameters', { get: function get() {
	    return [[_compilerCompile_element.CompileElement], [_compilerCompile_element.CompileElement], [_compilerCompile_control.CompileControl]];
	  } });
	Object.defineProperty(ShadowDomCompileStep.prototype._processStyleElement, 'parameters', { get: function get() {
	    return [[_compilerCompile_element.CompileElement], [_compilerCompile_control.CompileControl]];
	  } });
	Object.defineProperty(ShadowDomCompileStep.prototype._processContentElement, 'parameters', { get: function get() {
	    return [[_compilerCompile_element.CompileElement]];
	  } });
	//# sourceMappingURL=shadow_dom_compile_step.js.map

	//# sourceMappingURL=./shadow_dom_compile_step.map

/***/ },
/* 193 */
/*!************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/view_pool.es6 ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _view = __webpack_require__(/*! ./view */ 165);
	
	var viewModule = _interopRequireWildcard(_view);
	
	var APP_VIEW_POOL_CAPACITY = 'AppViewPool.viewPoolCapacity';
	exports.APP_VIEW_POOL_CAPACITY = APP_VIEW_POOL_CAPACITY;
	
	var AppViewPool = (function () {
	  function AppViewPool(poolCapacityPerProtoView) {
	    _classCallCheck(this, AppViewPool);
	
	    this._poolCapacityPerProtoView = poolCapacityPerProtoView;
	    this._pooledViewsPerProtoView = _angular2SrcFacadeCollection.MapWrapper.create();
	  }
	
	  _createClass(AppViewPool, [{
	    key: 'getView',
	    value: function getView(protoView) {
	      _rtts_assertRtts_assert.assert.argumentTypes(protoView, viewModule.AppProtoView);
	      var pooledViews = _angular2SrcFacadeCollection.MapWrapper.get(this._pooledViewsPerProtoView, protoView);
	      if ((0, _angular2SrcFacadeLang.isPresent)(pooledViews) && pooledViews.length > 0) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.ListWrapper.removeLast(pooledViews), viewModule.AppView);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(null, viewModule.AppView);
	    }
	  }, {
	    key: 'returnView',
	    value: function returnView(view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.AppView);
	      var protoView = view.proto;
	      var pooledViews = _angular2SrcFacadeCollection.MapWrapper.get(this._pooledViewsPerProtoView, protoView);
	      if ((0, _angular2SrcFacadeLang.isBlank)(pooledViews)) {
	        pooledViews = [];
	        _angular2SrcFacadeCollection.MapWrapper.set(this._pooledViewsPerProtoView, protoView, pooledViews);
	      }
	      if (pooledViews.length < this._poolCapacityPerProtoView) {
	        _angular2SrcFacadeCollection.ListWrapper.push(pooledViews, view);
	      }
	    }
	  }]);
	
	  return AppViewPool;
	})();
	
	exports.AppViewPool = AppViewPool;
	
	Object.defineProperty(AppViewPool, 'parameters', { get: function get() {
	    return [[new _angular2Di.Inject(APP_VIEW_POOL_CAPACITY)]];
	  } });
	Object.defineProperty(AppViewPool.prototype.getView, 'parameters', { get: function get() {
	    return [[viewModule.AppProtoView]];
	  } });
	Object.defineProperty(AppViewPool.prototype.returnView, 'parameters', { get: function get() {
	    return [[viewModule.AppView]];
	  } });
	//# sourceMappingURL=view_pool.js.map

	//# sourceMappingURL=./view_pool.map

/***/ },
/* 194 */
/*!*********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/view_container_ref.es6 ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcCoreCompilerElement_injector = __webpack_require__(/*! angular2/src/core/compiler/element_injector */ 167);
	
	var eiModule = _interopRequireWildcard(_angular2SrcCoreCompilerElement_injector);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _view = __webpack_require__(/*! ./view */ 165);
	
	var viewModule = _interopRequireWildcard(_view);
	
	var _view_manager = __webpack_require__(/*! ./view_manager */ 170);
	
	var avmModule = _interopRequireWildcard(_view_manager);
	
	var ViewContainerRef = (function () {
	  function ViewContainerRef(viewManager, location, defaultProtoView) {
	    _classCallCheck(this, ViewContainerRef);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(viewManager, avmModule.AppViewManager, location, eiModule.ElementRef, defaultProtoView, viewModule.AppProtoView);
	    this._viewManager = viewManager;
	    this._location = location;
	    this._defaultProtoView = defaultProtoView;
	  }
	
	  _createClass(ViewContainerRef, [{
	    key: '_getViews',
	    value: function _getViews() {
	      var vc = this._location.hostView.viewContainers[this._location.boundElementIndex];
	      return (0, _angular2SrcFacadeLang.isPresent)(vc) ? vc.views : [];
	    }
	  }, {
	    key: 'clear',
	    value: function clear() {
	      for (var i = this.length - 1; i >= 0; i--) {
	        this.remove(i);
	      }
	    }
	  }, {
	    key: 'get',
	    value: function get(index) {
	      _rtts_assertRtts_assert.assert.argumentTypes(index, _rtts_assertRtts_assert.assert.type.number);
	      return _rtts_assertRtts_assert.assert.returnType(this._getViews()[index], viewModule.AppView);
	    }
	  }, {
	    key: 'length',
	    get: function () {
	      return this._getViews().length;
	    }
	  }, {
	    key: 'create',
	    value: function create() {
	      var atIndex = arguments[0] === undefined ? -1 : arguments[0];
	      var protoView = arguments[1] === undefined ? null : arguments[1];
	      var injector = arguments[2] === undefined ? null : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(atIndex, _rtts_assertRtts_assert.assert.type.number, protoView, viewModule.AppProtoView, injector, _angular2Di.Injector);
	      if (atIndex == -1) atIndex = this.length;
	      if ((0, _angular2SrcFacadeLang.isBlank)(protoView)) {
	        protoView = this._defaultProtoView;
	      }
	      return _rtts_assertRtts_assert.assert.returnType(this._viewManager.createViewInContainer(this._location, atIndex, protoView, injector), viewModule.AppView);
	    }
	  }, {
	    key: 'insert',
	    value: function insert(view) {
	      var atIndex = arguments[1] === undefined ? -1 : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.AppView, atIndex, _rtts_assertRtts_assert.assert.type.number);
	      if (atIndex == -1) atIndex = this.length;
	      return _rtts_assertRtts_assert.assert.returnType(this._viewManager.attachViewInContainer(this._location, atIndex, view), viewModule.AppView);
	    }
	  }, {
	    key: 'indexOf',
	    value: function indexOf(view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(view, viewModule.AppView);
	      return _angular2SrcFacadeCollection.ListWrapper.indexOf(this._getViews(), view);
	    }
	  }, {
	    key: 'remove',
	    value: function remove() {
	      var atIndex = arguments[0] === undefined ? -1 : arguments[0];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(atIndex, _rtts_assertRtts_assert.assert.type.number);
	      if (atIndex == -1) atIndex = this.length - 1;
	      this._viewManager.destroyViewInContainer(this._location, atIndex);
	    }
	  }, {
	    key: 'detach',
	    value: function detach() {
	      var atIndex = arguments[0] === undefined ? -1 : arguments[0];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(atIndex, _rtts_assertRtts_assert.assert.type.number);
	      if (atIndex == -1) atIndex = this.length - 1;
	      return _rtts_assertRtts_assert.assert.returnType(this._viewManager.detachViewInContainer(this._location, atIndex), viewModule.AppView);
	    }
	  }]);
	
	  return ViewContainerRef;
	})();
	
	exports.ViewContainerRef = ViewContainerRef;
	
	Object.defineProperty(ViewContainerRef, 'parameters', { get: function get() {
	    return [[avmModule.AppViewManager], [eiModule.ElementRef], [viewModule.AppProtoView]];
	  } });
	Object.defineProperty(ViewContainerRef.prototype.get, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(ViewContainerRef.prototype.create, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number], [viewModule.AppProtoView], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(ViewContainerRef.prototype.insert, 'parameters', { get: function get() {
	    return [[viewModule.AppView], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(ViewContainerRef.prototype.indexOf, 'parameters', { get: function get() {
	    return [[viewModule.AppView]];
	  } });
	Object.defineProperty(ViewContainerRef.prototype.remove, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(ViewContainerRef.prototype.detach, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	//# sourceMappingURL=view_container_ref.js.map

	//# sourceMappingURL=./view_container_ref.map

/***/ },
/* 195 */
/*!*************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/query_list.es6 ***!
  \*************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _base_query_list = __webpack_require__(/*! ./base_query_list */ 196);
	
	var QueryList = (function (_BaseQueryList) {
	  function QueryList() {
	    _classCallCheck(this, QueryList);
	
	    if (_BaseQueryList != null) {
	      _BaseQueryList.apply(this, arguments);
	    }
	  }
	
	  _inherits(QueryList, _BaseQueryList);
	
	  _createClass(QueryList, [{
	    key: 'onChange',
	    value: function onChange(callback) {
	      return _get(Object.getPrototypeOf(QueryList.prototype), 'onChange', this).call(this, callback);
	    }
	  }, {
	    key: 'removeCallback',
	    value: function removeCallback(callback) {
	      return _get(Object.getPrototypeOf(QueryList.prototype), 'removeCallback', this).call(this, callback);
	    }
	  }]);
	
	  return QueryList;
	})(_base_query_list.BaseQueryList);
	
	exports.QueryList = QueryList;
	
	//# sourceMappingURL=query_list.js.map

	//# sourceMappingURL=./query_list.map

/***/ },
/* 196 */
/*!******************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/base_query_list.es6 ***!
  \******************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcCoreAnnotationsAnnotations = __webpack_require__(/*! angular2/src/core/annotations/annotations */ 163);
	
	var BaseQueryList = (function () {
	  function BaseQueryList() {
	    _classCallCheck(this, BaseQueryList);
	
	    this._results = [];
	    this._callbacks = [];
	    this._dirty = false;
	  }
	
	  _createClass(BaseQueryList, [{
	    key: Symbol.iterator,
	    value: function () {
	      return this._results[Symbol.iterator]();
	    }
	  }, {
	    key: 'reset',
	    value: function reset(newList) {
	      this._results = newList;
	      this._dirty = true;
	    }
	  }, {
	    key: 'add',
	    value: function add(obj) {
	      _angular2SrcFacadeCollection.ListWrapper.push(this._results, obj);
	      this._dirty = true;
	    }
	  }, {
	    key: 'fireCallbacks',
	    value: function fireCallbacks() {
	      if (this._dirty) {
	        _angular2SrcFacadeCollection.ListWrapper.forEach(this._callbacks, function (c) {
	          return c();
	        });
	        this._dirty = false;
	      }
	    }
	  }, {
	    key: 'onChange',
	    value: function onChange(callback) {
	      _angular2SrcFacadeCollection.ListWrapper.push(this._callbacks, callback);
	    }
	  }, {
	    key: 'removeCallback',
	    value: function removeCallback(callback) {
	      _angular2SrcFacadeCollection.ListWrapper.remove(this._callbacks, callback);
	    }
	  }]);
	
	  return BaseQueryList;
	})();
	
	exports.BaseQueryList = BaseQueryList;
	
	//# sourceMappingURL=base_query_list.es6.map

	//# sourceMappingURL=./base_query_list.map

/***/ },
/* 197 */
/*!********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/template_resolver.es6 ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcCoreAnnotationsView = __webpack_require__(/*! angular2/src/core/annotations/view */ 155);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcReflectionReflection = __webpack_require__(/*! angular2/src/reflection/reflection */ 109);
	
	var TemplateResolver = (function () {
	  function TemplateResolver() {
	    _classCallCheck(this, TemplateResolver);
	
	    this._cache = _angular2SrcFacadeCollection.MapWrapper.create();
	  }
	
	  _createClass(TemplateResolver, [{
	    key: 'resolve',
	    value: function resolve(component) {
	      _rtts_assertRtts_assert.assert.argumentTypes(component, _angular2SrcFacadeLang.Type);
	      var view = _angular2SrcFacadeCollection.MapWrapper.get(this._cache, component);
	      if ((0, _angular2SrcFacadeLang.isBlank)(view)) {
	        view = this._resolve(component);
	        _angular2SrcFacadeCollection.MapWrapper.set(this._cache, component, view);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(view, _angular2SrcCoreAnnotationsView.View);
	    }
	  }, {
	    key: '_resolve',
	    value: function _resolve(component) {
	      _rtts_assertRtts_assert.assert.argumentTypes(component, _angular2SrcFacadeLang.Type);
	      var annotations = _angular2SrcReflectionReflection.reflector.annotations(component);
	      for (var i = 0; i < annotations.length; i++) {
	        var annotation = annotations[i];
	        if (annotation instanceof _angular2SrcCoreAnnotationsView.View) {
	          return annotation;
	        }
	      }
	      throw new _angular2SrcFacadeLang.BaseException('No template found for ' + (0, _angular2SrcFacadeLang.stringify)(component));
	    }
	  }]);
	
	  return TemplateResolver;
	})();
	
	exports.TemplateResolver = TemplateResolver;
	
	Object.defineProperty(TemplateResolver, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(TemplateResolver.prototype.resolve, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	Object.defineProperty(TemplateResolver.prototype._resolve, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	//# sourceMappingURL=template_resolver.js.map

	//# sourceMappingURL=./template_resolver.map

/***/ },
/* 198 */
/*!***********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/component_url_mapper.es6 ***!
  \***********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var ComponentUrlMapper = (function () {
	  function ComponentUrlMapper() {
	    _classCallCheck(this, ComponentUrlMapper);
	  }
	
	  _createClass(ComponentUrlMapper, [{
	    key: 'getUrl',
	    value: function getUrl(component) {
	      _rtts_assertRtts_assert.assert.argumentTypes(component, _angular2SrcFacadeLang.Type);
	      return _rtts_assertRtts_assert.assert.returnType('./', _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return ComponentUrlMapper;
	})();
	
	exports.ComponentUrlMapper = ComponentUrlMapper;
	
	Object.defineProperty(ComponentUrlMapper, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(ComponentUrlMapper.prototype.getUrl, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	
	var RuntimeComponentUrlMapper = (function (_ComponentUrlMapper) {
	  function RuntimeComponentUrlMapper() {
	    _classCallCheck(this, RuntimeComponentUrlMapper);
	
	    _get(Object.getPrototypeOf(RuntimeComponentUrlMapper.prototype), 'constructor', this).call(this);
	    this._componentUrls = _angular2SrcFacadeCollection.MapWrapper.create();
	  }
	
	  _inherits(RuntimeComponentUrlMapper, _ComponentUrlMapper);
	
	  _createClass(RuntimeComponentUrlMapper, [{
	    key: 'setComponentUrl',
	    value: function setComponentUrl(component, url) {
	      _rtts_assertRtts_assert.assert.argumentTypes(component, _angular2SrcFacadeLang.Type, url, _rtts_assertRtts_assert.assert.type.string);
	      _angular2SrcFacadeCollection.MapWrapper.set(this._componentUrls, component, url);
	    }
	  }, {
	    key: 'getUrl',
	    value: function getUrl(component) {
	      _rtts_assertRtts_assert.assert.argumentTypes(component, _angular2SrcFacadeLang.Type);
	      var url = _angular2SrcFacadeCollection.MapWrapper.get(this._componentUrls, component);
	      if ((0, _angular2SrcFacadeLang.isPresent)(url)) return _rtts_assertRtts_assert.assert.returnType(url, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(_get(Object.getPrototypeOf(RuntimeComponentUrlMapper.prototype), 'getUrl', this).call(this, component), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return RuntimeComponentUrlMapper;
	})(ComponentUrlMapper);
	
	exports.RuntimeComponentUrlMapper = RuntimeComponentUrlMapper;
	
	Object.defineProperty(RuntimeComponentUrlMapper.prototype.setComponentUrl, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(RuntimeComponentUrlMapper.prototype.getUrl, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.Type]];
	  } });
	//# sourceMappingURL=component_url_mapper.js.map

	//# sourceMappingURL=./component_url_mapper.map

/***/ },
/* 199 */
/*!*********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/proto_view_factory.es6 ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcReflectionReflection = __webpack_require__(/*! angular2/src/reflection/reflection */ 109);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _annotationsAnnotations = __webpack_require__(/*! ../annotations/annotations */ 163);
	
	var _angular2SrcRenderApi = __webpack_require__(/*! angular2/src/render/api */ 115);
	
	var renderApi = _interopRequireWildcard(_angular2SrcRenderApi);
	
	var _view = __webpack_require__(/*! ./view */ 165);
	
	var _element_injector = __webpack_require__(/*! ./element_injector */ 167);
	
	var ProtoViewFactory = (function () {
	  function ProtoViewFactory(changeDetection) {
	    _classCallCheck(this, ProtoViewFactory);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(changeDetection, _angular2Change_detection.ChangeDetection);
	    this._changeDetection = changeDetection;
	  }
	
	  _createClass(ProtoViewFactory, [{
	    key: 'createProtoView',
	    value: function createProtoView(componentBinding, renderProtoView, directives) {
	      _rtts_assertRtts_assert.assert.argumentTypes(componentBinding, _element_injector.DirectiveBinding, renderProtoView, renderApi.ProtoViewDto, directives, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _element_injector.DirectiveBinding));
	      var protoChangeDetector;
	      if ((0, _angular2SrcFacadeLang.isBlank)(componentBinding)) {
	        protoChangeDetector = this._changeDetection.createProtoChangeDetector('root', null);
	      } else {
	        var componentAnnotation = _rtts_assertRtts_assert.assert.type(componentBinding.annotation, _annotationsAnnotations.Component);
	        protoChangeDetector = this._changeDetection.createProtoChangeDetector('dummy', componentAnnotation.changeDetection);
	      }
	      var protoView = new _view.AppProtoView(renderProtoView.render, protoChangeDetector);
	      for (var i = 0; i < renderProtoView.elementBinders.length; i++) {
	        var renderElementBinder = renderProtoView.elementBinders[i];
	        var sortedDirectives = new SortedDirectives(renderElementBinder.directives, directives);
	        var parentPeiWithDistance = this._findParentProtoElementInjectorWithDistance(i, protoView.elementBinders, renderProtoView.elementBinders);
	        var protoElementInjector = this._createProtoElementInjector(i, parentPeiWithDistance, sortedDirectives, renderElementBinder);
	        this._createElementBinder(protoView, renderElementBinder, protoElementInjector, sortedDirectives);
	        this._createDirectiveBinders(protoView, i, sortedDirectives);
	      }
	      _angular2SrcFacadeCollection.MapWrapper.forEach(renderProtoView.variableBindings, function (mappedName, varName) {
	        protoView.bindVariable(varName, mappedName);
	      });
	      return _rtts_assertRtts_assert.assert.returnType(protoView, _view.AppProtoView);
	    }
	  }, {
	    key: '_findParentProtoElementInjectorWithDistance',
	    value: function _findParentProtoElementInjectorWithDistance(binderIndex, elementBinders, renderElementBinders) {
	      var distance = 0;
	      do {
	        var renderElementBinder = renderElementBinders[binderIndex];
	        binderIndex = renderElementBinder.parentIndex;
	        if (binderIndex !== -1) {
	          distance += renderElementBinder.distanceToParent;
	          var elementBinder = elementBinders[binderIndex];
	          if ((0, _angular2SrcFacadeLang.isPresent)(elementBinder.protoElementInjector)) {
	            return new ParentProtoElementInjectorWithDistance(elementBinder.protoElementInjector, distance);
	          }
	        }
	      } while (binderIndex !== -1);
	      return new ParentProtoElementInjectorWithDistance(null, -1);
	    }
	  }, {
	    key: '_createProtoElementInjector',
	    value: function _createProtoElementInjector(binderIndex, parentPeiWithDistance, sortedDirectives, renderElementBinder) {
	      var protoElementInjector = null;
	      var hasVariables = _angular2SrcFacadeCollection.MapWrapper.size(renderElementBinder.variableBindings) > 0;
	      if (sortedDirectives.directives.length > 0 || hasVariables) {
	        protoElementInjector = new _element_injector.ProtoElementInjector(parentPeiWithDistance.protoElementInjector, binderIndex, sortedDirectives.directives, (0, _angular2SrcFacadeLang.isPresent)(sortedDirectives.componentDirective), parentPeiWithDistance.distance);
	        protoElementInjector.attributes = renderElementBinder.readAttributes;
	        if (hasVariables && !(0, _angular2SrcFacadeLang.isPresent)(sortedDirectives.viewportDirective)) {
	          protoElementInjector.exportComponent = (0, _angular2SrcFacadeLang.isPresent)(sortedDirectives.componentDirective);
	          protoElementInjector.exportElement = (0, _angular2SrcFacadeLang.isBlank)(sortedDirectives.componentDirective);
	          var exportImplicitName = _angular2SrcFacadeCollection.MapWrapper.get(renderElementBinder.variableBindings, '$implicit');
	          if ((0, _angular2SrcFacadeLang.isPresent)(exportImplicitName)) {
	            protoElementInjector.exportImplicitName = exportImplicitName;
	          }
	        }
	      }
	      return protoElementInjector;
	    }
	  }, {
	    key: '_createElementBinder',
	    value: function _createElementBinder(protoView, renderElementBinder, protoElementInjector, sortedDirectives) {
	      var parent = null;
	      if (renderElementBinder.parentIndex !== -1) {
	        parent = protoView.elementBinders[renderElementBinder.parentIndex];
	      }
	      var elBinder = protoView.bindElement(parent, renderElementBinder.distanceToParent, protoElementInjector, sortedDirectives.componentDirective, sortedDirectives.viewportDirective);
	      for (var i = 0; i < renderElementBinder.textBindings.length; i++) {
	        protoView.bindTextNode(renderElementBinder.textBindings[i]);
	      }
	      _angular2SrcFacadeCollection.MapWrapper.forEach(renderElementBinder.propertyBindings, function (astWithSource, propertyName) {
	        protoView.bindElementProperty(astWithSource, propertyName);
	      });
	      protoView.bindEvent(renderElementBinder.eventBindings, -1);
	      _angular2SrcFacadeCollection.MapWrapper.forEach(renderElementBinder.variableBindings, function (mappedName, varName) {
	        _angular2SrcFacadeCollection.MapWrapper.set(protoView.protoLocals, mappedName, null);
	      });
	      return elBinder;
	    }
	  }, {
	    key: '_createDirectiveBinders',
	    value: function _createDirectiveBinders(protoView, boundElementIndex, sortedDirectives) {
	      for (var i = 0; i < sortedDirectives.renderDirectives.length; i++) {
	        var directiveBinder = sortedDirectives.renderDirectives[i];
	        _angular2SrcFacadeCollection.MapWrapper.forEach(directiveBinder.propertyBindings, function (astWithSource, propertyName) {
	          var setter = _angular2SrcReflectionReflection.reflector.setter(propertyName);
	          protoView.bindDirectiveProperty(i, astWithSource, propertyName, setter);
	        });
	        _angular2SrcFacadeCollection.MapWrapper.forEach(directiveBinder.hostPropertyBindings, function (astWithSource, propertyName) {
	          var directiveIndex = new _angular2Change_detection.DirectiveIndex(boundElementIndex, i);
	          protoView.bindHostElementProperty(astWithSource, propertyName, directiveIndex);
	        });
	        protoView.bindEvent(directiveBinder.eventBindings, i);
	      }
	    }
	  }]);
	
	  return ProtoViewFactory;
	})();
	
	exports.ProtoViewFactory = ProtoViewFactory;
	
	Object.defineProperty(ProtoViewFactory, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(ProtoViewFactory, 'parameters', { get: function get() {
	    return [[_angular2Change_detection.ChangeDetection]];
	  } });
	Object.defineProperty(ProtoViewFactory.prototype.createProtoView, 'parameters', { get: function get() {
	    return [[_element_injector.DirectiveBinding], [renderApi.ProtoViewDto], [_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _element_injector.DirectiveBinding)]];
	  } });
	
	var SortedDirectives = function SortedDirectives(renderDirectives, allDirectives) {
	  var _this = this;
	
	  _classCallCheck(this, SortedDirectives);
	
	  this.renderDirectives = [];
	  this.directives = [];
	  this.viewportDirective = null;
	  this.componentDirective = null;
	  _angular2SrcFacadeCollection.ListWrapper.forEach(renderDirectives, function (renderDirectiveBinder) {
	    var directiveBinding = allDirectives[renderDirectiveBinder.directiveIndex];
	    if (directiveBinding.annotation instanceof _annotationsAnnotations.Component || directiveBinding.annotation instanceof _annotationsAnnotations.DynamicComponent) {
	      _this.componentDirective = directiveBinding;
	      _angular2SrcFacadeCollection.ListWrapper.insert(_this.renderDirectives, 0, renderDirectiveBinder);
	      _angular2SrcFacadeCollection.ListWrapper.insert(_this.directives, 0, directiveBinding);
	    } else {
	      if (directiveBinding.annotation instanceof _annotationsAnnotations.Viewport) {
	        _this.viewportDirective = directiveBinding;
	      }
	      _angular2SrcFacadeCollection.ListWrapper.push(_this.renderDirectives, renderDirectiveBinder);
	      _angular2SrcFacadeCollection.ListWrapper.push(_this.directives, directiveBinding);
	    }
	  });
	};
	
	var ParentProtoElementInjectorWithDistance = function ParentProtoElementInjectorWithDistance(protoElementInjector, distance) {
	  _classCallCheck(this, ParentProtoElementInjectorWithDistance);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(protoElementInjector, _element_injector.ProtoElementInjector, distance, _rtts_assertRtts_assert.assert.type.number);
	  this.protoElementInjector = protoElementInjector;
	  this.distance = distance;
	};
	
	Object.defineProperty(ParentProtoElementInjectorWithDistance, 'parameters', { get: function get() {
	    return [[_element_injector.ProtoElementInjector], [_rtts_assertRtts_assert.assert.type.number]];
	  } });
	//# sourceMappingURL=proto_view_factory.js.map

	//# sourceMappingURL=./proto_view_factory.map

/***/ },
/* 200 */
/*!***********************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/exception_handler.es6 ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var ExceptionHandler = (function () {
	  function ExceptionHandler() {
	    _classCallCheck(this, ExceptionHandler);
	  }
	
	  _createClass(ExceptionHandler, [{
	    key: 'call',
	    value: function call(error) {
	      var stackTrace = arguments[1] === undefined ? null : arguments[1];
	      var reason = arguments[2] === undefined ? null : arguments[2];
	
	      var longStackTrace = (0, _angular2SrcFacadeCollection.isListLikeIterable)(stackTrace) ? _angular2SrcFacadeCollection.ListWrapper.join(stackTrace, '\n\n') : stackTrace;
	      var reasonStr = (0, _angular2SrcFacadeLang.isPresent)(reason) ? '\n' + reason : '';
	      (0, _angular2SrcFacadeLang.print)('' + error + '' + reasonStr + '\nSTACKTRACE:\n' + longStackTrace);
	    }
	  }]);
	
	  return ExceptionHandler;
	})();
	
	exports.ExceptionHandler = ExceptionHandler;
	
	Object.defineProperty(ExceptionHandler, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	//# sourceMappingURL=exception_handler.js.map

	//# sourceMappingURL=./exception_handler.map

/***/ },
/* 201 */
/*!***************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/life_cycle/life_cycle.es6 ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2Change_detection = __webpack_require__(/*! angular2/change_detection */ 116);
	
	var _angular2SrcCoreZoneVm_turn_zone = __webpack_require__(/*! angular2/src/core/zone/vm_turn_zone */ 158);
	
	var _angular2SrcCoreException_handler = __webpack_require__(/*! angular2/src/core/exception_handler */ 200);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var LifeCycle = (function () {
	  function LifeCycle(exceptionHandler) {
	    var changeDetector = arguments[1] === undefined ? null : arguments[1];
	    var enforceNoNewChanges = arguments[2] === undefined ? false : arguments[2];
	
	    _classCallCheck(this, LifeCycle);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(exceptionHandler, _angular2SrcCoreException_handler.ExceptionHandler, changeDetector, _angular2Change_detection.ChangeDetector, enforceNoNewChanges, _rtts_assertRtts_assert.assert.type.boolean);
	    this._errorHandler = function (exception, stackTrace) {
	      exceptionHandler.call(exception, stackTrace);
	      throw exception;
	    };
	    this._changeDetector = changeDetector;
	    this._enforceNoNewChanges = enforceNoNewChanges;
	  }
	
	  _createClass(LifeCycle, [{
	    key: 'registerWith',
	    value: function registerWith(zone) {
	      var _this = this;
	
	      var changeDetector = arguments[1] === undefined ? null : arguments[1];
	
	      if ((0, _angular2SrcFacadeLang.isPresent)(changeDetector)) {
	        this._changeDetector = changeDetector;
	      }
	      zone.initCallbacks({
	        onErrorHandler: this._errorHandler,
	        onTurnDone: function onTurnDone() {
	          return _this.tick();
	        }
	      });
	    }
	  }, {
	    key: 'tick',
	    value: function tick() {
	      this._changeDetector.detectChanges();
	      if (this._enforceNoNewChanges) {
	        this._changeDetector.checkNoChanges();
	      }
	    }
	  }]);
	
	  return LifeCycle;
	})();
	
	exports.LifeCycle = LifeCycle;
	
	Object.defineProperty(LifeCycle, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(LifeCycle, 'parameters', { get: function get() {
	    return [[_angular2SrcCoreException_handler.ExceptionHandler], [_angular2Change_detection.ChangeDetector], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(LifeCycle.prototype.registerWith, 'parameters', { get: function get() {
	    return [[_angular2SrcCoreZoneVm_turn_zone.VmTurnZone], [_angular2Change_detection.ChangeDetector]];
	  } });
	//# sourceMappingURL=life_cycle.js.map

	//# sourceMappingURL=./life_cycle.map

/***/ },
/* 202 */
/*!************************************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/emulated_unscoped_shadow_dom_strategy.es6 ***!
  \************************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _viewView = __webpack_require__(/*! ../view/view */ 145);
	
	var viewModule = _interopRequireWildcard(_viewView);
	
	var _light_dom = __webpack_require__(/*! ./light_dom */ 151);
	
	var _shadow_dom_strategy = __webpack_require__(/*! ./shadow_dom_strategy */ 144);
	
	var _style_url_resolver = __webpack_require__(/*! ./style_url_resolver */ 203);
	
	var _util = __webpack_require__(/*! ./util */ 204);
	
	var EmulatedUnscopedShadowDomStrategy = (function (_ShadowDomStrategy) {
	  function EmulatedUnscopedShadowDomStrategy(styleUrlResolver, styleHost) {
	    _classCallCheck(this, EmulatedUnscopedShadowDomStrategy);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(styleUrlResolver, _style_url_resolver.StyleUrlResolver, styleHost, _rtts_assertRtts_assert.assert.type.any);
	    _get(Object.getPrototypeOf(EmulatedUnscopedShadowDomStrategy.prototype), 'constructor', this).call(this);
	    this.styleUrlResolver = styleUrlResolver;
	    this.styleHost = styleHost;
	  }
	
	  _inherits(EmulatedUnscopedShadowDomStrategy, _ShadowDomStrategy);
	
	  _createClass(EmulatedUnscopedShadowDomStrategy, [{
	    key: 'hasNativeContentElement',
	    value: function hasNativeContentElement() {
	      return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'attachTemplate',
	    value: function attachTemplate(el, view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, view, viewModule.RenderView);
	      (0, _util.moveViewNodesIntoParent)(el, view);
	    }
	  }, {
	    key: 'constructLightDom',
	    value: function constructLightDom(lightDomView, shadowDomView, el) {
	      _rtts_assertRtts_assert.assert.argumentTypes(lightDomView, viewModule.RenderView, shadowDomView, viewModule.RenderView, el, _rtts_assertRtts_assert.assert.type.any);
	      return _rtts_assertRtts_assert.assert.returnType(new _light_dom.LightDom(lightDomView, shadowDomView, el), _light_dom.LightDom);
	    }
	  }, {
	    key: 'processStyleElement',
	    value: function processStyleElement(hostComponentId, templateUrl, styleEl) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostComponentId, _rtts_assertRtts_assert.assert.type.string, templateUrl, _rtts_assertRtts_assert.assert.type.string, styleEl, _rtts_assertRtts_assert.assert.type.any);
	      var cssText = _angular2SrcDomDom_adapter.DOM.getText(styleEl);
	      cssText = this.styleUrlResolver.resolveUrls(cssText, templateUrl);
	      _angular2SrcDomDom_adapter.DOM.setText(styleEl, cssText);
	      _angular2SrcDomDom_adapter.DOM.remove(styleEl);
	      (0, _util.insertSharedStyleText)(cssText, this.styleHost, styleEl);
	      return _rtts_assertRtts_assert.assert.returnType(null, _angular2SrcFacadeAsync.Promise);
	    }
	  }]);
	
	  return EmulatedUnscopedShadowDomStrategy;
	})(_shadow_dom_strategy.ShadowDomStrategy);
	
	exports.EmulatedUnscopedShadowDomStrategy = EmulatedUnscopedShadowDomStrategy;
	
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy, 'parameters', { get: function get() {
	    return [[_style_url_resolver.StyleUrlResolver], []];
	  } });
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy.prototype.attachTemplate, 'parameters', { get: function get() {
	    return [[], [viewModule.RenderView]];
	  } });
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy.prototype.constructLightDom, 'parameters', { get: function get() {
	    return [[viewModule.RenderView], [viewModule.RenderView], []];
	  } });
	Object.defineProperty(EmulatedUnscopedShadowDomStrategy.prototype.processStyleElement, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	//# sourceMappingURL=emulated_unscoped_shadow_dom_strategy.js.map

	//# sourceMappingURL=./emulated_unscoped_shadow_dom_strategy.map

/***/ },
/* 203 */
/*!*****************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/style_url_resolver.es6 ***!
  \*****************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcServicesUrl_resolver = __webpack_require__(/*! angular2/src/services/url_resolver */ 185);
	
	var StyleUrlResolver = (function () {
	  function StyleUrlResolver(resolver) {
	    _classCallCheck(this, StyleUrlResolver);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(resolver, _angular2SrcServicesUrl_resolver.UrlResolver);
	    this._resolver = resolver;
	  }
	
	  _createClass(StyleUrlResolver, [{
	    key: 'resolveUrls',
	    value: function resolveUrls(cssText, baseUrl) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string, baseUrl, _rtts_assertRtts_assert.assert.type.string);
	      cssText = this._replaceUrls(cssText, _cssUrlRe, baseUrl);
	      cssText = this._replaceUrls(cssText, _cssImportRe, baseUrl);
	      return cssText;
	    }
	  }, {
	    key: '_replaceUrls',
	    value: function _replaceUrls(cssText, re, baseUrl) {
	      var _this = this;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string, re, _angular2SrcFacadeLang.RegExp, baseUrl, _rtts_assertRtts_assert.assert.type.string);
	      return _angular2SrcFacadeLang.StringWrapper.replaceAllMapped(cssText, re, function (m) {
	        var pre = m[1];
	        var url = _angular2SrcFacadeLang.StringWrapper.replaceAll(m[2], _quoteRe, '');
	        var post = m[3];
	        var resolvedUrl = _this._resolver.resolve(baseUrl, url);
	        return pre + '\'' + resolvedUrl + '\'' + post;
	      });
	    }
	  }]);
	
	  return StyleUrlResolver;
	})();
	
	exports.StyleUrlResolver = StyleUrlResolver;
	
	Object.defineProperty(StyleUrlResolver, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(StyleUrlResolver, 'parameters', { get: function get() {
	    return [[_angular2SrcServicesUrl_resolver.UrlResolver]];
	  } });
	Object.defineProperty(StyleUrlResolver.prototype.resolveUrls, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(StyleUrlResolver.prototype._replaceUrls, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_angular2SrcFacadeLang.RegExp], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var _cssUrlRe = _angular2SrcFacadeLang.RegExpWrapper.create('(url\\()([^)]*)(\\))');
	var _cssImportRe = _angular2SrcFacadeLang.RegExpWrapper.create('(@import[\\s]+(?!url\\())[\'"]([^\'"]*)[\'"](.*;)');
	var _quoteRe = _angular2SrcFacadeLang.RegExpWrapper.create('[\'"]');
	//# sourceMappingURL=style_url_resolver.js.map

	//# sourceMappingURL=./style_url_resolver.map

/***/ },
/* 204 */
/*!***************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/util.es6 ***!
  \***************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.moveViewNodesIntoParent = moveViewNodesIntoParent;
	exports.getComponentId = getComponentId;
	exports.insertSharedStyleText = insertSharedStyleText;
	exports.insertStyleElement = insertStyleElement;
	exports.getHostAttribute = getHostAttribute;
	exports.getContentAttribute = getContentAttribute;
	exports.shimCssForComponent = shimCssForComponent;
	exports.resetShadowDomCache = resetShadowDomCache;
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _shadow_css = __webpack_require__(/*! ./shadow_css */ 205);
	
	function moveViewNodesIntoParent(parent, view) {
	  for (var i = 0; i < view.rootNodes.length; ++i) {
	    _angular2SrcDomDom_adapter.DOM.appendChild(parent, view.rootNodes[i]);
	  }
	}
	
	var _componentUIDs = _rtts_assertRtts_assert.assert.type(_angular2SrcFacadeCollection.MapWrapper.create(), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _angular2SrcFacadeLang.int));
	var _nextComponentUID = _rtts_assertRtts_assert.assert.type(0, _angular2SrcFacadeLang.int);
	var _sharedStyleTexts = _rtts_assertRtts_assert.assert.type(_angular2SrcFacadeCollection.MapWrapper.create(), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.Map, _rtts_assertRtts_assert.assert.type.string, _rtts_assertRtts_assert.assert.type.boolean));
	var _lastInsertedStyleEl;
	
	function getComponentId(componentStringId) {
	  _rtts_assertRtts_assert.assert.argumentTypes(componentStringId, _rtts_assertRtts_assert.assert.type.string);
	  var id = _angular2SrcFacadeCollection.MapWrapper.get(_componentUIDs, componentStringId);
	  if ((0, _angular2SrcFacadeLang.isBlank)(id)) {
	    id = _nextComponentUID++;
	    _angular2SrcFacadeCollection.MapWrapper.set(_componentUIDs, componentStringId, id);
	  }
	  return id;
	}
	
	Object.defineProperty(getComponentId, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	function insertSharedStyleText(cssText, styleHost, styleEl) {
	  if (!_angular2SrcFacadeCollection.MapWrapper.contains(_sharedStyleTexts, cssText)) {
	    _angular2SrcFacadeCollection.MapWrapper.set(_sharedStyleTexts, cssText, true);
	    insertStyleElement(styleHost, styleEl);
	  }
	}
	
	function insertStyleElement(host, styleEl) {
	  if ((0, _angular2SrcFacadeLang.isBlank)(_lastInsertedStyleEl)) {
	    var firstChild = _angular2SrcDomDom_adapter.DOM.firstChild(host);
	    if ((0, _angular2SrcFacadeLang.isPresent)(firstChild)) {
	      _angular2SrcDomDom_adapter.DOM.insertBefore(firstChild, styleEl);
	    } else {
	      _angular2SrcDomDom_adapter.DOM.appendChild(host, styleEl);
	    }
	  } else {
	    _angular2SrcDomDom_adapter.DOM.insertAfter(_lastInsertedStyleEl, styleEl);
	  }
	  _lastInsertedStyleEl = styleEl;
	}
	
	function getHostAttribute(id) {
	  _rtts_assertRtts_assert.assert.argumentTypes(id, _angular2SrcFacadeLang.int);
	  return '_nghost-' + id;
	}
	
	Object.defineProperty(getHostAttribute, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	
	function getContentAttribute(id) {
	  _rtts_assertRtts_assert.assert.argumentTypes(id, _angular2SrcFacadeLang.int);
	  return '_ngcontent-' + id;
	}
	
	Object.defineProperty(getContentAttribute, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeLang.int]];
	  } });
	
	function shimCssForComponent(cssText, componentId) {
	  _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string, componentId, _rtts_assertRtts_assert.assert.type.string);
	  var id = getComponentId(componentId);
	  var shadowCss = new _shadow_css.ShadowCss();
	  return _rtts_assertRtts_assert.assert.returnType(shadowCss.shimCssText(cssText, getContentAttribute(id), getHostAttribute(id)), _rtts_assertRtts_assert.assert.type.string);
	}
	
	Object.defineProperty(shimCssForComponent, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	function resetShadowDomCache() {
	  _angular2SrcFacadeCollection.MapWrapper.clear(_componentUIDs);
	  _nextComponentUID = 0;
	  _angular2SrcFacadeCollection.MapWrapper.clear(_sharedStyleTexts);
	  _lastInsertedStyleEl = null;
	}
	//# sourceMappingURL=util.js.map
	
	//# sourceMappingURL=./util.map

/***/ },
/* 205 */
/*!*********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/shadow_css.es6 ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var ShadowCss = (function () {
	  function ShadowCss() {
	    _classCallCheck(this, ShadowCss);
	
	    this.strictStyling = true;
	  }
	
	  _createClass(ShadowCss, [{
	    key: 'shimStyle',
	    value: function shimStyle(style, selector) {
	      var hostSelector = arguments[2] === undefined ? '' : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(style, _rtts_assertRtts_assert.assert.type.any, selector, _rtts_assertRtts_assert.assert.type.string, hostSelector, _rtts_assertRtts_assert.assert.type.string);
	      var cssText = _angular2SrcDomDom_adapter.DOM.getText(style);
	      return _rtts_assertRtts_assert.assert.returnType(this.shimCssText(cssText, selector, hostSelector), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'shimCssText',
	    value: function shimCssText(cssText, selector) {
	      var hostSelector = arguments[2] === undefined ? '' : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string, selector, _rtts_assertRtts_assert.assert.type.string, hostSelector, _rtts_assertRtts_assert.assert.type.string);
	      cssText = this._insertDirectives(cssText);
	      return _rtts_assertRtts_assert.assert.returnType(this._scopeCssText(cssText, selector, hostSelector), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_insertDirectives',
	    value: function _insertDirectives(cssText) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string);
	      cssText = this._insertPolyfillDirectivesInCssText(cssText);
	      return _rtts_assertRtts_assert.assert.returnType(this._insertPolyfillRulesInCssText(cssText), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_insertPolyfillDirectivesInCssText',
	    value: function _insertPolyfillDirectivesInCssText(cssText) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeLang.StringWrapper.replaceAllMapped(cssText, _cssContentNextSelectorRe, function (m) {
	        return m[1] + '{';
	      }), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_insertPolyfillRulesInCssText',
	    value: function _insertPolyfillRulesInCssText(cssText) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeLang.StringWrapper.replaceAllMapped(cssText, _cssContentRuleRe, function (m) {
	        var rule = m[0];
	        rule = _angular2SrcFacadeLang.StringWrapper.replace(rule, m[1], '');
	        rule = _angular2SrcFacadeLang.StringWrapper.replace(rule, m[2], '');
	        return m[3] + rule;
	      }), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_scopeCssText',
	    value: function _scopeCssText(cssText, scopeSelector, hostSelector) {
	      var _this = this;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string, scopeSelector, _rtts_assertRtts_assert.assert.type.string, hostSelector, _rtts_assertRtts_assert.assert.type.string);
	      var unscoped = this._extractUnscopedRulesFromCssText(cssText);
	      cssText = this._insertPolyfillHostInCssText(cssText);
	      cssText = this._convertColonHost(cssText);
	      cssText = this._convertColonHostContext(cssText);
	      cssText = this._convertShadowDOMSelectors(cssText);
	      if ((0, _angular2SrcFacadeLang.isPresent)(scopeSelector)) {
	        _withCssRules(cssText, function (rules) {
	          cssText = _this._scopeRules(rules, scopeSelector, hostSelector);
	        });
	      }
	      cssText = cssText + '\n' + unscoped;
	      return _rtts_assertRtts_assert.assert.returnType(cssText.trim(), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_extractUnscopedRulesFromCssText',
	    value: function _extractUnscopedRulesFromCssText(cssText) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string);
	      var r = '',
	          m;
	      var matcher = _angular2SrcFacadeLang.RegExpWrapper.matcher(_cssContentUnscopedRuleRe, cssText);
	      while ((0, _angular2SrcFacadeLang.isPresent)(m = _angular2SrcFacadeLang.RegExpMatcherWrapper.next(matcher))) {
	        var rule = m[0];
	        rule = _angular2SrcFacadeLang.StringWrapper.replace(rule, m[2], '');
	        rule = _angular2SrcFacadeLang.StringWrapper.replace(rule, m[1], m[3]);
	        r = rule + '\n\n';
	      }
	      return _rtts_assertRtts_assert.assert.returnType(r, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_convertColonHost',
	    value: function _convertColonHost(cssText) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_convertColonHostContext',
	    value: function _convertColonHostContext(cssText) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_convertColonRule',
	    value: function _convertColonRule(cssText, regExp, partReplacer) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string, regExp, _angular2SrcFacadeLang.RegExp, partReplacer, Function);
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeLang.StringWrapper.replaceAllMapped(cssText, regExp, function (m) {
	        if ((0, _angular2SrcFacadeLang.isPresent)(m[2])) {
	          var parts = m[2].split(','),
	              r = [];
	          for (var i = 0; i < parts.length; i++) {
	            var p = parts[i];
	            if ((0, _angular2SrcFacadeLang.isBlank)(p)) break;
	            p = p.trim();
	            _angular2SrcFacadeCollection.ListWrapper.push(r, partReplacer(_polyfillHostNoCombinator, p, m[3]));
	          }
	          return r.join(',');
	        } else {
	          return _polyfillHostNoCombinator + m[3];
	        }
	      }), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_colonHostContextPartReplacer',
	    value: function _colonHostContextPartReplacer(host, part, suffix) {
	      _rtts_assertRtts_assert.assert.argumentTypes(host, _rtts_assertRtts_assert.assert.type.string, part, _rtts_assertRtts_assert.assert.type.string, suffix, _rtts_assertRtts_assert.assert.type.string);
	      if (_angular2SrcFacadeLang.StringWrapper.contains(part, _polyfillHost)) {
	        return _rtts_assertRtts_assert.assert.returnType(this._colonHostPartReplacer(host, part, suffix), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(host + part + suffix + ', ' + part + ' ' + host + suffix, _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }, {
	    key: '_colonHostPartReplacer',
	    value: function _colonHostPartReplacer(host, part, suffix) {
	      _rtts_assertRtts_assert.assert.argumentTypes(host, _rtts_assertRtts_assert.assert.type.string, part, _rtts_assertRtts_assert.assert.type.string, suffix, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(host + _angular2SrcFacadeLang.StringWrapper.replace(part, _polyfillHost, '') + suffix, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_convertShadowDOMSelectors',
	    value: function _convertShadowDOMSelectors(cssText) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string);
	      for (var i = 0; i < _shadowDOMSelectorsRe.length; i++) {
	        cssText = _angular2SrcFacadeLang.StringWrapper.replaceAll(cssText, _shadowDOMSelectorsRe[i], ' ');
	      }
	      return _rtts_assertRtts_assert.assert.returnType(cssText, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_scopeRules',
	    value: function _scopeRules(cssRules, scopeSelector, hostSelector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssRules, _rtts_assertRtts_assert.assert.type.any, scopeSelector, _rtts_assertRtts_assert.assert.type.string, hostSelector, _rtts_assertRtts_assert.assert.type.string);
	      var cssText = '';
	      if ((0, _angular2SrcFacadeLang.isPresent)(cssRules)) {
	        for (var i = 0; i < cssRules.length; i++) {
	          var rule = cssRules[i];
	          if (_angular2SrcDomDom_adapter.DOM.isStyleRule(rule) || _angular2SrcDomDom_adapter.DOM.isPageRule(rule)) {
	            cssText += this._scopeSelector(rule.selectorText, scopeSelector, hostSelector, this.strictStyling) + ' {\n';
	            cssText += this._propertiesFromRule(rule) + '\n}\n\n';
	          } else if (_angular2SrcDomDom_adapter.DOM.isMediaRule(rule)) {
	            cssText += '@media ' + rule.media.mediaText + ' {\n';
	            cssText += this._scopeRules(rule.cssRules, scopeSelector, hostSelector);
	            cssText += '\n}\n\n';
	          } else {
	            try {
	              if ((0, _angular2SrcFacadeLang.isPresent)(rule.cssText)) {
	                cssText += rule.cssText + '\n\n';
	              }
	            } catch (x) {
	              if (_angular2SrcDomDom_adapter.DOM.isKeyframesRule(rule) && (0, _angular2SrcFacadeLang.isPresent)(rule.cssRules)) {
	                cssText += this._ieSafeCssTextFromKeyFrameRule(rule);
	              }
	            }
	          }
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(cssText, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_ieSafeCssTextFromKeyFrameRule',
	    value: function _ieSafeCssTextFromKeyFrameRule(rule) {
	      var cssText = '@keyframes ' + rule.name + ' {';
	      for (var i = 0; i < rule.cssRules.length; i++) {
	        var r = rule.cssRules[i];
	        cssText += ' ' + r.keyText + ' {' + r.style.cssText + '}';
	      }
	      cssText += ' }';
	      return _rtts_assertRtts_assert.assert.returnType(cssText, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_scopeSelector',
	    value: function _scopeSelector(selector, scopeSelector, hostSelector, strict) {
	      _rtts_assertRtts_assert.assert.argumentTypes(selector, _rtts_assertRtts_assert.assert.type.string, scopeSelector, _rtts_assertRtts_assert.assert.type.string, hostSelector, _rtts_assertRtts_assert.assert.type.string, strict, _rtts_assertRtts_assert.assert.type.boolean);
	      var r = [],
	          parts = selector.split(',');
	      for (var i = 0; i < parts.length; i++) {
	        var p = parts[i];
	        p = p.trim();
	        if (this._selectorNeedsScoping(p, scopeSelector)) {
	          p = strict && !_angular2SrcFacadeLang.StringWrapper.contains(p, _polyfillHostNoCombinator) ? this._applyStrictSelectorScope(p, scopeSelector) : this._applySelectorScope(p, scopeSelector, hostSelector);
	        }
	        _angular2SrcFacadeCollection.ListWrapper.push(r, p);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(r.join(', '), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_selectorNeedsScoping',
	    value: function _selectorNeedsScoping(selector, scopeSelector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(selector, _rtts_assertRtts_assert.assert.type.string, scopeSelector, _rtts_assertRtts_assert.assert.type.string);
	      var re = this._makeScopeMatcher(scopeSelector);
	      return _rtts_assertRtts_assert.assert.returnType(!(0, _angular2SrcFacadeLang.isPresent)(_angular2SrcFacadeLang.RegExpWrapper.firstMatch(re, selector)), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: '_makeScopeMatcher',
	    value: function _makeScopeMatcher(scopeSelector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(scopeSelector, _rtts_assertRtts_assert.assert.type.string);
	      var lre = _angular2SrcFacadeLang.RegExpWrapper.create('\\[');
	      var rre = _angular2SrcFacadeLang.RegExpWrapper.create('\\]');
	      scopeSelector = _angular2SrcFacadeLang.StringWrapper.replaceAll(scopeSelector, lre, '\\[');
	      scopeSelector = _angular2SrcFacadeLang.StringWrapper.replaceAll(scopeSelector, rre, '\\]');
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeLang.RegExpWrapper.create('^(' + scopeSelector + ')' + _selectorReSuffix, 'm'), _angular2SrcFacadeLang.RegExp);
	    }
	  }, {
	    key: '_applySelectorScope',
	    value: function _applySelectorScope(selector, scopeSelector, hostSelector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(selector, _rtts_assertRtts_assert.assert.type.string, scopeSelector, _rtts_assertRtts_assert.assert.type.string, hostSelector, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType(this._applySimpleSelectorScope(selector, scopeSelector, hostSelector), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_applySimpleSelectorScope',
	    value: function _applySimpleSelectorScope(selector, scopeSelector, hostSelector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(selector, _rtts_assertRtts_assert.assert.type.string, scopeSelector, _rtts_assertRtts_assert.assert.type.string, hostSelector, _rtts_assertRtts_assert.assert.type.string);
	      if ((0, _angular2SrcFacadeLang.isPresent)(_angular2SrcFacadeLang.RegExpWrapper.firstMatch(_polyfillHostRe, selector))) {
	        var replaceBy = this.strictStyling ? '[' + hostSelector + ']' : scopeSelector;
	        selector = _angular2SrcFacadeLang.StringWrapper.replace(selector, _polyfillHostNoCombinator, replaceBy);
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeLang.StringWrapper.replaceAll(selector, _polyfillHostRe, replaceBy + ' '), _rtts_assertRtts_assert.assert.type.string);
	      } else {
	        return _rtts_assertRtts_assert.assert.returnType(scopeSelector + ' ' + selector, _rtts_assertRtts_assert.assert.type.string);
	      }
	    }
	  }, {
	    key: '_applyStrictSelectorScope',
	    value: function _applyStrictSelectorScope(selector, scopeSelector) {
	      var isRe = _angular2SrcFacadeLang.RegExpWrapper.create('\\[is=([^\\]]*)\\]');
	      scopeSelector = _angular2SrcFacadeLang.StringWrapper.replaceAllMapped(scopeSelector, isRe, function (m) {
	        return m[1];
	      });
	      var splits = [' ', '>', '+', '~'],
	          scoped = selector,
	          attrName = '[' + scopeSelector + ']';
	      for (var i = 0; i < splits.length; i++) {
	        var sep = splits[i];
	        var parts = scoped.split(sep);
	        scoped = _angular2SrcFacadeCollection.ListWrapper.map(parts, function (p) {
	          var t = _angular2SrcFacadeLang.StringWrapper.replaceAll(p.trim(), _polyfillHostRe, '');
	          if (t.length > 0 && !_angular2SrcFacadeCollection.ListWrapper.contains(splits, t) && !_angular2SrcFacadeLang.StringWrapper.contains(t, attrName)) {
	            var re = _angular2SrcFacadeLang.RegExpWrapper.create('([^:]*)(:*)(.*)');
	            var m = _angular2SrcFacadeLang.RegExpWrapper.firstMatch(re, t);
	            if ((0, _angular2SrcFacadeLang.isPresent)(m)) {
	              p = m[1] + attrName + m[2] + m[3];
	            }
	          }
	          return p;
	        }).join(sep);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(scoped, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_insertPolyfillHostInCssText',
	    value: function _insertPolyfillHostInCssText(selector) {
	      _rtts_assertRtts_assert.assert.argumentTypes(selector, _rtts_assertRtts_assert.assert.type.string);
	      selector = _angular2SrcFacadeLang.StringWrapper.replaceAll(selector, _colonHostContextRe, _polyfillHostContext);
	      selector = _angular2SrcFacadeLang.StringWrapper.replaceAll(selector, _colonHostRe, _polyfillHost);
	      return _rtts_assertRtts_assert.assert.returnType(selector, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: '_propertiesFromRule',
	    value: function _propertiesFromRule(rule) {
	      var cssText = rule.style.cssText;
	      var attrRe = _angular2SrcFacadeLang.RegExpWrapper.create('[\'"]+|attr');
	      if (rule.style.content.length > 0 && !(0, _angular2SrcFacadeLang.isPresent)(_angular2SrcFacadeLang.RegExpWrapper.firstMatch(attrRe, rule.style.content))) {
	        var contentRe = _angular2SrcFacadeLang.RegExpWrapper.create('content:[^;]*;');
	        cssText = _angular2SrcFacadeLang.StringWrapper.replaceAll(cssText, contentRe, 'content: \'' + rule.style.content + '\';');
	      }
	      return _rtts_assertRtts_assert.assert.returnType(cssText, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return ShadowCss;
	})();
	
	exports.ShadowCss = ShadowCss;
	
	Object.defineProperty(ShadowCss.prototype.shimStyle, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype.shimCssText, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._insertDirectives, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._insertPolyfillDirectivesInCssText, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._insertPolyfillRulesInCssText, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._scopeCssText, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._extractUnscopedRulesFromCssText, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._convertColonHost, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._convertColonHostContext, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._convertColonRule, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_angular2SrcFacadeLang.RegExp], [Function]];
	  } });
	Object.defineProperty(ShadowCss.prototype._colonHostContextPartReplacer, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._colonHostPartReplacer, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._convertShadowDOMSelectors, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._scopeRules, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._scopeSelector, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(ShadowCss.prototype._selectorNeedsScoping, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._makeScopeMatcher, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._applySelectorScope, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._applySimpleSelectorScope, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._applyStrictSelectorScope, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(ShadowCss.prototype._insertPolyfillHostInCssText, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var _cssContentNextSelectorRe = _angular2SrcFacadeLang.RegExpWrapper.create('polyfill-next-selector[^}]*content:[\\s]*?[\'"](.*?)[\'"][;\\s]*}([^{]*?){', 'im');
	var _cssContentRuleRe = _angular2SrcFacadeLang.RegExpWrapper.create('(polyfill-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
	var _cssContentUnscopedRuleRe = _angular2SrcFacadeLang.RegExpWrapper.create('(polyfill-unscoped-rule)[^}]*(content:[\\s]*[\'"](.*?)[\'"])[;\\s]*[^}]*}', 'im');
	var _polyfillHost = '-shadowcsshost';
	var _polyfillHostContext = '-shadowcsscontext';
	var _parenSuffix = ')(?:\\((' + '(?:\\([^)(]*\\)|[^)(]*)+?' + ')\\))?([^,{]*)';
	var _cssColonHostRe = _angular2SrcFacadeLang.RegExpWrapper.create('(' + _polyfillHost + _parenSuffix, 'im');
	var _cssColonHostContextRe = _angular2SrcFacadeLang.RegExpWrapper.create('(' + _polyfillHostContext + _parenSuffix, 'im');
	var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	var _shadowDOMSelectorsRe = [_angular2SrcFacadeLang.RegExpWrapper.create('>>>'), _angular2SrcFacadeLang.RegExpWrapper.create('::shadow'), _angular2SrcFacadeLang.RegExpWrapper.create('::content'), _angular2SrcFacadeLang.RegExpWrapper.create('/deep/'), _angular2SrcFacadeLang.RegExpWrapper.create('/shadow-deep/'), _angular2SrcFacadeLang.RegExpWrapper.create('/shadow/')];
	var _selectorReSuffix = '([>\\s~+[.,{:][\\s\\S]*)?$';
	var _polyfillHostRe = _angular2SrcFacadeLang.RegExpWrapper.create(_polyfillHost, 'im');
	var _colonHostRe = _angular2SrcFacadeLang.RegExpWrapper.create(':host', 'im');
	var _colonHostContextRe = _angular2SrcFacadeLang.RegExpWrapper.create(':host-context', 'im');
	function _cssToRules(cssText) {
	  _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string);
	  return _angular2SrcDomDom_adapter.DOM.cssToRules(cssText);
	}
	Object.defineProperty(_cssToRules, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function _withCssRules(cssText, callback) {
	  _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string, callback, Function);
	  if ((0, _angular2SrcFacadeLang.isBlank)(callback)) return;
	  var rules = _cssToRules(cssText);
	  callback(rules);
	}
	Object.defineProperty(_withCssRules, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [Function]];
	  } });
	//# sourceMappingURL=shadow_css.js.map

	//# sourceMappingURL=./shadow_css.map

/***/ },
/* 206 */
/*!******************************************************!*\
  !*** ./~/angular2/es6/dev/src/services/xhr_impl.es6 ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _xhr = __webpack_require__(/*! ./xhr */ 184);
	
	var XHRImpl = (function (_XHR) {
	  function XHRImpl() {
	    _classCallCheck(this, XHRImpl);
	
	    if (_XHR != null) {
	      _XHR.apply(this, arguments);
	    }
	  }
	
	  _inherits(XHRImpl, _XHR);
	
	  _createClass(XHRImpl, [{
	    key: 'get',
	    value: function get(url) {
	      _rtts_assertRtts_assert.assert.argumentTypes(url, _rtts_assertRtts_assert.assert.type.string);
	      var completer = _angular2SrcFacadeAsync.PromiseWrapper.completer();
	      var xhr = new XMLHttpRequest();
	      xhr.open('GET', url, true);
	      xhr.responseType = 'text';
	      xhr.onload = function () {
	        var status = xhr.status;
	        if (200 <= status && status <= 300) {
	          completer.resolve(xhr.responseText);
	        } else {
	          completer.reject('Failed to load ' + url);
	        }
	      };
	      xhr.onerror = function () {
	        completer.reject('Failed to load ' + url);
	      };
	      xhr.send();
	      return _rtts_assertRtts_assert.assert.returnType(completer.promise, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, _rtts_assertRtts_assert.assert.type.string));
	    }
	  }]);
	
	  return XHRImpl;
	})(_xhr.XHR);
	
	exports.XHRImpl = XHRImpl;
	
	Object.defineProperty(XHRImpl, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(XHRImpl.prototype.get, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=xhr_impl.es6.map

	//# sourceMappingURL=./xhr_impl.map

/***/ },
/* 207 */
/*!*****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/events/key_events.es6 ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _event_manager = __webpack_require__(/*! ./event_manager */ 157);
	
	var modifierKeys = ['alt', 'control', 'meta', 'shift'];
	var modifierKeyGetters = {
	  'alt': function alt(event) {
	    return event.altKey;
	  },
	  'control': function control(event) {
	    return event.ctrlKey;
	  },
	  'meta': function meta(event) {
	    return event.metaKey;
	  },
	  'shift': function shift(event) {
	    return event.shiftKey;
	  }
	};
	
	var KeyEventsPlugin = (function (_EventManagerPlugin) {
	  function KeyEventsPlugin() {
	    _classCallCheck(this, KeyEventsPlugin);
	
	    _get(Object.getPrototypeOf(KeyEventsPlugin.prototype), 'constructor', this).call(this);
	  }
	
	  _inherits(KeyEventsPlugin, _EventManagerPlugin);
	
	  _createClass(KeyEventsPlugin, [{
	    key: 'supports',
	    value: function supports(eventName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string);
	      return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(KeyEventsPlugin.parseEventName(eventName)), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'addEventListener',
	    value: function addEventListener(element, eventName, handler, shouldSupportBubble) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, eventName, _rtts_assertRtts_assert.assert.type.string, handler, Function, shouldSupportBubble, _rtts_assertRtts_assert.assert.type.boolean);
	      var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	      var outsideHandler = KeyEventsPlugin.eventCallback(element, shouldSupportBubble, _angular2SrcFacadeCollection.StringMapWrapper.get(parsedEvent, 'fullKey'), handler, this.manager.getZone());
	      this.manager.getZone().runOutsideAngular(function () {
	        _angular2SrcDomDom_adapter.DOM.on(element, _angular2SrcFacadeCollection.StringMapWrapper.get(parsedEvent, 'domEventName'), outsideHandler);
	      });
	    }
	  }], [{
	    key: 'parseEventName',
	    value: function parseEventName(eventName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string);
	      eventName = eventName.toLowerCase();
	      var parts = eventName.split('.');
	      var domEventName = _angular2SrcFacadeCollection.ListWrapper.removeAt(parts, 0);
	      if (parts.length === 0 || !(_angular2SrcFacadeLang.StringWrapper.equals(domEventName, 'keydown') || _angular2SrcFacadeLang.StringWrapper.equals(domEventName, 'keyup'))) {
	        return null;
	      }
	      var key = _angular2SrcFacadeCollection.ListWrapper.removeLast(parts);
	      var fullKey = '';
	      _angular2SrcFacadeCollection.ListWrapper.forEach(modifierKeys, function (modifierName) {
	        if (_angular2SrcFacadeCollection.ListWrapper.contains(parts, modifierName)) {
	          _angular2SrcFacadeCollection.ListWrapper.remove(parts, modifierName);
	          fullKey += modifierName + '.';
	        }
	      });
	      fullKey += key;
	      if (parts.length != 0 || key.length === 0) {
	        return null;
	      }
	      return {
	        'domEventName': domEventName,
	        'fullKey': fullKey
	      };
	    }
	  }, {
	    key: 'getEventFullKey',
	    value: function getEventFullKey(event) {
	      var fullKey = '';
	      var key = _angular2SrcDomDom_adapter.DOM.getEventKey(event);
	      key = key.toLowerCase();
	      if (_angular2SrcFacadeLang.StringWrapper.equals(key, ' ')) {
	        key = 'space';
	      } else if (_angular2SrcFacadeLang.StringWrapper.equals(key, '.')) {
	        key = 'dot';
	      }
	      _angular2SrcFacadeCollection.ListWrapper.forEach(modifierKeys, function (modifierName) {
	        if (modifierName != key) {
	          var modifierGetter = _angular2SrcFacadeCollection.StringMapWrapper.get(modifierKeyGetters, modifierName);
	          if (modifierGetter(event)) {
	            fullKey += modifierName + '.';
	          }
	        }
	      });
	      fullKey += key;
	      return _rtts_assertRtts_assert.assert.returnType(fullKey, _rtts_assertRtts_assert.assert.type.string);
	    }
	  }, {
	    key: 'eventCallback',
	    value: function eventCallback(element, shouldSupportBubble, fullKey, handler, zone) {
	      return function (event) {
	        var correctElement = shouldSupportBubble || event.target === element;
	        if (correctElement && KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	          zone.run(function () {
	            return handler(event);
	          });
	        }
	      };
	    }
	  }]);
	
	  return KeyEventsPlugin;
	})(_event_manager.EventManagerPlugin);
	
	exports.KeyEventsPlugin = KeyEventsPlugin;
	
	Object.defineProperty(KeyEventsPlugin.prototype.supports, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(KeyEventsPlugin.prototype.addEventListener, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [Function], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	Object.defineProperty(KeyEventsPlugin.parseEventName, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=key_events.js.map

	//# sourceMappingURL=./key_events.map

/***/ },
/* 208 */
/*!**********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/events/hammer_gestures.es6 ***!
  \**********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _hammer_common = __webpack_require__(/*! ./hammer_common */ 209);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var HammerGesturesPlugin = (function (_HammerGesturesPluginCommon) {
	  function HammerGesturesPlugin() {
	    _classCallCheck(this, HammerGesturesPlugin);
	
	    _get(Object.getPrototypeOf(HammerGesturesPlugin.prototype), 'constructor', this).call(this);
	  }
	
	  _inherits(HammerGesturesPlugin, _HammerGesturesPluginCommon);
	
	  _createClass(HammerGesturesPlugin, [{
	    key: 'supports',
	    value: function supports(eventName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string);
	      if (!_get(Object.getPrototypeOf(HammerGesturesPlugin.prototype), 'supports', this).call(this, eventName)) return _rtts_assertRtts_assert.assert.returnType(false, _rtts_assertRtts_assert.assert.type.boolean);
	      if (!(0, _angular2SrcFacadeLang.isPresent)(window.Hammer)) {
	        throw new _angular2SrcFacadeLang.BaseException('Hammer.js is not loaded, can not bind ' + eventName + ' event');
	      }
	      return _rtts_assertRtts_assert.assert.returnType(true, _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }, {
	    key: 'addEventListener',
	    value: function addEventListener(element, eventName, handler, shouldSupportBubble) {
	      _rtts_assertRtts_assert.assert.argumentTypes(element, _rtts_assertRtts_assert.assert.type.any, eventName, _rtts_assertRtts_assert.assert.type.string, handler, Function, shouldSupportBubble, _rtts_assertRtts_assert.assert.type.boolean);
	      if (shouldSupportBubble) throw new _angular2SrcFacadeLang.BaseException('Hammer.js plugin does not support bubbling gestures.');
	      var zone = this.manager.getZone();
	      eventName = eventName.toLowerCase();
	      zone.runOutsideAngular(function () {
	        var mc = new Hammer(element);
	        mc.get('pinch').set({ enable: true });
	        mc.get('rotate').set({ enable: true });
	        mc.on(eventName, function (eventObj) {
	          zone.run(function () {
	            handler(eventObj);
	          });
	        });
	      });
	    }
	  }]);
	
	  return HammerGesturesPlugin;
	})(_hammer_common.HammerGesturesPluginCommon);
	
	exports.HammerGesturesPlugin = HammerGesturesPlugin;
	
	Object.defineProperty(HammerGesturesPlugin.prototype.supports, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(HammerGesturesPlugin.prototype.addEventListener, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [Function], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	//# sourceMappingURL=hammer_gestures.es6.map

	//# sourceMappingURL=./hammer_gestures.map

/***/ },
/* 209 */
/*!********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/events/hammer_common.es6 ***!
  \********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _event_manager = __webpack_require__(/*! ./event_manager */ 157);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _eventNames = {
	  'pan': true,
	  'panstart': true,
	  'panmove': true,
	  'panend': true,
	  'pancancel': true,
	  'panleft': true,
	  'panright': true,
	  'panup': true,
	  'pandown': true,
	  'pinch': true,
	  'pinchstart': true,
	  'pinchmove': true,
	  'pinchend': true,
	  'pinchcancel': true,
	  'pinchin': true,
	  'pinchout': true,
	  'press': true,
	  'pressup': true,
	  'rotate': true,
	  'rotatestart': true,
	  'rotatemove': true,
	  'rotateend': true,
	  'rotatecancel': true,
	  'swipe': true,
	  'swipeleft': true,
	  'swiperight': true,
	  'swipeup': true,
	  'swipedown': true,
	  'tap': true
	};
	
	var HammerGesturesPluginCommon = (function (_EventManagerPlugin) {
	  function HammerGesturesPluginCommon() {
	    _classCallCheck(this, HammerGesturesPluginCommon);
	
	    _get(Object.getPrototypeOf(HammerGesturesPluginCommon.prototype), 'constructor', this).call(this);
	  }
	
	  _inherits(HammerGesturesPluginCommon, _EventManagerPlugin);
	
	  _createClass(HammerGesturesPluginCommon, [{
	    key: 'supports',
	    value: function supports(eventName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(eventName, _rtts_assertRtts_assert.assert.type.string);
	      eventName = eventName.toLowerCase();
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.StringMapWrapper.contains(_eventNames, eventName), _rtts_assertRtts_assert.assert.type.boolean);
	    }
	  }]);
	
	  return HammerGesturesPluginCommon;
	})(_event_manager.EventManagerPlugin);
	
	exports.HammerGesturesPluginCommon = HammerGesturesPluginCommon;
	
	Object.defineProperty(HammerGesturesPluginCommon.prototype.supports, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=hammer_common.js.map

	//# sourceMappingURL=./hammer_common.map

/***/ },
/* 210 */
/*!************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/style_inliner.es6 ***!
  \************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcServicesXhr = __webpack_require__(/*! angular2/src/services/xhr */ 184);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcServicesUrl_resolver = __webpack_require__(/*! angular2/src/services/url_resolver */ 185);
	
	var _style_url_resolver = __webpack_require__(/*! ./style_url_resolver */ 203);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var StyleInliner = (function () {
	  function StyleInliner(xhr, styleUrlResolver, urlResolver) {
	    _classCallCheck(this, StyleInliner);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(xhr, _angular2SrcServicesXhr.XHR, styleUrlResolver, _style_url_resolver.StyleUrlResolver, urlResolver, _angular2SrcServicesUrl_resolver.UrlResolver);
	    this._xhr = xhr;
	    this._urlResolver = urlResolver;
	    this._styleUrlResolver = styleUrlResolver;
	  }
	
	  _createClass(StyleInliner, [{
	    key: 'inlineImports',
	    value: function inlineImports(cssText, baseUrl) {
	      _rtts_assertRtts_assert.assert.argumentTypes(cssText, _rtts_assertRtts_assert.assert.type.string, baseUrl, _rtts_assertRtts_assert.assert.type.string);
	      return this._inlineImports(cssText, baseUrl, []);
	    }
	  }, {
	    key: '_inlineImports',
	    value: function _inlineImports(cssText, baseUrl, inlinedUrls) {
	      var _this = this;
	
	      var partIndex = 0;
	      var parts = _angular2SrcFacadeLang.StringWrapper.split(cssText, _importRe);
	      if (parts.length === 1) {
	        return cssText;
	      }
	      var promises = [];
	      while (partIndex < parts.length - 1) {
	        var prefix = parts[partIndex];
	        var rule = parts[partIndex + 1];
	        var url = _extractUrl(rule);
	        if ((0, _angular2SrcFacadeLang.isPresent)(url)) {
	          url = this._urlResolver.resolve(baseUrl, url);
	        }
	        var mediaQuery = _extractMediaQuery(rule);
	        var promise;
	        if ((0, _angular2SrcFacadeLang.isBlank)(url)) {
	          promise = _angular2SrcFacadeAsync.PromiseWrapper.resolve('/* Invalid import rule: "@import ' + rule + ';" */');
	        } else if (_angular2SrcFacadeCollection.ListWrapper.contains(inlinedUrls, url)) {
	          promise = _angular2SrcFacadeAsync.PromiseWrapper.resolve(prefix);
	        } else {
	          _angular2SrcFacadeCollection.ListWrapper.push(inlinedUrls, url);
	          promise = _angular2SrcFacadeAsync.PromiseWrapper.then(this._xhr.get(url), function (css) {
	            css = _this._inlineImports(css, url, inlinedUrls);
	            if (_angular2SrcFacadeAsync.PromiseWrapper.isPromise(css)) {
	              return css.then(function (css) {
	                return prefix + _this._transformImportedCss(css, mediaQuery, url) + '\n';
	              });
	            } else {
	              return prefix + _this._transformImportedCss(css, mediaQuery, url) + '\n';
	            }
	          }, function (error) {
	            return '/* failed to import ' + url + ' */\n';
	          });
	        }
	        _angular2SrcFacadeCollection.ListWrapper.push(promises, promise);
	        partIndex += 2;
	      }
	      return _angular2SrcFacadeAsync.PromiseWrapper.all(promises).then(function (cssParts) {
	        var cssText = cssParts.join('');
	        if (partIndex < parts.length) {
	          cssText += parts[partIndex];
	        }
	        return cssText;
	      });
	    }
	  }, {
	    key: '_transformImportedCss',
	    value: function _transformImportedCss(css, mediaQuery, url) {
	      _rtts_assertRtts_assert.assert.argumentTypes(css, _rtts_assertRtts_assert.assert.type.string, mediaQuery, _rtts_assertRtts_assert.assert.type.string, url, _rtts_assertRtts_assert.assert.type.string);
	      css = this._styleUrlResolver.resolveUrls(css, url);
	      return _rtts_assertRtts_assert.assert.returnType(_wrapInMediaRule(css, mediaQuery), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return StyleInliner;
	})();
	
	exports.StyleInliner = StyleInliner;
	
	Object.defineProperty(StyleInliner, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(StyleInliner, 'parameters', { get: function get() {
	    return [[_angular2SrcServicesXhr.XHR], [_style_url_resolver.StyleUrlResolver], [_angular2SrcServicesUrl_resolver.UrlResolver]];
	  } });
	Object.defineProperty(StyleInliner.prototype.inlineImports, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(StyleInliner.prototype._inlineImports, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.genericType(List, _rtts_assertRtts_assert.assert.type.string)]];
	  } });
	Object.defineProperty(StyleInliner.prototype._transformImportedCss, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function _extractUrl(importRule) {
	  _rtts_assertRtts_assert.assert.argumentTypes(importRule, _rtts_assertRtts_assert.assert.type.string);
	  var match = _angular2SrcFacadeLang.RegExpWrapper.firstMatch(_urlRe, importRule);
	  if ((0, _angular2SrcFacadeLang.isBlank)(match)) return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isPresent)(match[1]) ? match[1] : match[2], _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(_extractUrl, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function _extractMediaQuery(importRule) {
	  _rtts_assertRtts_assert.assert.argumentTypes(importRule, _rtts_assertRtts_assert.assert.type.string);
	  var match = _angular2SrcFacadeLang.RegExpWrapper.firstMatch(_mediaQueryRe, importRule);
	  if ((0, _angular2SrcFacadeLang.isBlank)(match)) return _rtts_assertRtts_assert.assert.returnType(null, _rtts_assertRtts_assert.assert.type.string);
	  var mediaQuery = match[1].trim();
	  return _rtts_assertRtts_assert.assert.returnType(mediaQuery.length > 0 ? mediaQuery : null, _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(_extractMediaQuery, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	function _wrapInMediaRule(css, query) {
	  _rtts_assertRtts_assert.assert.argumentTypes(css, _rtts_assertRtts_assert.assert.type.string, query, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType((0, _angular2SrcFacadeLang.isBlank)(query) ? css : '@media ' + query + ' {\n' + css + '\n}', _rtts_assertRtts_assert.assert.type.string);
	}
	Object.defineProperty(_wrapInMediaRule, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var _importRe = _angular2SrcFacadeLang.RegExpWrapper.create('@import\\s+([^;]+);');
	var _urlRe = _angular2SrcFacadeLang.RegExpWrapper.create('url\\(\\s*?[\'"]?([^\'")]+)[\'"]?|' + '[\'"]([^\'")]+)[\'"]');
	var _mediaQueryRe = _angular2SrcFacadeLang.RegExpWrapper.create('[\'"][^\'"]+[\'"]\\s*\\)?\\s*(.*)');
	//# sourceMappingURL=style_inliner.js.map

	//# sourceMappingURL=./style_inliner.map

/***/ },
/* 211 */
/*!***************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/compiler/dynamic_component_loader.es6 ***!
  \***************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _compiler = __webpack_require__(/*! ./compiler */ 161);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcCoreCompilerView_manager = __webpack_require__(/*! angular2/src/core/compiler/view_manager */ 170);
	
	var _element_injector = __webpack_require__(/*! ./element_injector */ 167);
	
	var _view = __webpack_require__(/*! ./view */ 165);
	
	var ComponentRef = (function () {
	  function ComponentRef(location, instance, componentView, dispose) {
	    _classCallCheck(this, ComponentRef);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(location, _element_injector.ElementRef, instance, _rtts_assertRtts_assert.assert.type.any, componentView, _view.AppView, dispose, Function);
	    this.location = location;
	    this.instance = instance;
	    this.componentView = componentView;
	    this._dispose = dispose;
	  }
	
	  _createClass(ComponentRef, [{
	    key: 'injector',
	    get: function () {
	      return this.location.injector;
	    }
	  }, {
	    key: 'hostView',
	    get: function () {
	      return this.location.hostView;
	    }
	  }, {
	    key: 'dispose',
	    value: function dispose() {
	      this._dispose();
	    }
	  }]);
	
	  return ComponentRef;
	})();
	
	exports.ComponentRef = ComponentRef;
	
	Object.defineProperty(ComponentRef, 'parameters', { get: function get() {
	    return [[_element_injector.ElementRef], [_rtts_assertRtts_assert.assert.type.any], [_view.AppView], [Function]];
	  } });
	
	var DynamicComponentLoader = (function () {
	  function DynamicComponentLoader(compiler, viewManager) {
	    _classCallCheck(this, DynamicComponentLoader);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(compiler, _compiler.Compiler, viewManager, _angular2SrcCoreCompilerView_manager.AppViewManager);
	    this._compiler = compiler;
	    this._viewManager = viewManager;
	  }
	
	  _createClass(DynamicComponentLoader, [{
	    key: 'loadIntoExistingLocation',
	    value: function loadIntoExistingLocation(typeOrBinding, location) {
	      var _this = this;
	
	      var injector = arguments[2] === undefined ? null : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(typeOrBinding, _rtts_assertRtts_assert.assert.type.any, location, _element_injector.ElementRef, injector, _angular2Di.Injector);
	      var binding = this._getBinding(typeOrBinding);
	      return _rtts_assertRtts_assert.assert.returnType(this._compiler.compile(binding.token).then(function (componentProtoView) {
	        var componentView = _this._viewManager.createDynamicComponentView(location, componentProtoView, binding, injector);
	        var dispose = function dispose() {
	          throw new _angular2SrcFacadeLang.BaseException('Not implemented');
	        };
	        return new ComponentRef(location, location.elementInjector.getDynamicallyLoadedComponent(), componentView, dispose);
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, ComponentRef));
	    }
	  }, {
	    key: 'loadIntoNewLocation',
	    value: function loadIntoNewLocation(typeOrBinding, parentComponentLocation, elementOrSelector) {
	      var _this2 = this;
	
	      var injector = arguments[3] === undefined ? null : arguments[3];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(typeOrBinding, _rtts_assertRtts_assert.assert.type.any, parentComponentLocation, _element_injector.ElementRef, elementOrSelector, _rtts_assertRtts_assert.assert.type.any, injector, _angular2Di.Injector);
	      return _rtts_assertRtts_assert.assert.returnType(this._compiler.compileInHost(this._getBinding(typeOrBinding)).then(function (hostProtoView) {
	        var hostView = _this2._viewManager.createInPlaceHostView(parentComponentLocation, elementOrSelector, hostProtoView, injector);
	        var newLocation = hostView.elementInjectors[0].getElementRef();
	        var component = hostView.elementInjectors[0].getComponent();
	        var dispose = function dispose() {
	          _this2._viewManager.destroyInPlaceHostView(parentComponentLocation, hostView);
	        };
	        return new ComponentRef(newLocation, component, hostView.componentChildViews[0], dispose);
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, ComponentRef));
	    }
	  }, {
	    key: 'loadNextToExistingLocation',
	    value: function loadNextToExistingLocation(typeOrBinding, location) {
	      var injector = arguments[2] === undefined ? null : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(typeOrBinding, _rtts_assertRtts_assert.assert.type.any, location, _element_injector.ElementRef, injector, _angular2Di.Injector);
	      var binding = this._getBinding(typeOrBinding);
	      return _rtts_assertRtts_assert.assert.returnType(this._compiler.compileInHost(binding).then(function (hostProtoView) {
	        var hostView = location.viewContainer.create(-1, hostProtoView, injector);
	        var newLocation = hostView.elementInjectors[0].getElementRef();
	        var component = hostView.elementInjectors[0].getComponent();
	        var dispose = function dispose() {
	          var index = location.viewContainer.indexOf(hostView);
	          location.viewContainer.remove(index);
	        };
	        return new ComponentRef(newLocation, component, hostView.componentChildViews[0], dispose);
	      }), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeAsync.Promise, ComponentRef));
	    }
	  }, {
	    key: '_getBinding',
	    value: function _getBinding(typeOrBinding) {
	      var binding;
	      if (typeOrBinding instanceof _angular2Di.Binding) {
	        binding = typeOrBinding;
	      } else {
	        binding = (0, _angular2Di.bind)(typeOrBinding).toClass(typeOrBinding);
	      }
	      return binding;
	    }
	  }]);
	
	  return DynamicComponentLoader;
	})();
	
	exports.DynamicComponentLoader = DynamicComponentLoader;
	
	Object.defineProperty(DynamicComponentLoader, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(DynamicComponentLoader, 'parameters', { get: function get() {
	    return [[_compiler.Compiler], [_angular2SrcCoreCompilerView_manager.AppViewManager]];
	  } });
	Object.defineProperty(DynamicComponentLoader.prototype.loadIntoExistingLocation, 'parameters', { get: function get() {
	    return [[], [_element_injector.ElementRef], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(DynamicComponentLoader.prototype.loadIntoNewLocation, 'parameters', { get: function get() {
	    return [[], [_element_injector.ElementRef], [_rtts_assertRtts_assert.assert.type.any], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(DynamicComponentLoader.prototype.loadNextToExistingLocation, 'parameters', { get: function get() {
	    return [[], [_element_injector.ElementRef], [_angular2Di.Injector]];
	  } });
	//# sourceMappingURL=dynamic_component_loader.js.map

	//# sourceMappingURL=./dynamic_component_loader.map

/***/ },
/* 212 */
/*!*****************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/testability/testability.es6 ***!
  \*****************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcCoreTestabilityGet_testability = __webpack_require__(/*! angular2/src/core/testability/get_testability */ 213);
	
	var getTestabilityModule = _interopRequireWildcard(_angular2SrcCoreTestabilityGet_testability);
	
	var Testability = (function () {
	  function Testability() {
	    _classCallCheck(this, Testability);
	
	    this._pendingCount = 0;
	    this._callbacks = _angular2SrcFacadeCollection.ListWrapper.create();
	  }
	
	  _createClass(Testability, [{
	    key: 'increaseCount',
	    value: function increaseCount() {
	      var delta = arguments[0] === undefined ? 1 : arguments[0];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(delta, _rtts_assertRtts_assert.assert.type.number);
	      this._pendingCount += delta;
	      if (this._pendingCount < 0) {
	        throw new _angular2SrcFacadeLang.BaseException('pending async requests below zero');
	      } else if (this._pendingCount == 0) {
	        this._runCallbacks();
	      }
	      return this._pendingCount;
	    }
	  }, {
	    key: '_runCallbacks',
	    value: function _runCallbacks() {
	      while (this._callbacks.length !== 0) {
	        _angular2SrcFacadeCollection.ListWrapper.removeLast(this._callbacks)();
	      }
	    }
	  }, {
	    key: 'whenStable',
	    value: function whenStable(callback) {
	      _rtts_assertRtts_assert.assert.argumentTypes(callback, Function);
	      _angular2SrcFacadeCollection.ListWrapper.push(this._callbacks, callback);
	      if (this._pendingCount === 0) {
	        this._runCallbacks();
	      }
	    }
	  }, {
	    key: 'getPendingCount',
	    value: function getPendingCount() {
	      return _rtts_assertRtts_assert.assert.returnType(this._pendingCount, _rtts_assertRtts_assert.assert.type.number);
	    }
	  }, {
	    key: 'findBindings',
	    value: function findBindings(using, binding, exactMatch) {
	      _rtts_assertRtts_assert.assert.argumentTypes(using, _rtts_assertRtts_assert.assert.type.any, binding, _rtts_assertRtts_assert.assert.type.string, exactMatch, _rtts_assertRtts_assert.assert.type.boolean);
	      return _rtts_assertRtts_assert.assert.returnType([], _angular2SrcFacadeCollection.List);
	    }
	  }]);
	
	  return Testability;
	})();
	
	exports.Testability = Testability;
	
	Object.defineProperty(Testability, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(Testability.prototype.increaseCount, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.number]];
	  } });
	Object.defineProperty(Testability.prototype.whenStable, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(Testability.prototype.findBindings, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	
	var TestabilityRegistry = (function () {
	  function TestabilityRegistry() {
	    _classCallCheck(this, TestabilityRegistry);
	
	    this._applications = _angular2SrcFacadeCollection.MapWrapper.create();
	    getTestabilityModule.GetTestability.addToWindow(this);
	  }
	
	  _createClass(TestabilityRegistry, [{
	    key: 'registerApplication',
	    value: function registerApplication(token, testability) {
	      _rtts_assertRtts_assert.assert.argumentTypes(token, _rtts_assertRtts_assert.assert.type.any, testability, Testability);
	      _angular2SrcFacadeCollection.MapWrapper.set(this._applications, token, testability);
	    }
	  }, {
	    key: 'findTestabilityInTree',
	    value: function findTestabilityInTree(elem) {
	      if (elem == null) {
	        return _rtts_assertRtts_assert.assert.returnType(null, Testability);
	      }
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._applications, elem)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.MapWrapper.get(this._applications, elem), Testability);
	      }
	      if (_angular2SrcDomDom_adapter.DOM.isShadowRoot(elem)) {
	        return _rtts_assertRtts_assert.assert.returnType(this.findTestabilityInTree(_angular2SrcDomDom_adapter.DOM.getHost(elem)), Testability);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(this.findTestabilityInTree(_angular2SrcDomDom_adapter.DOM.parentElement(elem)), Testability);
	    }
	  }]);
	
	  return TestabilityRegistry;
	})();
	
	exports.TestabilityRegistry = TestabilityRegistry;
	
	Object.defineProperty(TestabilityRegistry, 'annotations', { get: function get() {
	    return [new _angular2Di.Injectable()];
	  } });
	Object.defineProperty(TestabilityRegistry.prototype.registerApplication, 'parameters', { get: function get() {
	    return [[], [Testability]];
	  } });
	//# sourceMappingURL=testability.js.map

	//# sourceMappingURL=./testability.map

/***/ },
/* 213 */
/*!*********************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/testability/get_testability.es6 ***!
  \*********************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcCoreTestabilityTestability = __webpack_require__(/*! angular2/src/core/testability/testability */ 212);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var PublicTestability = (function () {
	  function PublicTestability(testability) {
	    _classCallCheck(this, PublicTestability);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(testability, _angular2SrcCoreTestabilityTestability.Testability);
	    this._testability = testability;
	  }
	
	  _createClass(PublicTestability, [{
	    key: 'whenStable',
	    value: function whenStable(callback) {
	      _rtts_assertRtts_assert.assert.argumentTypes(callback, Function);
	      this._testability.whenStable(callback);
	    }
	  }, {
	    key: 'findBindings',
	    value: function findBindings(using, binding, exactMatch) {
	      _rtts_assertRtts_assert.assert.argumentTypes(using, _rtts_assertRtts_assert.assert.type.any, binding, _rtts_assertRtts_assert.assert.type.string, exactMatch, _rtts_assertRtts_assert.assert.type.boolean);
	      return this._testability.findBindings(using, binding, exactMatch);
	    }
	  }]);
	
	  return PublicTestability;
	})();
	
	Object.defineProperty(PublicTestability, 'parameters', { get: function get() {
	    return [[_angular2SrcCoreTestabilityTestability.Testability]];
	  } });
	Object.defineProperty(PublicTestability.prototype.whenStable, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(PublicTestability.prototype.findBindings, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.boolean]];
	  } });
	
	var GetTestability = (function () {
	  function GetTestability() {
	    _classCallCheck(this, GetTestability);
	  }
	
	  _createClass(GetTestability, null, [{
	    key: 'addToWindow',
	    value: function addToWindow(registry) {
	      _rtts_assertRtts_assert.assert.argumentTypes(registry, _angular2SrcCoreTestabilityTestability.TestabilityRegistry);
	      _angular2SrcFacadeLang.global.getAngularTestability = function (elem) {
	        var testability = registry.findTestabilityInTree(elem);
	        if (testability == null) {
	          throw new Error('Could not find testability for element.');
	        }
	        return _rtts_assertRtts_assert.assert.returnType(new PublicTestability(testability), PublicTestability);
	      };
	    }
	  }]);
	
	  return GetTestability;
	})();
	
	exports.GetTestability = GetTestability;
	
	Object.defineProperty(GetTestability.addToWindow, 'parameters', { get: function get() {
	    return [[_angular2SrcCoreTestabilityTestability.TestabilityRegistry]];
	  } });
	//# sourceMappingURL=get_testability.es6.map

	//# sourceMappingURL=./get_testability.map

/***/ },
/* 214 */
/*!************************************************************!*\
  !*** ./~/angular2/es6/dev/src/core/application_tokens.es6 ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var appComponentRefToken = _rtts_assertRtts_assert.assert.type(new _angular2Di.OpaqueToken('ComponentRef'), _angular2Di.OpaqueToken);
	exports.appComponentRefToken = appComponentRefToken;
	var appChangeDetectorToken = _rtts_assertRtts_assert.assert.type(new _angular2Di.OpaqueToken('AppChangeDetector'), _angular2Di.OpaqueToken);
	exports.appChangeDetectorToken = appChangeDetectorToken;
	var appElementToken = _rtts_assertRtts_assert.assert.type(new _angular2Di.OpaqueToken('AppElement'), _angular2Di.OpaqueToken);
	exports.appElementToken = appElementToken;
	var appComponentAnnotatedTypeToken = _rtts_assertRtts_assert.assert.type(new _angular2Di.OpaqueToken('AppComponentAnnotatedType'), _angular2Di.OpaqueToken);
	exports.appComponentAnnotatedTypeToken = appComponentAnnotatedTypeToken;
	var appDocumentToken = _rtts_assertRtts_assert.assert.type(new _angular2Di.OpaqueToken('AppDocument'), _angular2Di.OpaqueToken);
	//# sourceMappingURL=application_tokens.js.map
	
	//# sourceMappingURL=./application_tokens.map
	exports.appDocumentToken = appDocumentToken;

/***/ },
/* 215 */
/*!*************************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/native_shadow_dom_strategy.es6 ***!
  \*************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _viewView = __webpack_require__(/*! ../view/view */ 145);
	
	var viewModule = _interopRequireWildcard(_viewView);
	
	var _style_url_resolver = __webpack_require__(/*! ./style_url_resolver */ 203);
	
	var _shadow_dom_strategy = __webpack_require__(/*! ./shadow_dom_strategy */ 144);
	
	var _util = __webpack_require__(/*! ./util */ 204);
	
	var NativeShadowDomStrategy = (function (_ShadowDomStrategy) {
	  function NativeShadowDomStrategy(styleUrlResolver) {
	    _classCallCheck(this, NativeShadowDomStrategy);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(styleUrlResolver, _style_url_resolver.StyleUrlResolver);
	    _get(Object.getPrototypeOf(NativeShadowDomStrategy.prototype), 'constructor', this).call(this);
	    this.styleUrlResolver = styleUrlResolver;
	  }
	
	  _inherits(NativeShadowDomStrategy, _ShadowDomStrategy);
	
	  _createClass(NativeShadowDomStrategy, [{
	    key: 'attachTemplate',
	    value: function attachTemplate(el, view) {
	      _rtts_assertRtts_assert.assert.argumentTypes(el, _rtts_assertRtts_assert.assert.type.any, view, viewModule.RenderView);
	      (0, _util.moveViewNodesIntoParent)(_angular2SrcDomDom_adapter.DOM.createShadowRoot(el), view);
	    }
	  }, {
	    key: 'processStyleElement',
	    value: function processStyleElement(hostComponentId, templateUrl, styleEl) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostComponentId, _rtts_assertRtts_assert.assert.type.string, templateUrl, _rtts_assertRtts_assert.assert.type.string, styleEl, _rtts_assertRtts_assert.assert.type.any);
	      var cssText = _angular2SrcDomDom_adapter.DOM.getText(styleEl);
	      cssText = this.styleUrlResolver.resolveUrls(cssText, templateUrl);
	      _angular2SrcDomDom_adapter.DOM.setText(styleEl, cssText);
	      return _rtts_assertRtts_assert.assert.returnType(null, _angular2SrcFacadeAsync.Promise);
	    }
	  }]);
	
	  return NativeShadowDomStrategy;
	})(_shadow_dom_strategy.ShadowDomStrategy);
	
	exports.NativeShadowDomStrategy = NativeShadowDomStrategy;
	
	Object.defineProperty(NativeShadowDomStrategy, 'parameters', { get: function get() {
	    return [[_style_url_resolver.StyleUrlResolver]];
	  } });
	Object.defineProperty(NativeShadowDomStrategy.prototype.attachTemplate, 'parameters', { get: function get() {
	    return [[], [viewModule.RenderView]];
	  } });
	Object.defineProperty(NativeShadowDomStrategy.prototype.processStyleElement, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	//# sourceMappingURL=native_shadow_dom_strategy.js.map

	//# sourceMappingURL=./native_shadow_dom_strategy.map

/***/ },
/* 216 */
/*!**********************************************************************************************!*\
  !*** ./~/angular2/es6/dev/src/render/dom/shadow_dom/emulated_scoped_shadow_dom_strategy.es6 ***!
  \**********************************************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcRenderDomShadow_domStyle_inliner = __webpack_require__(/*! angular2/src/render/dom/shadow_dom/style_inliner */ 210);
	
	var _angular2SrcRenderDomShadow_domStyle_url_resolver = __webpack_require__(/*! angular2/src/render/dom/shadow_dom/style_url_resolver */ 203);
	
	var _emulated_unscoped_shadow_dom_strategy = __webpack_require__(/*! ./emulated_unscoped_shadow_dom_strategy */ 202);
	
	var _util = __webpack_require__(/*! ./util */ 204);
	
	var EmulatedScopedShadowDomStrategy = (function (_EmulatedUnscopedShadowDomStrategy) {
	  function EmulatedScopedShadowDomStrategy(styleInliner, styleUrlResolver, styleHost) {
	    _classCallCheck(this, EmulatedScopedShadowDomStrategy);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(styleInliner, _angular2SrcRenderDomShadow_domStyle_inliner.StyleInliner, styleUrlResolver, _angular2SrcRenderDomShadow_domStyle_url_resolver.StyleUrlResolver, styleHost, _rtts_assertRtts_assert.assert.type.any);
	    _get(Object.getPrototypeOf(EmulatedScopedShadowDomStrategy.prototype), 'constructor', this).call(this, styleUrlResolver, styleHost);
	    this.styleInliner = styleInliner;
	  }
	
	  _inherits(EmulatedScopedShadowDomStrategy, _EmulatedUnscopedShadowDomStrategy);
	
	  _createClass(EmulatedScopedShadowDomStrategy, [{
	    key: 'processStyleElement',
	    value: function processStyleElement(hostComponentId, templateUrl, styleEl) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostComponentId, _rtts_assertRtts_assert.assert.type.string, templateUrl, _rtts_assertRtts_assert.assert.type.string, styleEl, _rtts_assertRtts_assert.assert.type.any);
	      var cssText = _angular2SrcDomDom_adapter.DOM.getText(styleEl);
	      cssText = this.styleUrlResolver.resolveUrls(cssText, templateUrl);
	      var css = this.styleInliner.inlineImports(cssText, templateUrl);
	      if (_angular2SrcFacadeAsync.PromiseWrapper.isPromise(css)) {
	        _angular2SrcDomDom_adapter.DOM.setText(styleEl, '');
	        return _rtts_assertRtts_assert.assert.returnType(css.then(function (css) {
	          css = (0, _util.shimCssForComponent)(css, hostComponentId);
	          _angular2SrcDomDom_adapter.DOM.setText(styleEl, css);
	        }), _angular2SrcFacadeAsync.Promise);
	      } else {
	        css = (0, _util.shimCssForComponent)(css, hostComponentId);
	        _angular2SrcDomDom_adapter.DOM.setText(styleEl, css);
	      }
	      _angular2SrcDomDom_adapter.DOM.remove(styleEl);
	      (0, _util.insertStyleElement)(this.styleHost, styleEl);
	      return _rtts_assertRtts_assert.assert.returnType(null, _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: 'processElement',
	    value: function processElement(hostComponentId, elementComponentId, element) {
	      _rtts_assertRtts_assert.assert.argumentTypes(hostComponentId, _rtts_assertRtts_assert.assert.type.string, elementComponentId, _rtts_assertRtts_assert.assert.type.string, element, _rtts_assertRtts_assert.assert.type.any);
	      if ((0, _angular2SrcFacadeLang.isPresent)(hostComponentId)) {
	        var contentAttribute = (0, _util.getContentAttribute)((0, _util.getComponentId)(hostComponentId));
	        _angular2SrcDomDom_adapter.DOM.setAttribute(element, contentAttribute, '');
	      }
	      if ((0, _angular2SrcFacadeLang.isPresent)(elementComponentId)) {
	        var hostAttribute = (0, _util.getHostAttribute)((0, _util.getComponentId)(elementComponentId));
	        _angular2SrcDomDom_adapter.DOM.setAttribute(element, hostAttribute, '');
	      }
	    }
	  }]);
	
	  return EmulatedScopedShadowDomStrategy;
	})(_emulated_unscoped_shadow_dom_strategy.EmulatedUnscopedShadowDomStrategy);
	
	exports.EmulatedScopedShadowDomStrategy = EmulatedScopedShadowDomStrategy;
	
	Object.defineProperty(EmulatedScopedShadowDomStrategy, 'parameters', { get: function get() {
	    return [[_angular2SrcRenderDomShadow_domStyle_inliner.StyleInliner], [_angular2SrcRenderDomShadow_domStyle_url_resolver.StyleUrlResolver], []];
	  } });
	Object.defineProperty(EmulatedScopedShadowDomStrategy.prototype.processStyleElement, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(EmulatedScopedShadowDomStrategy.prototype.processElement, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	//# sourceMappingURL=emulated_scoped_shadow_dom_strategy.js.map

	//# sourceMappingURL=./emulated_scoped_shadow_dom_strategy.map

/***/ },
/* 217 */
/*!********************************************!*\
  !*** ./~/angular2/es6/dev/annotations.es6 ***!
  \********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	var _srcCoreAnnotationsAnnotations = __webpack_require__(/*! ./src/core/annotations/annotations */ 163);
	
	//# sourceMappingURL=annotations.js.map

	//# sourceMappingURL=./annotations.map

	_defaults(exports, _interopRequireWildcard(_srcCoreAnnotationsAnnotations));

/***/ },
/* 218 */
/*!*******************************************!*\
  !*** ./~/angular2/es6/dev/directives.es6 ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }
	
	var _srcDirectivesClass = __webpack_require__(/*! ./src/directives/class */ 219);
	
	_defaults(exports, _interopRequireWildcard(_srcDirectivesClass));
	
	var _srcDirectivesFor = __webpack_require__(/*! ./src/directives/for */ 220);
	
	_defaults(exports, _interopRequireWildcard(_srcDirectivesFor));
	
	var _srcDirectivesIf = __webpack_require__(/*! ./src/directives/if */ 221);
	
	_defaults(exports, _interopRequireWildcard(_srcDirectivesIf));
	
	var _srcDirectivesNon_bindable = __webpack_require__(/*! ./src/directives/non_bindable */ 222);
	
	_defaults(exports, _interopRequireWildcard(_srcDirectivesNon_bindable));
	
	var _srcDirectivesSwitch = __webpack_require__(/*! ./src/directives/switch */ 223);
	
	//# sourceMappingURL=directives.js.map

	//# sourceMappingURL=./directives.map

	_defaults(exports, _interopRequireWildcard(_srcDirectivesSwitch));

/***/ },
/* 219 */
/*!*****************************************************!*\
  !*** ./~/angular2/es6/dev/src/directives/class.es6 ***!
  \*****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcCoreAnnotationsAnnotations = __webpack_require__(/*! angular2/src/core/annotations/annotations */ 163);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _angular2SrcCoreCompilerNg_element = __webpack_require__(/*! angular2/src/core/compiler/ng_element */ 172);
	
	var CSSClass = (function () {
	  function CSSClass(ngEl) {
	    _classCallCheck(this, CSSClass);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(ngEl, _angular2SrcCoreCompilerNg_element.NgElement);
	    this._domEl = ngEl.domElement;
	  }
	
	  _createClass(CSSClass, [{
	    key: '_toggleClass',
	    value: function _toggleClass(className, enabled) {
	      if (enabled) {
	        _angular2SrcDomDom_adapter.DOM.addClass(this._domEl, className);
	      } else {
	        _angular2SrcDomDom_adapter.DOM.removeClass(this._domEl, className);
	      }
	    }
	  }, {
	    key: 'iterableChanges',
	    set: function (changes) {
	      var _this = this;
	
	      if ((0, _angular2SrcFacadeLang.isPresent)(changes)) {
	        changes.forEachAddedItem(function (record) {
	          _this._toggleClass(record.key, record.currentValue);
	        });
	        changes.forEachChangedItem(function (record) {
	          _this._toggleClass(record.key, record.currentValue);
	        });
	        changes.forEachRemovedItem(function (record) {
	          if (record.previousValue) {
	            _angular2SrcDomDom_adapter.DOM.removeClass(_this._domEl, record.key);
	          }
	        });
	      }
	    }
	  }]);
	
	  return CSSClass;
	})();
	
	exports.CSSClass = CSSClass;
	
	Object.defineProperty(CSSClass, 'annotations', { get: function get() {
	    return [new _angular2SrcCoreAnnotationsAnnotations.Decorator({
	      selector: '[class]',
	      properties: { 'iterableChanges': 'class | keyValDiff' }
	    })];
	  } });
	Object.defineProperty(CSSClass, 'parameters', { get: function get() {
	    return [[_angular2SrcCoreCompilerNg_element.NgElement]];
	  } });
	//# sourceMappingURL=class.js.map

	//# sourceMappingURL=./class.map

/***/ },
/* 220 */
/*!***************************************************!*\
  !*** ./~/angular2/es6/dev/src/directives/for.es6 ***!
  \***************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcCoreAnnotationsAnnotations = __webpack_require__(/*! angular2/src/core/annotations/annotations */ 163);
	
	var _angular2SrcCoreCompilerView_container_ref = __webpack_require__(/*! angular2/src/core/compiler/view_container_ref */ 194);
	
	var _angular2SrcCoreCompilerView = __webpack_require__(/*! angular2/src/core/compiler/view */ 165);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var For = (function () {
	  function For(viewContainer) {
	    _classCallCheck(this, For);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(viewContainer, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef);
	    this.viewContainer = viewContainer;
	  }
	
	  _createClass(For, [{
	    key: 'iterableChanges',
	    set: function (changes) {
	      if ((0, _angular2SrcFacadeLang.isBlank)(changes)) {
	        this.viewContainer.clear();
	        return;
	      }
	      var recordViewTuples = [];
	      changes.forEachRemovedItem(function (removedRecord) {
	        return _angular2SrcFacadeCollection.ListWrapper.push(recordViewTuples, new RecordViewTuple(removedRecord, null));
	      });
	      changes.forEachMovedItem(function (movedRecord) {
	        return _angular2SrcFacadeCollection.ListWrapper.push(recordViewTuples, new RecordViewTuple(movedRecord, null));
	      });
	      var insertTuples = For.bulkRemove(recordViewTuples, this.viewContainer);
	      changes.forEachAddedItem(function (addedRecord) {
	        return _angular2SrcFacadeCollection.ListWrapper.push(insertTuples, new RecordViewTuple(addedRecord, null));
	      });
	      For.bulkInsert(insertTuples, this.viewContainer);
	      for (var i = 0; i < insertTuples.length; i++) {
	        this.perViewChange(insertTuples[i].view, insertTuples[i].record);
	      }
	    }
	  }, {
	    key: 'perViewChange',
	    value: function perViewChange(view, record) {
	      view.setLocal('$implicit', record.item);
	      view.setLocal('index', record.currentIndex);
	    }
	  }], [{
	    key: 'bulkRemove',
	    value: function bulkRemove(tuples, viewContainer) {
	      tuples.sort(function (a, b) {
	        return a.record.previousIndex - b.record.previousIndex;
	      });
	      var movedTuples = [];
	      for (var i = tuples.length - 1; i >= 0; i--) {
	        var tuple = tuples[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(tuple.record.currentIndex)) {
	          tuple.view = viewContainer.detach(tuple.record.previousIndex);
	          _angular2SrcFacadeCollection.ListWrapper.push(movedTuples, tuple);
	        } else {
	          viewContainer.remove(tuple.record.previousIndex);
	        }
	      }
	      return movedTuples;
	    }
	  }, {
	    key: 'bulkInsert',
	    value: function bulkInsert(tuples, viewContainer) {
	      tuples.sort(function (a, b) {
	        return a.record.currentIndex - b.record.currentIndex;
	      });
	      for (var i = 0; i < tuples.length; i++) {
	        var tuple = tuples[i];
	        if ((0, _angular2SrcFacadeLang.isPresent)(tuple.view)) {
	          viewContainer.insert(tuple.view, tuple.record.currentIndex);
	        } else {
	          tuple.view = viewContainer.create(tuple.record.currentIndex);
	        }
	      }
	      return tuples;
	    }
	  }]);
	
	  return For;
	})();
	
	exports.For = For;
	
	Object.defineProperty(For, 'annotations', { get: function get() {
	    return [new _angular2SrcCoreAnnotationsAnnotations.Viewport({
	      selector: '[for][of]',
	      properties: { 'iterableChanges': 'of | iterableDiff' }
	    })];
	  } });
	Object.defineProperty(For, 'parameters', { get: function get() {
	    return [[_angular2SrcCoreCompilerView_container_ref.ViewContainerRef]];
	  } });
	
	var RecordViewTuple = function RecordViewTuple(record, view) {
	  _classCallCheck(this, RecordViewTuple);
	
	  this.record = record;
	  this.view = view;
	};
	
	//# sourceMappingURL=for.js.map

	//# sourceMappingURL=./for.map

/***/ },
/* 221 */
/*!**************************************************!*\
  !*** ./~/angular2/es6/dev/src/directives/if.es6 ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcCoreAnnotationsAnnotations = __webpack_require__(/*! angular2/src/core/annotations/annotations */ 163);
	
	var _angular2SrcCoreCompilerView_container_ref = __webpack_require__(/*! angular2/src/core/compiler/view_container_ref */ 194);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var If = (function () {
	  function If(viewContainer) {
	    _classCallCheck(this, If);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(viewContainer, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef);
	    this.viewContainer = viewContainer;
	    this.prevCondition = null;
	  }
	
	  _createClass(If, [{
	    key: 'condition',
	    set: function (newCondition) {
	      if (newCondition && ((0, _angular2SrcFacadeLang.isBlank)(this.prevCondition) || !this.prevCondition)) {
	        this.prevCondition = true;
	        this.viewContainer.create();
	      } else if (!newCondition && ((0, _angular2SrcFacadeLang.isBlank)(this.prevCondition) || this.prevCondition)) {
	        this.prevCondition = false;
	        this.viewContainer.clear();
	      }
	    }
	  }]);
	
	  return If;
	})();
	
	exports.If = If;
	
	Object.defineProperty(If, 'annotations', { get: function get() {
	    return [new _angular2SrcCoreAnnotationsAnnotations.Viewport({
	      selector: '[if]',
	      properties: { 'condition': 'if' }
	    })];
	  } });
	Object.defineProperty(If, 'parameters', { get: function get() {
	    return [[_angular2SrcCoreCompilerView_container_ref.ViewContainerRef]];
	  } });
	//# sourceMappingURL=if.js.map

	//# sourceMappingURL=./if.map

/***/ },
/* 222 */
/*!************************************************************!*\
  !*** ./~/angular2/es6/dev/src/directives/non_bindable.es6 ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _angular2SrcCoreAnnotationsAnnotations = __webpack_require__(/*! angular2/src/core/annotations/annotations */ 163);
	
	var NonBindable = function NonBindable() {
	  _classCallCheck(this, NonBindable);
	};
	
	exports.NonBindable = NonBindable;
	
	Object.defineProperty(NonBindable, 'annotations', { get: function get() {
	    return [new _angular2SrcCoreAnnotationsAnnotations.Decorator({
	      selector: '[non-bindable]',
	      compileChildren: false
	    })];
	  } });
	//# sourceMappingURL=non_bindable.js.map

	//# sourceMappingURL=./non_bindable.map

/***/ },
/* 223 */
/*!******************************************************!*\
  !*** ./~/angular2/es6/dev/src/directives/switch.es6 ***!
  \******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcCoreAnnotationsAnnotations = __webpack_require__(/*! angular2/src/core/annotations/annotations */ 163);
	
	var _angular2SrcCoreCompilerView_container_ref = __webpack_require__(/*! angular2/src/core/compiler/view_container_ref */ 194);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcCoreAnnotationsVisibility = __webpack_require__(/*! angular2/src/core/annotations/visibility */ 153);
	
	var Switch = (function () {
	  function Switch() {
	    _classCallCheck(this, Switch);
	
	    this._valueViewContainers = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._activeViewContainers = _angular2SrcFacadeCollection.ListWrapper.create();
	    this._useDefault = false;
	  }
	
	  _createClass(Switch, [{
	    key: 'value',
	    set: function (value) {
	      this._emptyAllActiveViewContainers();
	      this._useDefault = false;
	      var containers = _angular2SrcFacadeCollection.MapWrapper.get(this._valueViewContainers, value);
	      if ((0, _angular2SrcFacadeLang.isBlank)(containers)) {
	        this._useDefault = true;
	        containers = (0, _angular2SrcFacadeLang.normalizeBlank)(_angular2SrcFacadeCollection.MapWrapper.get(this._valueViewContainers, _whenDefault));
	      }
	      this._activateViewContainers(containers);
	      this._switchValue = value;
	    }
	  }, {
	    key: '_onWhenValueChanged',
	    value: function _onWhenValueChanged(oldWhen, newWhen, viewContainer) {
	      _rtts_assertRtts_assert.assert.argumentTypes(oldWhen, _rtts_assertRtts_assert.assert.type.any, newWhen, _rtts_assertRtts_assert.assert.type.any, viewContainer, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef);
	      this._deregisterViewContainer(oldWhen, viewContainer);
	      this._registerViewContainer(newWhen, viewContainer);
	      if (oldWhen === this._switchValue) {
	        viewContainer.remove();
	        _angular2SrcFacadeCollection.ListWrapper.remove(this._activeViewContainers, viewContainer);
	      } else if (newWhen === this._switchValue) {
	        if (this._useDefault) {
	          this._useDefault = false;
	          this._emptyAllActiveViewContainers();
	        }
	        viewContainer.create();
	        _angular2SrcFacadeCollection.ListWrapper.push(this._activeViewContainers, viewContainer);
	      }
	      if (this._activeViewContainers.length === 0 && !this._useDefault) {
	        this._useDefault = true;
	        this._activateViewContainers(_angular2SrcFacadeCollection.MapWrapper.get(this._valueViewContainers, _whenDefault));
	      }
	    }
	  }, {
	    key: '_emptyAllActiveViewContainers',
	    value: function _emptyAllActiveViewContainers() {
	      var activeContainers = this._activeViewContainers;
	      for (var i = 0; i < activeContainers.length; i++) {
	        activeContainers[i].remove();
	      }
	      this._activeViewContainers = _angular2SrcFacadeCollection.ListWrapper.create();
	    }
	  }, {
	    key: '_activateViewContainers',
	    value: function _activateViewContainers(containers) {
	      _rtts_assertRtts_assert.assert.argumentTypes(containers, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef));
	      if ((0, _angular2SrcFacadeLang.isPresent)(containers)) {
	        for (var i = 0; i < containers.length; i++) {
	          containers[i].create();
	        }
	        this._activeViewContainers = containers;
	      }
	    }
	  }, {
	    key: '_registerViewContainer',
	    value: function _registerViewContainer(value, container) {
	      _rtts_assertRtts_assert.assert.argumentTypes(value, _rtts_assertRtts_assert.assert.type.any, container, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef);
	      var containers = _angular2SrcFacadeCollection.MapWrapper.get(this._valueViewContainers, value);
	      if ((0, _angular2SrcFacadeLang.isBlank)(containers)) {
	        containers = _angular2SrcFacadeCollection.ListWrapper.create();
	        _angular2SrcFacadeCollection.MapWrapper.set(this._valueViewContainers, value, containers);
	      }
	      _angular2SrcFacadeCollection.ListWrapper.push(containers, container);
	    }
	  }, {
	    key: '_deregisterViewContainer',
	    value: function _deregisterViewContainer(value, container) {
	      _rtts_assertRtts_assert.assert.argumentTypes(value, _rtts_assertRtts_assert.assert.type.any, container, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef);
	      if (value == _whenDefault) return;
	      var containers = _angular2SrcFacadeCollection.MapWrapper.get(this._valueViewContainers, value);
	      if (containers.length == 1) {
	        _angular2SrcFacadeCollection.MapWrapper['delete'](this._valueViewContainers, value);
	      } else {
	        _angular2SrcFacadeCollection.ListWrapper.remove(containers, container);
	      }
	    }
	  }]);
	
	  return Switch;
	})();
	
	exports.Switch = Switch;
	
	Object.defineProperty(Switch, 'annotations', { get: function get() {
	    return [new _angular2SrcCoreAnnotationsAnnotations.Decorator({
	      selector: '[switch]',
	      properties: { 'value': 'switch' }
	    })];
	  } });
	Object.defineProperty(Switch.prototype._onWhenValueChanged, 'parameters', { get: function get() {
	    return [[], [], [_angular2SrcCoreCompilerView_container_ref.ViewContainerRef]];
	  } });
	Object.defineProperty(Switch.prototype._activateViewContainers, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef)]];
	  } });
	Object.defineProperty(Switch.prototype._registerViewContainer, 'parameters', { get: function get() {
	    return [[], [_angular2SrcCoreCompilerView_container_ref.ViewContainerRef]];
	  } });
	Object.defineProperty(Switch.prototype._deregisterViewContainer, 'parameters', { get: function get() {
	    return [[], [_angular2SrcCoreCompilerView_container_ref.ViewContainerRef]];
	  } });
	
	var SwitchWhen = (function () {
	  function SwitchWhen(viewContainer, sswitch) {
	    _classCallCheck(this, SwitchWhen);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(viewContainer, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef, sswitch, Switch);
	    this._value = _whenDefault;
	    this._switch = sswitch;
	    this._viewContainer = viewContainer;
	  }
	
	  _createClass(SwitchWhen, [{
	    key: 'when',
	    set: function (value) {
	      this._switch._onWhenValueChanged(this._value, value, this._viewContainer);
	      this._value = value;
	    }
	  }]);
	
	  return SwitchWhen;
	})();
	
	exports.SwitchWhen = SwitchWhen;
	
	Object.defineProperty(SwitchWhen, 'annotations', { get: function get() {
	    return [new _angular2SrcCoreAnnotationsAnnotations.Viewport({
	      selector: '[switch-when]',
	      properties: { 'when': 'switch-when' }
	    })];
	  } });
	Object.defineProperty(SwitchWhen, 'parameters', { get: function get() {
	    return [[_angular2SrcCoreCompilerView_container_ref.ViewContainerRef], [Switch, new _angular2SrcCoreAnnotationsVisibility.Parent()]];
	  } });
	
	var SwitchDefault = function SwitchDefault(viewContainer, sswitch) {
	  _classCallCheck(this, SwitchDefault);
	
	  _rtts_assertRtts_assert.assert.argumentTypes(viewContainer, _angular2SrcCoreCompilerView_container_ref.ViewContainerRef, sswitch, Switch);
	  sswitch._registerViewContainer(_whenDefault, viewContainer);
	};
	
	exports.SwitchDefault = SwitchDefault;
	
	Object.defineProperty(SwitchDefault, 'annotations', { get: function get() {
	    return [new _angular2SrcCoreAnnotationsAnnotations.Viewport({ selector: '[switch-default]' })];
	  } });
	Object.defineProperty(SwitchDefault, 'parameters', { get: function get() {
	    return [[_angular2SrcCoreCompilerView_container_ref.ViewContainerRef], [Switch, new _angular2SrcCoreAnnotationsVisibility.Parent()]];
	  } });
	var _whenDefault = new Object();
	//# sourceMappingURL=switch.js.map

	//# sourceMappingURL=./switch.map

/***/ },
/* 224 */
/*!***************************************!*\
  !*** ./~/angular2/es6/dev/router.es6 ***!
  \***************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _srcRouterRouter = __webpack_require__(/*! ./src/router/router */ 225);
	
	Object.defineProperty(exports, 'Router', {
	  enumerable: true,
	  get: function get() {
	    return _srcRouterRouter.Router;
	  }
	});
	
	var _srcRouterRouter_outlet = __webpack_require__(/*! ./src/router/router_outlet */ 233);
	
	Object.defineProperty(exports, 'RouterOutlet', {
	  enumerable: true,
	  get: function get() {
	    return _srcRouterRouter_outlet.RouterOutlet;
	  }
	});
	
	var _srcRouterRouter_link = __webpack_require__(/*! ./src/router/router_link */ 234);
	
	Object.defineProperty(exports, 'RouterLink', {
	  enumerable: true,
	  get: function get() {
	    return _srcRouterRouter_link.RouterLink;
	  }
	});
	
	var _srcRouterInstruction = __webpack_require__(/*! ./src/router/instruction */ 230);
	
	Object.defineProperty(exports, 'RouteParams', {
	  enumerable: true,
	  get: function get() {
	    return _srcRouterInstruction.RouteParams;
	  }
	});
	
	var _srcRouterRoute_config = __webpack_require__(/*! ./src/router/route_config */ 231);
	
	//# sourceMappingURL=router.js.map
	
	//# sourceMappingURL=./router.map
	Object.defineProperty(exports, 'RouteConfig', {
	  enumerable: true,
	  get: function get() {
	    return _srcRouterRoute_config.RouteConfig;
	  }
	});

/***/ },
/* 225 */
/*!**************************************************!*\
  !*** ./~/angular2/es6/dev/src/router/router.es6 ***!
  \**************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; desc = parent = getter = undefined; _again = false; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) subClass.__proto__ = superClass; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _route_registry = __webpack_require__(/*! ./route_registry */ 226);
	
	var _pipeline = __webpack_require__(/*! ./pipeline */ 232);
	
	var _instruction = __webpack_require__(/*! ./instruction */ 230);
	
	var _router_outlet = __webpack_require__(/*! ./router_outlet */ 233);
	
	var Router = (function () {
	  function Router(registry, pipeline) {
	    var parent = arguments[2] === undefined ? null : arguments[2];
	    var name = arguments[3] === undefined ? '/' : arguments[3];
	
	    _classCallCheck(this, Router);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(registry, _route_registry.RouteRegistry, pipeline, _pipeline.Pipeline, parent, Router, name, _rtts_assertRtts_assert.assert.type.any);
	    this.name = name;
	    this.navigating = false;
	    this.parent = parent;
	    this.previousUrl = null;
	    this._outlets = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._children = _angular2SrcFacadeCollection.MapWrapper.create();
	    this._registry = registry;
	    this._pipeline = pipeline;
	    this._subject = new _angular2SrcFacadeAsync.EventEmitter();
	  }
	
	  _createClass(Router, [{
	    key: 'childRouter',
	    value: function childRouter() {
	      var outletName = arguments[0] === undefined ? 'default' : arguments[0];
	
	      if (!_angular2SrcFacadeCollection.MapWrapper.contains(this._children, outletName)) {
	        _angular2SrcFacadeCollection.MapWrapper.set(this._children, outletName, new ChildRouter(this, outletName));
	      }
	      return _angular2SrcFacadeCollection.MapWrapper.get(this._children, outletName);
	    }
	  }, {
	    key: 'registerOutlet',
	    value: function registerOutlet(outlet) {
	      var name = arguments[1] === undefined ? 'default' : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(outlet, _router_outlet.RouterOutlet, name, _rtts_assertRtts_assert.assert.type.any);
	      _angular2SrcFacadeCollection.MapWrapper.set(this._outlets, name, outlet);
	      return _rtts_assertRtts_assert.assert.returnType(this.renavigate(), _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: 'config',
	    value: function config(path, component) {
	      var alias = arguments[2] === undefined ? null : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(path, _rtts_assertRtts_assert.assert.type.string, component, _rtts_assertRtts_assert.assert.type.any, alias, _rtts_assertRtts_assert.assert.type.string);
	      this._registry.config(this.name, path, component, alias);
	      return this.renavigate();
	    }
	  }, {
	    key: 'navigate',
	    value: function navigate(url) {
	      var _this = this;
	
	      if (this.navigating) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.resolve(true), _angular2SrcFacadeAsync.Promise);
	      }
	      this.lastNavigationAttempt = url;
	      var instruction = this.recognize(url);
	      if ((0, _angular2SrcFacadeLang.isBlank)(instruction)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.resolve(false), _angular2SrcFacadeAsync.Promise);
	      }
	      instruction.router = this;
	      this._startNavigating();
	      var result = this._pipeline.process(instruction).then(function (_) {
	        _angular2SrcFacadeAsync.ObservableWrapper.callNext(_this._subject, instruction.matchedUrl);
	      }).then(function (_) {
	        return _this._finishNavigating();
	      });
	      _angular2SrcFacadeAsync.PromiseWrapper.catchError(result, function (_) {
	        return _this._finishNavigating();
	      });
	      return _rtts_assertRtts_assert.assert.returnType(result, _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: '_startNavigating',
	    value: function _startNavigating() {
	      this.navigating = true;
	    }
	  }, {
	    key: '_finishNavigating',
	    value: function _finishNavigating() {
	      this.navigating = false;
	    }
	  }, {
	    key: 'subscribe',
	    value: function subscribe(onNext) {
	      _angular2SrcFacadeAsync.ObservableWrapper.subscribe(this._subject, onNext);
	    }
	  }, {
	    key: 'activateOutlets',
	    value: function activateOutlets(instruction) {
	      return _rtts_assertRtts_assert.assert.returnType(this._queryOutlets(function (outlet, name) {
	        return outlet.activate(instruction.getChildInstruction(name));
	      }).then(function (_) {
	        return instruction.mapChildrenAsync(function (instruction, _) {
	          return instruction.router.activateOutlets(instruction);
	        });
	      }), _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: 'traverseOutlets',
	    value: function traverseOutlets(fn) {
	      var _this2 = this;
	
	      return _rtts_assertRtts_assert.assert.returnType(this._queryOutlets(fn).then(function (_) {
	        return mapObjAsync(_this2._children, function (child, _) {
	          return child.traverseOutlets(fn);
	        });
	      }), _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: '_queryOutlets',
	    value: function _queryOutlets(fn) {
	      return _rtts_assertRtts_assert.assert.returnType(mapObjAsync(this._outlets, fn), _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: 'recognize',
	    value: function recognize(url) {
	      _rtts_assertRtts_assert.assert.argumentTypes(url, _rtts_assertRtts_assert.assert.type.string);
	      return this._registry.recognize(url);
	    }
	  }, {
	    key: 'renavigate',
	    value: function renavigate() {
	      var destination = (0, _angular2SrcFacadeLang.isBlank)(this.previousUrl) ? this.lastNavigationAttempt : this.previousUrl;
	      if (this.navigating || (0, _angular2SrcFacadeLang.isBlank)(destination)) {
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.resolve(false), _angular2SrcFacadeAsync.Promise);
	      }
	      return _rtts_assertRtts_assert.assert.returnType(this.navigate(destination), _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: 'generate',
	    value: function generate(name, params) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, params, _rtts_assertRtts_assert.assert.type.any);
	      return this._registry.generate(name, params);
	    }
	  }], [{
	    key: 'getRoot',
	    value: function getRoot() {
	      return _rtts_assertRtts_assert.assert.returnType(new RootRouter(new _pipeline.Pipeline()), Router);
	    }
	  }]);
	
	  return Router;
	})();
	
	exports.Router = Router;
	
	Object.defineProperty(Router, 'parameters', { get: function get() {
	    return [[_route_registry.RouteRegistry], [_pipeline.Pipeline], [Router], []];
	  } });
	Object.defineProperty(Router.prototype.registerOutlet, 'parameters', { get: function get() {
	    return [[_router_outlet.RouterOutlet], []];
	  } });
	Object.defineProperty(Router.prototype.config, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Router.prototype.navigate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Router.prototype.activateOutlets, 'parameters', { get: function get() {
	    return [[_instruction.Instruction]];
	  } });
	Object.defineProperty(Router.prototype.recognize, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Router.prototype.generate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	
	var RootRouter = (function (_Router) {
	  function RootRouter(pipeline) {
	    _classCallCheck(this, RootRouter);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(pipeline, _pipeline.Pipeline);
	    _get(Object.getPrototypeOf(RootRouter.prototype), 'constructor', this).call(this, new _route_registry.RouteRegistry(), pipeline, null, '/');
	  }
	
	  _inherits(RootRouter, _Router);
	
	  return RootRouter;
	})(Router);
	
	exports.RootRouter = RootRouter;
	
	Object.defineProperty(RootRouter, 'parameters', { get: function get() {
	    return [[_pipeline.Pipeline]];
	  } });
	
	var ChildRouter = (function (_Router2) {
	  function ChildRouter(parent, name) {
	    _classCallCheck(this, ChildRouter);
	
	    _get(Object.getPrototypeOf(ChildRouter.prototype), 'constructor', this).call(this, parent._registry, parent._pipeline, parent, name);
	    this.parent = parent;
	  }
	
	  _inherits(ChildRouter, _Router2);
	
	  return ChildRouter;
	})(Router);
	
	function mapObjAsync(obj, fn) {
	  _rtts_assertRtts_assert.assert.argumentTypes(obj, _angular2SrcFacadeCollection.Map, fn, _rtts_assertRtts_assert.assert.type.any);
	  return _angular2SrcFacadeAsync.PromiseWrapper.all(mapObj(obj, fn));
	}
	Object.defineProperty(mapObjAsync, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.Map], []];
	  } });
	function mapObj(obj, fn) {
	  var result = _angular2SrcFacadeCollection.ListWrapper.create();
	  _angular2SrcFacadeCollection.MapWrapper.forEach(obj, function (value, key) {
	    return _angular2SrcFacadeCollection.ListWrapper.push(result, fn(value, key));
	  });
	  return _rtts_assertRtts_assert.assert.returnType(result, _angular2SrcFacadeCollection.List);
	}
	Object.defineProperty(mapObj, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.Map], []];
	  } });
	//# sourceMappingURL=router.js.map

	//# sourceMappingURL=./router.map

/***/ },
/* 226 */
/*!**********************************************************!*\
  !*** ./~/angular2/es6/dev/src/router/route_registry.es6 ***!
  \**********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _route_recognizer = __webpack_require__(/*! ./route_recognizer */ 227);
	
	var _instruction = __webpack_require__(/*! ./instruction */ 230);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _route_config = __webpack_require__(/*! ./route_config */ 231);
	
	var _angular2SrcReflectionReflection = __webpack_require__(/*! angular2/src/reflection/reflection */ 109);
	
	var RouteRegistry = (function () {
	  function RouteRegistry() {
	    _classCallCheck(this, RouteRegistry);
	
	    this._rules = _angular2SrcFacadeCollection.MapWrapper.create();
	  }
	
	  _createClass(RouteRegistry, [{
	    key: 'config',
	    value: function config(parentComponent, path, component) {
	      var alias = arguments[3] === undefined ? null : arguments[3];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(parentComponent, _rtts_assertRtts_assert.assert.type.any, path, _rtts_assertRtts_assert.assert.type.string, component, _rtts_assertRtts_assert.assert.type.any, alias, _rtts_assertRtts_assert.assert.type.string);
	      if (parentComponent === 'app') {
	        parentComponent = '/';
	      }
	      var recognizer;
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._rules, parentComponent)) {
	        recognizer = _angular2SrcFacadeCollection.MapWrapper.get(this._rules, parentComponent);
	      } else {
	        recognizer = new _route_recognizer.RouteRecognizer();
	        _angular2SrcFacadeCollection.MapWrapper.set(this._rules, parentComponent, recognizer);
	      }
	      this._configFromComponent(component);
	      var components = _angular2SrcFacadeCollection.StringMapWrapper.create();
	      _angular2SrcFacadeCollection.StringMapWrapper.set(components, 'default', component);
	      var handler = _angular2SrcFacadeCollection.StringMapWrapper.create();
	      _angular2SrcFacadeCollection.StringMapWrapper.set(handler, 'components', components);
	      recognizer.addConfig(path, handler, alias);
	    }
	  }, {
	    key: '_configFromComponent',
	    value: function _configFromComponent(component) {
	      if (!(0, _angular2SrcFacadeLang.isType)(component)) {
	        return;
	      }
	      if (_angular2SrcFacadeCollection.MapWrapper.contains(this._rules, component)) {
	        return;
	      }
	      var annotations = _angular2SrcReflectionReflection.reflector.annotations(component);
	      if ((0, _angular2SrcFacadeLang.isPresent)(annotations)) {
	        for (var i = 0; i < annotations.length; i++) {
	          var annotation = annotations[i];
	          if (annotation instanceof _route_config.RouteConfig) {
	            this.config(component, annotation.path, annotation.component);
	          }
	        }
	      }
	    }
	  }, {
	    key: 'recognize',
	    value: function recognize(url) {
	      var _this = this;
	
	      var parentComponent = arguments[1] === undefined ? '/' : arguments[1];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(url, _rtts_assertRtts_assert.assert.type.string, parentComponent, _rtts_assertRtts_assert.assert.type.any);
	      var componentRecognizer = _angular2SrcFacadeCollection.MapWrapper.get(this._rules, parentComponent);
	      if ((0, _angular2SrcFacadeLang.isBlank)(componentRecognizer)) {
	        return null;
	      }
	      var solutions = componentRecognizer.recognize(url);
	      for (var i = 0; i < solutions.length; i++) {
	        var candidate = solutions[i];
	        if (candidate['unmatchedUrl'].length == 0) {
	          return handlerToLeafInstructions(candidate, parentComponent);
	        }
	        var children = _angular2SrcFacadeCollection.StringMapWrapper.create(),
	            allMapped = true;
	        _angular2SrcFacadeCollection.StringMapWrapper.forEach(candidate['handler']['components'], function (component, name) {
	          if (!allMapped) {
	            return;
	          }
	          var childInstruction = _this.recognize(candidate['unmatchedUrl'], component);
	          if ((0, _angular2SrcFacadeLang.isPresent)(childInstruction)) {
	            childInstruction.params = candidate['params'];
	            children[name] = childInstruction;
	          } else {
	            allMapped = false;
	          }
	        });
	        if (allMapped) {
	          return new _instruction.Instruction({
	            component: parentComponent,
	            children: children,
	            matchedUrl: candidate['matchedUrl']
	          });
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'generate',
	    value: function generate(name, params) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, params, _rtts_assertRtts_assert.assert.type.any);
	      var componentRecognizer = _angular2SrcFacadeCollection.MapWrapper.get(this._rules, '/');
	      if ((0, _angular2SrcFacadeLang.isPresent)(componentRecognizer)) {
	        return componentRecognizer.generate(name, params);
	      }
	    }
	  }]);
	
	  return RouteRegistry;
	})();
	
	exports.RouteRegistry = RouteRegistry;
	
	Object.defineProperty(RouteRegistry.prototype.config, 'parameters', { get: function get() {
	    return [[], [_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(RouteRegistry.prototype.recognize, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], []];
	  } });
	Object.defineProperty(RouteRegistry.prototype.generate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	function handlerToLeafInstructions(context, parentComponent) {
	  var children = _angular2SrcFacadeCollection.StringMapWrapper.create();
	  _angular2SrcFacadeCollection.StringMapWrapper.forEach(context['handler']['components'], function (component, outletName) {
	    children[outletName] = new _instruction.Instruction({
	      component: component,
	      params: context['params']
	    });
	  });
	  return new _instruction.Instruction({
	    component: parentComponent,
	    children: children,
	    matchedUrl: context['matchedUrl']
	  });
	}
	//# sourceMappingURL=route_registry.js.map
	
	//# sourceMappingURL=./route_registry.map

/***/ },
/* 227 */
/*!************************************************************!*\
  !*** ./~/angular2/es6/dev/src/router/route_recognizer.es6 ***!
  \************************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _path_recognizer = __webpack_require__(/*! ./path_recognizer */ 228);
	
	var RouteRecognizer = (function () {
	  function RouteRecognizer() {
	    _classCallCheck(this, RouteRecognizer);
	
	    this.names = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.matchers = _angular2SrcFacadeCollection.MapWrapper.create();
	    this.redirects = _angular2SrcFacadeCollection.MapWrapper.create();
	  }
	
	  _createClass(RouteRecognizer, [{
	    key: 'addRedirect',
	    value: function addRedirect(path, target) {
	      _rtts_assertRtts_assert.assert.argumentTypes(path, _rtts_assertRtts_assert.assert.type.string, target, _rtts_assertRtts_assert.assert.type.string);
	      _angular2SrcFacadeCollection.MapWrapper.set(this.redirects, path, target);
	    }
	  }, {
	    key: 'addConfig',
	    value: function addConfig(path, handler) {
	      var alias = arguments[2] === undefined ? null : arguments[2];
	
	      _rtts_assertRtts_assert.assert.argumentTypes(path, _rtts_assertRtts_assert.assert.type.string, handler, _rtts_assertRtts_assert.assert.type.any, alias, _rtts_assertRtts_assert.assert.type.string);
	      var recognizer = new _path_recognizer.PathRecognizer(path, handler);
	      _angular2SrcFacadeCollection.MapWrapper.set(this.matchers, recognizer.regex, recognizer);
	      if ((0, _angular2SrcFacadeLang.isPresent)(alias)) {
	        _angular2SrcFacadeCollection.MapWrapper.set(this.names, alias, recognizer);
	      }
	    }
	  }, {
	    key: 'recognize',
	    value: function recognize(url) {
	      _rtts_assertRtts_assert.assert.argumentTypes(url, _rtts_assertRtts_assert.assert.type.string);
	      var solutions = [];
	      _angular2SrcFacadeCollection.MapWrapper.forEach(this.redirects, function (target, path) {
	        if (_angular2SrcFacadeLang.StringWrapper.startsWith(url, path)) {
	          url = target + _angular2SrcFacadeLang.StringWrapper.substring(url, path.length);
	        }
	      });
	      _angular2SrcFacadeCollection.MapWrapper.forEach(this.matchers, function (pathRecognizer, regex) {
	        var match;
	        if ((0, _angular2SrcFacadeLang.isPresent)(match = _angular2SrcFacadeLang.RegExpWrapper.firstMatch(regex, url))) {
	          var solution = _angular2SrcFacadeCollection.StringMapWrapper.create();
	          _angular2SrcFacadeCollection.StringMapWrapper.set(solution, 'handler', pathRecognizer.handler);
	          _angular2SrcFacadeCollection.StringMapWrapper.set(solution, 'params', pathRecognizer.parseParams(url));
	          _angular2SrcFacadeCollection.StringMapWrapper.set(solution, 'matchedUrl', match[0]);
	          var unmatchedUrl = _angular2SrcFacadeLang.StringWrapper.substring(url, match[0].length);
	          _angular2SrcFacadeCollection.StringMapWrapper.set(solution, 'unmatchedUrl', unmatchedUrl);
	          _angular2SrcFacadeCollection.ListWrapper.push(solutions, solution);
	        }
	      });
	      return _rtts_assertRtts_assert.assert.returnType(solutions, _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _angular2SrcFacadeCollection.StringMap));
	    }
	  }, {
	    key: 'hasRoute',
	    value: function hasRoute(name) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	      return _angular2SrcFacadeCollection.MapWrapper.contains(this.names, name);
	    }
	  }, {
	    key: 'generate',
	    value: function generate(name, params) {
	      _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string, params, _rtts_assertRtts_assert.assert.type.any);
	      var pathRecognizer = _angular2SrcFacadeCollection.MapWrapper.get(this.names, name);
	      return pathRecognizer.generate(params);
	    }
	  }]);
	
	  return RouteRecognizer;
	})();
	
	exports.RouteRecognizer = RouteRecognizer;
	
	Object.defineProperty(RouteRecognizer.prototype.addRedirect, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(RouteRecognizer.prototype.addConfig, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any], [_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(RouteRecognizer.prototype.recognize, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(RouteRecognizer.prototype.hasRoute, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(RouteRecognizer.prototype.generate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	//# sourceMappingURL=route_recognizer.js.map

	//# sourceMappingURL=./route_recognizer.map

/***/ },
/* 228 */
/*!***********************************************************!*\
  !*** ./~/angular2/es6/dev/src/router/path_recognizer.es6 ***!
  \***********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _url = __webpack_require__(/*! ./url */ 229);
	
	var StaticSegment = (function () {
	  function StaticSegment(string) {
	    _classCallCheck(this, StaticSegment);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(string, _rtts_assertRtts_assert.assert.type.string);
	    this.string = string;
	    this.name = '';
	    this.regex = (0, _url.escapeRegex)(string);
	  }
	
	  _createClass(StaticSegment, [{
	    key: 'generate',
	    value: function generate(params) {
	      return this.string;
	    }
	  }]);
	
	  return StaticSegment;
	})();
	
	Object.defineProperty(StaticSegment, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var DynamicSegment = (function () {
	  function DynamicSegment(name) {
	    _classCallCheck(this, DynamicSegment);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	    this.name = name;
	    this.regex = '([^/]+)';
	  }
	
	  _createClass(DynamicSegment, [{
	    key: 'generate',
	    value: function generate(params) {
	      _rtts_assertRtts_assert.assert.argumentTypes(params, _angular2SrcFacadeCollection.StringMap);
	      return _angular2SrcFacadeCollection.StringMapWrapper.get(params, this.name);
	    }
	  }]);
	
	  return DynamicSegment;
	})();
	
	Object.defineProperty(DynamicSegment, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(DynamicSegment.prototype.generate, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.StringMap]];
	  } });
	
	var StarSegment = (function () {
	  function StarSegment(name) {
	    _classCallCheck(this, StarSegment);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(name, _rtts_assertRtts_assert.assert.type.string);
	    this.name = name;
	    this.regex = '(.+)';
	  }
	
	  _createClass(StarSegment, [{
	    key: 'generate',
	    value: function generate(params) {
	      _rtts_assertRtts_assert.assert.argumentTypes(params, _angular2SrcFacadeCollection.StringMap);
	      return _angular2SrcFacadeCollection.StringMapWrapper.get(params, this.name);
	    }
	  }]);
	
	  return StarSegment;
	})();
	
	Object.defineProperty(StarSegment, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(StarSegment.prototype.generate, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.StringMap]];
	  } });
	var paramMatcher = _angular2SrcFacadeLang.RegExpWrapper.create('^:([^/]+)$');
	var wildcardMatcher = _angular2SrcFacadeLang.RegExpWrapper.create('^\\*([^/]+)$');
	function parsePathString(route) {
	  _rtts_assertRtts_assert.assert.argumentTypes(route, _rtts_assertRtts_assert.assert.type.string);
	  if (route[0] === '/') {
	    route = _angular2SrcFacadeLang.StringWrapper.substring(route, 1);
	  }
	  var segments = splitBySlash(route);
	  var results = _angular2SrcFacadeCollection.ListWrapper.create();
	  for (var i = 0; i < segments.length; i++) {
	    var segment = segments[i],
	        match;
	    if ((0, _angular2SrcFacadeLang.isPresent)(match = _angular2SrcFacadeLang.RegExpWrapper.firstMatch(paramMatcher, segment))) {
	      _angular2SrcFacadeCollection.ListWrapper.push(results, new DynamicSegment(match[1]));
	    } else if ((0, _angular2SrcFacadeLang.isPresent)(match = _angular2SrcFacadeLang.RegExpWrapper.firstMatch(wildcardMatcher, segment))) {
	      _angular2SrcFacadeCollection.ListWrapper.push(results, new StarSegment(match[1]));
	    } else if (segment.length > 0) {
	      _angular2SrcFacadeCollection.ListWrapper.push(results, new StaticSegment(segment));
	    }
	  }
	  return _rtts_assertRtts_assert.assert.returnType(results, _angular2SrcFacadeCollection.List);
	}
	Object.defineProperty(parsePathString, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	var SLASH_RE = _angular2SrcFacadeLang.RegExpWrapper.create('/');
	function splitBySlash(url) {
	  _rtts_assertRtts_assert.assert.argumentTypes(url, _rtts_assertRtts_assert.assert.type.string);
	  return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeLang.StringWrapper.split(url, SLASH_RE), _rtts_assertRtts_assert.assert.genericType(_angular2SrcFacadeCollection.List, _rtts_assertRtts_assert.assert.type.string));
	}
	Object.defineProperty(splitBySlash, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var PathRecognizer = (function () {
	  function PathRecognizer(path, handler) {
	    _classCallCheck(this, PathRecognizer);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(path, _rtts_assertRtts_assert.assert.type.string, handler, _rtts_assertRtts_assert.assert.type.any);
	    this.handler = handler;
	    this.segments = _angular2SrcFacadeCollection.ListWrapper.create();
	    var segments = parsePathString(path);
	    var regexString = '^';
	    _angular2SrcFacadeCollection.ListWrapper.forEach(segments, function (segment) {
	      regexString += '/' + segment.regex;
	    });
	    this.regex = _angular2SrcFacadeLang.RegExpWrapper.create(regexString);
	    this.segments = segments;
	  }
	
	  _createClass(PathRecognizer, [{
	    key: 'parseParams',
	    value: function parseParams(url) {
	      _rtts_assertRtts_assert.assert.argumentTypes(url, _rtts_assertRtts_assert.assert.type.string);
	      var params = _angular2SrcFacadeCollection.StringMapWrapper.create();
	      var urlPart = url;
	      for (var i = 0; i < this.segments.length; i++) {
	        var segment = this.segments[i];
	        var match = _angular2SrcFacadeLang.RegExpWrapper.firstMatch(_angular2SrcFacadeLang.RegExpWrapper.create('/' + segment.regex), urlPart);
	        urlPart = _angular2SrcFacadeLang.StringWrapper.substring(urlPart, match[0].length);
	        if (segment.name.length > 0) {
	          _angular2SrcFacadeCollection.StringMapWrapper.set(params, segment.name, match[1]);
	        }
	      }
	      return _rtts_assertRtts_assert.assert.returnType(params, _angular2SrcFacadeCollection.StringMap);
	    }
	  }, {
	    key: 'generate',
	    value: function generate(params) {
	      return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeCollection.ListWrapper.join(_angular2SrcFacadeCollection.ListWrapper.map(this.segments, function (segment) {
	        return '/' + segment.generate(params);
	      }), ''), _rtts_assertRtts_assert.assert.type.string);
	    }
	  }]);
	
	  return PathRecognizer;
	})();
	
	exports.PathRecognizer = PathRecognizer;
	
	Object.defineProperty(PathRecognizer, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string], [_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(PathRecognizer.prototype.parseParams, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(PathRecognizer.prototype.generate, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.StringMap]];
	  } });
	//# sourceMappingURL=path_recognizer.js.map

	//# sourceMappingURL=./path_recognizer.map

/***/ },
/* 229 */
/*!***********************************************!*\
  !*** ./~/angular2/es6/dev/src/router/url.es6 ***!
  \***********************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports.escapeRegex = escapeRegex;
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var specialCharacters = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];
	var escapeRe = _angular2SrcFacadeLang.RegExpWrapper.create('(\\' + specialCharacters.join('|\\') + ')', 'g');
	
	function escapeRegex(string) {
	  _rtts_assertRtts_assert.assert.argumentTypes(string, _rtts_assertRtts_assert.assert.type.string);
	  return _angular2SrcFacadeLang.StringWrapper.replaceAllMapped(string, escapeRe, function (match) {
	    return '\\' + match;
	  });
	}
	
	Object.defineProperty(escapeRegex, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	//# sourceMappingURL=url.js.map

	//# sourceMappingURL=./url.map

/***/ },
/* 230 */
/*!*******************************************************!*\
  !*** ./~/angular2/es6/dev/src/router/instruction.es6 ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var RouteParams = (function () {
	  function RouteParams(params) {
	    _classCallCheck(this, RouteParams);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(params, _angular2SrcFacadeCollection.StringMap);
	    this.params = params;
	  }
	
	  _createClass(RouteParams, [{
	    key: 'get',
	    value: function get(param) {
	      _rtts_assertRtts_assert.assert.argumentTypes(param, _rtts_assertRtts_assert.assert.type.string);
	      return _angular2SrcFacadeCollection.StringMapWrapper.get(this.params, param);
	    }
	  }]);
	
	  return RouteParams;
	})();
	
	exports.RouteParams = RouteParams;
	
	Object.defineProperty(RouteParams, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.StringMap]];
	  } });
	Object.defineProperty(RouteParams.prototype.get, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	
	var Instruction = (function () {
	  function Instruction() {
	    var _ref = arguments[0] === undefined ? {} : arguments[0];
	
	    var params = _ref.params;
	    var component = _ref.component;
	    var children = _ref.children;
	    var matchedUrl = _ref.matchedUrl;
	
	    _classCallCheck(this, Instruction);
	
	    this.matchedUrl = matchedUrl;
	    if ((0, _angular2SrcFacadeLang.isPresent)(children)) {
	      this._children = children;
	      var childUrl;
	      _angular2SrcFacadeCollection.StringMapWrapper.forEach(this._children, function (child, _) {
	        childUrl = child.matchedUrl;
	      });
	      if ((0, _angular2SrcFacadeLang.isPresent)(childUrl)) {
	        this.matchedUrl += childUrl;
	      }
	    } else {
	      this._children = _angular2SrcFacadeCollection.StringMapWrapper.create();
	    }
	    this.component = component;
	    this.params = params;
	  }
	
	  _createClass(Instruction, [{
	    key: 'getChildInstruction',
	    value: function getChildInstruction(outletName) {
	      _rtts_assertRtts_assert.assert.argumentTypes(outletName, _rtts_assertRtts_assert.assert.type.string);
	      return _angular2SrcFacadeCollection.StringMapWrapper.get(this._children, outletName);
	    }
	  }, {
	    key: 'forEachChild',
	    value: function forEachChild(fn) {
	      _rtts_assertRtts_assert.assert.argumentTypes(fn, Function);
	      _angular2SrcFacadeCollection.StringMapWrapper.forEach(this._children, fn);
	    }
	  }, {
	    key: 'mapChildrenAsync',
	    value: function mapChildrenAsync(fn) {
	      return _rtts_assertRtts_assert.assert.returnType(mapObjAsync(this._children, fn), _angular2SrcFacadeAsync.Promise);
	    }
	  }, {
	    key: 'traverseSync',
	    value: function traverseSync(fn) {
	      var _this = this;
	
	      this.forEachChild(function (childInstruction, _) {
	        return fn(_this, childInstruction);
	      });
	      this.forEachChild(function (childInstruction, _) {
	        return childInstruction.traverseSync(fn);
	      });
	    }
	  }]);
	
	  return Instruction;
	})();
	
	exports.Instruction = Instruction;
	
	Object.defineProperty(Instruction.prototype.getChildInstruction, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.string]];
	  } });
	Object.defineProperty(Instruction.prototype.forEachChild, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	Object.defineProperty(Instruction.prototype.traverseSync, 'parameters', { get: function get() {
	    return [[Function]];
	  } });
	function mapObjAsync(obj, fn) {
	  _rtts_assertRtts_assert.assert.argumentTypes(obj, _angular2SrcFacadeCollection.StringMap, fn, _rtts_assertRtts_assert.assert.type.any);
	  return _angular2SrcFacadeAsync.PromiseWrapper.all(mapObj(obj, fn));
	}
	Object.defineProperty(mapObjAsync, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.StringMap], []];
	  } });
	function mapObj(obj, fn) {
	  var result = _angular2SrcFacadeCollection.ListWrapper.create();
	  _angular2SrcFacadeCollection.StringMapWrapper.forEach(obj, function (value, key) {
	    return _angular2SrcFacadeCollection.ListWrapper.push(result, fn(value, key));
	  });
	  return _rtts_assertRtts_assert.assert.returnType(result, _angular2SrcFacadeCollection.List);
	}
	Object.defineProperty(mapObj, 'parameters', { get: function get() {
	    return [[_angular2SrcFacadeCollection.StringMap], []];
	  } });
	var noopInstruction = new Instruction();
	//# sourceMappingURL=instruction.js.map
	
	//# sourceMappingURL=./instruction.map
	exports.noopInstruction = noopInstruction;

/***/ },
/* 231 */
/*!********************************************************!*\
  !*** ./~/angular2/es6/dev/src/router/route_config.es6 ***!
  \********************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var RouteConfig = function RouteConfig() {
	  var _ref = arguments[0] === undefined ? {} : arguments[0];
	
	  var path = _ref.path;
	  var component = _ref.component;
	  var redirectTo = _ref.redirectTo;
	
	  _classCallCheck(this, RouteConfig);
	
	  this.path = path;
	  this.component = component;
	  this.redirectTo = redirectTo;
	};
	
	exports.RouteConfig = RouteConfig;
	
	Object.defineProperty(RouteConfig, "annotations", { get: function get() {
	    return [new _angular2SrcFacadeLang.CONST()];
	  } });
	//# sourceMappingURL=route_config.js.map

	//# sourceMappingURL=./route_config.map

/***/ },
/* 232 */
/*!****************************************************!*\
  !*** ./~/angular2/es6/dev/src/router/pipeline.es6 ***!
  \****************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2SrcFacadeCollection = __webpack_require__(/*! angular2/src/facade/collection */ 99);
	
	var _instruction = __webpack_require__(/*! ./instruction */ 230);
	
	var Pipeline = (function () {
	  function Pipeline() {
	    _classCallCheck(this, Pipeline);
	
	    this.steps = [function (instruction) {
	      return instruction.traverseSync(function (parentInstruction, childInstruction) {
	        childInstruction.router = parentInstruction.router.childRouter(childInstruction.component);
	      });
	    }, function (instruction) {
	      return instruction.router.traverseOutlets(function (outlet, name) {
	        return outlet.canDeactivate(instruction.getChildInstruction(name));
	      });
	    }, function (instruction) {
	      return instruction.router.traverseOutlets(function (outlet, name) {
	        return outlet.canActivate(instruction.getChildInstruction(name));
	      });
	    }, function (instruction) {
	      return instruction.router.activateOutlets(instruction);
	    }];
	  }
	
	  _createClass(Pipeline, [{
	    key: 'process',
	    value: function process(instruction) {
	      _rtts_assertRtts_assert.assert.argumentTypes(instruction, _instruction.Instruction);
	      var steps = this.steps,
	          currentStep = 0;
	      function processOne() {
	        var result = arguments[0] === undefined ? true : arguments[0];
	
	        _rtts_assertRtts_assert.assert.argumentTypes(result, _rtts_assertRtts_assert.assert.type.any);
	        if (currentStep >= steps.length) {
	          return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.resolve(result), _angular2SrcFacadeAsync.Promise);
	        }
	        var step = steps[currentStep];
	        currentStep += 1;
	        return _rtts_assertRtts_assert.assert.returnType(_angular2SrcFacadeAsync.PromiseWrapper.resolve(step(instruction)).then(processOne), _angular2SrcFacadeAsync.Promise);
	      }
	      Object.defineProperty(processOne, 'parameters', { get: function get() {
	          return [[_rtts_assertRtts_assert.assert.type.any]];
	        } });
	      return _rtts_assertRtts_assert.assert.returnType(processOne(), _angular2SrcFacadeAsync.Promise);
	    }
	  }]);
	
	  return Pipeline;
	})();
	
	exports.Pipeline = Pipeline;
	
	Object.defineProperty(Pipeline.prototype.process, 'parameters', { get: function get() {
	    return [[_instruction.Instruction]];
	  } });
	//# sourceMappingURL=pipeline.js.map

	//# sourceMappingURL=./pipeline.map

/***/ },
/* 233 */
/*!*********************************************************!*\
  !*** ./~/angular2/es6/dev/src/router/router_outlet.es6 ***!
  \*********************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2SrcFacadeAsync = __webpack_require__(/*! angular2/src/facade/async */ 98);
	
	var _angular2Annotations = __webpack_require__(/*! angular2/annotations */ 217);
	
	var _angular2Core = __webpack_require__(/*! angular2/core */ 143);
	
	var _angular2Di = __webpack_require__(/*! angular2/di */ 104);
	
	var _router = __webpack_require__(/*! ./router */ 225);
	
	var routerMod = _interopRequireWildcard(_router);
	
	var _instruction = __webpack_require__(/*! ./instruction */ 230);
	
	var RouterOutlet = (function () {
	  function RouterOutlet(viewContainer, compiler, router, injector) {
	    _classCallCheck(this, RouterOutlet);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(viewContainer, _angular2Core.ViewContainerRef, compiler, _angular2Core.Compiler, router, routerMod.Router, injector, _angular2Di.Injector);
	    this._router = router;
	    this._viewContainer = viewContainer;
	    this._compiler = compiler;
	    this._injector = injector;
	    this._router.registerOutlet(this);
	  }
	
	  _createClass(RouterOutlet, [{
	    key: 'activate',
	    value: function activate(instruction) {
	      var _this = this;
	
	      _rtts_assertRtts_assert.assert.argumentTypes(instruction, _instruction.Instruction);
	      return this._compiler.compileInHost(instruction.component).then(function (pv) {
	        var outletInjector = _this._injector.resolveAndCreateChild([(0, _angular2Di.bind)(_instruction.RouteParams).toValue(new _instruction.RouteParams(instruction.params)), (0, _angular2Di.bind)(routerMod.Router).toValue(instruction.router)]);
	        _this._viewContainer.clear();
	        _this._viewContainer.create(0, pv, outletInjector);
	      });
	    }
	  }, {
	    key: 'canActivate',
	    value: function canActivate(instruction) {
	      _rtts_assertRtts_assert.assert.argumentTypes(instruction, _rtts_assertRtts_assert.assert.type.any);
	      return _angular2SrcFacadeAsync.PromiseWrapper.resolve(true);
	    }
	  }, {
	    key: 'canDeactivate',
	    value: function canDeactivate(instruction) {
	      _rtts_assertRtts_assert.assert.argumentTypes(instruction, _rtts_assertRtts_assert.assert.type.any);
	      return _angular2SrcFacadeAsync.PromiseWrapper.resolve(true);
	    }
	  }]);
	
	  return RouterOutlet;
	})();
	
	exports.RouterOutlet = RouterOutlet;
	
	Object.defineProperty(RouterOutlet, 'annotations', { get: function get() {
	    return [new _angular2Annotations.Decorator({ selector: 'router-outlet' })];
	  } });
	Object.defineProperty(RouterOutlet, 'parameters', { get: function get() {
	    return [[_angular2Core.ViewContainerRef], [_angular2Core.Compiler], [routerMod.Router], [_angular2Di.Injector]];
	  } });
	Object.defineProperty(RouterOutlet.prototype.activate, 'parameters', { get: function get() {
	    return [[_instruction.Instruction]];
	  } });
	Object.defineProperty(RouterOutlet.prototype.canActivate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	Object.defineProperty(RouterOutlet.prototype.canDeactivate, 'parameters', { get: function get() {
	    return [[_rtts_assertRtts_assert.assert.type.any]];
	  } });
	//# sourceMappingURL=router_outlet.js.map

	//# sourceMappingURL=./router_outlet.map

/***/ },
/* 234 */
/*!*******************************************************!*\
  !*** ./~/angular2/es6/dev/src/router/router_link.es6 ***!
  \*******************************************************/
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _rtts_assertRtts_assert = __webpack_require__(/*! rtts_assert/rtts_assert */ 96);
	
	var _angular2Annotations = __webpack_require__(/*! angular2/annotations */ 217);
	
	var _angular2Core = __webpack_require__(/*! angular2/core */ 143);
	
	var _angular2SrcFacadeLang = __webpack_require__(/*! angular2/src/facade/lang */ 97);
	
	var _angular2SrcDomDom_adapter = __webpack_require__(/*! angular2/src/dom/dom_adapter */ 147);
	
	var _router = __webpack_require__(/*! ./router */ 225);
	
	var RouterLink = (function () {
	  function RouterLink(ngEl, router) {
	    _classCallCheck(this, RouterLink);
	
	    _rtts_assertRtts_assert.assert.argumentTypes(ngEl, _angular2Core.NgElement, router, _router.Router);
	    this._domEl = ngEl.domElement;
	    this._router = router;
	  }
	
	  _createClass(RouterLink, [{
	    key: 'route',
	    set: function (changes) {
	      this._route = changes;
	      this.updateHref();
	    }
	  }, {
	    key: 'params',
	    set: function (changes) {
	      this._params = changes;
	      this.updateHref();
	    }
	  }, {
	    key: 'updateHref',
	    value: function updateHref() {
	      if ((0, _angular2SrcFacadeLang.isPresent)(this._route) && (0, _angular2SrcFacadeLang.isPresent)(this._params)) {
	        var newHref = this._router.generate(this._route, this._params);
	        _angular2SrcDomDom_adapter.DOM.setAttribute(this._domEl, 'href', newHref);
	      }
	    }
	  }]);
	
	  return RouterLink;
	})();
	
	exports.RouterLink = RouterLink;
	
	Object.defineProperty(RouterLink, 'annotations', { get: function get() {
	    return [new _angular2Annotations.Decorator({
	      selector: '[router-link]',
	      properties: {
	        'route': 'routerLink',
	        'params': 'routerParams'
	      }
	    })];
	  } });
	Object.defineProperty(RouterLink, 'parameters', { get: function get() {
	    return [[_angular2Core.NgElement], [_router.Router]];
	  } });
	//# sourceMappingURL=router_link.js.map

	//# sourceMappingURL=./router_link.map

/***/ },
/* 235 */
/*!****************************!*\
  !*** ./ionic/services.es6 ***!
  \****************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var _rtts_assertEs6SrcRtts_assert = __webpack_require__(/*! rtts_assert/es6/src/rtts_assert */ 1);
	
	//import { assert } from 'rtts_assert/rtts_assert';
	
	var Greeter = (function () {
	  function Greeter() {
	    _classCallCheck(this, Greeter);
	  }
	
	  _createClass(Greeter, [{
	    key: "hello",
	    value: function hello(name) {
	      _rtts_assertEs6SrcRtts_assert.assert.argumentTypes(name, _rtts_assertEs6SrcRtts_assert.assert.type.string);
	
	      return "Hello, " + name + "!";
	    }
	  }]);
	
	  return Greeter;
	})();
	
	exports.Greeter = Greeter;

/***/ }
/******/ ]);
//# sourceMappingURL=bundle.js.map